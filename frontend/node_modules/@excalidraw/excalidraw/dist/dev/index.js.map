{
  "version": 3,
  "sources": ["../../index.tsx", "../../components/InitializeApp.tsx", "../../editor-jotai.ts", "../../i18n.ts", "../../components/LoadingMessage.tsx", "../../components/Spinner.tsx", "../../components/App.tsx", "../../components/ToolButton.tsx", "../../actions/actionDeleteSelected.tsx", "../../zindex.ts", "../../actions/actionZindex.tsx", "../../actions/actionSelectAll.ts", "../../element/sortElements.ts", "../../actions/actionDuplicateSelection.tsx", "../../actions/actionProperties.tsx", "../../analytics.ts", "../../components/ButtonIconSelect.tsx", "../../components/ButtonIcon.tsx", "../../components/ColorPicker/TopPicks.tsx", "../../components/ButtonSeparator.tsx", "../../components/ColorPicker/Picker.tsx", "../../components/ColorPicker/ShadeList.tsx", "../../components/ColorPicker/colorPickerUtils.ts", "../../components/ColorPicker/HotkeyLabel.tsx", "../../components/ColorPicker/PickerColorList.tsx", "../../components/ColorPicker/CustomColorList.tsx", "../../components/ColorPicker/keyboardNavHandlers.ts", "../../components/ColorPicker/PickerHeading.tsx", "../../components/ColorPicker/ColorPicker.tsx", "../../components/ColorPicker/ColorInput.tsx", "../../components/EyeDropper.tsx", "../../context/ui-appState.ts", "../../hooks/useCreatePortalContainer.ts", "../../hooks/useOutsideClick.ts", "../../hooks/useStable.ts", "../../components/PropertiesPopover.tsx", "../../components/Island.tsx", "../../components/IconPicker.tsx", "../../components/InlineIcon.tsx", "../../components/Stats/Collapsible.tsx", "../../components/FontPicker/FontPicker.tsx", "../../components/FontPicker/FontPickerList.tsx", "../../components/QuickSearch.tsx", "../../components/ScrollableList.tsx", "../../components/dropdownMenu/DropdownMenuGroup.tsx", "../../components/dropdownMenu/DropdownMenuItem.tsx", "../../components/dropdownMenu/common.ts", "../../components/dropdownMenu/DropdownMenuItemContent.tsx", "../../components/FontPicker/keyboardNavHandlers.ts", "../../components/FontPicker/FontPickerTrigger.tsx", "../../components/Range.tsx", "../../scene/zoom.ts", "../../components/Tooltip.tsx", "../../actions/actionCanvas.tsx", "../../actions/actionFinalize.tsx", "../../components/ProjectName.tsx", "../../components/DarkModeToggle.tsx", "../../data/index.ts", "../../data/resave.ts", "../../components/CheckboxItem.tsx", "../../actions/actionExport.tsx", "../../actions/actionStyles.ts", "../../actions/actionMenu.tsx", "../../actions/actionGroup.tsx", "../../renderer/roundRect.ts", "../../clients.ts", "../../components/Avatar.tsx", "../../actions/actionNavigate.tsx", "../../actions/actionAddToLibrary.ts", "../../align.ts", "../../actions/actionAlign.tsx", "../../distribute.ts", "../../actions/actionDistribute.tsx", "../../actions/actionFlip.ts", "../../actions/actionClipboard.tsx", "../../actions/actionToggleGridMode.tsx", "../../actions/actionToggleZenMode.tsx", "../../actions/actionToggleObjectsSnapMode.tsx", "../../actions/actionToggleStats.tsx", "../../actions/actionBoundText.tsx", "../../components/hyperlink/Hyperlink.tsx", "../../actions/actionLink.tsx", "../../actions/actionElementLock.ts", "../../components/CommandPalette/CommandPalette.tsx", "../../components/Dialog.tsx", "../../hooks/useCallbackRefState.ts", "../../components/Modal.tsx", "../../components/LibraryMenu.tsx", "../../data/library.ts", "../../hooks/useLibraryItemSvg.ts", "../../queue.ts", "../../components/LibraryMenuItems.tsx", "../../components/Stack.tsx", "../../components/LibraryMenuBrowseButton.tsx", "../../components/LibraryMenuControlButtons.tsx", "../../components/LibraryMenuHeaderContent.tsx", "../../components/Trans.tsx", "../../components/ConfirmDialog.tsx", "../../components/DialogActionButton.tsx", "../../components/PublishLibrary.tsx", "../../data/EditorLocalStorage.ts", "../../components/dropdownMenu/DropdownMenuTrigger.tsx", "../../components/dropdownMenu/DropdownMenuSeparator.tsx", "../../components/dropdownMenu/DropdownMenuContent.tsx", "../../components/dropdownMenu/DropdownMenuItemLink.tsx", "../../components/dropdownMenu/DropdownMenuItemCustom.tsx", "../../components/dropdownMenu/dropdownMenuUtils.ts", "../../components/dropdownMenu/DropdownMenu.tsx", "../../components/LibraryMenuSection.tsx", "../../components/LibraryUnit.tsx", "../../hooks/useTransition.ts", "../../hooks/useScrollPosition.ts", "../../components/TextField.tsx", "../../components/Button.tsx", "../../actions/shortcuts.ts", "../../deburr.ts", "../../components/Actions.tsx", "../../context/tunnels.ts", "../../hooks/useStableCallback.ts", "../../components/ActiveConfirmDialog.tsx", "../../components/CommandPalette/defaultCommandPaletteItems.ts", "../../actions/actionElementLink.ts", "../../actions/actionLinearEditor.tsx", "../../actions/actionToggleSearchMenu.ts", "../../actions/actionCropEditor.tsx", "../../history.ts", "../../hooks/useEmitter.ts", "../../actions/actionHistory.tsx", "../../actions/manager.tsx", "../../gesture.ts", "../../components/ContextMenu.tsx", "../../components/Popover.tsx", "../../components/LayerUI.tsx", "../../components/ErrorDialog.tsx", "../../components/ImageExportDialog.tsx", "../../components/RadioGroup.tsx", "../../components/Switch.tsx", "../../components/FilledButton.tsx", "../../hooks/useCopiedIndicator.ts", "../../components/FixedSideContainer.tsx", "../../element/flowchart.ts", "../../components/HintViewer.tsx", "../../components/LockButton.tsx", "../../components/Section.tsx", "../../scene/scrollbars.ts", "../../components/PenModeButton.tsx", "../../components/HandButton.tsx", "../../components/MobileMenu.tsx", "../../components/PasteChartDialog.tsx", "../../components/HelpDialog.tsx", "../../components/UserList.tsx", "../../components/JSONExportDialog.tsx", "../../components/Card.tsx", "../../components/footer/Footer.tsx", "../../components/HelpButton.tsx", "../../components/Sidebar/Sidebar.tsx", "../../components/Sidebar/common.ts", "../../components/Sidebar/SidebarHeader.tsx", "../../components/Sidebar/SidebarTrigger.tsx", "../../components/Sidebar/SidebarTabTriggers.tsx", "../../components/Sidebar/SidebarTabTrigger.tsx", "../../components/Sidebar/SidebarTabs.tsx", "../../components/Sidebar/SidebarTab.tsx", "../../components/main-menu/DefaultItems.tsx", "../../components/OverwriteConfirm/OverwriteConfirmState.ts", "../../components/dropdownMenu/DropdownMenuItemContentRadio.tsx", "../../components/hoc/withInternalFallback.tsx", "../../components/main-menu/MainMenu.tsx", "../../components/OverwriteConfirm/OverwriteConfirmActions.tsx", "../../components/OverwriteConfirm/OverwriteConfirm.tsx", "../../components/DefaultSidebar.tsx", "../../components/SearchMenu.tsx", "../../components/LaserPointerButton.tsx", "../../components/TTDDialog/MermaidToExcalidraw.tsx", "../../components/TTDDialog/common.ts", "../../components/TTDDialog/TTDDialogPanels.tsx", "../../components/TTDDialog/TTDDialogPanel.tsx", "../../components/TTDDialog/TTDDialogInput.tsx", "../../components/TTDDialog/TTDDialogOutput.tsx", "../../components/TTDDialog/TTDDialogSubmitShortcut.tsx", "../../components/TTDDialog/TTDDialogTabs.tsx", "../../components/TTDDialog/TTDDialog.tsx", "../../components/TTDDialog/TTDDialogTabTriggers.tsx", "../../components/TTDDialog/TTDDialogTabTrigger.tsx", "../../components/TTDDialog/TTDDialogTab.tsx", "../../components/Stats/index.tsx", "../../components/Stats/DragInput.tsx", "../../components/Stats/utils.ts", "../../components/Stats/Dimension.tsx", "../../components/Stats/Angle.tsx", "../../components/Stats/FontSize.tsx", "../../components/Stats/MultiDimension.tsx", "../../components/Stats/MultiAngle.tsx", "../../components/Stats/MultiFontSize.tsx", "../../components/Stats/Position.tsx", "../../components/Stats/MultiPosition.tsx", "../../components/Stats/CanvasGrid.tsx", "../../components/ElementLinkDialog.tsx", "../../components/Toast.tsx", "../../actions/actionToggleViewMode.tsx", "../../actions/actionFrame.ts", "../../components/BraveMeasureTextError.tsx", "../../data/transform.ts", "../../components/canvases/InteractiveCanvas.tsx", "../../reactUtils.ts", "../../renderer/renderSnaps.ts", "../../renderer/interactiveScene.ts", "../../components/canvases/StaticCanvas.tsx", "../../scene/Renderer.ts", "../../components/SVGLayer.tsx", "../../element/ElementCanvasButtons.tsx", "../../components/MagicButton.tsx", "../../components/FollowMode/FollowMode.tsx", "../../animation-frame-handler.ts", "../../animated-trail.ts", "../../laser-trails.ts", "../../element/textWysiwyg.tsx", "../../actions/actionTextAutoResize.ts", "../../mermaid.ts", "../../components/canvases/NewElementCanvas.tsx", "../../renderer/renderNewElementScene.ts", "../../polyfill.ts", "../../components/footer/FooterCenter.tsx", "../../components/ExcalidrawLogo.tsx", "../../components/welcome-screen/WelcomeScreen.Center.tsx", "../../components/welcome-screen/WelcomeScreen.Hints.tsx", "../../components/welcome-screen/WelcomeScreen.tsx", "../../components/live-collaboration/LiveCollaborationTrigger.tsx", "../../data/reconcile.ts", "../../components/TTDDialog/TTDDialogTrigger.tsx", "../../components/DiagramToCodePlugin/DiagramToCodePlugin.tsx"],
  "sourcesContent": ["import React, { useEffect } from \"react\";\nimport { InitializeApp } from \"./components/InitializeApp\";\nimport App from \"./components/App\";\nimport { isShallowEqual } from \"./utils\";\nimport polyfill from \"./polyfill\";\n\nimport \"./css/app.scss\";\nimport \"./css/styles.scss\";\nimport \"./fonts/fonts.css\";\n\nimport type { AppProps, ExcalidrawProps } from \"./types\";\nimport { defaultLang } from \"./i18n\";\nimport { DEFAULT_UI_OPTIONS } from \"./constants\";\nimport { EditorJotaiProvider, editorJotaiStore } from \"./editor-jotai\";\nimport Footer from \"./components/footer/FooterCenter\";\nimport MainMenu from \"./components/main-menu/MainMenu\";\nimport WelcomeScreen from \"./components/welcome-screen/WelcomeScreen\";\nimport LiveCollaborationTrigger from \"./components/live-collaboration/LiveCollaborationTrigger\";\n\npolyfill();\n\nconst ExcalidrawBase = (props: ExcalidrawProps) => {\n  const {\n    onChange,\n    initialData,\n    excalidrawAPI,\n    isCollaborating = false,\n    onPointerUpdate,\n    renderTopRightUI,\n    langCode = defaultLang.code,\n    viewModeEnabled,\n    zenModeEnabled,\n    gridModeEnabled,\n    libraryReturnUrl,\n    theme,\n    name,\n    renderCustomStats,\n    onPaste,\n    detectScroll = true,\n    handleKeyboardGlobally = false,\n    onLibraryChange,\n    autoFocus = false,\n    generateIdForFile,\n    onLinkOpen,\n    generateLinkForSelection,\n    onPointerDown,\n    onPointerUp,\n    onScrollChange,\n    onDuplicate,\n    children,\n    validateEmbeddable,\n    renderEmbeddable,\n    aiEnabled,\n    showDeprecatedFonts,\n  } = props;\n\n  const canvasActions = props.UIOptions?.canvasActions;\n\n  // FIXME normalize/set defaults in parent component so that the memo resolver\n  // compares the same values\n  const UIOptions: AppProps[\"UIOptions\"] = {\n    ...props.UIOptions,\n    canvasActions: {\n      ...DEFAULT_UI_OPTIONS.canvasActions,\n      ...canvasActions,\n    },\n    tools: {\n      image: props.UIOptions?.tools?.image ?? true,\n    },\n  };\n\n  if (canvasActions?.export) {\n    UIOptions.canvasActions.export.saveFileToDisk =\n      canvasActions.export?.saveFileToDisk ??\n      DEFAULT_UI_OPTIONS.canvasActions.export.saveFileToDisk;\n  }\n\n  if (\n    UIOptions.canvasActions.toggleTheme === null &&\n    typeof theme === \"undefined\"\n  ) {\n    UIOptions.canvasActions.toggleTheme = true;\n  }\n\n  useEffect(() => {\n    const importPolyfill = async () => {\n      //@ts-ignore\n      await import(\"canvas-roundrect-polyfill\");\n    };\n\n    importPolyfill();\n\n    // Block pinch-zooming on iOS outside of the content area\n    const handleTouchMove = (event: TouchEvent) => {\n      // @ts-ignore\n      if (typeof event.scale === \"number\" && event.scale !== 1) {\n        event.preventDefault();\n      }\n    };\n\n    document.addEventListener(\"touchmove\", handleTouchMove, {\n      passive: false,\n    });\n\n    return () => {\n      document.removeEventListener(\"touchmove\", handleTouchMove);\n    };\n  }, []);\n\n  return (\n    <EditorJotaiProvider store={editorJotaiStore}>\n      <InitializeApp langCode={langCode} theme={theme}>\n        <App\n          onChange={onChange}\n          initialData={initialData}\n          excalidrawAPI={excalidrawAPI}\n          isCollaborating={isCollaborating}\n          onPointerUpdate={onPointerUpdate}\n          renderTopRightUI={renderTopRightUI}\n          langCode={langCode}\n          viewModeEnabled={viewModeEnabled}\n          zenModeEnabled={zenModeEnabled}\n          gridModeEnabled={gridModeEnabled}\n          libraryReturnUrl={libraryReturnUrl}\n          theme={theme}\n          name={name}\n          renderCustomStats={renderCustomStats}\n          UIOptions={UIOptions}\n          onPaste={onPaste}\n          detectScroll={detectScroll}\n          handleKeyboardGlobally={handleKeyboardGlobally}\n          onLibraryChange={onLibraryChange}\n          autoFocus={autoFocus}\n          generateIdForFile={generateIdForFile}\n          onLinkOpen={onLinkOpen}\n          generateLinkForSelection={generateLinkForSelection}\n          onPointerDown={onPointerDown}\n          onPointerUp={onPointerUp}\n          onScrollChange={onScrollChange}\n          onDuplicate={onDuplicate}\n          validateEmbeddable={validateEmbeddable}\n          renderEmbeddable={renderEmbeddable}\n          aiEnabled={aiEnabled !== false}\n          showDeprecatedFonts={showDeprecatedFonts}\n        >\n          {children}\n        </App>\n      </InitializeApp>\n    </EditorJotaiProvider>\n  );\n};\n\nconst areEqual = (prevProps: ExcalidrawProps, nextProps: ExcalidrawProps) => {\n  // short-circuit early\n  if (prevProps.children !== nextProps.children) {\n    return false;\n  }\n\n  const {\n    initialData: prevInitialData,\n    UIOptions: prevUIOptions = {},\n    ...prev\n  } = prevProps;\n  const {\n    initialData: nextInitialData,\n    UIOptions: nextUIOptions = {},\n    ...next\n  } = nextProps;\n\n  // comparing UIOptions\n  const prevUIOptionsKeys = Object.keys(prevUIOptions) as (keyof Partial<\n    typeof DEFAULT_UI_OPTIONS\n  >)[];\n  const nextUIOptionsKeys = Object.keys(nextUIOptions) as (keyof Partial<\n    typeof DEFAULT_UI_OPTIONS\n  >)[];\n\n  if (prevUIOptionsKeys.length !== nextUIOptionsKeys.length) {\n    return false;\n  }\n\n  const isUIOptionsSame = prevUIOptionsKeys.every((key) => {\n    if (key === \"canvasActions\") {\n      const canvasOptionKeys = Object.keys(\n        prevUIOptions.canvasActions!,\n      ) as (keyof Partial<typeof DEFAULT_UI_OPTIONS.canvasActions>)[];\n      return canvasOptionKeys.every((key) => {\n        if (\n          key === \"export\" &&\n          prevUIOptions?.canvasActions?.export &&\n          nextUIOptions?.canvasActions?.export\n        ) {\n          return (\n            prevUIOptions.canvasActions.export.saveFileToDisk ===\n            nextUIOptions.canvasActions.export.saveFileToDisk\n          );\n        }\n        return (\n          prevUIOptions?.canvasActions?.[key] ===\n          nextUIOptions?.canvasActions?.[key]\n        );\n      });\n    }\n    return prevUIOptions[key] === nextUIOptions[key];\n  });\n\n  return isUIOptionsSame && isShallowEqual(prev, next);\n};\n\nexport const Excalidraw = React.memo(ExcalidrawBase, areEqual);\nExcalidraw.displayName = \"Excalidraw\";\n\nexport {\n  getSceneVersion,\n  hashElementsVersion,\n  hashString,\n  isInvisiblySmallElement,\n  getNonDeletedElements,\n  getTextFromElements,\n} from \"./element\";\nexport { defaultLang, useI18n, languages } from \"./i18n\";\nexport {\n  restore,\n  restoreAppState,\n  restoreElements,\n  restoreLibraryItems,\n} from \"./data/restore\";\n\nexport { reconcileElements } from \"./data/reconcile\";\n\nexport {\n  exportToCanvas,\n  exportToBlob,\n  exportToSvg,\n  exportToClipboard,\n} from \"@excalidraw/utils/export\";\n\nexport { serializeAsJSON, serializeLibraryAsJSON } from \"./data/json\";\nexport {\n  loadFromBlob,\n  loadSceneOrLibraryFromBlob,\n  loadLibraryFromBlob,\n} from \"./data/blob\";\nexport { getFreeDrawSvgPath } from \"./renderer/renderElement\";\nexport { mergeLibraryItems, getLibraryItemsHash } from \"./data/library\";\nexport { isLinearElement } from \"./element/typeChecks\";\n\nexport {\n  FONT_FAMILY,\n  THEME,\n  MIME_TYPES,\n  ROUNDNESS,\n  DEFAULT_LASER_COLOR,\n  UserIdleState,\n} from \"./constants\";\n\nexport {\n  mutateElement,\n  newElementWith,\n  bumpVersion,\n} from \"./element/mutateElement\";\n\nexport { CaptureUpdateAction } from \"./store\";\n\nexport { parseLibraryTokensFromUrl, useHandleLibrary } from \"./data/library\";\n\nexport {\n  sceneCoordsToViewportCoords,\n  viewportCoordsToSceneCoords,\n} from \"./utils\";\n\nexport { Sidebar } from \"./components/Sidebar/Sidebar\";\nexport { Button } from \"./components/Button\";\nexport { Footer };\nexport { MainMenu };\nexport { useDevice } from \"./components/App\";\nexport { WelcomeScreen };\nexport { LiveCollaborationTrigger };\nexport { Stats } from \"./components/Stats\";\n\nexport { DefaultSidebar } from \"./components/DefaultSidebar\";\nexport { TTDDialog } from \"./components/TTDDialog/TTDDialog\";\nexport { TTDDialogTrigger } from \"./components/TTDDialog/TTDDialogTrigger\";\n\nexport { normalizeLink } from \"./data/url\";\nexport { zoomToFitBounds } from \"./actions/actionCanvas\";\nexport { convertToExcalidrawElements } from \"./data/transform\";\nexport { getCommonBounds, getVisibleSceneBounds } from \"./element/bounds\";\n\nexport {\n  elementsOverlappingBBox,\n  isElementInsideBBox,\n  elementPartiallyOverlapsWithOrContainsBBox,\n} from \"@excalidraw/utils/withinBounds\";\n\nexport { DiagramToCodePlugin } from \"./components/DiagramToCodePlugin/DiagramToCodePlugin\";\nexport { getDataURL } from \"./data/blob\";\nexport { isElementLink } from \"./element/elementLink\";\n\nexport { setCustomTextMetricsProvider } from \"./element/textMeasurements\";\n", "import React, { useEffect, useState } from \"react\";\n\nimport { LoadingMessage } from \"./LoadingMessage\";\nimport type { Language } from \"../i18n\";\nimport { defaultLang, languages, setLanguage } from \"../i18n\";\nimport type { Theme } from \"../element/types\";\n\ninterface Props {\n  langCode: Language[\"code\"];\n  children: React.ReactElement;\n  theme?: Theme;\n}\n\nexport const InitializeApp = (props: Props) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const updateLang = async () => {\n      await setLanguage(currentLang);\n      setLoading(false);\n    };\n    const currentLang =\n      languages.find((lang) => lang.code === props.langCode) || defaultLang;\n    updateLang();\n  }, [props.langCode]);\n\n  return loading ? <LoadingMessage theme={props.theme} /> : props.children;\n};\n", "// eslint-disable-next-line no-restricted-imports\nimport { atom, createStore, type PrimitiveAtom } from \"jotai\";\nimport { createIsolation } from \"jotai-scope\";\n\nconst jotai = createIsolation();\n\nexport { atom, PrimitiveAtom };\nexport const { useAtom, useSetAtom, useAtomValue, useStore } = jotai;\nexport const EditorJotaiProvider: ReturnType<\n  typeof createIsolation\n>[\"Provider\"] = jotai.Provider;\n\nexport const editorJotaiStore: ReturnType<typeof createStore> = createStore();\n", "import fallbackLangData from \"./locales/en.json\";\nimport percentages from \"./locales/percentages.json\";\nimport { useAtomValue, editorJotaiStore, atom } from \"./editor-jotai\";\nimport type { NestedKeyOf } from \"./utility-types\";\n\nconst COMPLETION_THRESHOLD = 85;\n\nexport interface Language {\n  code: string;\n  label: string;\n  rtl?: boolean;\n}\n\nexport type TranslationKeys = NestedKeyOf<typeof fallbackLangData>;\n\nexport const defaultLang = { code: \"en\", label: \"English\" };\n\nexport const languages: Language[] = [\n  defaultLang,\n  ...[\n    { code: \"ar-SA\", label: \"\u0627\u0644\u0639\u0631\u0628\u064A\u0629\", rtl: true },\n    { code: \"bg-BG\", label: \"\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438\" },\n    { code: \"ca-ES\", label: \"Catal\u00E0\" },\n    { code: \"cs-CZ\", label: \"\u010Cesky\" },\n    { code: \"de-DE\", label: \"Deutsch\" },\n    { code: \"el-GR\", label: \"\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC\" },\n    { code: \"es-ES\", label: \"Espa\u00F1ol\" },\n    { code: \"eu-ES\", label: \"Euskara\" },\n    { code: \"fa-IR\", label: \"\u0641\u0627\u0631\u0633\u06CC\", rtl: true },\n    { code: \"fi-FI\", label: \"Suomi\" },\n    { code: \"fr-FR\", label: \"Fran\u00E7ais\" },\n    { code: \"gl-ES\", label: \"Galego\" },\n    { code: \"he-IL\", label: \"\u05E2\u05D1\u05E8\u05D9\u05EA\", rtl: true },\n    { code: \"hi-IN\", label: \"\u0939\u093F\u0928\u094D\u0926\u0940\" },\n    { code: \"hu-HU\", label: \"Magyar\" },\n    { code: \"id-ID\", label: \"Bahasa Indonesia\" },\n    { code: \"it-IT\", label: \"Italiano\" },\n    { code: \"ja-JP\", label: \"\u65E5\u672C\u8A9E\" },\n    { code: \"kab-KAB\", label: \"Taqbaylit\" },\n    { code: \"kk-KZ\", label: \"\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456\" },\n    { code: \"ko-KR\", label: \"\uD55C\uAD6D\uC5B4\" },\n    { code: \"ku-TR\", label: \"Kurd\u00EE\" },\n    { code: \"lt-LT\", label: \"Lietuvi\u0173\" },\n    { code: \"lv-LV\", label: \"Latvie\u0161u\" },\n    { code: \"my-MM\", label: \"Burmese\" },\n    { code: \"nb-NO\", label: \"Norsk bokm\u00E5l\" },\n    { code: \"nl-NL\", label: \"Nederlands\" },\n    { code: \"nn-NO\", label: \"Norsk nynorsk\" },\n    { code: \"oc-FR\", label: \"Occitan\" },\n    { code: \"pa-IN\", label: \"\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40\" },\n    { code: \"pl-PL\", label: \"Polski\" },\n    { code: \"pt-BR\", label: \"Portugu\u00EAs Brasileiro\" },\n    { code: \"pt-PT\", label: \"Portugu\u00EAs\" },\n    { code: \"ro-RO\", label: \"Rom\u00E2n\u0103\" },\n    { code: \"ru-RU\", label: \"\u0420\u0443\u0441\u0441\u043A\u0438\u0439\" },\n    { code: \"sk-SK\", label: \"Sloven\u010Dina\" },\n    { code: \"sv-SE\", label: \"Svenska\" },\n    { code: \"sl-SI\", label: \"Sloven\u0161\u010Dina\" },\n    { code: \"tr-TR\", label: \"T\u00FCrk\u00E7e\" },\n    { code: \"uk-UA\", label: \"\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430\" },\n    { code: \"zh-CN\", label: \"\u7B80\u4F53\u4E2D\u6587\" },\n    { code: \"zh-TW\", label: \"\u7E41\u9AD4\u4E2D\u6587\" },\n    { code: \"vi-VN\", label: \"Ti\u1EBFng Vi\u1EC7t\" },\n    { code: \"mr-IN\", label: \"\u092E\u0930\u093E\u0920\u0940\" },\n  ]\n    .filter(\n      (lang) =>\n        (percentages as Record<string, number>)[lang.code] >=\n        COMPLETION_THRESHOLD,\n    )\n    .sort((left, right) => (left.label > right.label ? 1 : -1)),\n];\n\nconst TEST_LANG_CODE = \"__test__\";\nif (import.meta.env.DEV) {\n  languages.unshift(\n    { code: TEST_LANG_CODE, label: \"test language\" },\n    {\n      code: `${TEST_LANG_CODE}.rtl`,\n      label: \"\\u{202a}test language (rtl)\\u{202c}\",\n      rtl: true,\n    },\n  );\n}\n\nlet currentLang: Language = defaultLang;\nlet currentLangData = {};\n\nexport const setLanguage = async (lang: Language) => {\n  currentLang = lang;\n  document.documentElement.dir = currentLang.rtl ? \"rtl\" : \"ltr\";\n  document.documentElement.lang = currentLang.code;\n\n  if (lang.code.startsWith(TEST_LANG_CODE)) {\n    currentLangData = {};\n  } else {\n    try {\n      currentLangData = await import(`./locales/${currentLang.code}.json`);\n    } catch (error: any) {\n      console.error(`Failed to load language ${lang.code}:`, error.message);\n      currentLangData = fallbackLangData;\n    }\n  }\n\n  editorJotaiStore.set(editorLangCodeAtom, lang.code);\n};\n\nexport const getLanguage = () => currentLang;\n\nconst findPartsForData = (data: any, parts: string[]) => {\n  for (let index = 0; index < parts.length; ++index) {\n    const part = parts[index];\n    if (data[part] === undefined) {\n      return undefined;\n    }\n    data = data[part];\n  }\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n  return data;\n};\n\nexport const t = (\n  path: NestedKeyOf<typeof fallbackLangData>,\n  replacement?: { [key: string]: string | number } | null,\n  fallback?: string,\n) => {\n  if (currentLang.code.startsWith(TEST_LANG_CODE)) {\n    const name = replacement\n      ? `${path}(${JSON.stringify(replacement).slice(1, -1)})`\n      : path;\n    return `\\u{202a}[[${name}]]\\u{202c}`;\n  }\n\n  const parts = path.split(\".\");\n  let translation =\n    findPartsForData(currentLangData, parts) ||\n    findPartsForData(fallbackLangData, parts) ||\n    fallback;\n  if (translation === undefined) {\n    const errorMessage = `Can't find translation for ${path}`;\n    // in production, don't blow up the app on a missing translation key\n    if (import.meta.env.PROD) {\n      console.warn(errorMessage);\n      return \"\";\n    }\n    throw new Error(errorMessage);\n  }\n\n  if (replacement) {\n    for (const key in replacement) {\n      translation = translation.replace(`{{${key}}}`, String(replacement[key]));\n    }\n  }\n  return translation;\n};\n\n/** @private atom used solely to rerender components using `useI18n` hook */\nconst editorLangCodeAtom = atom(defaultLang.code);\n\n// Should be used in components that fall under these cases:\n// - component is rendered as an <Excalidraw> child\n// - component is rendered internally by <Excalidraw>, but the component\n//   is memoized w/o being updated on `langCode`, `AppState`, or `UIAppState`\nexport const useI18n = () => {\n  const langCode = useAtomValue(editorLangCodeAtom);\n  return { t, langCode };\n};\n", "import { t } from \"../i18n\";\nimport { useState, useEffect } from \"react\";\nimport Spinner from \"./Spinner\";\nimport clsx from \"clsx\";\nimport { THEME } from \"../constants\";\nimport type { Theme } from \"../element/types\";\n\nexport const LoadingMessage: React.FC<{ delay?: number; theme?: Theme }> = ({\n  delay,\n  theme,\n}) => {\n  const [isWaiting, setIsWaiting] = useState(!!delay);\n\n  useEffect(() => {\n    if (!delay) {\n      return;\n    }\n    const timer = setTimeout(() => {\n      setIsWaiting(false);\n    }, delay);\n    return () => clearTimeout(timer);\n  }, [delay]);\n\n  if (isWaiting) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(\"LoadingMessage\", {\n        \"LoadingMessage--dark\": theme === THEME.DARK,\n      })}\n    >\n      <div>\n        <Spinner />\n      </div>\n      <div className=\"LoadingMessage-text\">{t(\"labels.loadingScene\")}</div>\n    </div>\n  );\n};\n", "import React from \"react\";\n\nimport \"./Spinner.scss\";\n\nconst Spinner = ({\n  size = \"1em\",\n  circleWidth = 8,\n  synchronized = false,\n  className = \"\",\n}: {\n  size?: string | number;\n  circleWidth?: number;\n  synchronized?: boolean;\n  className?: string;\n}) => {\n  const mountTime = React.useRef(Date.now());\n  const mountDelay = -(mountTime.current % 1600);\n\n  return (\n    <div className={`Spinner ${className}`}>\n      <svg\n        viewBox=\"0 0 100 100\"\n        style={{\n          width: size,\n          height: size,\n          // fix for remounting causing spinner flicker\n          [\"--spinner-delay\" as any]: synchronized ? `${mountDelay}ms` : 0,\n        }}\n      >\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r={50 - circleWidth / 2}\n          strokeWidth={circleWidth}\n          fill=\"none\"\n          strokeMiterlimit=\"10\"\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport default Spinner;\n", "import React, { useContext } from \"react\";\nimport { flushSync } from \"react-dom\";\n\nimport type { RoughCanvas } from \"roughjs/bin/canvas\";\nimport rough from \"roughjs/bin/rough\";\nimport clsx from \"clsx\";\nimport { nanoid } from \"nanoid\";\nimport {\n  actionAddToLibrary,\n  actionBringForward,\n  actionBringToFront,\n  actionCopy,\n  actionCopyAsPng,\n  actionCopyAsSvg,\n  copyText,\n  actionCopyStyles,\n  actionCut,\n  actionDeleteSelected,\n  actionDuplicateSelection,\n  actionFinalize,\n  actionFlipHorizontal,\n  actionFlipVertical,\n  actionGroup,\n  actionPasteStyles,\n  actionSelectAll,\n  actionSendBackward,\n  actionSendToBack,\n  actionToggleGridMode,\n  actionToggleStats,\n  actionToggleZenMode,\n  actionUnbindText,\n  actionBindText,\n  actionUngroup,\n  actionLink,\n  actionToggleElementLock,\n  actionToggleLinearEditor,\n  actionToggleObjectsSnapMode,\n  actionToggleCropEditor,\n} from \"../actions\";\nimport { createRedoAction, createUndoAction } from \"../actions/actionHistory\";\nimport { ActionManager } from \"../actions/manager\";\nimport { actions } from \"../actions/register\";\nimport type { Action, ActionResult } from \"../actions/types\";\nimport { trackEvent } from \"../analytics\";\nimport {\n  getDefaultAppState,\n  isEraserActive,\n  isHandToolActive,\n} from \"../appState\";\nimport type { PastedMixedContent } from \"../clipboard\";\nimport { copyTextToSystemClipboard, parseClipboard } from \"../clipboard\";\nimport {\n  APP_NAME,\n  CURSOR_TYPE,\n  DEFAULT_MAX_IMAGE_WIDTH_OR_HEIGHT,\n  DEFAULT_VERTICAL_ALIGN,\n  DRAGGING_THRESHOLD,\n  ELEMENT_SHIFT_TRANSLATE_AMOUNT,\n  ELEMENT_TRANSLATE_AMOUNT,\n  ENV,\n  EVENT,\n  FRAME_STYLE,\n  IMAGE_MIME_TYPES,\n  IMAGE_RENDER_TIMEOUT,\n  isBrave,\n  LINE_CONFIRM_THRESHOLD,\n  MAX_ALLOWED_FILE_BYTES,\n  MIME_TYPES,\n  MQ_MAX_HEIGHT_LANDSCAPE,\n  MQ_MAX_WIDTH_LANDSCAPE,\n  MQ_MAX_WIDTH_PORTRAIT,\n  MQ_RIGHT_SIDEBAR_MIN_WIDTH,\n  POINTER_BUTTON,\n  ROUNDNESS,\n  SCROLL_TIMEOUT,\n  TAP_TWICE_TIMEOUT,\n  TEXT_TO_CENTER_SNAP_THRESHOLD,\n  THEME,\n  THEME_FILTER,\n  TOUCH_CTX_MENU_TIMEOUT,\n  VERTICAL_ALIGN,\n  YOUTUBE_STATES,\n  ZOOM_STEP,\n  POINTER_EVENTS,\n  TOOL_TYPE,\n  isIOS,\n  supportsResizeObserver,\n  DEFAULT_COLLISION_THRESHOLD,\n  DEFAULT_TEXT_ALIGN,\n  ARROW_TYPE,\n  DEFAULT_REDUCED_GLOBAL_ALPHA,\n  isSafari,\n  type EXPORT_IMAGE_TYPES,\n} from \"../constants\";\nimport type { ExportedElements } from \"../data\";\nimport { exportCanvas, loadFromBlob } from \"../data\";\nimport Library, { distributeLibraryItemsOnSquareGrid } from \"../data/library\";\nimport { restore, restoreElements } from \"../data/restore\";\nimport {\n  dragNewElement,\n  dragSelectedElements,\n  duplicateElement,\n  getCommonBounds,\n  getCursorForResizingElement,\n  getDragOffsetXY,\n  getElementWithTransformHandleType,\n  getNormalizedDimensions,\n  getResizeArrowDirection,\n  getResizeOffsetXY,\n  getLockedLinearCursorAlignSize,\n  getTransformHandleTypeFromCoords,\n  isInvisiblySmallElement,\n  isNonDeletedElement,\n  isTextElement,\n  newElement,\n  newLinearElement,\n  newTextElement,\n  newImageElement,\n  transformElements,\n  refreshTextDimensions,\n  redrawTextBoundingBox,\n  getElementAbsoluteCoords,\n} from \"../element\";\nimport {\n  bindOrUnbindLinearElement,\n  bindOrUnbindLinearElements,\n  fixBindingsAfterDeletion,\n  fixBindingsAfterDuplication,\n  getHoveredElementForBinding,\n  isBindingEnabled,\n  isLinearElementSimpleAndAlreadyBound,\n  maybeBindLinearElement,\n  shouldEnableBindingForPointerEvent,\n  updateBoundElements,\n  getSuggestedBindingsForArrows,\n} from \"../element/binding\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport { mutateElement, newElementWith } from \"../element/mutateElement\";\nimport {\n  deepCopyElement,\n  duplicateElements,\n  newFrameElement,\n  newFreeDrawElement,\n  newEmbeddableElement,\n  newMagicFrameElement,\n  newIframeElement,\n  newArrowElement,\n} from \"../element/newElement\";\nimport {\n  hasBoundTextElement,\n  isArrowElement,\n  isBindingElement,\n  isBindingElementType,\n  isBoundToContainer,\n  isFrameLikeElement,\n  isImageElement,\n  isEmbeddableElement,\n  isInitializedImageElement,\n  isLinearElement,\n  isLinearElementType,\n  isUsingAdaptiveRadius,\n  isIframeElement,\n  isIframeLikeElement,\n  isMagicFrameElement,\n  isTextBindableContainer,\n  isElbowArrow,\n  isFlowchartNodeElement,\n  isBindableElement,\n} from \"../element/typeChecks\";\nimport type {\n  ExcalidrawBindableElement,\n  ExcalidrawElement,\n  ExcalidrawFreeDrawElement,\n  ExcalidrawGenericElement,\n  ExcalidrawLinearElement,\n  ExcalidrawTextElement,\n  NonDeleted,\n  InitializedExcalidrawImageElement,\n  ExcalidrawImageElement,\n  FileId,\n  NonDeletedExcalidrawElement,\n  ExcalidrawTextContainer,\n  ExcalidrawFrameLikeElement,\n  ExcalidrawMagicFrameElement,\n  ExcalidrawIframeLikeElement,\n  IframeData,\n  ExcalidrawIframeElement,\n  ExcalidrawEmbeddableElement,\n  Ordered,\n  MagicGenerationData,\n  ExcalidrawNonSelectionElement,\n  ExcalidrawArrowElement,\n} from \"../element/types\";\nimport { getCenter, getDistance } from \"../gesture\";\nimport {\n  editGroupForSelectedElement,\n  getElementsInGroup,\n  getSelectedGroupIdForElement,\n  getSelectedGroupIds,\n  isElementInGroup,\n  isSelectedViaGroup,\n  selectGroupsForSelectedElements,\n} from \"../groups\";\nimport { History } from \"../history\";\nimport { defaultLang, getLanguage, languages, setLanguage, t } from \"../i18n\";\nimport {\n  CODES,\n  shouldResizeFromCenter,\n  shouldMaintainAspectRatio,\n  shouldRotateWithDiscreteAngle,\n  isArrowKey,\n  KEYS,\n} from \"../keys\";\nimport {\n  isElementCompletelyInViewport,\n  isElementInViewport,\n} from \"../element/sizeHelpers\";\nimport {\n  calculateScrollCenter,\n  getElementsWithinSelection,\n  getNormalizedZoom,\n  getSelectedElements,\n  hasBackground,\n  isSomeElementSelected,\n} from \"../scene\";\nimport Scene from \"../scene/Scene\";\nimport type {\n  RenderInteractiveSceneCallback,\n  ScrollBars,\n} from \"../scene/types\";\nimport { getStateForZoom } from \"../scene/zoom\";\nimport {\n  findShapeByKey,\n  getBoundTextShape,\n  getCornerRadius,\n  getElementShape,\n  isPathALoop,\n} from \"../shapes\";\nimport { getSelectionBoxShape } from \"@excalidraw/utils/geometry/shape\";\nimport { isPointInShape } from \"@excalidraw/utils/collision\";\nimport type {\n  AppClassProperties,\n  AppProps,\n  AppState,\n  BinaryFileData,\n  DataURL,\n  ExcalidrawImperativeAPI,\n  BinaryFiles,\n  Gesture,\n  GestureEvent,\n  LibraryItems,\n  PointerDownState,\n  SceneData,\n  Device,\n  FrameNameBoundsCache,\n  SidebarName,\n  SidebarTabName,\n  KeyboardModifiersObject,\n  CollaboratorPointer,\n  ToolType,\n  OnUserFollowedPayload,\n  UnsubscribeCallback,\n  EmbedsValidationStatus,\n  ElementsPendingErasure,\n  GenerateDiagramToCode,\n  NullableGridSize,\n  Offsets,\n} from \"../types\";\nimport {\n  debounce,\n  distance,\n  getFontString,\n  getNearestScrollableContainer,\n  isInputLike,\n  isToolIcon,\n  isWritableElement,\n  sceneCoordsToViewportCoords,\n  tupleToCoors,\n  viewportCoordsToSceneCoords,\n  wrapEvent,\n  updateObject,\n  updateActiveTool,\n  getShortcutKey,\n  isTransparent,\n  easeToValuesRAF,\n  muteFSAbortError,\n  isTestEnv,\n  easeOut,\n  updateStable,\n  addEventListener,\n  normalizeEOL,\n  getDateTime,\n  isShallowEqual,\n  arrayToMap,\n} from \"../utils\";\nimport {\n  createSrcDoc,\n  embeddableURLValidator,\n  maybeParseEmbedSrc,\n  getEmbedLink,\n} from \"../element/embeddable\";\nimport type { ContextMenuItems } from \"./ContextMenu\";\nimport { ContextMenu, CONTEXT_MENU_SEPARATOR } from \"./ContextMenu\";\nimport LayerUI from \"./LayerUI\";\nimport { Toast } from \"./Toast\";\nimport { actionToggleViewMode } from \"../actions/actionToggleViewMode\";\nimport {\n  dataURLToFile,\n  dataURLToString,\n  generateIdFromFile,\n  getDataURL,\n  getDataURL_sync,\n  getFileFromEvent,\n  ImageURLToFile,\n  isImageFileHandle,\n  isSupportedImageFile,\n  loadSceneOrLibraryFromBlob,\n  normalizeFile,\n  parseLibraryJSON,\n  resizeImageFile,\n  SVGStringToFile,\n} from \"../data/blob\";\nimport {\n  getInitializedImageElements,\n  loadHTMLImageElement,\n  normalizeSVG,\n  updateImageCache as _updateImageCache,\n} from \"../element/image\";\nimport throttle from \"lodash.throttle\";\nimport type { FileSystemHandle } from \"../data/filesystem\";\nimport { fileOpen } from \"../data/filesystem\";\nimport {\n  bindTextToShapeAfterDuplication,\n  getBoundTextElement,\n  getContainerCenter,\n  getContainerElement,\n  isValidTextContainer,\n} from \"../element/textElement\";\nimport {\n  showHyperlinkTooltip,\n  hideHyperlinkToolip,\n  Hyperlink,\n} from \"../components/hyperlink/Hyperlink\";\nimport { isLocalLink, normalizeLink, toValidURL } from \"../data/url\";\nimport { shouldShowBoundingBox } from \"../element/transformHandles\";\nimport { actionUnlockAllElements } from \"../actions/actionElementLock\";\nimport { Fonts, getLineHeight } from \"../fonts\";\nimport {\n  getFrameChildren,\n  isCursorInFrame,\n  bindElementsToFramesAfterDuplication,\n  addElementsToFrame,\n  replaceAllElementsInFrame,\n  removeElementsFromFrame,\n  getElementsInResizingFrame,\n  getElementsInNewFrame,\n  getContainingFrame,\n  elementOverlapsWithFrame,\n  updateFrameMembershipOfSelectedElements,\n  isElementInFrame,\n  getFrameLikeTitle,\n  getElementsOverlappingFrame,\n  filterElementsEligibleAsFrameChildren,\n} from \"../frame\";\nimport {\n  excludeElementsInFramesFromSelection,\n  makeNextSelectedElementIds,\n} from \"../scene/selection\";\nimport { actionPaste } from \"../actions/actionClipboard\";\nimport {\n  actionRemoveAllElementsFromFrame,\n  actionSelectAllElementsInFrame,\n  actionWrapSelectionInFrame,\n} from \"../actions/actionFrame\";\nimport { actionToggleHandTool, zoomToFit } from \"../actions/actionCanvas\";\nimport { editorJotaiStore } from \"../editor-jotai\";\nimport { activeConfirmDialogAtom } from \"./ActiveConfirmDialog\";\nimport { ImageSceneDataError } from \"../errors\";\nimport {\n  getSnapLinesAtPointer,\n  snapDraggedElements,\n  isActiveToolNonLinearSnappable,\n  snapNewElement,\n  snapResizingElements,\n  isSnappingEnabled,\n  getVisibleGaps,\n  getReferenceSnapPoints,\n  SnapCache,\n  isGridModeEnabled,\n  getGridPoint,\n} from \"../snapping\";\nimport { actionWrapTextInContainer } from \"../actions/actionBoundText\";\nimport BraveMeasureTextError from \"./BraveMeasureTextError\";\nimport { activeEyeDropperAtom } from \"./EyeDropper\";\nimport type { ExcalidrawElementSkeleton } from \"../data/transform\";\nimport { convertToExcalidrawElements } from \"../data/transform\";\nimport type { ValueOf } from \"../utility-types\";\nimport { isSidebarDockedAtom } from \"./Sidebar/Sidebar\";\nimport { StaticCanvas, InteractiveCanvas } from \"./canvases\";\nimport { Renderer } from \"../scene/Renderer\";\nimport { ShapeCache } from \"../scene/ShapeCache\";\nimport { SVGLayer } from \"./SVGLayer\";\nimport {\n  setEraserCursor,\n  setCursor,\n  resetCursor,\n  setCursorForShape,\n} from \"../cursor\";\nimport { Emitter } from \"../emitter\";\nimport { ElementCanvasButtons } from \"../element/ElementCanvasButtons\";\nimport { COLOR_PALETTE } from \"../colors\";\nimport { ElementCanvasButton } from \"./MagicButton\";\nimport { MagicIcon, copyIcon, fullscreenIcon } from \"./icons\";\nimport FollowMode from \"./FollowMode/FollowMode\";\nimport { Store, CaptureUpdateAction } from \"../store\";\nimport { AnimationFrameHandler } from \"../animation-frame-handler\";\nimport { AnimatedTrail } from \"../animated-trail\";\nimport { LaserTrails } from \"../laser-trails\";\nimport { withBatchedUpdates, withBatchedUpdatesThrottled } from \"../reactUtils\";\nimport { getRenderOpacity } from \"../renderer/renderElement\";\nimport {\n  hitElementBoundText,\n  hitElementBoundingBoxOnly,\n  hitElementItself,\n} from \"../element/collision\";\nimport { textWysiwyg } from \"../element/textWysiwyg\";\nimport { isOverScrollBars } from \"../scene/scrollbars\";\nimport { syncInvalidIndices, syncMovedIndices } from \"../fractionalIndex\";\nimport {\n  isPointHittingLink,\n  isPointHittingLinkIcon,\n} from \"./hyperlink/helpers\";\nimport { getShortcutFromShortcutName } from \"../actions/shortcuts\";\nimport { actionTextAutoResize } from \"../actions/actionTextAutoResize\";\nimport { getVisibleSceneBounds } from \"../element/bounds\";\nimport { isMaybeMermaidDefinition } from \"../mermaid\";\nimport NewElementCanvas from \"./canvases/NewElementCanvas\";\nimport {\n  FlowChartCreator,\n  FlowChartNavigator,\n  getLinkDirectionFromKey,\n} from \"../element/flowchart\";\nimport { searchItemInFocusAtom } from \"./SearchMenu\";\nimport type { LocalPoint, Radians } from \"@excalidraw/math\";\nimport {\n  clamp,\n  pointFrom,\n  pointDistance,\n  vector,\n  pointRotateRads,\n  vectorScale,\n  vectorFromPoint,\n  vectorSubtract,\n  vectorDot,\n  vectorNormalize,\n} from \"@excalidraw/math\";\nimport { cropElement } from \"../element/cropElement\";\nimport { wrapText } from \"../element/textWrapping\";\nimport { actionCopyElementLink } from \"../actions/actionElementLink\";\nimport { isElementLink, parseElementLinkFromURL } from \"../element/elementLink\";\nimport {\n  isMeasureTextSupported,\n  normalizeText,\n  measureText,\n  getLineHeightInPx,\n  getApproxMinLineWidth,\n  getApproxMinLineHeight,\n  getMinTextElementWidth,\n} from \"../element/textMeasurements\";\n\nconst AppContext = React.createContext<AppClassProperties>(null!);\nconst AppPropsContext = React.createContext<AppProps>(null!);\n\nconst deviceContextInitialValue = {\n  viewport: {\n    isMobile: false,\n    isLandscape: false,\n  },\n  editor: {\n    isMobile: false,\n    canFitSidebar: false,\n  },\n  isTouchScreen: false,\n};\nconst DeviceContext = React.createContext<Device>(deviceContextInitialValue);\nDeviceContext.displayName = \"DeviceContext\";\n\nexport const ExcalidrawContainerContext = React.createContext<{\n  container: HTMLDivElement | null;\n  id: string | null;\n}>({ container: null, id: null });\nExcalidrawContainerContext.displayName = \"ExcalidrawContainerContext\";\n\nconst ExcalidrawElementsContext = React.createContext<\n  readonly NonDeletedExcalidrawElement[]\n>([]);\nExcalidrawElementsContext.displayName = \"ExcalidrawElementsContext\";\n\nconst ExcalidrawAppStateContext = React.createContext<AppState>({\n  ...getDefaultAppState(),\n  width: 0,\n  height: 0,\n  offsetLeft: 0,\n  offsetTop: 0,\n});\nExcalidrawAppStateContext.displayName = \"ExcalidrawAppStateContext\";\n\nconst ExcalidrawSetAppStateContext = React.createContext<\n  React.Component<any, AppState>[\"setState\"]\n>(() => {\n  console.warn(\"Uninitialized ExcalidrawSetAppStateContext context!\");\n});\nExcalidrawSetAppStateContext.displayName = \"ExcalidrawSetAppStateContext\";\n\nconst ExcalidrawActionManagerContext = React.createContext<ActionManager>(\n  null!,\n);\nExcalidrawActionManagerContext.displayName = \"ExcalidrawActionManagerContext\";\n\nexport const useApp = () => useContext(AppContext);\nexport const useAppProps = () => useContext(AppPropsContext);\nexport const useDevice = () => useContext<Device>(DeviceContext);\nexport const useExcalidrawContainer = () =>\n  useContext(ExcalidrawContainerContext);\nexport const useExcalidrawElements = () =>\n  useContext(ExcalidrawElementsContext);\nexport const useExcalidrawAppState = () =>\n  useContext(ExcalidrawAppStateContext);\nexport const useExcalidrawSetAppState = () =>\n  useContext(ExcalidrawSetAppStateContext);\nexport const useExcalidrawActionManager = () =>\n  useContext(ExcalidrawActionManagerContext);\n\nlet didTapTwice: boolean = false;\nlet tappedTwiceTimer = 0;\nlet isHoldingSpace: boolean = false;\nlet isPanning: boolean = false;\nlet isDraggingScrollBar: boolean = false;\nlet currentScrollBars: ScrollBars = { horizontal: null, vertical: null };\nlet touchTimeout = 0;\nlet invalidateContextMenu = false;\n\n/**\n * Map of youtube embed video states\n */\nconst YOUTUBE_VIDEO_STATES = new Map<\n  ExcalidrawElement[\"id\"],\n  ValueOf<typeof YOUTUBE_STATES>\n>();\n\nlet IS_PLAIN_PASTE = false;\nlet IS_PLAIN_PASTE_TIMER = 0;\nlet PLAIN_PASTE_TOAST_SHOWN = false;\n\nlet lastPointerUp: (() => void) | null = null;\nconst gesture: Gesture = {\n  pointers: new Map(),\n  lastCenter: null,\n  initialDistance: null,\n  initialScale: null,\n};\n\nclass App extends React.Component<AppProps, AppState> {\n  canvas: AppClassProperties[\"canvas\"];\n  interactiveCanvas: AppClassProperties[\"interactiveCanvas\"] = null;\n  rc: RoughCanvas;\n  unmounted: boolean = false;\n  actionManager: ActionManager;\n  device: Device = deviceContextInitialValue;\n\n  private excalidrawContainerRef = React.createRef<HTMLDivElement>();\n\n  public scene: Scene;\n  public fonts: Fonts;\n  public renderer: Renderer;\n  public visibleElements: readonly NonDeletedExcalidrawElement[];\n  private resizeObserver: ResizeObserver | undefined;\n  private nearestScrollableContainer: HTMLElement | Document | undefined;\n  public library: AppClassProperties[\"library\"];\n  public libraryItemsFromStorage: LibraryItems | undefined;\n  public id: string;\n  private store: Store;\n  private history: History;\n  public excalidrawContainerValue: {\n    container: HTMLDivElement | null;\n    id: string;\n  };\n\n  public files: BinaryFiles = {};\n  public imageCache: AppClassProperties[\"imageCache\"] = new Map();\n  private iFrameRefs = new Map<ExcalidrawElement[\"id\"], HTMLIFrameElement>();\n  /**\n   * Indicates whether the embeddable's url has been validated for rendering.\n   * If value not set, indicates that the validation is pending.\n   * Initially or on url change the flag is not reset so that we can guarantee\n   * the validation came from a trusted source (the editor).\n   **/\n  private embedsValidationStatus: EmbedsValidationStatus = new Map();\n  /** embeds that have been inserted to DOM (as a perf optim, we don't want to\n   * insert to DOM before user initially scrolls to them) */\n  private initializedEmbeds = new Set<ExcalidrawIframeLikeElement[\"id\"]>();\n\n  private elementsPendingErasure: ElementsPendingErasure = new Set();\n\n  public flowChartCreator: FlowChartCreator = new FlowChartCreator();\n  private flowChartNavigator: FlowChartNavigator = new FlowChartNavigator();\n\n  hitLinkElement?: NonDeletedExcalidrawElement;\n  lastPointerDownEvent: React.PointerEvent<HTMLElement> | null = null;\n  lastPointerUpEvent: React.PointerEvent<HTMLElement> | PointerEvent | null =\n    null;\n  lastPointerMoveEvent: PointerEvent | null = null;\n  lastPointerMoveCoords: { x: number; y: number } | null = null;\n  lastViewportPosition = { x: 0, y: 0 };\n\n  animationFrameHandler = new AnimationFrameHandler();\n\n  laserTrails = new LaserTrails(this.animationFrameHandler, this);\n  eraserTrail = new AnimatedTrail(this.animationFrameHandler, this, {\n    streamline: 0.2,\n    size: 5,\n    keepHead: true,\n    sizeMapping: (c) => {\n      const DECAY_TIME = 200;\n      const DECAY_LENGTH = 10;\n      const t = Math.max(0, 1 - (performance.now() - c.pressure) / DECAY_TIME);\n      const l =\n        (DECAY_LENGTH -\n          Math.min(DECAY_LENGTH, c.totalLength - c.currentIndex)) /\n        DECAY_LENGTH;\n\n      return Math.min(easeOut(l), easeOut(t));\n    },\n    fill: () =>\n      this.state.theme === THEME.LIGHT\n        ? \"rgba(0, 0, 0, 0.2)\"\n        : \"rgba(255, 255, 255, 0.2)\",\n  });\n\n  onChangeEmitter = new Emitter<\n    [\n      elements: readonly ExcalidrawElement[],\n      appState: AppState,\n      files: BinaryFiles,\n    ]\n  >();\n\n  onPointerDownEmitter = new Emitter<\n    [\n      activeTool: AppState[\"activeTool\"],\n      pointerDownState: PointerDownState,\n      event: React.PointerEvent<HTMLElement>,\n    ]\n  >();\n\n  onPointerUpEmitter = new Emitter<\n    [\n      activeTool: AppState[\"activeTool\"],\n      pointerDownState: PointerDownState,\n      event: PointerEvent,\n    ]\n  >();\n  onUserFollowEmitter = new Emitter<[payload: OnUserFollowedPayload]>();\n  onScrollChangeEmitter = new Emitter<\n    [scrollX: number, scrollY: number, zoom: AppState[\"zoom\"]]\n  >();\n\n  missingPointerEventCleanupEmitter = new Emitter<\n    [event: PointerEvent | null]\n  >();\n  onRemoveEventListenersEmitter = new Emitter<[]>();\n\n  constructor(props: AppProps) {\n    super(props);\n    const defaultAppState = getDefaultAppState();\n    const {\n      excalidrawAPI,\n      viewModeEnabled = false,\n      zenModeEnabled = false,\n      gridModeEnabled = false,\n      objectsSnapModeEnabled = false,\n      theme = defaultAppState.theme,\n      name = `${t(\"labels.untitled\")}-${getDateTime()}`,\n    } = props;\n    this.state = {\n      ...defaultAppState,\n      theme,\n      isLoading: true,\n      ...this.getCanvasOffsets(),\n      viewModeEnabled,\n      zenModeEnabled,\n      objectsSnapModeEnabled,\n      gridModeEnabled: gridModeEnabled ?? defaultAppState.gridModeEnabled,\n      name,\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n\n    this.id = nanoid();\n    this.library = new Library(this);\n    this.actionManager = new ActionManager(\n      this.syncActionResult,\n      () => this.state,\n      () => this.scene.getElementsIncludingDeleted(),\n      this,\n    );\n    this.scene = new Scene();\n\n    this.canvas = document.createElement(\"canvas\");\n    this.rc = rough.canvas(this.canvas);\n    this.renderer = new Renderer(this.scene);\n    this.visibleElements = [];\n\n    this.store = new Store();\n    this.history = new History();\n\n    if (excalidrawAPI) {\n      const api: ExcalidrawImperativeAPI = {\n        updateScene: this.updateScene,\n        updateLibrary: this.library.updateLibrary,\n        addFiles: this.addFiles,\n        resetScene: this.resetScene,\n        getSceneElementsIncludingDeleted: this.getSceneElementsIncludingDeleted,\n        history: {\n          clear: this.resetHistory,\n        },\n        scrollToContent: this.scrollToContent,\n        getSceneElements: this.getSceneElements,\n        getAppState: () => this.state,\n        getFiles: () => this.files,\n        getName: this.getName,\n        registerAction: (action: Action) => {\n          this.actionManager.registerAction(action);\n        },\n        refresh: this.refresh,\n        setToast: this.setToast,\n        id: this.id,\n        setActiveTool: this.setActiveTool,\n        setCursor: this.setCursor,\n        resetCursor: this.resetCursor,\n        updateFrameRendering: this.updateFrameRendering,\n        toggleSidebar: this.toggleSidebar,\n        onChange: (cb) => this.onChangeEmitter.on(cb),\n        onPointerDown: (cb) => this.onPointerDownEmitter.on(cb),\n        onPointerUp: (cb) => this.onPointerUpEmitter.on(cb),\n        onScrollChange: (cb) => this.onScrollChangeEmitter.on(cb),\n        onUserFollow: (cb) => this.onUserFollowEmitter.on(cb),\n      } as const;\n      if (typeof excalidrawAPI === \"function\") {\n        excalidrawAPI(api);\n      } else {\n        console.error(\"excalidrawAPI should be a function!\");\n      }\n    }\n\n    this.excalidrawContainerValue = {\n      container: this.excalidrawContainerRef.current,\n      id: this.id,\n    };\n\n    this.fonts = new Fonts(this.scene);\n    this.history = new History();\n\n    this.actionManager.registerAll(actions);\n    this.actionManager.registerAction(\n      createUndoAction(this.history, this.store),\n    );\n    this.actionManager.registerAction(\n      createRedoAction(this.history, this.store),\n    );\n  }\n\n  private onWindowMessage(event: MessageEvent) {\n    if (\n      event.origin !== \"https://player.vimeo.com\" &&\n      event.origin !== \"https://www.youtube.com\"\n    ) {\n      return;\n    }\n\n    let data = null;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {}\n    if (!data) {\n      return;\n    }\n\n    switch (event.origin) {\n      case \"https://player.vimeo.com\":\n        //Allowing for multiple instances of Excalidraw running in the window\n        if (data.method === \"paused\") {\n          let source: Window | null = null;\n          const iframes = document.body.querySelectorAll(\n            \"iframe.excalidraw__embeddable\",\n          );\n          if (!iframes) {\n            break;\n          }\n          for (const iframe of iframes as NodeListOf<HTMLIFrameElement>) {\n            if (iframe.contentWindow === event.source) {\n              source = iframe.contentWindow;\n            }\n          }\n          source?.postMessage(\n            JSON.stringify({\n              method: data.value ? \"play\" : \"pause\",\n              value: true,\n            }),\n            \"*\",\n          );\n        }\n        break;\n      case \"https://www.youtube.com\":\n        if (\n          data.event === \"infoDelivery\" &&\n          data.info &&\n          data.id &&\n          typeof data.info.playerState === \"number\"\n        ) {\n          const id = data.id;\n          const playerState = data.info.playerState as number;\n          if (\n            (Object.values(YOUTUBE_STATES) as number[]).includes(playerState)\n          ) {\n            YOUTUBE_VIDEO_STATES.set(\n              id,\n              playerState as ValueOf<typeof YOUTUBE_STATES>,\n            );\n          }\n        }\n        break;\n    }\n  }\n\n  private cacheEmbeddableRef(\n    element: ExcalidrawIframeLikeElement,\n    ref: HTMLIFrameElement | null,\n  ) {\n    if (ref) {\n      this.iFrameRefs.set(element.id, ref);\n    }\n  }\n\n  /**\n   * Returns gridSize taking into account `gridModeEnabled`.\n   * If disabled, returns null.\n   */\n  public getEffectiveGridSize = () => {\n    return (\n      isGridModeEnabled(this) ? this.state.gridSize : null\n    ) as NullableGridSize;\n  };\n\n  private getHTMLIFrameElement(\n    element: ExcalidrawIframeLikeElement,\n  ): HTMLIFrameElement | undefined {\n    return this.iFrameRefs.get(element.id);\n  }\n\n  private handleEmbeddableCenterClick(element: ExcalidrawIframeLikeElement) {\n    if (\n      this.state.activeEmbeddable?.element === element &&\n      this.state.activeEmbeddable?.state === \"active\"\n    ) {\n      return;\n    }\n\n    // The delay serves two purposes\n    // 1. To prevent first click propagating to iframe on mobile,\n    //    else the click will immediately start and stop the video\n    // 2. If the user double clicks the frame center to activate it\n    //    without the delay youtube will immediately open the video\n    //    in fullscreen mode\n    setTimeout(() => {\n      this.setState({\n        activeEmbeddable: { element, state: \"active\" },\n        selectedElementIds: { [element.id]: true },\n        newElement: null,\n        selectionElement: null,\n      });\n    }, 100);\n\n    if (isIframeElement(element)) {\n      return;\n    }\n\n    const iframe = this.getHTMLIFrameElement(element);\n\n    if (!iframe?.contentWindow) {\n      return;\n    }\n\n    if (iframe.src.includes(\"youtube\")) {\n      const state = YOUTUBE_VIDEO_STATES.get(element.id);\n      if (!state) {\n        YOUTUBE_VIDEO_STATES.set(element.id, YOUTUBE_STATES.UNSTARTED);\n        iframe.contentWindow.postMessage(\n          JSON.stringify({\n            event: \"listening\",\n            id: element.id,\n          }),\n          \"*\",\n        );\n      }\n      switch (state) {\n        case YOUTUBE_STATES.PLAYING:\n        case YOUTUBE_STATES.BUFFERING:\n          iframe.contentWindow?.postMessage(\n            JSON.stringify({\n              event: \"command\",\n              func: \"pauseVideo\",\n              args: \"\",\n            }),\n            \"*\",\n          );\n          break;\n        default:\n          iframe.contentWindow?.postMessage(\n            JSON.stringify({\n              event: \"command\",\n              func: \"playVideo\",\n              args: \"\",\n            }),\n            \"*\",\n          );\n      }\n    }\n\n    if (iframe.src.includes(\"player.vimeo.com\")) {\n      iframe.contentWindow.postMessage(\n        JSON.stringify({\n          method: \"paused\", //video play/pause in onWindowMessage handler\n        }),\n        \"*\",\n      );\n    }\n  }\n\n  private isIframeLikeElementCenter(\n    el: ExcalidrawIframeLikeElement | null,\n    event: React.PointerEvent<HTMLElement> | PointerEvent,\n    sceneX: number,\n    sceneY: number,\n  ) {\n    return (\n      el &&\n      !event.altKey &&\n      !event.shiftKey &&\n      !event.metaKey &&\n      !event.ctrlKey &&\n      (this.state.activeEmbeddable?.element !== el ||\n        this.state.activeEmbeddable?.state === \"hover\" ||\n        !this.state.activeEmbeddable) &&\n      sceneX >= el.x + el.width / 3 &&\n      sceneX <= el.x + (2 * el.width) / 3 &&\n      sceneY >= el.y + el.height / 3 &&\n      sceneY <= el.y + (2 * el.height) / 3\n    );\n  }\n\n  private updateEmbedValidationStatus = (\n    element: ExcalidrawEmbeddableElement,\n    status: boolean,\n  ) => {\n    this.embedsValidationStatus.set(element.id, status);\n    ShapeCache.delete(element);\n  };\n\n  private updateEmbeddables = () => {\n    const iframeLikes = new Set<ExcalidrawIframeLikeElement[\"id\"]>();\n\n    let updated = false;\n    this.scene.getNonDeletedElements().filter((element) => {\n      if (isEmbeddableElement(element)) {\n        iframeLikes.add(element.id);\n        if (!this.embedsValidationStatus.has(element.id)) {\n          updated = true;\n\n          const validated = embeddableURLValidator(\n            element.link,\n            this.props.validateEmbeddable,\n          );\n\n          this.updateEmbedValidationStatus(element, validated);\n        }\n      } else if (isIframeElement(element)) {\n        iframeLikes.add(element.id);\n      }\n      return false;\n    });\n\n    if (updated) {\n      this.scene.triggerUpdate();\n    }\n\n    // GC\n    this.iFrameRefs.forEach((ref, id) => {\n      if (!iframeLikes.has(id)) {\n        this.iFrameRefs.delete(id);\n      }\n    });\n  };\n\n  private renderEmbeddables() {\n    const scale = this.state.zoom.value;\n    const normalizedWidth = this.state.width;\n    const normalizedHeight = this.state.height;\n\n    const embeddableElements = this.scene\n      .getNonDeletedElements()\n      .filter(\n        (el): el is Ordered<NonDeleted<ExcalidrawIframeLikeElement>> =>\n          (isEmbeddableElement(el) &&\n            this.embedsValidationStatus.get(el.id) === true) ||\n          isIframeElement(el),\n      );\n\n    return (\n      <>\n        {embeddableElements.map((el) => {\n          const { x, y } = sceneCoordsToViewportCoords(\n            { sceneX: el.x, sceneY: el.y },\n            this.state,\n          );\n\n          const isVisible = isElementInViewport(\n            el,\n            normalizedWidth,\n            normalizedHeight,\n            this.state,\n            this.scene.getNonDeletedElementsMap(),\n          );\n          const hasBeenInitialized = this.initializedEmbeds.has(el.id);\n\n          if (isVisible && !hasBeenInitialized) {\n            this.initializedEmbeds.add(el.id);\n          }\n          const shouldRender = isVisible || hasBeenInitialized;\n\n          if (!shouldRender) {\n            return null;\n          }\n\n          let src: IframeData | null;\n\n          if (isIframeElement(el)) {\n            src = null;\n\n            const data: MagicGenerationData = (el.customData?.generationData ??\n              this.magicGenerations.get(el.id)) || {\n              status: \"error\",\n              message: \"No generation data\",\n              code: \"ERR_NO_GENERATION_DATA\",\n            };\n\n            if (data.status === \"done\") {\n              const html = data.html;\n              src = {\n                intrinsicSize: { w: el.width, h: el.height },\n                type: \"document\",\n                srcdoc: () => {\n                  return html;\n                },\n              } as const;\n            } else if (data.status === \"pending\") {\n              src = {\n                intrinsicSize: { w: el.width, h: el.height },\n                type: \"document\",\n                srcdoc: () => {\n                  return createSrcDoc(`\n                    <style>\n                      html, body {\n                        width: 100%;\n                        height: 100%;\n                        color: ${\n                          this.state.theme === THEME.DARK ? \"white\" : \"black\"\n                        };\n                      }\n                      body {\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                        flex-direction: column;\n                        gap: 1rem;\n                      }\n\n                      .Spinner {\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                        margin-left: auto;\n                        margin-right: auto;\n                      }\n\n                      .Spinner svg {\n                        animation: rotate 1.6s linear infinite;\n                        transform-origin: center center;\n                        width: 40px;\n                        height: 40px;\n                      }\n\n                      .Spinner circle {\n                        stroke: currentColor;\n                        animation: dash 1.6s linear 0s infinite;\n                        stroke-linecap: round;\n                      }\n\n                      @keyframes rotate {\n                        100% {\n                          transform: rotate(360deg);\n                        }\n                      }\n\n                      @keyframes dash {\n                        0% {\n                          stroke-dasharray: 1, 300;\n                          stroke-dashoffset: 0;\n                        }\n                        50% {\n                          stroke-dasharray: 150, 300;\n                          stroke-dashoffset: -200;\n                        }\n                        100% {\n                          stroke-dasharray: 1, 300;\n                          stroke-dashoffset: -280;\n                        }\n                      }\n                    </style>\n                    <div class=\"Spinner\">\n                      <svg\n                        viewBox=\"0 0 100 100\"\n                      >\n                        <circle\n                          cx=\"50\"\n                          cy=\"50\"\n                          r=\"46\"\n                          stroke-width=\"8\"\n                          fill=\"none\"\n                          stroke-miter-limit=\"10\"\n                        />\n                      </svg>\n                    </div>\n                    <div>Generating...</div>\n                  `);\n                },\n              } as const;\n            } else {\n              let message: string;\n              if (data.code === \"ERR_GENERATION_INTERRUPTED\") {\n                message = \"Generation was interrupted...\";\n              } else {\n                message = data.message || \"Generation failed\";\n              }\n              src = {\n                intrinsicSize: { w: el.width, h: el.height },\n                type: \"document\",\n                srcdoc: () => {\n                  return createSrcDoc(`\n                    <style>\n                    html, body {\n                      height: 100%;\n                    }\n                      body {\n                        display: flex;\n                        flex-direction: column;\n                        align-items: center;\n                        justify-content: center;\n                        color: ${COLOR_PALETTE.red[3]};\n                      }\n                      h1, h3 {\n                        margin-top: 0;\n                        margin-bottom: 0.5rem;\n                      }\n                    </style>\n                    <h1>Error!</h1>\n                    <h3>${message}</h3>\n                  `);\n                },\n              } as const;\n            }\n          } else {\n            src = getEmbedLink(toValidURL(el.link || \"\"));\n          }\n\n          const isActive =\n            this.state.activeEmbeddable?.element === el &&\n            this.state.activeEmbeddable?.state === \"active\";\n          const isHovered =\n            this.state.activeEmbeddable?.element === el &&\n            this.state.activeEmbeddable?.state === \"hover\";\n\n          return (\n            <div\n              key={el.id}\n              className={clsx(\"excalidraw__embeddable-container\", {\n                \"is-hovered\": isHovered,\n              })}\n              style={{\n                transform: isVisible\n                  ? `translate(${x - this.state.offsetLeft}px, ${\n                      y - this.state.offsetTop\n                    }px) scale(${scale})`\n                  : \"none\",\n                display: isVisible ? \"block\" : \"none\",\n                opacity: getRenderOpacity(\n                  el,\n                  getContainingFrame(el, this.scene.getNonDeletedElementsMap()),\n                  this.elementsPendingErasure,\n                  null,\n                  this.state.openDialog?.name === \"elementLinkSelector\"\n                    ? DEFAULT_REDUCED_GLOBAL_ALPHA\n                    : 1,\n                ),\n                [\"--embeddable-radius\" as string]: `${getCornerRadius(\n                  Math.min(el.width, el.height),\n                  el,\n                )}px`,\n              }}\n            >\n              <div\n                //this is a hack that addresses isse with embedded excalidraw.com embeddable\n                //https://github.com/excalidraw/excalidraw/pull/6691#issuecomment-1607383938\n                /*ref={(ref) => {\n                  if (!this.excalidrawContainerRef.current) {\n                    return;\n                  }\n                  const container = this.excalidrawContainerRef.current;\n                  const sh = container.scrollHeight;\n                  const ch = container.clientHeight;\n                  if (sh !== ch) {\n                    container.style.height = `${sh}px`;\n                    setTimeout(() => {\n                      container.style.height = `100%`;\n                    });\n                  }\n                }}*/\n                className=\"excalidraw__embeddable-container__inner\"\n                style={{\n                  width: isVisible ? `${el.width}px` : 0,\n                  height: isVisible ? `${el.height}px` : 0,\n                  transform: isVisible ? `rotate(${el.angle}rad)` : \"none\",\n                  pointerEvents: isActive\n                    ? POINTER_EVENTS.enabled\n                    : POINTER_EVENTS.disabled,\n                }}\n              >\n                {isHovered && (\n                  <div className=\"excalidraw__embeddable-hint\">\n                    {t(\"buttons.embeddableInteractionButton\")}\n                  </div>\n                )}\n                <div\n                  className=\"excalidraw__embeddable__outer\"\n                  style={{\n                    padding: `${el.strokeWidth}px`,\n                  }}\n                >\n                  {(isEmbeddableElement(el)\n                    ? this.props.renderEmbeddable?.(el, this.state)\n                    : null) ?? (\n                    <iframe\n                      ref={(ref) => this.cacheEmbeddableRef(el, ref)}\n                      className=\"excalidraw__embeddable\"\n                      srcDoc={\n                        src?.type === \"document\"\n                          ? src.srcdoc(this.state.theme)\n                          : undefined\n                      }\n                      src={\n                        src?.type !== \"document\" ? src?.link ?? \"\" : undefined\n                      }\n                      // https://stackoverflow.com/q/18470015\n                      scrolling=\"no\"\n                      referrerPolicy=\"no-referrer-when-downgrade\"\n                      title=\"Excalidraw Embedded Content\"\n                      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                      allowFullScreen={true}\n                      sandbox={`${\n                        src?.sandbox?.allowSameOrigin ? \"allow-same-origin\" : \"\"\n                      } allow-scripts allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation allow-downloads`}\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </>\n    );\n  }\n\n  private getFrameNameDOMId = (frameElement: ExcalidrawElement) => {\n    return `${this.id}-frame-name-${frameElement.id}`;\n  };\n\n  frameNameBoundsCache: FrameNameBoundsCache = {\n    get: (frameElement) => {\n      let bounds = this.frameNameBoundsCache._cache.get(frameElement.id);\n      if (\n        !bounds ||\n        bounds.zoom !== this.state.zoom.value ||\n        bounds.versionNonce !== frameElement.versionNonce\n      ) {\n        const frameNameDiv = document.getElementById(\n          this.getFrameNameDOMId(frameElement),\n        );\n\n        if (frameNameDiv) {\n          const box = frameNameDiv.getBoundingClientRect();\n          const boxSceneTopLeft = viewportCoordsToSceneCoords(\n            { clientX: box.x, clientY: box.y },\n            this.state,\n          );\n          const boxSceneBottomRight = viewportCoordsToSceneCoords(\n            { clientX: box.right, clientY: box.bottom },\n            this.state,\n          );\n\n          bounds = {\n            x: boxSceneTopLeft.x,\n            y: boxSceneTopLeft.y,\n            width: boxSceneBottomRight.x - boxSceneTopLeft.x,\n            height: boxSceneBottomRight.y - boxSceneTopLeft.y,\n            angle: 0,\n            zoom: this.state.zoom.value,\n            versionNonce: frameElement.versionNonce,\n          };\n\n          this.frameNameBoundsCache._cache.set(frameElement.id, bounds);\n\n          return bounds;\n        }\n        return null;\n      }\n\n      return bounds;\n    },\n    /**\n     * @private\n     */\n    _cache: new Map(),\n  };\n\n  private resetEditingFrame = (frame: ExcalidrawFrameLikeElement | null) => {\n    if (frame) {\n      mutateElement(frame, { name: frame.name?.trim() || null });\n    }\n    this.setState({ editingFrame: null });\n  };\n\n  private renderFrameNames = () => {\n    if (!this.state.frameRendering.enabled || !this.state.frameRendering.name) {\n      if (this.state.editingFrame) {\n        this.resetEditingFrame(null);\n      }\n      return null;\n    }\n\n    const isDarkTheme = this.state.theme === THEME.DARK;\n\n    return this.scene.getNonDeletedFramesLikes().map((f) => {\n      if (\n        !isElementInViewport(\n          f,\n          this.canvas.width / window.devicePixelRatio,\n          this.canvas.height / window.devicePixelRatio,\n          {\n            offsetLeft: this.state.offsetLeft,\n            offsetTop: this.state.offsetTop,\n            scrollX: this.state.scrollX,\n            scrollY: this.state.scrollY,\n            zoom: this.state.zoom,\n          },\n          this.scene.getNonDeletedElementsMap(),\n        )\n      ) {\n        if (this.state.editingFrame === f.id) {\n          this.resetEditingFrame(f);\n        }\n        // if frame not visible, don't render its name\n        return null;\n      }\n\n      const { x: x1, y: y1 } = sceneCoordsToViewportCoords(\n        { sceneX: f.x, sceneY: f.y },\n        this.state,\n      );\n\n      const FRAME_NAME_EDIT_PADDING = 6;\n\n      let frameNameJSX;\n\n      const frameName = getFrameLikeTitle(f);\n\n      if (f.id === this.state.editingFrame) {\n        const frameNameInEdit = frameName;\n\n        frameNameJSX = (\n          <input\n            autoFocus\n            value={frameNameInEdit}\n            onChange={(e) => {\n              mutateElement(f, {\n                name: e.target.value,\n              });\n            }}\n            onFocus={(e) => e.target.select()}\n            onBlur={() => this.resetEditingFrame(f)}\n            onKeyDown={(event) => {\n              // for some inexplicable reason, `onBlur` triggered on ESC\n              // does not reset `state.editingFrame` despite being called,\n              // and we need to reset it here as well\n              if (event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) {\n                this.resetEditingFrame(f);\n              }\n            }}\n            style={{\n              background: this.state.viewBackgroundColor,\n              filter: isDarkTheme ? THEME_FILTER : \"none\",\n              zIndex: 2,\n              border: \"none\",\n              display: \"block\",\n              padding: `${FRAME_NAME_EDIT_PADDING}px`,\n              borderRadius: 4,\n              boxShadow: \"inset 0 0 0 1px var(--color-primary)\",\n              fontFamily: \"Assistant\",\n              fontSize: \"14px\",\n              transform: `translate(-${FRAME_NAME_EDIT_PADDING}px, ${FRAME_NAME_EDIT_PADDING}px)`,\n              color: \"var(--color-gray-80)\",\n              overflow: \"hidden\",\n              maxWidth: `${\n                document.body.clientWidth - x1 - FRAME_NAME_EDIT_PADDING\n              }px`,\n            }}\n            size={frameNameInEdit.length + 1 || 1}\n            dir=\"auto\"\n            autoComplete=\"off\"\n            autoCapitalize=\"off\"\n            autoCorrect=\"off\"\n          />\n        );\n      } else {\n        frameNameJSX = frameName;\n      }\n\n      return (\n        <div\n          id={this.getFrameNameDOMId(f)}\n          key={f.id}\n          style={{\n            position: \"absolute\",\n            // Positioning from bottom so that we don't to either\n            // calculate text height or adjust using transform (which)\n            // messes up input position when editing the frame name.\n            // This makes the positioning deterministic and we can calculate\n            // the same position when rendering to canvas / svg.\n            bottom: `${\n              this.state.height +\n              FRAME_STYLE.nameOffsetY -\n              y1 +\n              this.state.offsetTop\n            }px`,\n            left: `${x1 - this.state.offsetLeft}px`,\n            zIndex: 2,\n            fontSize: FRAME_STYLE.nameFontSize,\n            color: isDarkTheme\n              ? FRAME_STYLE.nameColorDarkTheme\n              : FRAME_STYLE.nameColorLightTheme,\n            lineHeight: FRAME_STYLE.nameLineHeight,\n            width: \"max-content\",\n            maxWidth: `${f.width}px`,\n            overflow: f.id === this.state.editingFrame ? \"visible\" : \"hidden\",\n            whiteSpace: \"nowrap\",\n            textOverflow: \"ellipsis\",\n            cursor: CURSOR_TYPE.MOVE,\n            pointerEvents: this.state.viewModeEnabled\n              ? POINTER_EVENTS.disabled\n              : POINTER_EVENTS.enabled,\n          }}\n          onPointerDown={(event) => this.handleCanvasPointerDown(event)}\n          onWheel={(event) => this.handleWheel(event)}\n          onContextMenu={this.handleCanvasContextMenu}\n          onDoubleClick={() => {\n            this.setState({\n              editingFrame: f.id,\n            });\n          }}\n        >\n          {frameNameJSX}\n        </div>\n      );\n    });\n  };\n\n  private toggleOverscrollBehavior(event: React.PointerEvent) {\n    // when pointer inside editor, disable overscroll behavior to prevent\n    // panning to trigger history back/forward on MacOS Chrome\n    document.documentElement.style.overscrollBehaviorX =\n      event.type === \"pointerenter\" ? \"none\" : \"auto\";\n  }\n\n  public render() {\n    const selectedElements = this.scene.getSelectedElements(this.state);\n    const { renderTopRightUI, renderCustomStats } = this.props;\n\n    const sceneNonce = this.scene.getSceneNonce();\n    const { elementsMap, visibleElements } =\n      this.renderer.getRenderableElements({\n        sceneNonce,\n        zoom: this.state.zoom,\n        offsetLeft: this.state.offsetLeft,\n        offsetTop: this.state.offsetTop,\n        scrollX: this.state.scrollX,\n        scrollY: this.state.scrollY,\n        height: this.state.height,\n        width: this.state.width,\n        editingTextElement: this.state.editingTextElement,\n        newElementId: this.state.newElement?.id,\n        pendingImageElementId: this.state.pendingImageElementId,\n      });\n    this.visibleElements = visibleElements;\n\n    const allElementsMap = this.scene.getNonDeletedElementsMap();\n\n    const shouldBlockPointerEvents =\n      // default back to `--ui-pointerEvents` flow if setPointerCapture\n      // not supported\n      \"setPointerCapture\" in HTMLElement.prototype\n        ? false\n        : this.state.selectionElement ||\n          this.state.newElement ||\n          this.state.selectedElementsAreBeingDragged ||\n          this.state.resizingElement ||\n          (this.state.activeTool.type === \"laser\" &&\n            // technically we can just test on this once we make it more safe\n            this.state.cursorButton === \"down\");\n\n    const firstSelectedElement = selectedElements[0];\n\n    return (\n      <div\n        className={clsx(\"excalidraw excalidraw-container\", {\n          \"excalidraw--view-mode\":\n            this.state.viewModeEnabled ||\n            this.state.openDialog?.name === \"elementLinkSelector\",\n          \"excalidraw--mobile\": this.device.editor.isMobile,\n        })}\n        style={{\n          [\"--ui-pointerEvents\" as any]: shouldBlockPointerEvents\n            ? POINTER_EVENTS.disabled\n            : POINTER_EVENTS.enabled,\n          [\"--right-sidebar-width\" as any]: \"302px\",\n        }}\n        ref={this.excalidrawContainerRef}\n        onDrop={this.handleAppOnDrop}\n        tabIndex={0}\n        onKeyDown={\n          this.props.handleKeyboardGlobally ? undefined : this.onKeyDown\n        }\n        onPointerEnter={this.toggleOverscrollBehavior}\n        onPointerLeave={this.toggleOverscrollBehavior}\n      >\n        <AppContext.Provider value={this}>\n          <AppPropsContext.Provider value={this.props}>\n            <ExcalidrawContainerContext.Provider\n              value={this.excalidrawContainerValue}\n            >\n              <DeviceContext.Provider value={this.device}>\n                <ExcalidrawSetAppStateContext.Provider value={this.setAppState}>\n                  <ExcalidrawAppStateContext.Provider value={this.state}>\n                    <ExcalidrawElementsContext.Provider\n                      value={this.scene.getNonDeletedElements()}\n                    >\n                      <ExcalidrawActionManagerContext.Provider\n                        value={this.actionManager}\n                      >\n                        <LayerUI\n                          canvas={this.canvas}\n                          appState={this.state}\n                          files={this.files}\n                          setAppState={this.setAppState}\n                          actionManager={this.actionManager}\n                          elements={this.scene.getNonDeletedElements()}\n                          onLockToggle={this.toggleLock}\n                          onPenModeToggle={this.togglePenMode}\n                          onHandToolToggle={this.onHandToolToggle}\n                          langCode={getLanguage().code}\n                          renderTopRightUI={renderTopRightUI}\n                          renderCustomStats={renderCustomStats}\n                          showExitZenModeBtn={\n                            typeof this.props?.zenModeEnabled === \"undefined\" &&\n                            this.state.zenModeEnabled\n                          }\n                          UIOptions={this.props.UIOptions}\n                          onExportImage={this.onExportImage}\n                          renderWelcomeScreen={\n                            !this.state.isLoading &&\n                            this.state.showWelcomeScreen &&\n                            this.state.activeTool.type === \"selection\" &&\n                            !this.state.zenModeEnabled &&\n                            !this.scene.getElementsIncludingDeleted().length\n                          }\n                          app={this}\n                          isCollaborating={this.props.isCollaborating}\n                          generateLinkForSelection={\n                            this.props.generateLinkForSelection\n                          }\n                        >\n                          {this.props.children}\n                        </LayerUI>\n\n                        <div className=\"excalidraw-textEditorContainer\" />\n                        <div className=\"excalidraw-contextMenuContainer\" />\n                        <div className=\"excalidraw-eye-dropper-container\" />\n                        <SVGLayer\n                          trails={[this.laserTrails, this.eraserTrail]}\n                        />\n                        {selectedElements.length === 1 &&\n                          this.state.openDialog?.name !==\n                            \"elementLinkSelector\" &&\n                          this.state.showHyperlinkPopup && (\n                            <Hyperlink\n                              key={firstSelectedElement.id}\n                              element={firstSelectedElement}\n                              elementsMap={allElementsMap}\n                              setAppState={this.setAppState}\n                              onLinkOpen={this.props.onLinkOpen}\n                              setToast={this.setToast}\n                              updateEmbedValidationStatus={\n                                this.updateEmbedValidationStatus\n                              }\n                            />\n                          )}\n                        {this.props.aiEnabled !== false &&\n                          selectedElements.length === 1 &&\n                          isMagicFrameElement(firstSelectedElement) && (\n                            <ElementCanvasButtons\n                              element={firstSelectedElement}\n                              elementsMap={elementsMap}\n                            >\n                              <ElementCanvasButton\n                                title={t(\"labels.convertToCode\")}\n                                icon={MagicIcon}\n                                checked={false}\n                                onChange={() =>\n                                  this.onMagicFrameGenerate(\n                                    firstSelectedElement,\n                                    \"button\",\n                                  )\n                                }\n                              />\n                            </ElementCanvasButtons>\n                          )}\n                        {selectedElements.length === 1 &&\n                          isIframeElement(firstSelectedElement) &&\n                          firstSelectedElement.customData?.generationData\n                            ?.status === \"done\" && (\n                            <ElementCanvasButtons\n                              element={firstSelectedElement}\n                              elementsMap={elementsMap}\n                            >\n                              <ElementCanvasButton\n                                title={t(\"labels.copySource\")}\n                                icon={copyIcon}\n                                checked={false}\n                                onChange={() =>\n                                  this.onIframeSrcCopy(firstSelectedElement)\n                                }\n                              />\n                              <ElementCanvasButton\n                                title=\"Enter fullscreen\"\n                                icon={fullscreenIcon}\n                                checked={false}\n                                onChange={() => {\n                                  const iframe =\n                                    this.getHTMLIFrameElement(\n                                      firstSelectedElement,\n                                    );\n                                  if (iframe) {\n                                    try {\n                                      iframe.requestFullscreen();\n                                      this.setState({\n                                        activeEmbeddable: {\n                                          element: firstSelectedElement,\n                                          state: \"active\",\n                                        },\n                                        selectedElementIds: {\n                                          [firstSelectedElement.id]: true,\n                                        },\n                                        newElement: null,\n                                        selectionElement: null,\n                                      });\n                                    } catch (err: any) {\n                                      console.warn(err);\n                                      this.setState({\n                                        errorMessage:\n                                          \"Couldn't enter fullscreen\",\n                                      });\n                                    }\n                                  }\n                                }}\n                              />\n                            </ElementCanvasButtons>\n                          )}\n                        {this.state.toast !== null && (\n                          <Toast\n                            message={this.state.toast.message}\n                            onClose={() => this.setToast(null)}\n                            duration={this.state.toast.duration}\n                            closable={this.state.toast.closable}\n                          />\n                        )}\n                        {this.state.contextMenu && (\n                          <ContextMenu\n                            items={this.state.contextMenu.items}\n                            top={this.state.contextMenu.top}\n                            left={this.state.contextMenu.left}\n                            actionManager={this.actionManager}\n                            onClose={(callback) => {\n                              this.setState({ contextMenu: null }, () => {\n                                this.focusContainer();\n                                callback?.();\n                              });\n                            }}\n                          />\n                        )}\n                        <StaticCanvas\n                          canvas={this.canvas}\n                          rc={this.rc}\n                          elementsMap={elementsMap}\n                          allElementsMap={allElementsMap}\n                          visibleElements={visibleElements}\n                          sceneNonce={sceneNonce}\n                          selectionNonce={\n                            this.state.selectionElement?.versionNonce\n                          }\n                          scale={window.devicePixelRatio}\n                          appState={this.state}\n                          renderConfig={{\n                            imageCache: this.imageCache,\n                            isExporting: false,\n                            renderGrid: isGridModeEnabled(this),\n                            canvasBackgroundColor:\n                              this.state.viewBackgroundColor,\n                            embedsValidationStatus: this.embedsValidationStatus,\n                            elementsPendingErasure: this.elementsPendingErasure,\n                            pendingFlowchartNodes:\n                              this.flowChartCreator.pendingNodes,\n                          }}\n                        />\n                        {this.state.newElement && (\n                          <NewElementCanvas\n                            appState={this.state}\n                            scale={window.devicePixelRatio}\n                            rc={this.rc}\n                            elementsMap={elementsMap}\n                            allElementsMap={allElementsMap}\n                            renderConfig={{\n                              imageCache: this.imageCache,\n                              isExporting: false,\n                              renderGrid: false,\n                              canvasBackgroundColor:\n                                this.state.viewBackgroundColor,\n                              embedsValidationStatus:\n                                this.embedsValidationStatus,\n                              elementsPendingErasure:\n                                this.elementsPendingErasure,\n                              pendingFlowchartNodes: null,\n                            }}\n                          />\n                        )}\n                        <InteractiveCanvas\n                          containerRef={this.excalidrawContainerRef}\n                          canvas={this.interactiveCanvas}\n                          elementsMap={elementsMap}\n                          visibleElements={visibleElements}\n                          allElementsMap={allElementsMap}\n                          selectedElements={selectedElements}\n                          sceneNonce={sceneNonce}\n                          selectionNonce={\n                            this.state.selectionElement?.versionNonce\n                          }\n                          scale={window.devicePixelRatio}\n                          appState={this.state}\n                          device={this.device}\n                          renderInteractiveSceneCallback={\n                            this.renderInteractiveSceneCallback\n                          }\n                          handleCanvasRef={this.handleInteractiveCanvasRef}\n                          onContextMenu={this.handleCanvasContextMenu}\n                          onPointerMove={this.handleCanvasPointerMove}\n                          onPointerUp={this.handleCanvasPointerUp}\n                          onPointerCancel={this.removePointer}\n                          onTouchMove={this.handleTouchMove}\n                          onPointerDown={this.handleCanvasPointerDown}\n                          onDoubleClick={this.handleCanvasDoubleClick}\n                        />\n                        {this.state.userToFollow && (\n                          <FollowMode\n                            width={this.state.width}\n                            height={this.state.height}\n                            userToFollow={this.state.userToFollow}\n                            onDisconnect={this.maybeUnfollowRemoteUser}\n                          />\n                        )}\n                        {this.renderFrameNames()}\n                      </ExcalidrawActionManagerContext.Provider>\n                      {this.renderEmbeddables()}\n                    </ExcalidrawElementsContext.Provider>\n                  </ExcalidrawAppStateContext.Provider>\n                </ExcalidrawSetAppStateContext.Provider>\n              </DeviceContext.Provider>\n            </ExcalidrawContainerContext.Provider>\n          </AppPropsContext.Provider>\n        </AppContext.Provider>\n      </div>\n    );\n  }\n\n  public focusContainer: AppClassProperties[\"focusContainer\"] = () => {\n    this.excalidrawContainerRef.current?.focus();\n  };\n\n  public getSceneElementsIncludingDeleted = () => {\n    return this.scene.getElementsIncludingDeleted();\n  };\n\n  public getSceneElements = () => {\n    return this.scene.getNonDeletedElements();\n  };\n\n  public onInsertElements = (elements: readonly ExcalidrawElement[]) => {\n    this.addElementsFromPasteOrLibrary({\n      elements,\n      position: \"center\",\n      files: null,\n    });\n  };\n\n  public onExportImage = async (\n    type: keyof typeof EXPORT_IMAGE_TYPES,\n    elements: ExportedElements,\n    opts: { exportingFrame: ExcalidrawFrameLikeElement | null },\n  ) => {\n    trackEvent(\"export\", type, \"ui\");\n    const fileHandle = await exportCanvas(\n      type,\n      elements,\n      this.state,\n      this.files,\n      {\n        exportBackground: this.state.exportBackground,\n        name: this.getName(),\n        viewBackgroundColor: this.state.viewBackgroundColor,\n        exportingFrame: opts.exportingFrame,\n      },\n    )\n      .catch(muteFSAbortError)\n      .catch((error) => {\n        console.error(error);\n        this.setState({ errorMessage: error.message });\n      });\n\n    if (\n      this.state.exportEmbedScene &&\n      fileHandle &&\n      isImageFileHandle(fileHandle)\n    ) {\n      this.setState({ fileHandle });\n    }\n  };\n\n  private magicGenerations = new Map<\n    ExcalidrawIframeElement[\"id\"],\n    MagicGenerationData\n  >();\n\n  private updateMagicGeneration = ({\n    frameElement,\n    data,\n  }: {\n    frameElement: ExcalidrawIframeElement;\n    data: MagicGenerationData;\n  }) => {\n    if (data.status === \"pending\") {\n      // We don't wanna persist pending state to storage. It should be in-app\n      // state only.\n      // Thus reset so that we prefer local cache (if there was some\n      // generationData set previously)\n      mutateElement(\n        frameElement,\n        { customData: { generationData: undefined } },\n        false,\n      );\n    } else {\n      mutateElement(\n        frameElement,\n        { customData: { generationData: data } },\n        false,\n      );\n    }\n    this.magicGenerations.set(frameElement.id, data);\n    this.triggerRender();\n  };\n\n  public plugins: {\n    diagramToCode?: {\n      generate: GenerateDiagramToCode;\n    };\n  } = {};\n\n  public setPlugins(plugins: Partial<App[\"plugins\"]>) {\n    Object.assign(this.plugins, plugins);\n  }\n\n  private async onMagicFrameGenerate(\n    magicFrame: ExcalidrawMagicFrameElement,\n    source: \"button\" | \"upstream\",\n  ) {\n    const generateDiagramToCode = this.plugins.diagramToCode?.generate;\n\n    if (!generateDiagramToCode) {\n      this.setState({\n        errorMessage: \"No diagram to code plugin found\",\n      });\n      return;\n    }\n\n    const magicFrameChildren = getElementsOverlappingFrame(\n      this.scene.getNonDeletedElements(),\n      magicFrame,\n    ).filter((el) => !isMagicFrameElement(el));\n\n    if (!magicFrameChildren.length) {\n      if (source === \"button\") {\n        this.setState({ errorMessage: \"Cannot generate from an empty frame\" });\n        trackEvent(\"ai\", \"generate (no-children)\", \"d2c\");\n      } else {\n        this.setActiveTool({ type: \"magicframe\" });\n      }\n      return;\n    }\n\n    const frameElement = this.insertIframeElement({\n      sceneX: magicFrame.x + magicFrame.width + 30,\n      sceneY: magicFrame.y,\n      width: magicFrame.width,\n      height: magicFrame.height,\n    });\n\n    if (!frameElement) {\n      return;\n    }\n\n    this.updateMagicGeneration({\n      frameElement,\n      data: { status: \"pending\" },\n    });\n\n    this.setState({\n      selectedElementIds: { [frameElement.id]: true },\n    });\n\n    trackEvent(\"ai\", \"generate (start)\", \"d2c\");\n    try {\n      const { html } = await generateDiagramToCode({\n        frame: magicFrame,\n        children: magicFrameChildren,\n      });\n\n      trackEvent(\"ai\", \"generate (success)\", \"d2c\");\n\n      if (!html.trim()) {\n        this.updateMagicGeneration({\n          frameElement,\n          data: {\n            status: \"error\",\n            code: \"ERR_OAI\",\n            message: \"Nothing genereated :(\",\n          },\n        });\n        return;\n      }\n\n      const parsedHtml =\n        html.includes(\"<!DOCTYPE html>\") && html.includes(\"</html>\")\n          ? html.slice(\n              html.indexOf(\"<!DOCTYPE html>\"),\n              html.indexOf(\"</html>\") + \"</html>\".length,\n            )\n          : html;\n\n      this.updateMagicGeneration({\n        frameElement,\n        data: { status: \"done\", html: parsedHtml },\n      });\n    } catch (error: any) {\n      trackEvent(\"ai\", \"generate (failed)\", \"d2c\");\n      this.updateMagicGeneration({\n        frameElement,\n        data: {\n          status: \"error\",\n          code: \"ERR_OAI\",\n          message: error.message || \"Unknown error during generation\",\n        },\n      });\n    }\n  }\n\n  private onIframeSrcCopy(element: ExcalidrawIframeElement) {\n    if (element.customData?.generationData?.status === \"done\") {\n      copyTextToSystemClipboard(element.customData.generationData.html);\n      this.setToast({\n        message: \"copied to clipboard\",\n        closable: false,\n        duration: 1500,\n      });\n    }\n  }\n\n  public onMagicframeToolSelect = () => {\n    const selectedElements = this.scene.getSelectedElements({\n      selectedElementIds: this.state.selectedElementIds,\n    });\n\n    if (selectedElements.length === 0) {\n      this.setActiveTool({ type: TOOL_TYPE.magicframe });\n      trackEvent(\"ai\", \"tool-select (empty-selection)\", \"d2c\");\n    } else {\n      const selectedMagicFrame: ExcalidrawMagicFrameElement | false =\n        selectedElements.length === 1 &&\n        isMagicFrameElement(selectedElements[0]) &&\n        selectedElements[0];\n\n      // case: user selected elements containing frame-like(s) or are frame\n      // members, we don't want to wrap into another magicframe\n      // (unless the only selected element is a magic frame which we reuse)\n      if (\n        !selectedMagicFrame &&\n        selectedElements.some((el) => isFrameLikeElement(el) || el.frameId)\n      ) {\n        this.setActiveTool({ type: TOOL_TYPE.magicframe });\n        return;\n      }\n\n      trackEvent(\"ai\", \"tool-select (existing selection)\", \"d2c\");\n\n      let frame: ExcalidrawMagicFrameElement;\n      if (selectedMagicFrame) {\n        // a single magicframe already selected -> use it\n        frame = selectedMagicFrame;\n      } else {\n        // selected elements aren't wrapped in magic frame yet -> wrap now\n\n        const [minX, minY, maxX, maxY] = getCommonBounds(selectedElements);\n        const padding = 50;\n\n        frame = newMagicFrameElement({\n          ...FRAME_STYLE,\n          x: minX - padding,\n          y: minY - padding,\n          width: maxX - minX + padding * 2,\n          height: maxY - minY + padding * 2,\n          opacity: 100,\n          locked: false,\n        });\n\n        this.scene.insertElement(frame);\n\n        for (const child of selectedElements) {\n          mutateElement(child, { frameId: frame.id });\n        }\n\n        this.setState({\n          selectedElementIds: { [frame.id]: true },\n        });\n      }\n\n      this.onMagicFrameGenerate(frame, \"upstream\");\n    }\n  };\n\n  private openEyeDropper = ({ type }: { type: \"stroke\" | \"background\" }) => {\n    editorJotaiStore.set(activeEyeDropperAtom, {\n      swapPreviewOnAlt: true,\n      colorPickerType:\n        type === \"stroke\" ? \"elementStroke\" : \"elementBackground\",\n      onSelect: (color, event) => {\n        const shouldUpdateStrokeColor =\n          (type === \"background\" && event.altKey) ||\n          (type === \"stroke\" && !event.altKey);\n        const selectedElements = this.scene.getSelectedElements(this.state);\n        if (\n          !selectedElements.length ||\n          this.state.activeTool.type !== \"selection\"\n        ) {\n          if (shouldUpdateStrokeColor) {\n            this.syncActionResult({\n              appState: { ...this.state, currentItemStrokeColor: color },\n              captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n            });\n          } else {\n            this.syncActionResult({\n              appState: { ...this.state, currentItemBackgroundColor: color },\n              captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n            });\n          }\n        } else {\n          this.updateScene({\n            elements: this.scene.getElementsIncludingDeleted().map((el) => {\n              if (this.state.selectedElementIds[el.id]) {\n                return newElementWith(el, {\n                  [shouldUpdateStrokeColor ? \"strokeColor\" : \"backgroundColor\"]:\n                    color,\n                });\n              }\n              return el;\n            }),\n            captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n          });\n        }\n      },\n      keepOpenOnAlt: false,\n    });\n  };\n\n  public dismissLinearEditor = () => {\n    setTimeout(() => {\n      this.setState({\n        editingLinearElement: null,\n      });\n    });\n  };\n\n  public syncActionResult = withBatchedUpdates((actionResult: ActionResult) => {\n    if (this.unmounted || actionResult === false) {\n      return;\n    }\n\n    if (actionResult.captureUpdate === CaptureUpdateAction.NEVER) {\n      this.store.shouldUpdateSnapshot();\n    } else if (actionResult.captureUpdate === CaptureUpdateAction.IMMEDIATELY) {\n      this.store.shouldCaptureIncrement();\n    }\n\n    let didUpdate = false;\n\n    let editingTextElement: AppState[\"editingTextElement\"] | null = null;\n    if (actionResult.elements) {\n      this.scene.replaceAllElements(actionResult.elements);\n      didUpdate = true;\n    }\n\n    if (actionResult.files) {\n      this.addMissingFiles(actionResult.files, actionResult.replaceFiles);\n      this.addNewImagesToImageCache();\n    }\n\n    if (actionResult.appState || editingTextElement || this.state.contextMenu) {\n      let viewModeEnabled = actionResult?.appState?.viewModeEnabled || false;\n      let zenModeEnabled = actionResult?.appState?.zenModeEnabled || false;\n      const theme =\n        actionResult?.appState?.theme || this.props.theme || THEME.LIGHT;\n      const name = actionResult?.appState?.name ?? this.state.name;\n      const errorMessage =\n        actionResult?.appState?.errorMessage ?? this.state.errorMessage;\n      if (typeof this.props.viewModeEnabled !== \"undefined\") {\n        viewModeEnabled = this.props.viewModeEnabled;\n      }\n\n      if (typeof this.props.zenModeEnabled !== \"undefined\") {\n        zenModeEnabled = this.props.zenModeEnabled;\n      }\n\n      editingTextElement = actionResult.appState?.editingTextElement || null;\n\n      // make sure editingTextElement points to latest element reference\n      if (actionResult.elements && editingTextElement) {\n        actionResult.elements.forEach((element) => {\n          if (\n            editingTextElement?.id === element.id &&\n            editingTextElement !== element &&\n            isNonDeletedElement(element) &&\n            isTextElement(element)\n          ) {\n            editingTextElement = element;\n          }\n        });\n      }\n\n      if (editingTextElement?.isDeleted) {\n        editingTextElement = null;\n      }\n\n      this.setState((prevAppState) => {\n        const actionAppState = actionResult.appState || {};\n\n        return {\n          ...prevAppState,\n          ...actionAppState,\n          // NOTE this will prevent opening context menu using an action\n          // or programmatically from the host, so it will need to be\n          // rewritten later\n          contextMenu: null,\n          editingTextElement,\n          viewModeEnabled,\n          zenModeEnabled,\n          theme,\n          name,\n          errorMessage,\n        };\n      });\n\n      didUpdate = true;\n    }\n\n    if (\n      !didUpdate &&\n      actionResult.captureUpdate !== CaptureUpdateAction.EVENTUALLY\n    ) {\n      this.scene.triggerUpdate();\n    }\n  });\n\n  // Lifecycle\n\n  private onBlur = withBatchedUpdates(() => {\n    isHoldingSpace = false;\n    this.setState({ isBindingEnabled: true });\n  });\n\n  private onUnload = () => {\n    this.onBlur();\n  };\n\n  private disableEvent: EventListener = (event) => {\n    event.preventDefault();\n  };\n\n  private resetHistory = () => {\n    this.history.clear();\n  };\n\n  private resetStore = () => {\n    this.store.clear();\n  };\n\n  /**\n   * Resets scene & history.\n   * ! Do not use to clear scene user action !\n   */\n  private resetScene = withBatchedUpdates(\n    (opts?: { resetLoadingState: boolean }) => {\n      this.scene.replaceAllElements([]);\n      this.setState((state) => ({\n        ...getDefaultAppState(),\n        isLoading: opts?.resetLoadingState ? false : state.isLoading,\n        theme: this.state.theme,\n      }));\n      this.resetStore();\n      this.resetHistory();\n    },\n  );\n\n  private initializeScene = async () => {\n    if (\"launchQueue\" in window && \"LaunchParams\" in window) {\n      (window as any).launchQueue.setConsumer(\n        async (launchParams: { files: any[] }) => {\n          if (!launchParams.files.length) {\n            return;\n          }\n          const fileHandle = launchParams.files[0];\n          const blob: Blob = await fileHandle.getFile();\n          this.loadFileToCanvas(\n            new File([blob], blob.name || \"\", { type: blob.type }),\n            fileHandle,\n          );\n        },\n      );\n    }\n\n    if (this.props.theme) {\n      this.setState({ theme: this.props.theme });\n    }\n    if (!this.state.isLoading) {\n      this.setState({ isLoading: true });\n    }\n    let initialData = null;\n    try {\n      if (typeof this.props.initialData === \"function\") {\n        initialData = (await this.props.initialData()) || null;\n      } else {\n        initialData = (await this.props.initialData) || null;\n      }\n      if (initialData?.libraryItems) {\n        this.library\n          .updateLibrary({\n            libraryItems: initialData.libraryItems,\n            merge: true,\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n    } catch (error: any) {\n      console.error(error);\n      initialData = {\n        appState: {\n          errorMessage:\n            error.message ||\n            \"Encountered an error during importing or restoring scene data\",\n        },\n      };\n    }\n    const scene = restore(initialData, null, null, { repairBindings: true });\n    scene.appState = {\n      ...scene.appState,\n      theme: this.props.theme || scene.appState.theme,\n      // we're falling back to current (pre-init) state when deciding\n      // whether to open the library, to handle a case where we\n      // update the state outside of initialData (e.g. when loading the app\n      // with a library install link, which should auto-open the library)\n      openSidebar: scene.appState?.openSidebar || this.state.openSidebar,\n      activeTool:\n        scene.appState.activeTool.type === \"image\"\n          ? { ...scene.appState.activeTool, type: \"selection\" }\n          : scene.appState.activeTool,\n      isLoading: false,\n      toast: this.state.toast,\n    };\n    if (initialData?.scrollToContent) {\n      scene.appState = {\n        ...scene.appState,\n        ...calculateScrollCenter(scene.elements, {\n          ...scene.appState,\n          width: this.state.width,\n          height: this.state.height,\n          offsetTop: this.state.offsetTop,\n          offsetLeft: this.state.offsetLeft,\n        }),\n      };\n    }\n\n    this.resetStore();\n    this.resetHistory();\n    this.syncActionResult({\n      ...scene,\n      captureUpdate: CaptureUpdateAction.NEVER,\n    });\n\n    // clear the shape and image cache so that any images in initialData\n    // can be loaded fresh\n    this.clearImageShapeCache();\n\n    // manually loading the font faces seems faster even in browsers that do fire the loadingdone event\n    this.fonts.loadSceneFonts().then((fontFaces) => {\n      this.fonts.onLoaded(fontFaces);\n    });\n\n    if (isElementLink(window.location.href)) {\n      this.scrollToContent(window.location.href, { animate: false });\n    }\n  };\n\n  private isMobileBreakpoint = (width: number, height: number) => {\n    return (\n      width < MQ_MAX_WIDTH_PORTRAIT ||\n      (height < MQ_MAX_HEIGHT_LANDSCAPE && width < MQ_MAX_WIDTH_LANDSCAPE)\n    );\n  };\n\n  private refreshViewportBreakpoints = () => {\n    const container = this.excalidrawContainerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { clientWidth: viewportWidth, clientHeight: viewportHeight } =\n      document.body;\n\n    const prevViewportState = this.device.viewport;\n\n    const nextViewportState = updateObject(prevViewportState, {\n      isLandscape: viewportWidth > viewportHeight,\n      isMobile: this.isMobileBreakpoint(viewportWidth, viewportHeight),\n    });\n\n    if (prevViewportState !== nextViewportState) {\n      this.device = { ...this.device, viewport: nextViewportState };\n      return true;\n    }\n    return false;\n  };\n\n  private refreshEditorBreakpoints = () => {\n    const container = this.excalidrawContainerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { width: editorWidth, height: editorHeight } =\n      container.getBoundingClientRect();\n\n    const sidebarBreakpoint =\n      this.props.UIOptions.dockedSidebarBreakpoint != null\n        ? this.props.UIOptions.dockedSidebarBreakpoint\n        : MQ_RIGHT_SIDEBAR_MIN_WIDTH;\n\n    const prevEditorState = this.device.editor;\n\n    const nextEditorState = updateObject(prevEditorState, {\n      isMobile: this.isMobileBreakpoint(editorWidth, editorHeight),\n      canFitSidebar: editorWidth > sidebarBreakpoint,\n    });\n\n    if (prevEditorState !== nextEditorState) {\n      this.device = { ...this.device, editor: nextEditorState };\n      return true;\n    }\n    return false;\n  };\n\n  private clearImageShapeCache(filesMap?: BinaryFiles) {\n    const files = filesMap ?? this.files;\n    this.scene.getNonDeletedElements().forEach((element) => {\n      if (isInitializedImageElement(element) && files[element.fileId]) {\n        this.imageCache.delete(element.fileId);\n        ShapeCache.delete(element);\n      }\n    });\n  }\n\n  public async componentDidMount() {\n    this.unmounted = false;\n    this.excalidrawContainerValue.container =\n      this.excalidrawContainerRef.current;\n\n    if (import.meta.env.MODE === ENV.TEST || import.meta.env.DEV) {\n      const setState = this.setState.bind(this);\n      Object.defineProperties(window.h, {\n        state: {\n          configurable: true,\n          get: () => {\n            return this.state;\n          },\n        },\n        setState: {\n          configurable: true,\n          value: (...args: Parameters<typeof setState>) => {\n            return this.setState(...args);\n          },\n        },\n        app: {\n          configurable: true,\n          value: this,\n        },\n        history: {\n          configurable: true,\n          value: this.history,\n        },\n        store: {\n          configurable: true,\n          value: this.store,\n        },\n        fonts: {\n          configurable: true,\n          value: this.fonts,\n        },\n      });\n    }\n\n    this.store.onStoreIncrementEmitter.on((increment) => {\n      this.history.record(increment.elementsChange, increment.appStateChange);\n    });\n\n    this.scene.onUpdate(this.triggerRender);\n    this.addEventListeners();\n\n    if (this.props.autoFocus && this.excalidrawContainerRef.current) {\n      this.focusContainer();\n    }\n\n    if (\n      // bounding rects don't work in tests so updating\n      // the state on init would result in making the test enviro run\n      // in mobile breakpoint (0 width/height), making everything fail\n      !isTestEnv()\n    ) {\n      this.refreshViewportBreakpoints();\n      this.refreshEditorBreakpoints();\n    }\n\n    if (supportsResizeObserver && this.excalidrawContainerRef.current) {\n      this.resizeObserver = new ResizeObserver(() => {\n        this.refreshEditorBreakpoints();\n        this.updateDOMRect();\n      });\n      this.resizeObserver?.observe(this.excalidrawContainerRef.current);\n    }\n\n    const searchParams = new URLSearchParams(window.location.search.slice(1));\n\n    if (searchParams.has(\"web-share-target\")) {\n      // Obtain a file that was shared via the Web Share Target API.\n      this.restoreFileFromShare();\n    } else {\n      this.updateDOMRect(this.initializeScene);\n    }\n\n    // note that this check seems to always pass in localhost\n    if (isBrave() && !isMeasureTextSupported()) {\n      this.setState({\n        errorMessage: <BraveMeasureTextError />,\n      });\n    }\n  }\n\n  public componentWillUnmount() {\n    (window as any).launchQueue?.setConsumer(() => {});\n    this.renderer.destroy();\n    this.scene.destroy();\n    this.scene = new Scene();\n    this.fonts = new Fonts(this.scene);\n    this.renderer = new Renderer(this.scene);\n    this.files = {};\n    this.imageCache.clear();\n    this.resizeObserver?.disconnect();\n    this.unmounted = true;\n    this.removeEventListeners();\n    this.library.destroy();\n    this.laserTrails.stop();\n    this.eraserTrail.stop();\n    this.onChangeEmitter.clear();\n    this.store.onStoreIncrementEmitter.clear();\n    ShapeCache.destroy();\n    SnapCache.destroy();\n    clearTimeout(touchTimeout);\n    isSomeElementSelected.clearCache();\n    selectGroupsForSelectedElements.clearCache();\n    touchTimeout = 0;\n    document.documentElement.style.overscrollBehaviorX = \"\";\n  }\n\n  private onResize = withBatchedUpdates(() => {\n    this.scene\n      .getElementsIncludingDeleted()\n      .forEach((element) => ShapeCache.delete(element));\n    this.refreshViewportBreakpoints();\n    this.updateDOMRect();\n    if (!supportsResizeObserver) {\n      this.refreshEditorBreakpoints();\n    }\n    this.setState({});\n  });\n\n  /** generally invoked only if fullscreen was invoked programmatically */\n  private onFullscreenChange = () => {\n    if (\n      // points to the iframe element we fullscreened\n      !document.fullscreenElement &&\n      this.state.activeEmbeddable?.state === \"active\"\n    ) {\n      this.setState({\n        activeEmbeddable: null,\n      });\n    }\n  };\n\n  private removeEventListeners() {\n    this.onRemoveEventListenersEmitter.trigger();\n  }\n\n  private addEventListeners() {\n    // remove first as we can add event listeners multiple times\n    this.removeEventListeners();\n\n    // -------------------------------------------------------------------------\n    //                        view+edit mode listeners\n    // -------------------------------------------------------------------------\n\n    if (this.props.handleKeyboardGlobally) {\n      this.onRemoveEventListenersEmitter.once(\n        addEventListener(document, EVENT.KEYDOWN, this.onKeyDown, false),\n      );\n    }\n\n    this.onRemoveEventListenersEmitter.once(\n      addEventListener(\n        this.excalidrawContainerRef.current,\n        EVENT.WHEEL,\n        this.handleWheel,\n        { passive: false },\n      ),\n      addEventListener(window, EVENT.MESSAGE, this.onWindowMessage, false),\n      addEventListener(document, EVENT.POINTER_UP, this.removePointer, {\n        passive: false,\n      }), // #3553\n      addEventListener(document, EVENT.COPY, this.onCopy, { passive: false }),\n      addEventListener(document, EVENT.KEYUP, this.onKeyUp, { passive: true }),\n      addEventListener(\n        document,\n        EVENT.POINTER_MOVE,\n        this.updateCurrentCursorPosition,\n        { passive: false },\n      ),\n      // rerender text elements on font load to fix #637 && #1553\n      addEventListener(\n        document.fonts,\n        \"loadingdone\",\n        (event) => {\n          const fontFaces = (event as FontFaceSetLoadEvent).fontfaces;\n          this.fonts.onLoaded(fontFaces);\n        },\n        { passive: false },\n      ),\n      // Safari-only desktop pinch zoom\n      addEventListener(\n        document,\n        EVENT.GESTURE_START,\n        this.onGestureStart as any,\n        false,\n      ),\n      addEventListener(\n        document,\n        EVENT.GESTURE_CHANGE,\n        this.onGestureChange as any,\n        false,\n      ),\n      addEventListener(\n        document,\n        EVENT.GESTURE_END,\n        this.onGestureEnd as any,\n        false,\n      ),\n      addEventListener(\n        window,\n        EVENT.FOCUS,\n        () => {\n          this.maybeCleanupAfterMissingPointerUp(null);\n          // browsers (chrome?) tend to free up memory a lot, which results\n          // in canvas context being cleared. Thus re-render on focus.\n          this.triggerRender(true);\n        },\n        { passive: false },\n      ),\n    );\n\n    if (this.state.viewModeEnabled) {\n      return;\n    }\n\n    // -------------------------------------------------------------------------\n    //                        edit-mode listeners only\n    // -------------------------------------------------------------------------\n\n    this.onRemoveEventListenersEmitter.once(\n      addEventListener(\n        document,\n        EVENT.FULLSCREENCHANGE,\n        this.onFullscreenChange,\n        { passive: false },\n      ),\n      addEventListener(document, EVENT.PASTE, this.pasteFromClipboard, {\n        passive: false,\n      }),\n      addEventListener(document, EVENT.CUT, this.onCut, { passive: false }),\n      addEventListener(window, EVENT.RESIZE, this.onResize, false),\n      addEventListener(window, EVENT.UNLOAD, this.onUnload, false),\n      addEventListener(window, EVENT.BLUR, this.onBlur, false),\n      addEventListener(\n        this.excalidrawContainerRef.current,\n        EVENT.WHEEL,\n        this.handleWheel,\n        { passive: false },\n      ),\n      addEventListener(\n        this.excalidrawContainerRef.current,\n        EVENT.DRAG_OVER,\n        this.disableEvent,\n        false,\n      ),\n      addEventListener(\n        this.excalidrawContainerRef.current,\n        EVENT.DROP,\n        this.disableEvent,\n        false,\n      ),\n    );\n\n    if (this.props.detectScroll) {\n      this.onRemoveEventListenersEmitter.once(\n        addEventListener(\n          getNearestScrollableContainer(this.excalidrawContainerRef.current!),\n          EVENT.SCROLL,\n          this.onScroll,\n          { passive: false },\n        ),\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps: AppProps, prevState: AppState) {\n    this.updateEmbeddables();\n    const elements = this.scene.getElementsIncludingDeleted();\n    const elementsMap = this.scene.getElementsMapIncludingDeleted();\n    const nonDeletedElementsMap = this.scene.getNonDeletedElementsMap();\n\n    if (!this.state.showWelcomeScreen && !elements.length) {\n      this.setState({ showWelcomeScreen: true });\n    }\n\n    if (\n      prevProps.UIOptions.dockedSidebarBreakpoint !==\n      this.props.UIOptions.dockedSidebarBreakpoint\n    ) {\n      this.refreshEditorBreakpoints();\n    }\n\n    const hasFollowedPersonLeft =\n      prevState.userToFollow &&\n      !this.state.collaborators.has(prevState.userToFollow.socketId);\n\n    if (hasFollowedPersonLeft) {\n      this.maybeUnfollowRemoteUser();\n    }\n\n    if (\n      prevState.zoom.value !== this.state.zoom.value ||\n      prevState.scrollX !== this.state.scrollX ||\n      prevState.scrollY !== this.state.scrollY\n    ) {\n      this.props?.onScrollChange?.(\n        this.state.scrollX,\n        this.state.scrollY,\n        this.state.zoom,\n      );\n      this.onScrollChangeEmitter.trigger(\n        this.state.scrollX,\n        this.state.scrollY,\n        this.state.zoom,\n      );\n    }\n\n    if (prevState.userToFollow !== this.state.userToFollow) {\n      if (prevState.userToFollow) {\n        this.onUserFollowEmitter.trigger({\n          userToFollow: prevState.userToFollow,\n          action: \"UNFOLLOW\",\n        });\n      }\n\n      if (this.state.userToFollow) {\n        this.onUserFollowEmitter.trigger({\n          userToFollow: this.state.userToFollow,\n          action: \"FOLLOW\",\n        });\n      }\n    }\n\n    if (\n      Object.keys(this.state.selectedElementIds).length &&\n      isEraserActive(this.state)\n    ) {\n      this.setState({\n        activeTool: updateActiveTool(this.state, { type: \"selection\" }),\n      });\n    }\n    if (\n      this.state.activeTool.type === \"eraser\" &&\n      prevState.theme !== this.state.theme\n    ) {\n      setEraserCursor(this.interactiveCanvas, this.state.theme);\n    }\n    // Hide hyperlink popup if shown when element type is not selection\n    if (\n      prevState.activeTool.type === \"selection\" &&\n      this.state.activeTool.type !== \"selection\" &&\n      this.state.showHyperlinkPopup\n    ) {\n      this.setState({ showHyperlinkPopup: false });\n    }\n    if (prevProps.langCode !== this.props.langCode) {\n      this.updateLanguage();\n    }\n\n    if (isEraserActive(prevState) && !isEraserActive(this.state)) {\n      this.eraserTrail.endPath();\n    }\n\n    if (prevProps.viewModeEnabled !== this.props.viewModeEnabled) {\n      this.setState({ viewModeEnabled: !!this.props.viewModeEnabled });\n    }\n\n    if (prevState.viewModeEnabled !== this.state.viewModeEnabled) {\n      this.addEventListeners();\n      this.deselectElements();\n    }\n\n    // cleanup\n    if (\n      (prevState.openDialog?.name === \"elementLinkSelector\" ||\n        this.state.openDialog?.name === \"elementLinkSelector\") &&\n      prevState.openDialog?.name !== this.state.openDialog?.name\n    ) {\n      this.deselectElements();\n      this.setState({\n        hoveredElementIds: {},\n      });\n    }\n\n    if (prevProps.zenModeEnabled !== this.props.zenModeEnabled) {\n      this.setState({ zenModeEnabled: !!this.props.zenModeEnabled });\n    }\n\n    if (prevProps.theme !== this.props.theme && this.props.theme) {\n      this.setState({ theme: this.props.theme });\n    }\n\n    this.excalidrawContainerRef.current?.classList.toggle(\n      \"theme--dark\",\n      this.state.theme === THEME.DARK,\n    );\n\n    if (\n      this.state.editingLinearElement &&\n      !this.state.selectedElementIds[this.state.editingLinearElement.elementId]\n    ) {\n      // defer so that the shouldCaptureIncrement flag isn't reset via current update\n      setTimeout(() => {\n        // execute only if the condition still holds when the deferred callback\n        // executes (it can be scheduled multiple times depending on how\n        // many times the component renders)\n        this.state.editingLinearElement &&\n          this.actionManager.executeAction(actionFinalize);\n      });\n    }\n\n    // failsafe in case the state is being updated in incorrect order resulting\n    // in the editingTextElement being now a deleted element\n    if (this.state.editingTextElement?.isDeleted) {\n      this.setState({ editingTextElement: null });\n    }\n\n    if (\n      this.state.selectedLinearElement &&\n      !this.state.selectedElementIds[this.state.selectedLinearElement.elementId]\n    ) {\n      // To make sure `selectedLinearElement` is in sync with `selectedElementIds`, however this shouldn't be needed once\n      // we have a single API to update `selectedElementIds`\n      this.setState({ selectedLinearElement: null });\n    }\n\n    const { multiElement } = prevState;\n    if (\n      prevState.activeTool !== this.state.activeTool &&\n      multiElement != null &&\n      isBindingEnabled(this.state) &&\n      isBindingElement(multiElement, false)\n    ) {\n      maybeBindLinearElement(\n        multiElement,\n        this.state,\n        tupleToCoors(\n          LinearElementEditor.getPointAtIndexGlobalCoordinates(\n            multiElement,\n            -1,\n            nonDeletedElementsMap,\n          ),\n        ),\n        this.scene.getNonDeletedElementsMap(),\n        this.scene.getNonDeletedElements(),\n      );\n    }\n\n    this.store.commit(elementsMap, this.state);\n\n    // Do not notify consumers if we're still loading the scene. Among other\n    // potential issues, this fixes a case where the tab isn't focused during\n    // init, which would trigger onChange with empty elements, which would then\n    // override whatever is in localStorage currently.\n    if (!this.state.isLoading) {\n      this.props.onChange?.(elements, this.state, this.files);\n      this.onChangeEmitter.trigger(elements, this.state, this.files);\n    }\n  }\n\n  private renderInteractiveSceneCallback = ({\n    atLeastOneVisibleElement,\n    scrollBars,\n    elementsMap,\n  }: RenderInteractiveSceneCallback) => {\n    if (scrollBars) {\n      currentScrollBars = scrollBars;\n    }\n    const scrolledOutside =\n      // hide when editing text\n      this.state.editingTextElement\n        ? false\n        : !atLeastOneVisibleElement && elementsMap.size > 0;\n    if (this.state.scrolledOutside !== scrolledOutside) {\n      this.setState({ scrolledOutside });\n    }\n\n    this.scheduleImageRefresh();\n  };\n\n  private onScroll = debounce(() => {\n    const { offsetTop, offsetLeft } = this.getCanvasOffsets();\n    this.setState((state) => {\n      if (state.offsetLeft === offsetLeft && state.offsetTop === offsetTop) {\n        return null;\n      }\n      return { offsetTop, offsetLeft };\n    });\n  }, SCROLL_TIMEOUT);\n\n  // Copy/paste\n\n  private onCut = withBatchedUpdates((event: ClipboardEvent) => {\n    const isExcalidrawActive = this.excalidrawContainerRef.current?.contains(\n      document.activeElement,\n    );\n    if (!isExcalidrawActive || isWritableElement(event.target)) {\n      return;\n    }\n    this.actionManager.executeAction(actionCut, \"keyboard\", event);\n    event.preventDefault();\n    event.stopPropagation();\n  });\n\n  private onCopy = withBatchedUpdates((event: ClipboardEvent) => {\n    const isExcalidrawActive = this.excalidrawContainerRef.current?.contains(\n      document.activeElement,\n    );\n    if (!isExcalidrawActive || isWritableElement(event.target)) {\n      return;\n    }\n    this.actionManager.executeAction(actionCopy, \"keyboard\", event);\n    event.preventDefault();\n    event.stopPropagation();\n  });\n\n  private static resetTapTwice() {\n    didTapTwice = false;\n  }\n\n  private onTouchStart = (event: TouchEvent) => {\n    // fix for Apple Pencil Scribble (do not prevent for other devices)\n    if (isIOS) {\n      event.preventDefault();\n    }\n\n    if (!didTapTwice) {\n      didTapTwice = true;\n      clearTimeout(tappedTwiceTimer);\n      tappedTwiceTimer = window.setTimeout(\n        App.resetTapTwice,\n        TAP_TWICE_TIMEOUT,\n      );\n      return;\n    }\n    // insert text only if we tapped twice with a single finger\n    // event.touches.length === 1 will also prevent inserting text when user's zooming\n    if (didTapTwice && event.touches.length === 1) {\n      const touch = event.touches[0];\n      // @ts-ignore\n      this.handleCanvasDoubleClick({\n        clientX: touch.clientX,\n        clientY: touch.clientY,\n      });\n      didTapTwice = false;\n      clearTimeout(tappedTwiceTimer);\n    }\n\n    if (event.touches.length === 2) {\n      this.setState({\n        selectedElementIds: makeNextSelectedElementIds({}, this.state),\n        activeEmbeddable: null,\n      });\n    }\n  };\n\n  private onTouchEnd = (event: TouchEvent) => {\n    this.resetContextMenuTimer();\n    if (event.touches.length > 0) {\n      this.setState({\n        previousSelectedElementIds: {},\n        selectedElementIds: makeNextSelectedElementIds(\n          this.state.previousSelectedElementIds,\n          this.state,\n        ),\n      });\n    } else {\n      gesture.pointers.clear();\n    }\n  };\n\n  public pasteFromClipboard = withBatchedUpdates(\n    async (event: ClipboardEvent) => {\n      const isPlainPaste = !!IS_PLAIN_PASTE;\n\n      // #686\n      const target = document.activeElement;\n      const isExcalidrawActive =\n        this.excalidrawContainerRef.current?.contains(target);\n      if (event && !isExcalidrawActive) {\n        return;\n      }\n\n      const elementUnderCursor = document.elementFromPoint(\n        this.lastViewportPosition.x,\n        this.lastViewportPosition.y,\n      );\n      if (\n        event &&\n        (!(elementUnderCursor instanceof HTMLCanvasElement) ||\n          isWritableElement(target))\n      ) {\n        return;\n      }\n\n      const { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(\n        {\n          clientX: this.lastViewportPosition.x,\n          clientY: this.lastViewportPosition.y,\n        },\n        this.state,\n      );\n\n      // must be called in the same frame (thus before any awaits) as the paste\n      // event else some browsers (FF...) will clear the clipboardData\n      // (something something security)\n      let file = event?.clipboardData?.files[0];\n      const data = await parseClipboard(event, isPlainPaste);\n      if (!file && !isPlainPaste) {\n        if (data.mixedContent) {\n          return this.addElementsFromMixedContentPaste(data.mixedContent, {\n            isPlainPaste,\n            sceneX,\n            sceneY,\n          });\n        } else if (data.text) {\n          const string = data.text.trim();\n          if (string.startsWith(\"<svg\") && string.endsWith(\"</svg>\")) {\n            // ignore SVG validation/normalization which will be done during image\n            // initialization\n            file = SVGStringToFile(string);\n          }\n        }\n      }\n\n      // prefer spreadsheet data over image file (MS Office/Libre Office)\n      if (isSupportedImageFile(file) && !data.spreadsheet) {\n        if (!this.isToolSupported(\"image\")) {\n          this.setState({ errorMessage: t(\"errors.imageToolNotSupported\") });\n          return;\n        }\n\n        const imageElement = this.createImageElement({ sceneX, sceneY });\n        this.insertImageElement(imageElement, file);\n        this.initializeImageDimensions(imageElement);\n        this.setState({\n          selectedElementIds: makeNextSelectedElementIds(\n            {\n              [imageElement.id]: true,\n            },\n            this.state,\n          ),\n        });\n\n        return;\n      }\n\n      if (this.props.onPaste) {\n        try {\n          if ((await this.props.onPaste(data, event)) === false) {\n            return;\n          }\n        } catch (error: any) {\n          console.error(error);\n        }\n      }\n\n      if (data.errorMessage) {\n        this.setState({ errorMessage: data.errorMessage });\n      } else if (data.spreadsheet && !isPlainPaste) {\n        this.setState({\n          pasteDialog: {\n            data: data.spreadsheet,\n            shown: true,\n          },\n        });\n      } else if (data.elements) {\n        const elements = (\n          data.programmaticAPI\n            ? convertToExcalidrawElements(\n                data.elements as ExcalidrawElementSkeleton[],\n              )\n            : data.elements\n        ) as readonly ExcalidrawElement[];\n        // TODO remove formatting from elements if isPlainPaste\n        this.addElementsFromPasteOrLibrary({\n          elements,\n          files: data.files || null,\n          position: \"cursor\",\n          retainSeed: isPlainPaste,\n        });\n      } else if (data.text) {\n        if (data.text && isMaybeMermaidDefinition(data.text)) {\n          const api = await import(\"@excalidraw/mermaid-to-excalidraw\");\n\n          try {\n            const { elements: skeletonElements, files } =\n              await api.parseMermaidToExcalidraw(data.text);\n\n            const elements = convertToExcalidrawElements(skeletonElements, {\n              regenerateIds: true,\n            });\n\n            this.addElementsFromPasteOrLibrary({\n              elements,\n              files,\n              position: \"cursor\",\n            });\n\n            return;\n          } catch (err: any) {\n            console.warn(\n              `parsing pasted text as mermaid definition failed: ${err.message}`,\n            );\n          }\n        }\n\n        const nonEmptyLines = normalizeEOL(data.text)\n          .split(/\\n+/)\n          .map((s) => s.trim())\n          .filter(Boolean);\n\n        const embbeddableUrls = nonEmptyLines\n          .map((str) => maybeParseEmbedSrc(str))\n          .filter((string) => {\n            return (\n              embeddableURLValidator(string, this.props.validateEmbeddable) &&\n              (/^(http|https):\\/\\/[^\\s/$.?#].[^\\s]*$/.test(string) ||\n                getEmbedLink(string)?.type === \"video\")\n            );\n          });\n\n        if (\n          !IS_PLAIN_PASTE &&\n          embbeddableUrls.length > 0 &&\n          // if there were non-embeddable text (lines) mixed in with embeddable\n          // urls, ignore and paste as text\n          embbeddableUrls.length === nonEmptyLines.length\n        ) {\n          const embeddables: NonDeleted<ExcalidrawEmbeddableElement>[] = [];\n          for (const url of embbeddableUrls) {\n            const prevEmbeddable: ExcalidrawEmbeddableElement | undefined =\n              embeddables[embeddables.length - 1];\n            const embeddable = this.insertEmbeddableElement({\n              sceneX: prevEmbeddable\n                ? prevEmbeddable.x + prevEmbeddable.width + 20\n                : sceneX,\n              sceneY,\n              link: normalizeLink(url),\n            });\n            if (embeddable) {\n              embeddables.push(embeddable);\n            }\n          }\n          if (embeddables.length) {\n            this.setState({\n              selectedElementIds: Object.fromEntries(\n                embeddables.map((embeddable) => [embeddable.id, true]),\n              ),\n            });\n          }\n          return;\n        }\n        this.addTextFromPaste(data.text, isPlainPaste);\n      }\n      this.setActiveTool({ type: \"selection\" });\n      event?.preventDefault();\n    },\n  );\n\n  addElementsFromPasteOrLibrary = (opts: {\n    elements: readonly ExcalidrawElement[];\n    files: BinaryFiles | null;\n    position: { clientX: number; clientY: number } | \"cursor\" | \"center\";\n    retainSeed?: boolean;\n    fitToContent?: boolean;\n  }) => {\n    const elements = restoreElements(opts.elements, null, undefined);\n    const [minX, minY, maxX, maxY] = getCommonBounds(elements);\n\n    const elementsCenterX = distance(minX, maxX) / 2;\n    const elementsCenterY = distance(minY, maxY) / 2;\n\n    const clientX =\n      typeof opts.position === \"object\"\n        ? opts.position.clientX\n        : opts.position === \"cursor\"\n        ? this.lastViewportPosition.x\n        : this.state.width / 2 + this.state.offsetLeft;\n    const clientY =\n      typeof opts.position === \"object\"\n        ? opts.position.clientY\n        : opts.position === \"cursor\"\n        ? this.lastViewportPosition.y\n        : this.state.height / 2 + this.state.offsetTop;\n\n    const { x, y } = viewportCoordsToSceneCoords(\n      { clientX, clientY },\n      this.state,\n    );\n\n    const dx = x - elementsCenterX;\n    const dy = y - elementsCenterY;\n\n    const [gridX, gridY] = getGridPoint(dx, dy, this.getEffectiveGridSize());\n\n    const newElements = duplicateElements(\n      elements.map((element) => {\n        return newElementWith(element, {\n          x: element.x + gridX - minX,\n          y: element.y + gridY - minY,\n        });\n      }),\n      {\n        randomizeSeed: !opts.retainSeed,\n      },\n    );\n\n    const prevElements = this.scene.getElementsIncludingDeleted();\n    let nextElements = [...prevElements, ...newElements];\n\n    const mappedNewSceneElements = this.props.onDuplicate?.(\n      nextElements,\n      prevElements,\n    );\n\n    nextElements = mappedNewSceneElements || nextElements;\n\n    syncMovedIndices(nextElements, arrayToMap(newElements));\n\n    const topLayerFrame = this.getTopLayerFrameAtSceneCoords({ x, y });\n\n    if (topLayerFrame) {\n      const eligibleElements = filterElementsEligibleAsFrameChildren(\n        newElements,\n        topLayerFrame,\n      );\n      addElementsToFrame(\n        nextElements,\n        eligibleElements,\n        topLayerFrame,\n        this.state,\n      );\n    }\n\n    this.scene.replaceAllElements(nextElements);\n\n    newElements.forEach((newElement) => {\n      if (isTextElement(newElement) && isBoundToContainer(newElement)) {\n        const container = getContainerElement(\n          newElement,\n          this.scene.getElementsMapIncludingDeleted(),\n        );\n        redrawTextBoundingBox(\n          newElement,\n          container,\n          this.scene.getElementsMapIncludingDeleted(),\n        );\n      }\n    });\n\n    // paste event may not fire FontFace loadingdone event in Safari, hence loading font faces manually\n    if (isSafari) {\n      Fonts.loadElementsFonts(newElements).then((fontFaces) => {\n        this.fonts.onLoaded(fontFaces);\n      });\n    }\n\n    if (opts.files) {\n      this.addMissingFiles(opts.files);\n    }\n\n    this.store.shouldCaptureIncrement();\n\n    const nextElementsToSelect =\n      excludeElementsInFramesFromSelection(newElements);\n\n    this.setState(\n      {\n        ...this.state,\n        // keep sidebar (presumably the library) open if it's docked and\n        // can fit.\n        //\n        // Note, we should close the sidebar only if we're dropping items\n        // from library, not when pasting from clipboard. Alas.\n        openSidebar:\n          this.state.openSidebar &&\n          this.device.editor.canFitSidebar &&\n          editorJotaiStore.get(isSidebarDockedAtom)\n            ? this.state.openSidebar\n            : null,\n        ...selectGroupsForSelectedElements(\n          {\n            editingGroupId: null,\n            selectedElementIds: nextElementsToSelect.reduce(\n              (acc: Record<ExcalidrawElement[\"id\"], true>, element) => {\n                if (!isBoundToContainer(element)) {\n                  acc[element.id] = true;\n                }\n                return acc;\n              },\n              {},\n            ),\n          },\n          this.scene.getNonDeletedElements(),\n          this.state,\n          this,\n        ),\n      },\n      () => {\n        if (opts.files) {\n          this.addNewImagesToImageCache();\n        }\n      },\n    );\n    this.setActiveTool({ type: \"selection\" });\n\n    if (opts.fitToContent) {\n      this.scrollToContent(newElements, {\n        fitToContent: true,\n        canvasOffsets: this.getEditorUIOffsets(),\n      });\n    }\n  };\n\n  // TODO rewrite this to paste both text & images at the same time if\n  // pasted data contains both\n  private async addElementsFromMixedContentPaste(\n    mixedContent: PastedMixedContent,\n    {\n      isPlainPaste,\n      sceneX,\n      sceneY,\n    }: { isPlainPaste: boolean; sceneX: number; sceneY: number },\n  ) {\n    if (\n      !isPlainPaste &&\n      mixedContent.some((node) => node.type === \"imageUrl\") &&\n      this.isToolSupported(\"image\")\n    ) {\n      const imageURLs = mixedContent\n        .filter((node) => node.type === \"imageUrl\")\n        .map((node) => node.value);\n      const responses = await Promise.all(\n        imageURLs.map(async (url) => {\n          try {\n            return { file: await ImageURLToFile(url) };\n          } catch (error: any) {\n            let errorMessage = error.message;\n            if (error.cause === \"FETCH_ERROR\") {\n              errorMessage = t(\"errors.failedToFetchImage\");\n            } else if (error.cause === \"UNSUPPORTED\") {\n              errorMessage = t(\"errors.unsupportedFileType\");\n            }\n            return { errorMessage };\n          }\n        }),\n      );\n      let y = sceneY;\n      let firstImageYOffsetDone = false;\n      const nextSelectedIds: Record<ExcalidrawElement[\"id\"], true> = {};\n      for (const response of responses) {\n        if (response.file) {\n          const imageElement = this.createImageElement({\n            sceneX,\n            sceneY: y,\n          });\n\n          const initializedImageElement = await this.insertImageElement(\n            imageElement,\n            response.file,\n          );\n          if (initializedImageElement) {\n            // vertically center first image in the batch\n            if (!firstImageYOffsetDone) {\n              firstImageYOffsetDone = true;\n              y -= initializedImageElement.height / 2;\n            }\n            // hack to reset the `y` coord because we vertically center during\n            // insertImageElement\n            mutateElement(initializedImageElement, { y }, false);\n\n            y = imageElement.y + imageElement.height + 25;\n\n            nextSelectedIds[imageElement.id] = true;\n          }\n        }\n      }\n\n      this.setState({\n        selectedElementIds: makeNextSelectedElementIds(\n          nextSelectedIds,\n          this.state,\n        ),\n      });\n\n      const error = responses.find((response) => !!response.errorMessage);\n      if (error && error.errorMessage) {\n        this.setState({ errorMessage: error.errorMessage });\n      }\n    } else {\n      const textNodes = mixedContent.filter((node) => node.type === \"text\");\n      if (textNodes.length) {\n        this.addTextFromPaste(\n          textNodes.map((node) => node.value).join(\"\\n\\n\"),\n          isPlainPaste,\n        );\n      }\n    }\n  }\n\n  private addTextFromPaste(text: string, isPlainPaste = false) {\n    const { x, y } = viewportCoordsToSceneCoords(\n      {\n        clientX: this.lastViewportPosition.x,\n        clientY: this.lastViewportPosition.y,\n      },\n      this.state,\n    );\n\n    const textElementProps = {\n      x,\n      y,\n      strokeColor: this.state.currentItemStrokeColor,\n      backgroundColor: this.state.currentItemBackgroundColor,\n      fillStyle: this.state.currentItemFillStyle,\n      strokeWidth: this.state.currentItemStrokeWidth,\n      strokeStyle: this.state.currentItemStrokeStyle,\n      roundness: null,\n      roughness: this.state.currentItemRoughness,\n      opacity: this.state.currentItemOpacity,\n      text,\n      fontSize: this.state.currentItemFontSize,\n      fontFamily: this.state.currentItemFontFamily,\n      textAlign: DEFAULT_TEXT_ALIGN,\n      verticalAlign: DEFAULT_VERTICAL_ALIGN,\n      locked: false,\n    };\n    const fontString = getFontString({\n      fontSize: textElementProps.fontSize,\n      fontFamily: textElementProps.fontFamily,\n    });\n    const lineHeight = getLineHeight(textElementProps.fontFamily);\n    const [x1, , x2] = getVisibleSceneBounds(this.state);\n    // long texts should not go beyond 800 pixels in width nor should it go below 200 px\n    const maxTextWidth = Math.max(Math.min((x2 - x1) * 0.5, 800), 200);\n    const LINE_GAP = 10;\n    let currentY = y;\n\n    const lines = isPlainPaste ? [text] : text.split(\"\\n\");\n    const textElements = lines.reduce(\n      (acc: ExcalidrawTextElement[], line, idx) => {\n        const originalText = normalizeText(line).trim();\n        if (originalText.length) {\n          const topLayerFrame = this.getTopLayerFrameAtSceneCoords({\n            x,\n            y: currentY,\n          });\n\n          let metrics = measureText(originalText, fontString, lineHeight);\n          const isTextUnwrapped = metrics.width > maxTextWidth;\n\n          const text = isTextUnwrapped\n            ? wrapText(originalText, fontString, maxTextWidth)\n            : originalText;\n\n          metrics = isTextUnwrapped\n            ? measureText(text, fontString, lineHeight)\n            : metrics;\n\n          const startX = x - metrics.width / 2;\n          const startY = currentY - metrics.height / 2;\n\n          const element = newTextElement({\n            ...textElementProps,\n            x: startX,\n            y: startY,\n            text,\n            originalText,\n            lineHeight,\n            autoResize: !isTextUnwrapped,\n            frameId: topLayerFrame ? topLayerFrame.id : null,\n          });\n          acc.push(element);\n          currentY += element.height + LINE_GAP;\n        } else {\n          const prevLine = lines[idx - 1]?.trim();\n          // add paragraph only if previous line was not empty, IOW don't add\n          // more than one empty line\n          if (prevLine) {\n            currentY +=\n              getLineHeightInPx(textElementProps.fontSize, lineHeight) +\n              LINE_GAP;\n          }\n        }\n\n        return acc;\n      },\n      [],\n    );\n\n    if (textElements.length === 0) {\n      return;\n    }\n\n    this.scene.insertElements(textElements);\n\n    this.setState({\n      selectedElementIds: makeNextSelectedElementIds(\n        Object.fromEntries(textElements.map((el) => [el.id, true])),\n        this.state,\n      ),\n    });\n\n    if (\n      !isPlainPaste &&\n      textElements.length > 1 &&\n      PLAIN_PASTE_TOAST_SHOWN === false &&\n      !this.device.editor.isMobile\n    ) {\n      this.setToast({\n        message: t(\"toast.pasteAsSingleElement\", {\n          shortcut: getShortcutKey(\"CtrlOrCmd+Shift+V\"),\n        }),\n        duration: 5000,\n      });\n      PLAIN_PASTE_TOAST_SHOWN = true;\n    }\n\n    this.store.shouldCaptureIncrement();\n  }\n\n  setAppState: React.Component<any, AppState>[\"setState\"] = (\n    state,\n    callback,\n  ) => {\n    this.setState(state, callback);\n  };\n\n  removePointer = (event: React.PointerEvent<HTMLElement> | PointerEvent) => {\n    if (touchTimeout) {\n      this.resetContextMenuTimer();\n    }\n\n    gesture.pointers.delete(event.pointerId);\n  };\n\n  toggleLock = (source: \"keyboard\" | \"ui\" = \"ui\") => {\n    if (!this.state.activeTool.locked) {\n      trackEvent(\n        \"toolbar\",\n        \"toggleLock\",\n        `${source} (${this.device.editor.isMobile ? \"mobile\" : \"desktop\"})`,\n      );\n    }\n    this.setState((prevState) => {\n      return {\n        activeTool: {\n          ...prevState.activeTool,\n          ...updateActiveTool(\n            this.state,\n            prevState.activeTool.locked\n              ? { type: \"selection\" }\n              : prevState.activeTool,\n          ),\n          locked: !prevState.activeTool.locked,\n        },\n      };\n    });\n  };\n\n  updateFrameRendering = (\n    opts:\n      | Partial<AppState[\"frameRendering\"]>\n      | ((\n          prevState: AppState[\"frameRendering\"],\n        ) => Partial<AppState[\"frameRendering\"]>),\n  ) => {\n    this.setState((prevState) => {\n      const next =\n        typeof opts === \"function\" ? opts(prevState.frameRendering) : opts;\n      return {\n        frameRendering: {\n          enabled: next?.enabled ?? prevState.frameRendering.enabled,\n          clip: next?.clip ?? prevState.frameRendering.clip,\n          name: next?.name ?? prevState.frameRendering.name,\n          outline: next?.outline ?? prevState.frameRendering.outline,\n        },\n      };\n    });\n  };\n\n  togglePenMode = (force: boolean | null) => {\n    this.setState((prevState) => {\n      return {\n        penMode: force ?? !prevState.penMode,\n        penDetected: true,\n      };\n    });\n  };\n\n  onHandToolToggle = () => {\n    this.actionManager.executeAction(actionToggleHandTool);\n  };\n\n  /**\n   * Zooms on canvas viewport center\n   */\n  zoomCanvas = (\n    /**\n     * Decimal fraction, auto-clamped between MIN_ZOOM and MAX_ZOOM.\n     * 1 = 100% zoom, 2 = 200% zoom, 0.5 = 50% zoom\n     */\n    value: number,\n  ) => {\n    this.setState({\n      ...getStateForZoom(\n        {\n          viewportX: this.state.width / 2 + this.state.offsetLeft,\n          viewportY: this.state.height / 2 + this.state.offsetTop,\n          nextZoom: getNormalizedZoom(value),\n        },\n        this.state,\n      ),\n    });\n  };\n\n  private cancelInProgressAnimation: (() => void) | null = null;\n\n  scrollToContent = (\n    /**\n     * target to scroll to\n     *\n     * - string - id of element or group, or url containing elementLink\n     * - ExcalidrawElement | ExcalidrawElement[] - element(s) objects\n     */\n    target:\n      | string\n      | ExcalidrawElement\n      | readonly ExcalidrawElement[] = this.scene.getNonDeletedElements(),\n    opts?: (\n      | {\n          fitToContent?: boolean;\n          fitToViewport?: never;\n          viewportZoomFactor?: number;\n          animate?: boolean;\n          duration?: number;\n        }\n      | {\n          fitToContent?: never;\n          fitToViewport?: boolean;\n          /** when fitToViewport=true, how much screen should the content cover,\n           * between 0.1 (10%) and 1 (100%)\n           */\n          viewportZoomFactor?: number;\n          animate?: boolean;\n          duration?: number;\n        }\n    ) & {\n      minZoom?: number;\n      maxZoom?: number;\n      canvasOffsets?: Offsets;\n    },\n  ) => {\n    if (typeof target === \"string\") {\n      let id: string | null;\n      if (isElementLink(target)) {\n        id = parseElementLinkFromURL(target);\n      } else {\n        id = target;\n      }\n      if (id) {\n        const elements = this.scene.getElementsFromId(id);\n\n        if (elements?.length) {\n          this.scrollToContent(elements, {\n            fitToContent: opts?.fitToContent ?? true,\n            animate: opts?.animate ?? true,\n          });\n        } else if (isElementLink(target)) {\n          this.setState({\n            toast: {\n              message: t(\"elementLink.notFound\"),\n              duration: 3000,\n              closable: true,\n            },\n          });\n        }\n      }\n      return;\n    }\n\n    this.cancelInProgressAnimation?.();\n\n    // convert provided target into ExcalidrawElement[] if necessary\n    const targetElements = Array.isArray(target) ? target : [target];\n\n    let zoom = this.state.zoom;\n    let scrollX = this.state.scrollX;\n    let scrollY = this.state.scrollY;\n\n    if (opts?.fitToContent || opts?.fitToViewport) {\n      const { appState } = zoomToFit({\n        canvasOffsets: opts.canvasOffsets,\n        targetElements,\n        appState: this.state,\n        fitToViewport: !!opts?.fitToViewport,\n        viewportZoomFactor: opts?.viewportZoomFactor,\n        minZoom: opts?.minZoom,\n        maxZoom: opts?.maxZoom,\n      });\n      zoom = appState.zoom;\n      scrollX = appState.scrollX;\n      scrollY = appState.scrollY;\n    } else {\n      // compute only the viewport location, without any zoom adjustment\n      const scroll = calculateScrollCenter(targetElements, this.state);\n      scrollX = scroll.scrollX;\n      scrollY = scroll.scrollY;\n    }\n\n    // when animating, we use RequestAnimationFrame to prevent the animation\n    // from slowing down other processes\n    if (opts?.animate) {\n      const origScrollX = this.state.scrollX;\n      const origScrollY = this.state.scrollY;\n      const origZoom = this.state.zoom.value;\n\n      const cancel = easeToValuesRAF({\n        fromValues: {\n          scrollX: origScrollX,\n          scrollY: origScrollY,\n          zoom: origZoom,\n        },\n        toValues: { scrollX, scrollY, zoom: zoom.value },\n        interpolateValue: (from, to, progress, key) => {\n          // for zoom, use different easing\n          if (key === \"zoom\") {\n            return from * Math.pow(to / from, easeOut(progress));\n          }\n          // handle using default\n          return undefined;\n        },\n        onStep: ({ scrollX, scrollY, zoom }) => {\n          this.setState({\n            scrollX,\n            scrollY,\n            zoom: { value: zoom },\n          });\n        },\n        onStart: () => {\n          this.setState({ shouldCacheIgnoreZoom: true });\n        },\n        onEnd: () => {\n          this.setState({ shouldCacheIgnoreZoom: false });\n        },\n        onCancel: () => {\n          this.setState({ shouldCacheIgnoreZoom: false });\n        },\n        duration: opts?.duration ?? 500,\n      });\n\n      this.cancelInProgressAnimation = () => {\n        cancel();\n        this.cancelInProgressAnimation = null;\n      };\n    } else {\n      this.setState({ scrollX, scrollY, zoom });\n    }\n  };\n\n  private maybeUnfollowRemoteUser = () => {\n    if (this.state.userToFollow) {\n      this.setState({ userToFollow: null });\n    }\n  };\n\n  /** use when changing scrollX/scrollY/zoom based on user interaction */\n  private translateCanvas: React.Component<any, AppState>[\"setState\"] = (\n    state,\n  ) => {\n    this.cancelInProgressAnimation?.();\n    this.maybeUnfollowRemoteUser();\n    this.setState(state);\n  };\n\n  setToast = (\n    toast: {\n      message: string;\n      closable?: boolean;\n      duration?: number;\n    } | null,\n  ) => {\n    this.setState({ toast });\n  };\n\n  restoreFileFromShare = async () => {\n    try {\n      const webShareTargetCache = await caches.open(\"web-share-target\");\n\n      const response = await webShareTargetCache.match(\"shared-file\");\n      if (response) {\n        const blob = await response.blob();\n        const file = new File([blob], blob.name || \"\", { type: blob.type });\n        this.loadFileToCanvas(file, null);\n        await webShareTargetCache.delete(\"shared-file\");\n        window.history.replaceState(null, APP_NAME, window.location.pathname);\n      }\n    } catch (error: any) {\n      this.setState({ errorMessage: error.message });\n    }\n  };\n\n  /**\n   * adds supplied files to existing files in the appState.\n   * NOTE if file already exists in editor state, the file data is not updated\n   * */\n  public addFiles: ExcalidrawImperativeAPI[\"addFiles\"] = withBatchedUpdates(\n    (files) => {\n      const { addedFiles } = this.addMissingFiles(files);\n\n      this.clearImageShapeCache(addedFiles);\n      this.scene.triggerUpdate();\n\n      this.addNewImagesToImageCache();\n    },\n  );\n\n  private addMissingFiles = (\n    files: BinaryFiles | BinaryFileData[],\n    replace = false,\n  ) => {\n    const nextFiles = replace ? {} : { ...this.files };\n    const addedFiles: BinaryFiles = {};\n\n    const _files = Array.isArray(files) ? files : Object.values(files);\n\n    for (const fileData of _files) {\n      if (nextFiles[fileData.id]) {\n        continue;\n      }\n\n      addedFiles[fileData.id] = fileData;\n      nextFiles[fileData.id] = fileData;\n\n      if (fileData.mimeType === MIME_TYPES.svg) {\n        try {\n          const restoredDataURL = getDataURL_sync(\n            normalizeSVG(dataURLToString(fileData.dataURL)),\n            MIME_TYPES.svg,\n          );\n          if (fileData.dataURL !== restoredDataURL) {\n            // bump version so persistence layer can update the store\n            fileData.version = (fileData.version ?? 1) + 1;\n            fileData.dataURL = restoredDataURL;\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n\n    this.files = nextFiles;\n\n    return { addedFiles };\n  };\n\n  public updateScene = withBatchedUpdates(\n    <K extends keyof AppState>(sceneData: {\n      elements?: SceneData[\"elements\"];\n      appState?: Pick<AppState, K> | null;\n      collaborators?: SceneData[\"collaborators\"];\n      /**\n       *  Controls which updates should be captured by the `Store`. Captured updates are emmitted and listened to by other components, such as `History` for undo / redo purposes.\n       *\n       *  - `CaptureUpdateAction.IMMEDIATELY`: Updates are immediately undoable. Use for most local updates.\n       *  - `CaptureUpdateAction.NEVER`: Updates never make it to undo/redo stack. Use for remote updates or scene initialization.\n       *  - `CaptureUpdateAction.EVENTUALLY`: Updates will be eventually be captured as part of a future increment.\n       *\n       * Check [API docs](https://docs.excalidraw.com/docs/@excalidraw/excalidraw/api/props/excalidraw-api#captureUpdate) for more details.\n       *\n       * @default CaptureUpdateAction.EVENTUALLY\n       */\n      captureUpdate?: SceneData[\"captureUpdate\"];\n    }) => {\n      const nextElements = syncInvalidIndices(sceneData.elements ?? []);\n\n      if (\n        sceneData.captureUpdate &&\n        sceneData.captureUpdate !== CaptureUpdateAction.EVENTUALLY\n      ) {\n        const prevCommittedAppState = this.store.snapshot.appState;\n        const prevCommittedElements = this.store.snapshot.elements;\n\n        const nextCommittedAppState = sceneData.appState\n          ? Object.assign({}, prevCommittedAppState, sceneData.appState) // new instance, with partial appstate applied to previously captured one, including hidden prop inside `prevCommittedAppState`\n          : prevCommittedAppState;\n\n        const nextCommittedElements = sceneData.elements\n          ? this.store.filterUncomittedElements(\n              this.scene.getElementsMapIncludingDeleted(), // Only used to detect uncomitted local elements\n              arrayToMap(nextElements), // We expect all (already reconciled) elements\n            )\n          : prevCommittedElements;\n\n        // WARN: store action always performs deep clone of changed elements, for ephemeral remote updates (i.e. remote dragging, resizing, drawing) we might consider doing something smarter\n        // do NOT schedule store actions (execute after re-render), as it might cause unexpected concurrency issues if not handled well\n        if (sceneData.captureUpdate === CaptureUpdateAction.IMMEDIATELY) {\n          this.store.captureIncrement(\n            nextCommittedElements,\n            nextCommittedAppState,\n          );\n        } else if (sceneData.captureUpdate === CaptureUpdateAction.NEVER) {\n          this.store.updateSnapshot(\n            nextCommittedElements,\n            nextCommittedAppState,\n          );\n        }\n      }\n\n      if (sceneData.appState) {\n        this.setState(sceneData.appState);\n      }\n\n      if (sceneData.elements) {\n        this.scene.replaceAllElements(nextElements);\n      }\n\n      if (sceneData.collaborators) {\n        this.setState({ collaborators: sceneData.collaborators });\n      }\n    },\n  );\n\n  private triggerRender = (\n    /** force always re-renders canvas even if no change */\n    force?: boolean,\n  ) => {\n    if (force === true) {\n      this.scene.triggerUpdate();\n    } else {\n      this.setState({});\n    }\n  };\n\n  /**\n   * @returns whether the menu was toggled on or off\n   */\n  public toggleSidebar = ({\n    name,\n    tab,\n    force,\n  }: {\n    name: SidebarName | null;\n    tab?: SidebarTabName;\n    force?: boolean;\n  }): boolean => {\n    let nextName;\n    if (force === undefined) {\n      nextName =\n        this.state.openSidebar?.name === name &&\n        this.state.openSidebar?.tab === tab\n          ? null\n          : name;\n    } else {\n      nextName = force ? name : null;\n    }\n\n    const nextState: AppState[\"openSidebar\"] = nextName\n      ? { name: nextName }\n      : null;\n    if (nextState && tab) {\n      nextState.tab = tab;\n    }\n\n    this.setState({ openSidebar: nextState });\n\n    return !!nextName;\n  };\n\n  private updateCurrentCursorPosition = withBatchedUpdates(\n    (event: MouseEvent) => {\n      this.lastViewportPosition.x = event.clientX;\n      this.lastViewportPosition.y = event.clientY;\n    },\n  );\n\n  public getEditorUIOffsets = (): Offsets => {\n    const toolbarBottom =\n      this.excalidrawContainerRef?.current\n        ?.querySelector(\".App-toolbar\")\n        ?.getBoundingClientRect()?.bottom ?? 0;\n    const sidebarRect = this.excalidrawContainerRef?.current\n      ?.querySelector(\".sidebar\")\n      ?.getBoundingClientRect();\n    const propertiesPanelRect = this.excalidrawContainerRef?.current\n      ?.querySelector(\".App-menu__left\")\n      ?.getBoundingClientRect();\n\n    const PADDING = 16;\n\n    return getLanguage().rtl\n      ? {\n          top: toolbarBottom + PADDING,\n          right:\n            Math.max(\n              this.state.width -\n                (propertiesPanelRect?.left ?? this.state.width),\n              0,\n            ) + PADDING,\n          bottom: PADDING,\n          left: Math.max(sidebarRect?.right ?? 0, 0) + PADDING,\n        }\n      : {\n          top: toolbarBottom + PADDING,\n          right: Math.max(\n            this.state.width -\n              (sidebarRect?.left ?? this.state.width) +\n              PADDING,\n            0,\n          ),\n          bottom: PADDING,\n          left: Math.max(propertiesPanelRect?.right ?? 0, 0) + PADDING,\n        };\n  };\n\n  // Input handling\n  private onKeyDown = withBatchedUpdates(\n    (event: React.KeyboardEvent | KeyboardEvent) => {\n      // normalize `event.key` when CapsLock is pressed #2372\n\n      if (\n        \"Proxy\" in window &&\n        ((!event.shiftKey && /^[A-Z]$/.test(event.key)) ||\n          (event.shiftKey && /^[a-z]$/.test(event.key)))\n      ) {\n        event = new Proxy(event, {\n          get(ev: any, prop) {\n            const value = ev[prop];\n            if (typeof value === \"function\") {\n              // fix for Proxies hijacking `this`\n              return value.bind(ev);\n            }\n            return prop === \"key\"\n              ? // CapsLock inverts capitalization based on ShiftKey, so invert\n                // it back\n                event.shiftKey\n                ? ev.key.toUpperCase()\n                : ev.key.toLowerCase()\n              : value;\n          },\n        });\n      }\n\n      if (!isInputLike(event.target)) {\n        if (\n          (event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) &&\n          this.state.croppingElementId\n        ) {\n          this.finishImageCropping();\n          return;\n        }\n\n        const selectedElements = getSelectedElements(\n          this.scene.getNonDeletedElementsMap(),\n          this.state,\n        );\n\n        if (\n          selectedElements.length === 1 &&\n          isImageElement(selectedElements[0]) &&\n          event.key === KEYS.ENTER\n        ) {\n          this.startImageCropping(selectedElements[0]);\n          return;\n        }\n\n        if (\n          event.key === KEYS.ESCAPE &&\n          this.flowChartCreator.isCreatingChart\n        ) {\n          this.flowChartCreator.clear();\n          this.triggerRender(true);\n          return;\n        }\n\n        const arrowKeyPressed = isArrowKey(event.key);\n\n        if (event[KEYS.CTRL_OR_CMD] && arrowKeyPressed && !event.shiftKey) {\n          event.preventDefault();\n\n          const selectedElements = getSelectedElements(\n            this.scene.getNonDeletedElementsMap(),\n            this.state,\n          );\n\n          if (\n            selectedElements.length === 1 &&\n            isFlowchartNodeElement(selectedElements[0])\n          ) {\n            this.flowChartCreator.createNodes(\n              selectedElements[0],\n              this.scene.getNonDeletedElementsMap(),\n              this.state,\n              getLinkDirectionFromKey(event.key),\n            );\n          }\n\n          if (\n            this.flowChartCreator.pendingNodes?.length &&\n            !isElementCompletelyInViewport(\n              this.flowChartCreator.pendingNodes,\n              this.canvas.width / window.devicePixelRatio,\n              this.canvas.height / window.devicePixelRatio,\n              {\n                offsetLeft: this.state.offsetLeft,\n                offsetTop: this.state.offsetTop,\n                scrollX: this.state.scrollX,\n                scrollY: this.state.scrollY,\n                zoom: this.state.zoom,\n              },\n              this.scene.getNonDeletedElementsMap(),\n              this.getEditorUIOffsets(),\n            )\n          ) {\n            this.scrollToContent(this.flowChartCreator.pendingNodes, {\n              animate: true,\n              duration: 300,\n              fitToContent: true,\n              canvasOffsets: this.getEditorUIOffsets(),\n            });\n          }\n\n          return;\n        }\n\n        if (event.altKey) {\n          const selectedElements = getSelectedElements(\n            this.scene.getNonDeletedElementsMap(),\n            this.state,\n          );\n\n          if (selectedElements.length === 1 && arrowKeyPressed) {\n            event.preventDefault();\n\n            const nextId = this.flowChartNavigator.exploreByDirection(\n              selectedElements[0],\n              this.scene.getNonDeletedElementsMap(),\n              getLinkDirectionFromKey(event.key),\n            );\n\n            if (nextId) {\n              this.setState((prevState) => ({\n                selectedElementIds: makeNextSelectedElementIds(\n                  {\n                    [nextId]: true,\n                  },\n                  prevState,\n                ),\n              }));\n\n              const nextNode = this.scene\n                .getNonDeletedElementsMap()\n                .get(nextId);\n\n              if (\n                nextNode &&\n                !isElementCompletelyInViewport(\n                  [nextNode],\n                  this.canvas.width / window.devicePixelRatio,\n                  this.canvas.height / window.devicePixelRatio,\n                  {\n                    offsetLeft: this.state.offsetLeft,\n                    offsetTop: this.state.offsetTop,\n                    scrollX: this.state.scrollX,\n                    scrollY: this.state.scrollY,\n                    zoom: this.state.zoom,\n                  },\n                  this.scene.getNonDeletedElementsMap(),\n                  this.getEditorUIOffsets(),\n                )\n              ) {\n                this.scrollToContent(nextNode, {\n                  animate: true,\n                  duration: 300,\n                  canvasOffsets: this.getEditorUIOffsets(),\n                });\n              }\n            }\n            return;\n          }\n        }\n      }\n\n      if (\n        event[KEYS.CTRL_OR_CMD] &&\n        event.key === KEYS.P &&\n        !event.shiftKey &&\n        !event.altKey\n      ) {\n        this.setToast({\n          message: t(\"commandPalette.shortcutHint\", {\n            shortcut: getShortcutFromShortcutName(\"commandPalette\"),\n          }),\n        });\n        event.preventDefault();\n        return;\n      }\n\n      if (event[KEYS.CTRL_OR_CMD] && event.key.toLowerCase() === KEYS.V) {\n        IS_PLAIN_PASTE = event.shiftKey;\n        clearTimeout(IS_PLAIN_PASTE_TIMER);\n        // reset (100ms to be safe that we it runs after the ensuing\n        // paste event). Though, technically unnecessary to reset since we\n        // (re)set the flag before each paste event.\n        IS_PLAIN_PASTE_TIMER = window.setTimeout(() => {\n          IS_PLAIN_PASTE = false;\n        }, 100);\n      }\n\n      // prevent browser zoom in input fields\n      if (event[KEYS.CTRL_OR_CMD] && isWritableElement(event.target)) {\n        if (event.code === CODES.MINUS || event.code === CODES.EQUAL) {\n          event.preventDefault();\n          return;\n        }\n      }\n\n      // bail if\n      if (\n        // inside an input\n        (isWritableElement(event.target) &&\n          // unless pressing escape (finalize action)\n          event.key !== KEYS.ESCAPE) ||\n        // or unless using arrows (to move between buttons)\n        (isArrowKey(event.key) && isInputLike(event.target))\n      ) {\n        return;\n      }\n\n      if (event.key === KEYS.QUESTION_MARK) {\n        this.setState({\n          openDialog: { name: \"help\" },\n        });\n        return;\n      } else if (\n        event.key.toLowerCase() === KEYS.E &&\n        event.shiftKey &&\n        event[KEYS.CTRL_OR_CMD]\n      ) {\n        event.preventDefault();\n        this.setState({ openDialog: { name: \"imageExport\" } });\n        return;\n      }\n\n      if (event.key === KEYS.PAGE_UP || event.key === KEYS.PAGE_DOWN) {\n        let offset =\n          (event.shiftKey ? this.state.width : this.state.height) /\n          this.state.zoom.value;\n        if (event.key === KEYS.PAGE_DOWN) {\n          offset = -offset;\n        }\n        if (event.shiftKey) {\n          this.translateCanvas((state) => ({\n            scrollX: state.scrollX + offset,\n          }));\n        } else {\n          this.translateCanvas((state) => ({\n            scrollY: state.scrollY + offset,\n          }));\n        }\n      }\n\n      if (this.state.openDialog?.name === \"elementLinkSelector\") {\n        return;\n      }\n\n      if (this.actionManager.handleKeyDown(event)) {\n        return;\n      }\n\n      if (this.state.viewModeEnabled) {\n        return;\n      }\n\n      if (event[KEYS.CTRL_OR_CMD] && this.state.isBindingEnabled) {\n        this.setState({ isBindingEnabled: false });\n      }\n\n      if (isArrowKey(event.key)) {\n        let selectedElements = this.scene.getSelectedElements({\n          selectedElementIds: this.state.selectedElementIds,\n          includeBoundTextElement: true,\n          includeElementsInFrames: true,\n        });\n\n        const elbowArrow = selectedElements.find(isElbowArrow) as\n          | ExcalidrawArrowElement\n          | undefined;\n\n        const arrowIdsToRemove = new Set<string>();\n\n        selectedElements\n          .filter(isElbowArrow)\n          .filter((arrow) => {\n            const startElementNotInSelection =\n              arrow.startBinding &&\n              !selectedElements.some(\n                (el) => el.id === arrow.startBinding?.elementId,\n              );\n            const endElementNotInSelection =\n              arrow.endBinding &&\n              !selectedElements.some(\n                (el) => el.id === arrow.endBinding?.elementId,\n              );\n            return startElementNotInSelection || endElementNotInSelection;\n          })\n          .forEach((arrow) => arrowIdsToRemove.add(arrow.id));\n\n        selectedElements = selectedElements.filter(\n          (el) => !arrowIdsToRemove.has(el.id),\n        );\n\n        const step =\n          (this.getEffectiveGridSize() &&\n            (event.shiftKey\n              ? ELEMENT_TRANSLATE_AMOUNT\n              : this.getEffectiveGridSize())) ||\n          (event.shiftKey\n            ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n            : ELEMENT_TRANSLATE_AMOUNT);\n\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (event.key === KEYS.ARROW_LEFT) {\n          offsetX = -step;\n        } else if (event.key === KEYS.ARROW_RIGHT) {\n          offsetX = step;\n        } else if (event.key === KEYS.ARROW_UP) {\n          offsetY = -step;\n        } else if (event.key === KEYS.ARROW_DOWN) {\n          offsetY = step;\n        }\n\n        selectedElements.forEach((element) => {\n          mutateElement(\n            element,\n            {\n              x: element.x + offsetX,\n              y: element.y + offsetY,\n            },\n            false,\n          );\n\n          updateBoundElements(element, this.scene.getNonDeletedElementsMap(), {\n            simultaneouslyUpdated: selectedElements,\n          });\n        });\n\n        this.setState({\n          suggestedBindings: getSuggestedBindingsForArrows(\n            selectedElements.filter(\n              (element) => element.id !== elbowArrow?.id || step !== 0,\n            ),\n            this.scene.getNonDeletedElementsMap(),\n            this.state.zoom,\n          ),\n        });\n\n        this.scene.triggerUpdate();\n\n        event.preventDefault();\n      } else if (event.key === KEYS.ENTER) {\n        const selectedElements = this.scene.getSelectedElements(this.state);\n        if (selectedElements.length === 1) {\n          const selectedElement = selectedElements[0];\n          if (event[KEYS.CTRL_OR_CMD]) {\n            if (isLinearElement(selectedElement)) {\n              if (\n                !this.state.editingLinearElement ||\n                this.state.editingLinearElement.elementId !==\n                  selectedElements[0].id\n              ) {\n                this.store.shouldCaptureIncrement();\n                if (!isElbowArrow(selectedElement)) {\n                  this.setState({\n                    editingLinearElement: new LinearElementEditor(\n                      selectedElement,\n                    ),\n                  });\n                }\n              }\n            }\n          } else if (\n            isTextElement(selectedElement) ||\n            isValidTextContainer(selectedElement)\n          ) {\n            let container;\n            if (!isTextElement(selectedElement)) {\n              container = selectedElement as ExcalidrawTextContainer;\n            }\n            const midPoint = getContainerCenter(\n              selectedElement,\n              this.state,\n              this.scene.getNonDeletedElementsMap(),\n            );\n            const sceneX = midPoint.x;\n            const sceneY = midPoint.y;\n            this.startTextEditing({\n              sceneX,\n              sceneY,\n              container,\n            });\n            event.preventDefault();\n            return;\n          } else if (isFrameLikeElement(selectedElement)) {\n            this.setState({\n              editingFrame: selectedElement.id,\n            });\n          }\n        }\n      } else if (\n        !event.ctrlKey &&\n        !event.altKey &&\n        !event.metaKey &&\n        !this.state.newElement &&\n        !this.state.selectionElement &&\n        !this.state.selectedElementsAreBeingDragged\n      ) {\n        const shape = findShapeByKey(event.key);\n        if (shape) {\n          if (this.state.activeTool.type !== shape) {\n            trackEvent(\n              \"toolbar\",\n              shape,\n              `keyboard (${\n                this.device.editor.isMobile ? \"mobile\" : \"desktop\"\n              })`,\n            );\n          }\n          if (shape === \"arrow\" && this.state.activeTool.type === \"arrow\") {\n            this.setState((prevState) => ({\n              currentItemArrowType:\n                prevState.currentItemArrowType === ARROW_TYPE.sharp\n                  ? ARROW_TYPE.round\n                  : prevState.currentItemArrowType === ARROW_TYPE.round\n                  ? ARROW_TYPE.elbow\n                  : ARROW_TYPE.sharp,\n            }));\n          }\n          this.setActiveTool({ type: shape });\n          event.stopPropagation();\n        } else if (event.key === KEYS.Q) {\n          this.toggleLock(\"keyboard\");\n          event.stopPropagation();\n        }\n      }\n      if (event.key === KEYS.SPACE && gesture.pointers.size === 0) {\n        isHoldingSpace = true;\n        setCursor(this.interactiveCanvas, CURSOR_TYPE.GRAB);\n        event.preventDefault();\n      }\n\n      if (\n        (event.key === KEYS.G || event.key === KEYS.S) &&\n        !event.altKey &&\n        !event[KEYS.CTRL_OR_CMD]\n      ) {\n        const selectedElements = this.scene.getSelectedElements(this.state);\n        if (\n          this.state.activeTool.type === \"selection\" &&\n          !selectedElements.length\n        ) {\n          return;\n        }\n\n        if (\n          event.key === KEYS.G &&\n          (hasBackground(this.state.activeTool.type) ||\n            selectedElements.some((element) => hasBackground(element.type)))\n        ) {\n          this.setState({ openPopup: \"elementBackground\" });\n          event.stopPropagation();\n        }\n        if (event.key === KEYS.S) {\n          this.setState({ openPopup: \"elementStroke\" });\n          event.stopPropagation();\n        }\n      }\n\n      if (\n        !event[KEYS.CTRL_OR_CMD] &&\n        event.shiftKey &&\n        event.key.toLowerCase() === KEYS.F\n      ) {\n        const selectedElements = this.scene.getSelectedElements(this.state);\n\n        if (\n          this.state.activeTool.type === \"selection\" &&\n          !selectedElements.length\n        ) {\n          return;\n        }\n\n        if (\n          this.state.activeTool.type === \"text\" ||\n          selectedElements.find(\n            (element) =>\n              isTextElement(element) ||\n              getBoundTextElement(\n                element,\n                this.scene.getNonDeletedElementsMap(),\n              ),\n          )\n        ) {\n          event.preventDefault();\n          this.setState({ openPopup: \"fontFamily\" });\n        }\n      }\n\n      if (event.key === KEYS.K && !event.altKey && !event[KEYS.CTRL_OR_CMD]) {\n        if (this.state.activeTool.type === \"laser\") {\n          this.setActiveTool({ type: \"selection\" });\n        } else {\n          this.setActiveTool({ type: \"laser\" });\n        }\n        return;\n      }\n\n      if (\n        event[KEYS.CTRL_OR_CMD] &&\n        (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE)\n      ) {\n        editorJotaiStore.set(activeConfirmDialogAtom, \"clearCanvas\");\n      }\n\n      // eye dropper\n      // -----------------------------------------------------------------------\n      const lowerCased = event.key.toLocaleLowerCase();\n      const isPickingStroke = lowerCased === KEYS.S && event.shiftKey;\n      const isPickingBackground =\n        event.key === KEYS.I || (lowerCased === KEYS.G && event.shiftKey);\n\n      if (isPickingStroke || isPickingBackground) {\n        this.openEyeDropper({\n          type: isPickingStroke ? \"stroke\" : \"background\",\n        });\n      }\n      // -----------------------------------------------------------------------\n    },\n  );\n\n  private onKeyUp = withBatchedUpdates((event: KeyboardEvent) => {\n    if (event.key === KEYS.SPACE) {\n      if (\n        this.state.viewModeEnabled ||\n        this.state.openDialog?.name === \"elementLinkSelector\"\n      ) {\n        setCursor(this.interactiveCanvas, CURSOR_TYPE.GRAB);\n      } else if (this.state.activeTool.type === \"selection\") {\n        resetCursor(this.interactiveCanvas);\n      } else {\n        setCursorForShape(this.interactiveCanvas, this.state);\n        this.setState({\n          selectedElementIds: makeNextSelectedElementIds({}, this.state),\n          selectedGroupIds: {},\n          editingGroupId: null,\n          activeEmbeddable: null,\n        });\n      }\n      isHoldingSpace = false;\n    }\n    if (!event[KEYS.CTRL_OR_CMD] && !this.state.isBindingEnabled) {\n      this.setState({ isBindingEnabled: true });\n    }\n    if (isArrowKey(event.key)) {\n      bindOrUnbindLinearElements(\n        this.scene.getSelectedElements(this.state).filter(isLinearElement),\n        this.scene.getNonDeletedElementsMap(),\n        this.scene.getNonDeletedElements(),\n        this.scene,\n        isBindingEnabled(this.state),\n        this.state.selectedLinearElement?.selectedPointsIndices ?? [],\n        this.state.zoom,\n      );\n      this.setState({ suggestedBindings: [] });\n    }\n\n    if (!event.altKey) {\n      if (this.flowChartNavigator.isExploring) {\n        this.flowChartNavigator.clear();\n        this.syncActionResult({\n          captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n        });\n      }\n    }\n\n    if (!event[KEYS.CTRL_OR_CMD]) {\n      if (this.flowChartCreator.isCreatingChart) {\n        if (this.flowChartCreator.pendingNodes?.length) {\n          this.scene.insertElements(this.flowChartCreator.pendingNodes);\n        }\n\n        const firstNode = this.flowChartCreator.pendingNodes?.[0];\n\n        if (firstNode) {\n          this.setState((prevState) => ({\n            selectedElementIds: makeNextSelectedElementIds(\n              {\n                [firstNode.id]: true,\n              },\n              prevState,\n            ),\n          }));\n\n          if (\n            !isElementCompletelyInViewport(\n              [firstNode],\n              this.canvas.width / window.devicePixelRatio,\n              this.canvas.height / window.devicePixelRatio,\n              {\n                offsetLeft: this.state.offsetLeft,\n                offsetTop: this.state.offsetTop,\n                scrollX: this.state.scrollX,\n                scrollY: this.state.scrollY,\n                zoom: this.state.zoom,\n              },\n              this.scene.getNonDeletedElementsMap(),\n              this.getEditorUIOffsets(),\n            )\n          ) {\n            this.scrollToContent(firstNode, {\n              animate: true,\n              duration: 300,\n              canvasOffsets: this.getEditorUIOffsets(),\n            });\n          }\n        }\n\n        this.flowChartCreator.clear();\n        this.syncActionResult({\n          captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n        });\n      }\n    }\n  });\n\n  // We purposely widen the `tool` type so this helper can be called with\n  // any tool without having to type check it\n  private isToolSupported = <T extends ToolType | \"custom\">(tool: T) => {\n    return (\n      this.props.UIOptions.tools?.[\n        tool as Extract<T, keyof AppProps[\"UIOptions\"][\"tools\"]>\n      ] !== false\n    );\n  };\n\n  setActiveTool = (\n    tool: (\n      | (\n          | { type: Exclude<ToolType, \"image\"> }\n          | {\n              type: Extract<ToolType, \"image\">;\n              insertOnCanvasDirectly?: boolean;\n            }\n        )\n      | { type: \"custom\"; customType: string }\n    ) & { locked?: boolean },\n  ) => {\n    if (!this.isToolSupported(tool.type)) {\n      console.warn(\n        `\"${tool.type}\" tool is disabled via \"UIOptions.canvasActions.tools.${tool.type}\"`,\n      );\n      return;\n    }\n\n    const nextActiveTool = updateActiveTool(this.state, tool);\n    if (nextActiveTool.type === \"hand\") {\n      setCursor(this.interactiveCanvas, CURSOR_TYPE.GRAB);\n    } else if (!isHoldingSpace) {\n      setCursorForShape(this.interactiveCanvas, {\n        ...this.state,\n        activeTool: nextActiveTool,\n      });\n    }\n    if (isToolIcon(document.activeElement)) {\n      this.focusContainer();\n    }\n    if (!isLinearElementType(nextActiveTool.type)) {\n      this.setState({ suggestedBindings: [] });\n    }\n    if (nextActiveTool.type === \"image\") {\n      this.onImageAction({\n        insertOnCanvasDirectly:\n          (tool.type === \"image\" && tool.insertOnCanvasDirectly) ?? false,\n      });\n    }\n\n    this.setState((prevState) => {\n      const commonResets = {\n        snapLines: prevState.snapLines.length ? [] : prevState.snapLines,\n        originSnapOffset: null,\n        activeEmbeddable: null,\n      } as const;\n\n      if (nextActiveTool.type === \"freedraw\") {\n        this.store.shouldCaptureIncrement();\n      }\n\n      if (nextActiveTool.type !== \"selection\") {\n        return {\n          ...prevState,\n          activeTool: nextActiveTool,\n          selectedElementIds: makeNextSelectedElementIds({}, prevState),\n          selectedGroupIds: makeNextSelectedElementIds({}, prevState),\n          editingGroupId: null,\n          multiElement: null,\n          ...commonResets,\n        };\n      }\n      return {\n        ...prevState,\n        activeTool: nextActiveTool,\n        ...commonResets,\n      };\n    });\n  };\n\n  setOpenDialog = (dialogType: AppState[\"openDialog\"]) => {\n    this.setState({ openDialog: dialogType });\n  };\n\n  private setCursor = (cursor: string) => {\n    setCursor(this.interactiveCanvas, cursor);\n  };\n\n  private resetCursor = () => {\n    resetCursor(this.interactiveCanvas);\n  };\n  /**\n   * returns whether user is making a gesture with >= 2 fingers (points)\n   * on o touch screen (not on a trackpad). Currently only relates to Darwin\n   * (iOS/iPadOS,MacOS), but may work on other devices in the future if\n   * GestureEvent is standardized.\n   */\n  private isTouchScreenMultiTouchGesture = () => {\n    // we don't want to deselect when using trackpad, and multi-point gestures\n    // only work on touch screens, so checking for >= pointers means we're on a\n    // touchscreen\n    return gesture.pointers.size >= 2;\n  };\n\n  public getName = () => {\n    return (\n      this.state.name ||\n      this.props.name ||\n      `${t(\"labels.untitled\")}-${getDateTime()}`\n    );\n  };\n\n  // fires only on Safari\n  private onGestureStart = withBatchedUpdates((event: GestureEvent) => {\n    event.preventDefault();\n\n    // we only want to deselect on touch screens because user may have selected\n    // elements by mistake while zooming\n    if (this.isTouchScreenMultiTouchGesture()) {\n      this.setState({\n        selectedElementIds: makeNextSelectedElementIds({}, this.state),\n        activeEmbeddable: null,\n      });\n    }\n    gesture.initialScale = this.state.zoom.value;\n  });\n\n  // fires only on Safari\n  private onGestureChange = withBatchedUpdates((event: GestureEvent) => {\n    event.preventDefault();\n\n    // onGestureChange only has zoom factor but not the center.\n    // If we're on iPad or iPhone, then we recognize multi-touch and will\n    // zoom in at the right location in the touchmove handler\n    // (handleCanvasPointerMove).\n    //\n    // On Macbook trackpad, we don't have those events so will zoom in at the\n    // current location instead.\n    //\n    // As such, bail from this handler on touch devices.\n    if (this.isTouchScreenMultiTouchGesture()) {\n      return;\n    }\n\n    const initialScale = gesture.initialScale;\n    if (initialScale) {\n      this.setState((state) => ({\n        ...getStateForZoom(\n          {\n            viewportX: this.lastViewportPosition.x,\n            viewportY: this.lastViewportPosition.y,\n            nextZoom: getNormalizedZoom(initialScale * event.scale),\n          },\n          state,\n        ),\n      }));\n    }\n  });\n\n  // fires only on Safari\n  private onGestureEnd = withBatchedUpdates((event: GestureEvent) => {\n    event.preventDefault();\n    // reselect elements only on touch screens (see onGestureStart)\n    if (this.isTouchScreenMultiTouchGesture()) {\n      this.setState({\n        previousSelectedElementIds: {},\n        selectedElementIds: makeNextSelectedElementIds(\n          this.state.previousSelectedElementIds,\n          this.state,\n        ),\n      });\n    }\n    gesture.initialScale = null;\n  });\n\n  private handleTextWysiwyg(\n    element: ExcalidrawTextElement,\n    {\n      isExistingElement = false,\n    }: {\n      isExistingElement?: boolean;\n    },\n  ) {\n    const elementsMap = this.scene.getElementsMapIncludingDeleted();\n\n    const updateElement = (nextOriginalText: string, isDeleted: boolean) => {\n      this.scene.replaceAllElements([\n        // Not sure why we include deleted elements as well hence using deleted elements map\n        ...this.scene.getElementsIncludingDeleted().map((_element) => {\n          if (_element.id === element.id && isTextElement(_element)) {\n            return newElementWith(_element, {\n              originalText: nextOriginalText,\n              isDeleted: isDeleted ?? _element.isDeleted,\n              // returns (wrapped) text and new dimensions\n              ...refreshTextDimensions(\n                _element,\n                getContainerElement(_element, elementsMap),\n                elementsMap,\n                nextOriginalText,\n              ),\n            });\n          }\n          return _element;\n        }),\n      ]);\n    };\n\n    textWysiwyg({\n      id: element.id,\n      canvas: this.canvas,\n      getViewportCoords: (x, y) => {\n        const { x: viewportX, y: viewportY } = sceneCoordsToViewportCoords(\n          {\n            sceneX: x,\n            sceneY: y,\n          },\n          this.state,\n        );\n        return [\n          viewportX - this.state.offsetLeft,\n          viewportY - this.state.offsetTop,\n        ];\n      },\n      onChange: withBatchedUpdates((nextOriginalText) => {\n        updateElement(nextOriginalText, false);\n        if (isNonDeletedElement(element)) {\n          updateBoundElements(element, this.scene.getNonDeletedElementsMap());\n        }\n      }),\n      onSubmit: withBatchedUpdates(({ viaKeyboard, nextOriginalText }) => {\n        const isDeleted = !nextOriginalText.trim();\n        updateElement(nextOriginalText, isDeleted);\n        // select the created text element only if submitting via keyboard\n        // (when submitting via click it should act as signal to deselect)\n        if (!isDeleted && viaKeyboard) {\n          const elementIdToSelect = element.containerId\n            ? element.containerId\n            : element.id;\n\n          // needed to ensure state is updated before \"finalize\" action\n          // that's invoked on keyboard-submit as well\n          // TODO either move this into finalize as well, or handle all state\n          // updates in one place, skipping finalize action\n          flushSync(() => {\n            this.setState((prevState) => ({\n              selectedElementIds: makeNextSelectedElementIds(\n                {\n                  ...prevState.selectedElementIds,\n                  [elementIdToSelect]: true,\n                },\n                prevState,\n              ),\n            }));\n          });\n        }\n        if (isDeleted) {\n          fixBindingsAfterDeletion(this.scene.getNonDeletedElements(), [\n            element,\n          ]);\n        }\n        if (!isDeleted || isExistingElement) {\n          this.store.shouldCaptureIncrement();\n        }\n\n        flushSync(() => {\n          this.setState({\n            newElement: null,\n            editingTextElement: null,\n          });\n        });\n\n        if (this.state.activeTool.locked) {\n          setCursorForShape(this.interactiveCanvas, this.state);\n        }\n\n        this.focusContainer();\n      }),\n      element,\n      excalidrawContainer: this.excalidrawContainerRef.current,\n      app: this,\n      // when text is selected, it's hard (at least on iOS) to re-position the\n      // caret (i.e. deselect). There's not much use for always selecting\n      // the text on edit anyway (and users can select-all from contextmenu\n      // if needed)\n      autoSelect: !this.device.isTouchScreen,\n    });\n    // deselect all other elements when inserting text\n    this.deselectElements();\n\n    // do an initial update to re-initialize element position since we were\n    // modifying element's x/y for sake of editor (case: syncing to remote)\n    updateElement(element.originalText, false);\n  }\n\n  private deselectElements() {\n    this.setState({\n      selectedElementIds: makeNextSelectedElementIds({}, this.state),\n      selectedGroupIds: {},\n      editingGroupId: null,\n      activeEmbeddable: null,\n    });\n  }\n\n  private getTextElementAtPosition(\n    x: number,\n    y: number,\n  ): NonDeleted<ExcalidrawTextElement> | null {\n    const element = this.getElementAtPosition(x, y, {\n      includeBoundTextElement: true,\n    });\n    if (element && isTextElement(element) && !element.isDeleted) {\n      return element;\n    }\n    return null;\n  }\n\n  private getElementAtPosition(\n    x: number,\n    y: number,\n    opts?: {\n      preferSelected?: boolean;\n      includeBoundTextElement?: boolean;\n      includeLockedElements?: boolean;\n    },\n  ): NonDeleted<ExcalidrawElement> | null {\n    const allHitElements = this.getElementsAtPosition(\n      x,\n      y,\n      opts?.includeBoundTextElement,\n      opts?.includeLockedElements,\n    );\n\n    if (allHitElements.length > 1) {\n      if (opts?.preferSelected) {\n        for (let index = allHitElements.length - 1; index > -1; index--) {\n          if (this.state.selectedElementIds[allHitElements[index].id]) {\n            return allHitElements[index];\n          }\n        }\n      }\n      const elementWithHighestZIndex =\n        allHitElements[allHitElements.length - 1];\n\n      // If we're hitting element with highest z-index only on its bounding box\n      // while also hitting other element figure, the latter should be considered.\n      return hitElementItself({\n        x,\n        y,\n        element: elementWithHighestZIndex,\n        shape: getElementShape(\n          elementWithHighestZIndex,\n          this.scene.getNonDeletedElementsMap(),\n        ),\n        // when overlapping, we would like to be more precise\n        // this also avoids the need to update past tests\n        threshold: this.getElementHitThreshold() / 2,\n        frameNameBound: isFrameLikeElement(elementWithHighestZIndex)\n          ? this.frameNameBoundsCache.get(elementWithHighestZIndex)\n          : null,\n      })\n        ? elementWithHighestZIndex\n        : allHitElements[allHitElements.length - 2];\n    }\n    if (allHitElements.length === 1) {\n      return allHitElements[0];\n    }\n\n    return null;\n  }\n\n  private getElementsAtPosition(\n    x: number,\n    y: number,\n    includeBoundTextElement: boolean = false,\n    includeLockedElements: boolean = false,\n  ): NonDeleted<ExcalidrawElement>[] {\n    const iframeLikes: Ordered<ExcalidrawIframeElement>[] = [];\n\n    const elementsMap = this.scene.getNonDeletedElementsMap();\n\n    const elements = (\n      includeBoundTextElement && includeLockedElements\n        ? this.scene.getNonDeletedElements()\n        : this.scene\n            .getNonDeletedElements()\n            .filter(\n              (element) =>\n                (includeLockedElements || !element.locked) &&\n                (includeBoundTextElement ||\n                  !(isTextElement(element) && element.containerId)),\n            )\n    )\n      .filter((el) => this.hitElement(x, y, el))\n      .filter((element) => {\n        // hitting a frame's element from outside the frame is not considered a hit\n        const containingFrame = getContainingFrame(element, elementsMap);\n        return containingFrame &&\n          this.state.frameRendering.enabled &&\n          this.state.frameRendering.clip\n          ? isCursorInFrame({ x, y }, containingFrame, elementsMap)\n          : true;\n      })\n      .filter((el) => {\n        // The parameter elements comes ordered from lower z-index to higher.\n        // We want to preserve that order on the returned array.\n        // Exception being embeddables which should be on top of everything else in\n        // terms of hit testing.\n        if (isIframeElement(el)) {\n          iframeLikes.push(el);\n          return false;\n        }\n        return true;\n      })\n      .concat(iframeLikes) as NonDeleted<ExcalidrawElement>[];\n\n    return elements;\n  }\n\n  private getElementHitThreshold() {\n    return DEFAULT_COLLISION_THRESHOLD / this.state.zoom.value;\n  }\n\n  private hitElement(\n    x: number,\n    y: number,\n    element: ExcalidrawElement,\n    considerBoundingBox = true,\n  ) {\n    // if the element is selected, then hit test is done against its bounding box\n    if (\n      considerBoundingBox &&\n      this.state.selectedElementIds[element.id] &&\n      shouldShowBoundingBox([element], this.state)\n    ) {\n      const selectionShape = getSelectionBoxShape(\n        element,\n        this.scene.getNonDeletedElementsMap(),\n        isImageElement(element) ? 0 : this.getElementHitThreshold(),\n      );\n\n      // if hitting the bounding box, return early\n      // but if not, we should check for other cases as well (e.g. frame name)\n      if (isPointInShape(pointFrom(x, y), selectionShape)) {\n        return true;\n      }\n    }\n\n    // take bound text element into consideration for hit collision as well\n    const hitBoundTextOfElement = hitElementBoundText(\n      x,\n      y,\n      getBoundTextShape(element, this.scene.getNonDeletedElementsMap()),\n    );\n    if (hitBoundTextOfElement) {\n      return true;\n    }\n\n    return hitElementItself({\n      x,\n      y,\n      element,\n      shape: getElementShape(element, this.scene.getNonDeletedElementsMap()),\n      threshold: this.getElementHitThreshold(),\n      frameNameBound: isFrameLikeElement(element)\n        ? this.frameNameBoundsCache.get(element)\n        : null,\n    });\n  }\n\n  private getTextBindableContainerAtPosition(x: number, y: number) {\n    const elements = this.scene.getNonDeletedElements();\n    const selectedElements = this.scene.getSelectedElements(this.state);\n    if (selectedElements.length === 1) {\n      return isTextBindableContainer(selectedElements[0], false)\n        ? selectedElements[0]\n        : null;\n    }\n    let hitElement = null;\n    // We need to do hit testing from front (end of the array) to back (beginning of the array)\n    for (let index = elements.length - 1; index >= 0; --index) {\n      if (elements[index].isDeleted) {\n        continue;\n      }\n      const [x1, y1, x2, y2] = getElementAbsoluteCoords(\n        elements[index],\n        this.scene.getNonDeletedElementsMap(),\n      );\n      if (\n        isArrowElement(elements[index]) &&\n        hitElementItself({\n          x,\n          y,\n          element: elements[index],\n          shape: getElementShape(\n            elements[index],\n            this.scene.getNonDeletedElementsMap(),\n          ),\n          threshold: this.getElementHitThreshold(),\n        })\n      ) {\n        hitElement = elements[index];\n        break;\n      } else if (x1 < x && x < x2 && y1 < y && y < y2) {\n        hitElement = elements[index];\n        break;\n      }\n    }\n\n    return isTextBindableContainer(hitElement, false) ? hitElement : null;\n  }\n\n  private startTextEditing = ({\n    sceneX,\n    sceneY,\n    insertAtParentCenter = true,\n    container,\n    autoEdit = true,\n  }: {\n    /** X position to insert text at */\n    sceneX: number;\n    /** Y position to insert text at */\n    sceneY: number;\n    /** whether to attempt to insert at element center if applicable */\n    insertAtParentCenter?: boolean;\n    container?: ExcalidrawTextContainer | null;\n    autoEdit?: boolean;\n  }) => {\n    let shouldBindToContainer = false;\n\n    let parentCenterPosition =\n      insertAtParentCenter &&\n      this.getTextWysiwygSnappedToCenterPosition(\n        sceneX,\n        sceneY,\n        this.state,\n        container,\n      );\n    if (container && parentCenterPosition) {\n      const boundTextElementToContainer = getBoundTextElement(\n        container,\n        this.scene.getNonDeletedElementsMap(),\n      );\n      if (!boundTextElementToContainer) {\n        shouldBindToContainer = true;\n      }\n    }\n    let existingTextElement: NonDeleted<ExcalidrawTextElement> | null = null;\n\n    const selectedElements = this.scene.getSelectedElements(this.state);\n\n    if (selectedElements.length === 1) {\n      if (isTextElement(selectedElements[0])) {\n        existingTextElement = selectedElements[0];\n      } else if (container) {\n        existingTextElement = getBoundTextElement(\n          selectedElements[0],\n          this.scene.getNonDeletedElementsMap(),\n        );\n      } else {\n        existingTextElement = this.getTextElementAtPosition(sceneX, sceneY);\n      }\n    } else {\n      existingTextElement = this.getTextElementAtPosition(sceneX, sceneY);\n    }\n\n    const fontFamily =\n      existingTextElement?.fontFamily || this.state.currentItemFontFamily;\n\n    const lineHeight =\n      existingTextElement?.lineHeight || getLineHeight(fontFamily);\n    const fontSize = this.state.currentItemFontSize;\n\n    if (\n      !existingTextElement &&\n      shouldBindToContainer &&\n      container &&\n      !isArrowElement(container)\n    ) {\n      const fontString = {\n        fontSize,\n        fontFamily,\n      };\n      const minWidth = getApproxMinLineWidth(\n        getFontString(fontString),\n        lineHeight,\n      );\n      const minHeight = getApproxMinLineHeight(fontSize, lineHeight);\n      const newHeight = Math.max(container.height, minHeight);\n      const newWidth = Math.max(container.width, minWidth);\n      mutateElement(container, { height: newHeight, width: newWidth });\n      sceneX = container.x + newWidth / 2;\n      sceneY = container.y + newHeight / 2;\n      if (parentCenterPosition) {\n        parentCenterPosition = this.getTextWysiwygSnappedToCenterPosition(\n          sceneX,\n          sceneY,\n          this.state,\n          container,\n        );\n      }\n    }\n\n    const topLayerFrame = this.getTopLayerFrameAtSceneCoords({\n      x: sceneX,\n      y: sceneY,\n    });\n\n    const element = existingTextElement\n      ? existingTextElement\n      : newTextElement({\n          x: parentCenterPosition\n            ? parentCenterPosition.elementCenterX\n            : sceneX,\n          y: parentCenterPosition\n            ? parentCenterPosition.elementCenterY\n            : sceneY,\n          strokeColor: this.state.currentItemStrokeColor,\n          backgroundColor: this.state.currentItemBackgroundColor,\n          fillStyle: this.state.currentItemFillStyle,\n          strokeWidth: this.state.currentItemStrokeWidth,\n          strokeStyle: this.state.currentItemStrokeStyle,\n          roughness: this.state.currentItemRoughness,\n          opacity: this.state.currentItemOpacity,\n          text: \"\",\n          fontSize,\n          fontFamily,\n          textAlign: parentCenterPosition\n            ? \"center\"\n            : this.state.currentItemTextAlign,\n          verticalAlign: parentCenterPosition\n            ? VERTICAL_ALIGN.MIDDLE\n            : DEFAULT_VERTICAL_ALIGN,\n          containerId: shouldBindToContainer ? container?.id : undefined,\n          groupIds: container?.groupIds ?? [],\n          lineHeight,\n          angle: container?.angle ?? (0 as Radians),\n          frameId: topLayerFrame ? topLayerFrame.id : null,\n        });\n\n    if (!existingTextElement && shouldBindToContainer && container) {\n      mutateElement(container, {\n        boundElements: (container.boundElements || []).concat({\n          type: \"text\",\n          id: element.id,\n        }),\n      });\n    }\n    this.setState({ editingTextElement: element });\n\n    if (!existingTextElement) {\n      if (container && shouldBindToContainer) {\n        const containerIndex = this.scene.getElementIndex(container.id);\n        this.scene.insertElementAtIndex(element, containerIndex + 1);\n      } else {\n        this.scene.insertElement(element);\n      }\n    }\n\n    if (autoEdit || existingTextElement || container) {\n      this.handleTextWysiwyg(element, {\n        isExistingElement: !!existingTextElement,\n      });\n    } else {\n      this.setState({\n        newElement: element,\n        multiElement: null,\n      });\n    }\n  };\n\n  private startImageCropping = (image: ExcalidrawImageElement) => {\n    this.store.shouldCaptureIncrement();\n    this.setState({\n      croppingElementId: image.id,\n    });\n  };\n\n  private finishImageCropping = () => {\n    if (this.state.croppingElementId) {\n      this.store.shouldCaptureIncrement();\n      this.setState({\n        croppingElementId: null,\n      });\n    }\n  };\n\n  private handleCanvasDoubleClick = (\n    event: React.MouseEvent<HTMLCanvasElement>,\n  ) => {\n    // case: double-clicking with arrow/line tool selected would both create\n    // text and enter multiElement mode\n    if (this.state.multiElement) {\n      return;\n    }\n    // we should only be able to double click when mode is selection\n    if (this.state.activeTool.type !== \"selection\") {\n      return;\n    }\n\n    const selectedElements = this.scene.getSelectedElements(this.state);\n\n    let { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(\n      event,\n      this.state,\n    );\n\n    if (selectedElements.length === 1 && isLinearElement(selectedElements[0])) {\n      if (\n        event[KEYS.CTRL_OR_CMD] &&\n        (!this.state.editingLinearElement ||\n          this.state.editingLinearElement.elementId !==\n            selectedElements[0].id) &&\n        !isElbowArrow(selectedElements[0])\n      ) {\n        this.store.shouldCaptureIncrement();\n        this.setState({\n          editingLinearElement: new LinearElementEditor(selectedElements[0]),\n        });\n        return;\n      } else if (\n        this.state.selectedLinearElement &&\n        isElbowArrow(selectedElements[0])\n      ) {\n        const hitCoords = LinearElementEditor.getSegmentMidpointHitCoords(\n          this.state.selectedLinearElement,\n          { x: sceneX, y: sceneY },\n          this.state,\n          this.scene.getNonDeletedElementsMap(),\n        );\n        const midPoint = hitCoords\n          ? LinearElementEditor.getSegmentMidPointIndex(\n              this.state.selectedLinearElement,\n              this.state,\n              hitCoords,\n              this.scene.getNonDeletedElementsMap(),\n            )\n          : -1;\n\n        if (midPoint && midPoint > -1) {\n          this.store.shouldCaptureIncrement();\n          LinearElementEditor.deleteFixedSegment(selectedElements[0], midPoint);\n\n          const nextCoords = LinearElementEditor.getSegmentMidpointHitCoords(\n            {\n              ...this.state.selectedLinearElement,\n              segmentMidPointHoveredCoords: null,\n            },\n            { x: sceneX, y: sceneY },\n            this.state,\n            this.scene.getNonDeletedElementsMap(),\n          );\n          const nextIndex = nextCoords\n            ? LinearElementEditor.getSegmentMidPointIndex(\n                this.state.selectedLinearElement,\n                this.state,\n                nextCoords,\n                this.scene.getNonDeletedElementsMap(),\n              )\n            : null;\n\n          this.setState({\n            selectedLinearElement: {\n              ...this.state.selectedLinearElement,\n              pointerDownState: {\n                ...this.state.selectedLinearElement.pointerDownState,\n                segmentMidpoint: {\n                  index: nextIndex,\n                  value: hitCoords,\n                  added: false,\n                },\n              },\n              segmentMidPointHoveredCoords: nextCoords,\n            },\n          });\n\n          return;\n        }\n      }\n    }\n\n    if (selectedElements.length === 1 && isImageElement(selectedElements[0])) {\n      this.startImageCropping(selectedElements[0]);\n      return;\n    }\n\n    resetCursor(this.interactiveCanvas);\n\n    const selectedGroupIds = getSelectedGroupIds(this.state);\n\n    if (selectedGroupIds.length > 0) {\n      const hitElement = this.getElementAtPosition(sceneX, sceneY);\n\n      const selectedGroupId =\n        hitElement &&\n        getSelectedGroupIdForElement(hitElement, this.state.selectedGroupIds);\n\n      if (selectedGroupId) {\n        this.store.shouldCaptureIncrement();\n        this.setState((prevState) => ({\n          ...prevState,\n          ...selectGroupsForSelectedElements(\n            {\n              editingGroupId: selectedGroupId,\n              selectedElementIds: { [hitElement!.id]: true },\n            },\n            this.scene.getNonDeletedElements(),\n            prevState,\n            this,\n          ),\n        }));\n        return;\n      }\n    }\n\n    resetCursor(this.interactiveCanvas);\n    if (!event[KEYS.CTRL_OR_CMD] && !this.state.viewModeEnabled) {\n      const hitElement = this.getElementAtPosition(sceneX, sceneY);\n\n      if (isIframeLikeElement(hitElement)) {\n        this.setState({\n          activeEmbeddable: { element: hitElement, state: \"active\" },\n        });\n        return;\n      }\n\n      const container = this.getTextBindableContainerAtPosition(sceneX, sceneY);\n\n      if (container) {\n        if (\n          hasBoundTextElement(container) ||\n          !isTransparent(container.backgroundColor) ||\n          hitElementItself({\n            x: sceneX,\n            y: sceneY,\n            element: container,\n            shape: getElementShape(\n              container,\n              this.scene.getNonDeletedElementsMap(),\n            ),\n            threshold: this.getElementHitThreshold(),\n          })\n        ) {\n          const midPoint = getContainerCenter(\n            container,\n            this.state,\n            this.scene.getNonDeletedElementsMap(),\n          );\n\n          sceneX = midPoint.x;\n          sceneY = midPoint.y;\n        }\n      }\n\n      this.startTextEditing({\n        sceneX,\n        sceneY,\n        insertAtParentCenter: !event.altKey,\n        container,\n      });\n    }\n  };\n\n  private getElementLinkAtPosition = (\n    scenePointer: Readonly<{ x: number; y: number }>,\n    hitElement: NonDeletedExcalidrawElement | null,\n  ): ExcalidrawElement | undefined => {\n    const elements = this.scene.getNonDeletedElements();\n    let hitElementIndex = -1;\n\n    for (let index = elements.length - 1; index >= 0; index--) {\n      const element = elements[index];\n      if (hitElement && element.id === hitElement.id) {\n        hitElementIndex = index;\n      }\n      if (\n        element.link &&\n        index >= hitElementIndex &&\n        isPointHittingLink(\n          element,\n          this.scene.getNonDeletedElementsMap(),\n          this.state,\n          pointFrom(scenePointer.x, scenePointer.y),\n          this.device.editor.isMobile,\n        )\n      ) {\n        return element;\n      }\n    }\n  };\n\n  private redirectToLink = (\n    event: React.PointerEvent<HTMLCanvasElement>,\n    isTouchScreen: boolean,\n  ) => {\n    const draggedDistance = pointDistance(\n      pointFrom(\n        this.lastPointerDownEvent!.clientX,\n        this.lastPointerDownEvent!.clientY,\n      ),\n      pointFrom(\n        this.lastPointerUpEvent!.clientX,\n        this.lastPointerUpEvent!.clientY,\n      ),\n    );\n    if (!this.hitLinkElement || draggedDistance > DRAGGING_THRESHOLD) {\n      return;\n    }\n    const lastPointerDownCoords = viewportCoordsToSceneCoords(\n      this.lastPointerDownEvent!,\n      this.state,\n    );\n    const elementsMap = this.scene.getNonDeletedElementsMap();\n    const lastPointerDownHittingLinkIcon = isPointHittingLink(\n      this.hitLinkElement,\n      elementsMap,\n      this.state,\n      pointFrom(lastPointerDownCoords.x, lastPointerDownCoords.y),\n      this.device.editor.isMobile,\n    );\n    const lastPointerUpCoords = viewportCoordsToSceneCoords(\n      this.lastPointerUpEvent!,\n      this.state,\n    );\n    const lastPointerUpHittingLinkIcon = isPointHittingLink(\n      this.hitLinkElement,\n      elementsMap,\n      this.state,\n      pointFrom(lastPointerUpCoords.x, lastPointerUpCoords.y),\n      this.device.editor.isMobile,\n    );\n    if (lastPointerDownHittingLinkIcon && lastPointerUpHittingLinkIcon) {\n      hideHyperlinkToolip();\n      let url = this.hitLinkElement.link;\n      if (url) {\n        url = normalizeLink(url);\n        let customEvent;\n        if (this.props.onLinkOpen) {\n          customEvent = wrapEvent(EVENT.EXCALIDRAW_LINK, event.nativeEvent);\n          this.props.onLinkOpen(\n            {\n              ...this.hitLinkElement,\n              link: url,\n            },\n            customEvent,\n          );\n        }\n        if (!customEvent?.defaultPrevented) {\n          const target = isLocalLink(url) ? \"_self\" : \"_blank\";\n          const newWindow = window.open(undefined, target);\n          // https://mathiasbynens.github.io/rel-noopener/\n          if (newWindow) {\n            newWindow.opener = null;\n            newWindow.location = url;\n          }\n        }\n      }\n    }\n  };\n\n  private getTopLayerFrameAtSceneCoords = (sceneCoords: {\n    x: number;\n    y: number;\n  }) => {\n    const elementsMap = this.scene.getNonDeletedElementsMap();\n    const frames = this.scene\n      .getNonDeletedFramesLikes()\n      .filter((frame): frame is ExcalidrawFrameLikeElement =>\n        isCursorInFrame(sceneCoords, frame, elementsMap),\n      );\n\n    return frames.length ? frames[frames.length - 1] : null;\n  };\n\n  private handleCanvasPointerMove = (\n    event: React.PointerEvent<HTMLCanvasElement>,\n  ) => {\n    this.savePointer(event.clientX, event.clientY, this.state.cursorButton);\n    this.lastPointerMoveEvent = event.nativeEvent;\n\n    if (gesture.pointers.has(event.pointerId)) {\n      gesture.pointers.set(event.pointerId, {\n        x: event.clientX,\n        y: event.clientY,\n      });\n    }\n\n    const initialScale = gesture.initialScale;\n    if (\n      gesture.pointers.size === 2 &&\n      gesture.lastCenter &&\n      initialScale &&\n      gesture.initialDistance\n    ) {\n      const center = getCenter(gesture.pointers);\n      const deltaX = center.x - gesture.lastCenter.x;\n      const deltaY = center.y - gesture.lastCenter.y;\n      gesture.lastCenter = center;\n\n      const distance = getDistance(Array.from(gesture.pointers.values()));\n      const scaleFactor =\n        this.state.activeTool.type === \"freedraw\" && this.state.penMode\n          ? 1\n          : distance / gesture.initialDistance;\n\n      const nextZoom = scaleFactor\n        ? getNormalizedZoom(initialScale * scaleFactor)\n        : this.state.zoom.value;\n\n      this.setState((state) => {\n        const zoomState = getStateForZoom(\n          {\n            viewportX: center.x,\n            viewportY: center.y,\n            nextZoom,\n          },\n          state,\n        );\n\n        this.translateCanvas({\n          zoom: zoomState.zoom,\n          // 2x multiplier is just a magic number that makes this work correctly\n          // on touchscreen devices (note: if we get report that panning is slower/faster\n          // than actual movement, consider swapping with devicePixelRatio)\n          scrollX: zoomState.scrollX + 2 * (deltaX / nextZoom),\n          scrollY: zoomState.scrollY + 2 * (deltaY / nextZoom),\n          shouldCacheIgnoreZoom: true,\n        });\n      });\n      this.resetShouldCacheIgnoreZoomDebounced();\n    } else {\n      gesture.lastCenter =\n        gesture.initialDistance =\n        gesture.initialScale =\n          null;\n    }\n\n    if (\n      isHoldingSpace ||\n      isPanning ||\n      isDraggingScrollBar ||\n      isHandToolActive(this.state)\n    ) {\n      return;\n    }\n\n    const isPointerOverScrollBars = isOverScrollBars(\n      currentScrollBars,\n      event.clientX - this.state.offsetLeft,\n      event.clientY - this.state.offsetTop,\n    );\n    const isOverScrollBar = isPointerOverScrollBars.isOverEither;\n    if (\n      !this.state.newElement &&\n      !this.state.selectionElement &&\n      !this.state.selectedElementsAreBeingDragged &&\n      !this.state.multiElement\n    ) {\n      if (isOverScrollBar) {\n        resetCursor(this.interactiveCanvas);\n      } else {\n        setCursorForShape(this.interactiveCanvas, this.state);\n      }\n    }\n\n    const scenePointer = viewportCoordsToSceneCoords(event, this.state);\n    const { x: scenePointerX, y: scenePointerY } = scenePointer;\n\n    if (\n      !this.state.newElement &&\n      isActiveToolNonLinearSnappable(this.state.activeTool.type)\n    ) {\n      const { originOffset, snapLines } = getSnapLinesAtPointer(\n        this.scene.getNonDeletedElements(),\n        this,\n        {\n          x: scenePointerX,\n          y: scenePointerY,\n        },\n        event,\n        this.scene.getNonDeletedElementsMap(),\n      );\n\n      this.setState((prevState) => {\n        const nextSnapLines = updateStable(prevState.snapLines, snapLines);\n        const nextOriginOffset = prevState.originSnapOffset\n          ? updateStable(prevState.originSnapOffset, originOffset)\n          : originOffset;\n\n        if (\n          prevState.snapLines === nextSnapLines &&\n          prevState.originSnapOffset === nextOriginOffset\n        ) {\n          return null;\n        }\n        return {\n          snapLines: nextSnapLines,\n          originSnapOffset: nextOriginOffset,\n        };\n      });\n    } else if (\n      !this.state.newElement &&\n      !this.state.selectedElementsAreBeingDragged &&\n      !this.state.selectionElement\n    ) {\n      this.setState((prevState) => {\n        if (prevState.snapLines.length) {\n          return {\n            snapLines: [],\n          };\n        }\n        return null;\n      });\n    }\n\n    if (\n      this.state.editingLinearElement &&\n      !this.state.editingLinearElement.isDragging\n    ) {\n      const editingLinearElement = LinearElementEditor.handlePointerMove(\n        event,\n        scenePointerX,\n        scenePointerY,\n        this,\n        this.scene.getNonDeletedElementsMap(),\n      );\n\n      if (\n        editingLinearElement &&\n        editingLinearElement !== this.state.editingLinearElement\n      ) {\n        // Since we are reading from previous state which is not possible with\n        // automatic batching in React 18 hence using flush sync to synchronously\n        // update the state. Check https://github.com/excalidraw/excalidraw/pull/5508 for more details.\n        flushSync(() => {\n          this.setState({\n            editingLinearElement,\n          });\n        });\n      }\n      if (editingLinearElement?.lastUncommittedPoint != null) {\n        this.maybeSuggestBindingAtCursor(\n          scenePointer,\n          editingLinearElement.elbowed,\n        );\n      } else {\n        // causes stack overflow if not sync\n        flushSync(() => {\n          this.setState({ suggestedBindings: [] });\n        });\n      }\n    }\n\n    if (isBindingElementType(this.state.activeTool.type)) {\n      // Hovering with a selected tool or creating new linear element via click\n      // and point\n      const { newElement } = this.state;\n      if (isBindingElement(newElement, false)) {\n        this.maybeSuggestBindingsForLinearElementAtCoords(\n          newElement,\n          [scenePointer],\n          this.state.startBoundElement,\n        );\n      } else {\n        this.maybeSuggestBindingAtCursor(scenePointer, false);\n      }\n    }\n\n    if (this.state.multiElement) {\n      const { multiElement } = this.state;\n      const { x: rx, y: ry } = multiElement;\n\n      const { points, lastCommittedPoint } = multiElement;\n      const lastPoint = points[points.length - 1];\n\n      setCursorForShape(this.interactiveCanvas, this.state);\n\n      if (lastPoint === lastCommittedPoint) {\n        // if we haven't yet created a temp point and we're beyond commit-zone\n        // threshold, add a point\n        if (\n          pointDistance(\n            pointFrom(scenePointerX - rx, scenePointerY - ry),\n            lastPoint,\n          ) >= LINE_CONFIRM_THRESHOLD\n        ) {\n          mutateElement(\n            multiElement,\n            {\n              points: [\n                ...points,\n                pointFrom<LocalPoint>(scenePointerX - rx, scenePointerY - ry),\n              ],\n            },\n            false,\n          );\n        } else {\n          setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);\n          // in this branch, we're inside the commit zone, and no uncommitted\n          // point exists. Thus do nothing (don't add/remove points).\n        }\n      } else if (\n        points.length > 2 &&\n        lastCommittedPoint &&\n        pointDistance(\n          pointFrom(scenePointerX - rx, scenePointerY - ry),\n          lastCommittedPoint,\n        ) < LINE_CONFIRM_THRESHOLD\n      ) {\n        setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);\n        mutateElement(\n          multiElement,\n          {\n            points: points.slice(0, -1),\n          },\n          false,\n        );\n      } else {\n        const [gridX, gridY] = getGridPoint(\n          scenePointerX,\n          scenePointerY,\n          event[KEYS.CTRL_OR_CMD] || isElbowArrow(multiElement)\n            ? null\n            : this.getEffectiveGridSize(),\n        );\n\n        const [lastCommittedX, lastCommittedY] =\n          multiElement?.lastCommittedPoint ?? [0, 0];\n\n        let dxFromLastCommitted = gridX - rx - lastCommittedX;\n        let dyFromLastCommitted = gridY - ry - lastCommittedY;\n\n        if (shouldRotateWithDiscreteAngle(event)) {\n          ({ width: dxFromLastCommitted, height: dyFromLastCommitted } =\n            getLockedLinearCursorAlignSize(\n              // actual coordinate of the last committed point\n              lastCommittedX + rx,\n              lastCommittedY + ry,\n              // cursor-grid coordinate\n              gridX,\n              gridY,\n            ));\n        }\n\n        if (isPathALoop(points, this.state.zoom.value)) {\n          setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);\n        }\n        // update last uncommitted point\n        mutateElement(\n          multiElement,\n          {\n            points: [\n              ...points.slice(0, -1),\n              pointFrom<LocalPoint>(\n                lastCommittedX + dxFromLastCommitted,\n                lastCommittedY + dyFromLastCommitted,\n              ),\n            ],\n          },\n          false,\n          {\n            isDragging: true,\n          },\n        );\n\n        // in this path, we're mutating multiElement to reflect\n        // how it will be after adding pointer position as the next point\n        // trigger update here so that new element canvas renders again to reflect this\n        this.triggerRender(false);\n      }\n\n      return;\n    }\n\n    const hasDeselectedButton = Boolean(event.buttons);\n    if (\n      hasDeselectedButton ||\n      (this.state.activeTool.type !== \"selection\" &&\n        this.state.activeTool.type !== \"text\" &&\n        this.state.activeTool.type !== \"eraser\")\n    ) {\n      return;\n    }\n\n    const elements = this.scene.getNonDeletedElements();\n\n    const selectedElements = this.scene.getSelectedElements(this.state);\n    if (\n      selectedElements.length === 1 &&\n      !isOverScrollBar &&\n      !this.state.editingLinearElement\n    ) {\n      // for linear elements, we'd like to prioritize point dragging over edge resizing\n      // therefore, we update and check hovered point index first\n      if (this.state.selectedLinearElement) {\n        this.handleHoverSelectedLinearElement(\n          this.state.selectedLinearElement,\n          scenePointerX,\n          scenePointerY,\n        );\n      }\n\n      if (\n        (!this.state.selectedLinearElement ||\n          this.state.selectedLinearElement.hoverPointIndex === -1) &&\n        this.state.openDialog?.name !== \"elementLinkSelector\" &&\n        !(selectedElements.length === 1 && isElbowArrow(selectedElements[0]))\n      ) {\n        const elementWithTransformHandleType =\n          getElementWithTransformHandleType(\n            elements,\n            this.state,\n            scenePointerX,\n            scenePointerY,\n            this.state.zoom,\n            event.pointerType,\n            this.scene.getNonDeletedElementsMap(),\n            this.device,\n          );\n        if (\n          elementWithTransformHandleType &&\n          elementWithTransformHandleType.transformHandleType\n        ) {\n          setCursor(\n            this.interactiveCanvas,\n            getCursorForResizingElement(elementWithTransformHandleType),\n          );\n          return;\n        }\n      }\n    } else if (\n      selectedElements.length > 1 &&\n      !isOverScrollBar &&\n      this.state.openDialog?.name !== \"elementLinkSelector\"\n    ) {\n      const transformHandleType = getTransformHandleTypeFromCoords(\n        getCommonBounds(selectedElements),\n        scenePointerX,\n        scenePointerY,\n        this.state.zoom,\n        event.pointerType,\n        this.device,\n      );\n      if (transformHandleType) {\n        setCursor(\n          this.interactiveCanvas,\n          getCursorForResizingElement({\n            transformHandleType,\n          }),\n        );\n        return;\n      }\n    }\n\n    const hitElement = this.getElementAtPosition(\n      scenePointer.x,\n      scenePointer.y,\n    );\n\n    this.hitLinkElement = this.getElementLinkAtPosition(\n      scenePointer,\n      hitElement,\n    );\n    if (isEraserActive(this.state)) {\n      return;\n    }\n    if (\n      this.hitLinkElement &&\n      !this.state.selectedElementIds[this.hitLinkElement.id]\n    ) {\n      setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);\n      showHyperlinkTooltip(\n        this.hitLinkElement,\n        this.state,\n        this.scene.getNonDeletedElementsMap(),\n      );\n    } else {\n      hideHyperlinkToolip();\n      if (\n        hitElement &&\n        (hitElement.link || isEmbeddableElement(hitElement)) &&\n        this.state.selectedElementIds[hitElement.id] &&\n        !this.state.contextMenu &&\n        !this.state.showHyperlinkPopup\n      ) {\n        this.setState({ showHyperlinkPopup: \"info\" });\n      } else if (this.state.activeTool.type === \"text\") {\n        setCursor(\n          this.interactiveCanvas,\n          isTextElement(hitElement) ? CURSOR_TYPE.TEXT : CURSOR_TYPE.CROSSHAIR,\n        );\n      } else if (this.state.viewModeEnabled) {\n        setCursor(this.interactiveCanvas, CURSOR_TYPE.GRAB);\n      } else if (this.state.openDialog?.name === \"elementLinkSelector\") {\n        setCursor(this.interactiveCanvas, CURSOR_TYPE.AUTO);\n      } else if (isOverScrollBar) {\n        setCursor(this.interactiveCanvas, CURSOR_TYPE.AUTO);\n      } else if (this.state.selectedLinearElement) {\n        this.handleHoverSelectedLinearElement(\n          this.state.selectedLinearElement,\n          scenePointerX,\n          scenePointerY,\n        );\n      } else if (\n        // if using cmd/ctrl, we're not dragging\n        !event[KEYS.CTRL_OR_CMD]\n      ) {\n        if (\n          (hitElement ||\n            this.isHittingCommonBoundingBoxOfSelectedElements(\n              scenePointer,\n              selectedElements,\n            )) &&\n          !hitElement?.locked\n        ) {\n          if (\n            hitElement &&\n            isIframeLikeElement(hitElement) &&\n            this.isIframeLikeElementCenter(\n              hitElement,\n              event,\n              scenePointerX,\n              scenePointerY,\n            )\n          ) {\n            setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);\n            this.setState({\n              activeEmbeddable: { element: hitElement, state: \"hover\" },\n            });\n          } else if (!hitElement || !isElbowArrow(hitElement)) {\n            setCursor(this.interactiveCanvas, CURSOR_TYPE.MOVE);\n            if (this.state.activeEmbeddable?.state === \"hover\") {\n              this.setState({ activeEmbeddable: null });\n            }\n          }\n        }\n      } else {\n        setCursor(this.interactiveCanvas, CURSOR_TYPE.AUTO);\n      }\n    }\n\n    if (this.state.openDialog?.name === \"elementLinkSelector\" && hitElement) {\n      this.setState((prevState) => {\n        return {\n          hoveredElementIds: updateStable(\n            prevState.hoveredElementIds,\n            selectGroupsForSelectedElements(\n              {\n                editingGroupId: prevState.editingGroupId,\n                selectedElementIds: { [hitElement.id]: true },\n              },\n              this.scene.getNonDeletedElements(),\n              prevState,\n              this,\n            ).selectedElementIds,\n          ),\n        };\n      });\n    } else if (\n      this.state.openDialog?.name === \"elementLinkSelector\" &&\n      !hitElement\n    ) {\n      this.setState((prevState) => ({\n        hoveredElementIds: updateStable(prevState.hoveredElementIds, {}),\n      }));\n    }\n  };\n\n  private handleEraser = (\n    event: PointerEvent,\n    pointerDownState: PointerDownState,\n    scenePointer: { x: number; y: number },\n  ) => {\n    this.eraserTrail.addPointToPath(scenePointer.x, scenePointer.y);\n\n    let didChange = false;\n\n    const processedGroups = new Set<ExcalidrawElement[\"id\"]>();\n    const nonDeletedElements = this.scene.getNonDeletedElements();\n\n    const processElements = (elements: ExcalidrawElement[]) => {\n      for (const element of elements) {\n        if (element.locked) {\n          return;\n        }\n\n        if (event.altKey) {\n          if (this.elementsPendingErasure.delete(element.id)) {\n            didChange = true;\n          }\n        } else if (!this.elementsPendingErasure.has(element.id)) {\n          didChange = true;\n          this.elementsPendingErasure.add(element.id);\n        }\n\n        // (un)erase groups atomically\n        if (didChange && element.groupIds?.length) {\n          const shallowestGroupId = element.groupIds.at(-1)!;\n          if (!processedGroups.has(shallowestGroupId)) {\n            processedGroups.add(shallowestGroupId);\n            const elems = getElementsInGroup(\n              nonDeletedElements,\n              shallowestGroupId,\n            );\n            for (const elem of elems) {\n              if (event.altKey) {\n                this.elementsPendingErasure.delete(elem.id);\n              } else {\n                this.elementsPendingErasure.add(elem.id);\n              }\n            }\n          }\n        }\n      }\n    };\n\n    const distance = pointDistance(\n      pointFrom(pointerDownState.lastCoords.x, pointerDownState.lastCoords.y),\n      pointFrom(scenePointer.x, scenePointer.y),\n    );\n    const threshold = this.getElementHitThreshold();\n    const p = { ...pointerDownState.lastCoords };\n    let samplingInterval = 0;\n    while (samplingInterval <= distance) {\n      const hitElements = this.getElementsAtPosition(p.x, p.y);\n      processElements(hitElements);\n\n      // Exit since we reached current point\n      if (samplingInterval === distance) {\n        break;\n      }\n\n      // Calculate next point in the line at a distance of sampling interval\n      samplingInterval = Math.min(samplingInterval + threshold, distance);\n\n      const distanceRatio = samplingInterval / distance;\n      const nextX = (1 - distanceRatio) * p.x + distanceRatio * scenePointer.x;\n      const nextY = (1 - distanceRatio) * p.y + distanceRatio * scenePointer.y;\n      p.x = nextX;\n      p.y = nextY;\n    }\n\n    pointerDownState.lastCoords.x = scenePointer.x;\n    pointerDownState.lastCoords.y = scenePointer.y;\n\n    if (didChange) {\n      for (const element of this.scene.getNonDeletedElements()) {\n        if (\n          isBoundToContainer(element) &&\n          (this.elementsPendingErasure.has(element.id) ||\n            this.elementsPendingErasure.has(element.containerId))\n        ) {\n          if (event.altKey) {\n            this.elementsPendingErasure.delete(element.id);\n            this.elementsPendingErasure.delete(element.containerId);\n          } else {\n            this.elementsPendingErasure.add(element.id);\n            this.elementsPendingErasure.add(element.containerId);\n          }\n        }\n      }\n\n      this.elementsPendingErasure = new Set(this.elementsPendingErasure);\n      this.triggerRender();\n    }\n  };\n\n  // set touch moving for mobile context menu\n  private handleTouchMove = (event: React.TouchEvent<HTMLCanvasElement>) => {\n    invalidateContextMenu = true;\n  };\n\n  handleHoverSelectedLinearElement(\n    linearElementEditor: LinearElementEditor,\n    scenePointerX: number,\n    scenePointerY: number,\n  ) {\n    const elementsMap = this.scene.getNonDeletedElementsMap();\n\n    const element = LinearElementEditor.getElement(\n      linearElementEditor.elementId,\n      elementsMap,\n    );\n\n    if (!element) {\n      return;\n    }\n    if (this.state.selectedLinearElement) {\n      let hoverPointIndex = -1;\n      let segmentMidPointHoveredCoords = null;\n      if (\n        hitElementItself({\n          x: scenePointerX,\n          y: scenePointerY,\n          element,\n          shape: getElementShape(\n            element,\n            this.scene.getNonDeletedElementsMap(),\n          ),\n        })\n      ) {\n        hoverPointIndex = LinearElementEditor.getPointIndexUnderCursor(\n          element,\n          elementsMap,\n          this.state.zoom,\n          scenePointerX,\n          scenePointerY,\n        );\n        segmentMidPointHoveredCoords =\n          LinearElementEditor.getSegmentMidpointHitCoords(\n            linearElementEditor,\n            { x: scenePointerX, y: scenePointerY },\n            this.state,\n            this.scene.getNonDeletedElementsMap(),\n          );\n        const isHoveringAPointHandle = isElbowArrow(element)\n          ? hoverPointIndex === 0 ||\n            hoverPointIndex === element.points.length - 1\n          : hoverPointIndex >= 0;\n        if (isHoveringAPointHandle || segmentMidPointHoveredCoords) {\n          setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);\n        } else if (this.hitElement(scenePointerX, scenePointerY, element)) {\n          setCursor(this.interactiveCanvas, CURSOR_TYPE.MOVE);\n        }\n      } else if (this.hitElement(scenePointerX, scenePointerY, element)) {\n        if (\n          // Ebow arrows can only be moved when unconnected\n          !isElbowArrow(element) ||\n          !(element.startBinding || element.endBinding)\n        ) {\n          setCursor(this.interactiveCanvas, CURSOR_TYPE.MOVE);\n        }\n      }\n\n      if (\n        this.state.selectedLinearElement.hoverPointIndex !== hoverPointIndex\n      ) {\n        this.setState({\n          selectedLinearElement: {\n            ...this.state.selectedLinearElement,\n            hoverPointIndex,\n          },\n        });\n      }\n\n      if (\n        !LinearElementEditor.arePointsEqual(\n          this.state.selectedLinearElement.segmentMidPointHoveredCoords,\n          segmentMidPointHoveredCoords,\n        )\n      ) {\n        this.setState({\n          selectedLinearElement: {\n            ...this.state.selectedLinearElement,\n            segmentMidPointHoveredCoords,\n          },\n        });\n      }\n    } else {\n      setCursor(this.interactiveCanvas, CURSOR_TYPE.AUTO);\n    }\n  }\n\n  private handleCanvasPointerDown = (\n    event: React.PointerEvent<HTMLElement>,\n  ) => {\n    const target = event.target as HTMLElement;\n    // capture subsequent pointer events to the canvas\n    // this makes other elements non-interactive until pointer up\n    if (target.setPointerCapture) {\n      target.setPointerCapture(event.pointerId);\n    }\n\n    this.maybeCleanupAfterMissingPointerUp(event.nativeEvent);\n    this.maybeUnfollowRemoteUser();\n\n    if (this.state.searchMatches) {\n      this.setState((state) => ({\n        searchMatches: state.searchMatches.map((searchMatch) => ({\n          ...searchMatch,\n          focus: false,\n        })),\n      }));\n      editorJotaiStore.set(searchItemInFocusAtom, null);\n    }\n\n    // since contextMenu options are potentially evaluated on each render,\n    // and an contextMenu action may depend on selection state, we must\n    // close the contextMenu before we update the selection on pointerDown\n    // (e.g. resetting selection)\n    if (this.state.contextMenu) {\n      this.setState({ contextMenu: null });\n    }\n\n    if (this.state.snapLines) {\n      this.setAppState({ snapLines: [] });\n    }\n\n    this.updateGestureOnPointerDown(event);\n\n    // if dragging element is freedraw and another pointerdown event occurs\n    // a second finger is on the screen\n    // discard the freedraw element if it is very short because it is likely\n    // just a spike, otherwise finalize the freedraw element when the second\n    // finger is lifted\n    if (\n      event.pointerType === \"touch\" &&\n      this.state.newElement &&\n      this.state.newElement.type === \"freedraw\"\n    ) {\n      const element = this.state.newElement as ExcalidrawFreeDrawElement;\n      this.updateScene({\n        ...(element.points.length < 10\n          ? {\n              elements: this.scene\n                .getElementsIncludingDeleted()\n                .filter((el) => el.id !== element.id),\n            }\n          : {}),\n        appState: {\n          newElement: null,\n          editingTextElement: null,\n          startBoundElement: null,\n          suggestedBindings: [],\n          selectedElementIds: makeNextSelectedElementIds(\n            Object.keys(this.state.selectedElementIds)\n              .filter((key) => key !== element.id)\n              .reduce((obj: { [id: string]: true }, key) => {\n                obj[key] = this.state.selectedElementIds[key];\n                return obj;\n              }, {}),\n            this.state,\n          ),\n        },\n        captureUpdate:\n          this.state.openDialog?.name === \"elementLinkSelector\"\n            ? CaptureUpdateAction.EVENTUALLY\n            : CaptureUpdateAction.NEVER,\n      });\n      return;\n    }\n\n    // remove any active selection when we start to interact with canvas\n    // (mainly, we care about removing selection outside the component which\n    //  would prevent our copy handling otherwise)\n    const selection = document.getSelection();\n    if (selection?.anchorNode) {\n      selection.removeAllRanges();\n    }\n    this.maybeOpenContextMenuAfterPointerDownOnTouchDevices(event);\n\n    //fires only once, if pen is detected, penMode is enabled\n    //the user can disable this by toggling the penMode button\n    if (!this.state.penDetected && event.pointerType === \"pen\") {\n      this.setState((prevState) => {\n        return {\n          penMode: true,\n          penDetected: true,\n        };\n      });\n    }\n\n    if (\n      !this.device.isTouchScreen &&\n      [\"pen\", \"touch\"].includes(event.pointerType)\n    ) {\n      this.device = updateObject(this.device, { isTouchScreen: true });\n    }\n\n    if (isPanning) {\n      return;\n    }\n\n    this.lastPointerDownEvent = event;\n\n    // we must exit before we set `cursorButton` state and `savePointer`\n    // else it will send pointer state & laser pointer events in collab when\n    // panning\n    if (this.handleCanvasPanUsingWheelOrSpaceDrag(event)) {\n      return;\n    }\n\n    this.setState({\n      lastPointerDownWith: event.pointerType,\n      cursorButton: \"down\",\n    });\n    this.savePointer(event.clientX, event.clientY, \"down\");\n\n    if (\n      event.button === POINTER_BUTTON.ERASER &&\n      this.state.activeTool.type !== TOOL_TYPE.eraser\n    ) {\n      this.setState(\n        {\n          activeTool: updateActiveTool(this.state, {\n            type: TOOL_TYPE.eraser,\n            lastActiveToolBeforeEraser: this.state.activeTool,\n          }),\n        },\n        () => {\n          this.handleCanvasPointerDown(event);\n          const onPointerUp = () => {\n            unsubPointerUp();\n            unsubCleanup?.();\n            if (isEraserActive(this.state)) {\n              this.setState({\n                activeTool: updateActiveTool(this.state, {\n                  ...(this.state.activeTool.lastActiveTool || {\n                    type: TOOL_TYPE.selection,\n                  }),\n                  lastActiveToolBeforeEraser: null,\n                }),\n              });\n            }\n          };\n\n          const unsubPointerUp = addEventListener(\n            window,\n            EVENT.POINTER_UP,\n            onPointerUp,\n            {\n              once: true,\n            },\n          );\n          let unsubCleanup: UnsubscribeCallback | undefined;\n          // subscribe inside rAF lest it'd be triggered on the same pointerdown\n          // if we start erasing while coming from blurred document since\n          // we cleanup pointer events on focus\n          requestAnimationFrame(() => {\n            unsubCleanup =\n              this.missingPointerEventCleanupEmitter.once(onPointerUp);\n          });\n        },\n      );\n      return;\n    }\n\n    // only handle left mouse button or touch\n    if (\n      event.button !== POINTER_BUTTON.MAIN &&\n      event.button !== POINTER_BUTTON.TOUCH &&\n      event.button !== POINTER_BUTTON.ERASER\n    ) {\n      return;\n    }\n\n    // don't select while panning\n    if (gesture.pointers.size > 1) {\n      return;\n    }\n\n    // State for the duration of a pointer interaction, which starts with a\n    // pointerDown event, ends with a pointerUp event (or another pointerDown)\n    const pointerDownState = this.initialPointerDownState(event);\n\n    this.setState({\n      selectedElementsAreBeingDragged: false,\n    });\n\n    if (this.handleDraggingScrollBar(event, pointerDownState)) {\n      return;\n    }\n\n    this.clearSelectionIfNotUsingSelection();\n    this.updateBindingEnabledOnPointerMove(event);\n\n    if (this.handleSelectionOnPointerDown(event, pointerDownState)) {\n      return;\n    }\n\n    const allowOnPointerDown =\n      !this.state.penMode ||\n      event.pointerType !== \"touch\" ||\n      this.state.activeTool.type === \"selection\" ||\n      this.state.activeTool.type === \"text\" ||\n      this.state.activeTool.type === \"image\";\n\n    if (!allowOnPointerDown) {\n      return;\n    }\n\n    if (this.state.activeTool.type === \"text\") {\n      this.handleTextOnPointerDown(event, pointerDownState);\n    } else if (\n      this.state.activeTool.type === \"arrow\" ||\n      this.state.activeTool.type === \"line\"\n    ) {\n      this.handleLinearElementOnPointerDown(\n        event,\n        this.state.activeTool.type,\n        pointerDownState,\n      );\n    } else if (this.state.activeTool.type === \"image\") {\n      // reset image preview on pointerdown\n      setCursor(this.interactiveCanvas, CURSOR_TYPE.CROSSHAIR);\n\n      // retrieve the latest element as the state may be stale\n      const pendingImageElement =\n        this.state.pendingImageElementId &&\n        this.scene.getElement(this.state.pendingImageElementId);\n\n      if (!pendingImageElement) {\n        return;\n      }\n\n      this.setState({\n        newElement: pendingImageElement as ExcalidrawNonSelectionElement,\n        pendingImageElementId: null,\n        multiElement: null,\n      });\n\n      const { x, y } = viewportCoordsToSceneCoords(event, this.state);\n\n      const frame = this.getTopLayerFrameAtSceneCoords({ x, y });\n\n      mutateElement(pendingImageElement, {\n        x,\n        y,\n        frameId: frame ? frame.id : null,\n      });\n    } else if (this.state.activeTool.type === \"freedraw\") {\n      this.handleFreeDrawElementOnPointerDown(\n        event,\n        this.state.activeTool.type,\n        pointerDownState,\n      );\n    } else if (this.state.activeTool.type === \"custom\") {\n      setCursorForShape(this.interactiveCanvas, this.state);\n    } else if (\n      this.state.activeTool.type === TOOL_TYPE.frame ||\n      this.state.activeTool.type === TOOL_TYPE.magicframe\n    ) {\n      this.createFrameElementOnPointerDown(\n        pointerDownState,\n        this.state.activeTool.type,\n      );\n    } else if (this.state.activeTool.type === \"laser\") {\n      this.laserTrails.startPath(\n        pointerDownState.lastCoords.x,\n        pointerDownState.lastCoords.y,\n      );\n    } else if (\n      this.state.activeTool.type !== \"eraser\" &&\n      this.state.activeTool.type !== \"hand\"\n    ) {\n      this.createGenericElementOnPointerDown(\n        this.state.activeTool.type,\n        pointerDownState,\n      );\n    }\n\n    this.props?.onPointerDown?.(this.state.activeTool, pointerDownState);\n    this.onPointerDownEmitter.trigger(\n      this.state.activeTool,\n      pointerDownState,\n      event,\n    );\n\n    if (this.state.activeTool.type === \"eraser\") {\n      this.eraserTrail.startPath(\n        pointerDownState.lastCoords.x,\n        pointerDownState.lastCoords.y,\n      );\n    }\n\n    const onPointerMove =\n      this.onPointerMoveFromPointerDownHandler(pointerDownState);\n\n    const onPointerUp =\n      this.onPointerUpFromPointerDownHandler(pointerDownState);\n\n    const onKeyDown = this.onKeyDownFromPointerDownHandler(pointerDownState);\n    const onKeyUp = this.onKeyUpFromPointerDownHandler(pointerDownState);\n\n    this.missingPointerEventCleanupEmitter.once((_event) =>\n      onPointerUp(_event || event.nativeEvent),\n    );\n\n    if (!this.state.viewModeEnabled || this.state.activeTool.type === \"laser\") {\n      window.addEventListener(EVENT.POINTER_MOVE, onPointerMove);\n      window.addEventListener(EVENT.POINTER_UP, onPointerUp);\n      window.addEventListener(EVENT.KEYDOWN, onKeyDown);\n      window.addEventListener(EVENT.KEYUP, onKeyUp);\n      pointerDownState.eventListeners.onMove = onPointerMove;\n      pointerDownState.eventListeners.onUp = onPointerUp;\n      pointerDownState.eventListeners.onKeyUp = onKeyUp;\n      pointerDownState.eventListeners.onKeyDown = onKeyDown;\n    }\n  };\n\n  private handleCanvasPointerUp = (\n    event: React.PointerEvent<HTMLCanvasElement>,\n  ) => {\n    this.removePointer(event);\n    this.lastPointerUpEvent = event;\n\n    const scenePointer = viewportCoordsToSceneCoords(\n      { clientX: event.clientX, clientY: event.clientY },\n      this.state,\n    );\n    const clicklength =\n      event.timeStamp - (this.lastPointerDownEvent?.timeStamp ?? 0);\n\n    if (this.device.editor.isMobile && clicklength < 300) {\n      const hitElement = this.getElementAtPosition(\n        scenePointer.x,\n        scenePointer.y,\n      );\n      if (\n        isIframeLikeElement(hitElement) &&\n        this.isIframeLikeElementCenter(\n          hitElement,\n          event,\n          scenePointer.x,\n          scenePointer.y,\n        )\n      ) {\n        this.handleEmbeddableCenterClick(hitElement);\n        return;\n      }\n    }\n\n    if (this.device.isTouchScreen) {\n      const hitElement = this.getElementAtPosition(\n        scenePointer.x,\n        scenePointer.y,\n      );\n      this.hitLinkElement = this.getElementLinkAtPosition(\n        scenePointer,\n        hitElement,\n      );\n    }\n\n    if (\n      this.hitLinkElement &&\n      !this.state.selectedElementIds[this.hitLinkElement.id]\n    ) {\n      if (\n        clicklength < 300 &&\n        isIframeLikeElement(this.hitLinkElement) &&\n        !isPointHittingLinkIcon(\n          this.hitLinkElement,\n          this.scene.getNonDeletedElementsMap(),\n          this.state,\n          pointFrom(scenePointer.x, scenePointer.y),\n        )\n      ) {\n        this.handleEmbeddableCenterClick(this.hitLinkElement);\n      } else {\n        this.redirectToLink(event, this.device.isTouchScreen);\n      }\n    } else if (this.state.viewModeEnabled) {\n      this.setState({\n        activeEmbeddable: null,\n        selectedElementIds: {},\n      });\n    }\n  };\n\n  private maybeOpenContextMenuAfterPointerDownOnTouchDevices = (\n    event: React.PointerEvent<HTMLElement>,\n  ): void => {\n    // deal with opening context menu on touch devices\n    if (event.pointerType === \"touch\") {\n      invalidateContextMenu = false;\n\n      if (touchTimeout) {\n        // If there's already a touchTimeout, this means that there's another\n        // touch down and we are doing another touch, so we shouldn't open the\n        // context menu.\n        invalidateContextMenu = true;\n      } else {\n        // open the context menu with the first touch's clientX and clientY\n        // if the touch is not moving\n        touchTimeout = window.setTimeout(() => {\n          touchTimeout = 0;\n          if (!invalidateContextMenu) {\n            this.handleCanvasContextMenu(event);\n          }\n        }, TOUCH_CTX_MENU_TIMEOUT);\n      }\n    }\n  };\n\n  private resetContextMenuTimer = () => {\n    clearTimeout(touchTimeout);\n    touchTimeout = 0;\n    invalidateContextMenu = false;\n  };\n\n  /**\n   * pointerup may not fire in certian cases (user tabs away...), so in order\n   * to properly cleanup pointerdown state, we need to fire any hanging\n   * pointerup handlers manually\n   */\n  private maybeCleanupAfterMissingPointerUp = (event: PointerEvent | null) => {\n    lastPointerUp?.();\n    this.missingPointerEventCleanupEmitter.trigger(event).clear();\n  };\n\n  // Returns whether the event is a panning\n  public handleCanvasPanUsingWheelOrSpaceDrag = (\n    event: React.PointerEvent<HTMLElement> | MouseEvent,\n  ): boolean => {\n    if (\n      !(\n        gesture.pointers.size <= 1 &&\n        (event.button === POINTER_BUTTON.WHEEL ||\n          (event.button === POINTER_BUTTON.MAIN && isHoldingSpace) ||\n          isHandToolActive(this.state) ||\n          this.state.viewModeEnabled)\n      )\n    ) {\n      return false;\n    }\n    isPanning = true;\n\n    // due to event.preventDefault below, container wouldn't get focus\n    // automatically\n    this.focusContainer();\n\n    // preventing defualt while text editing messes with cursor/focus\n    if (!this.state.editingTextElement) {\n      // necessary to prevent browser from scrolling the page if excalidraw\n      // not full-page #4489\n      //\n      // as such, the above is broken when panning canvas while in wysiwyg\n      event.preventDefault();\n    }\n\n    let nextPastePrevented = false;\n    const isLinux =\n      typeof window === undefined\n        ? false\n        : /Linux/.test(window.navigator.platform);\n\n    setCursor(this.interactiveCanvas, CURSOR_TYPE.GRABBING);\n    let { clientX: lastX, clientY: lastY } = event;\n    const onPointerMove = withBatchedUpdatesThrottled((event: PointerEvent) => {\n      const deltaX = lastX - event.clientX;\n      const deltaY = lastY - event.clientY;\n      lastX = event.clientX;\n      lastY = event.clientY;\n\n      /*\n       * Prevent paste event if we move while middle clicking on Linux.\n       * See issue #1383.\n       */\n      if (\n        isLinux &&\n        !nextPastePrevented &&\n        (Math.abs(deltaX) > 1 || Math.abs(deltaY) > 1)\n      ) {\n        nextPastePrevented = true;\n\n        /* Prevent the next paste event */\n        const preventNextPaste = (event: ClipboardEvent) => {\n          document.body.removeEventListener(EVENT.PASTE, preventNextPaste);\n          event.stopPropagation();\n        };\n\n        /*\n         * Reenable next paste in case of disabled middle click paste for\n         * any reason:\n         * - right click paste\n         * - empty clipboard\n         */\n        const enableNextPaste = () => {\n          setTimeout(() => {\n            document.body.removeEventListener(EVENT.PASTE, preventNextPaste);\n            window.removeEventListener(EVENT.POINTER_UP, enableNextPaste);\n          }, 100);\n        };\n\n        document.body.addEventListener(EVENT.PASTE, preventNextPaste);\n        window.addEventListener(EVENT.POINTER_UP, enableNextPaste);\n      }\n\n      this.translateCanvas({\n        scrollX: this.state.scrollX - deltaX / this.state.zoom.value,\n        scrollY: this.state.scrollY - deltaY / this.state.zoom.value,\n      });\n    });\n    const teardown = withBatchedUpdates(\n      (lastPointerUp = () => {\n        lastPointerUp = null;\n        isPanning = false;\n        if (!isHoldingSpace) {\n          if (this.state.viewModeEnabled) {\n            setCursor(this.interactiveCanvas, CURSOR_TYPE.GRAB);\n          } else {\n            setCursorForShape(this.interactiveCanvas, this.state);\n          }\n        }\n        this.setState({\n          cursorButton: \"up\",\n        });\n        this.savePointer(event.clientX, event.clientY, \"up\");\n        window.removeEventListener(EVENT.POINTER_MOVE, onPointerMove);\n        window.removeEventListener(EVENT.POINTER_UP, teardown);\n        window.removeEventListener(EVENT.BLUR, teardown);\n        onPointerMove.flush();\n      }),\n    );\n    window.addEventListener(EVENT.BLUR, teardown);\n    window.addEventListener(EVENT.POINTER_MOVE, onPointerMove, {\n      passive: true,\n    });\n    window.addEventListener(EVENT.POINTER_UP, teardown);\n    return true;\n  };\n\n  private updateGestureOnPointerDown(\n    event: React.PointerEvent<HTMLElement>,\n  ): void {\n    gesture.pointers.set(event.pointerId, {\n      x: event.clientX,\n      y: event.clientY,\n    });\n\n    if (gesture.pointers.size === 2) {\n      gesture.lastCenter = getCenter(gesture.pointers);\n      gesture.initialScale = this.state.zoom.value;\n      gesture.initialDistance = getDistance(\n        Array.from(gesture.pointers.values()),\n      );\n    }\n  }\n\n  private initialPointerDownState(\n    event: React.PointerEvent<HTMLElement>,\n  ): PointerDownState {\n    const origin = viewportCoordsToSceneCoords(event, this.state);\n    const selectedElements = this.scene.getSelectedElements(this.state);\n    const [minX, minY, maxX, maxY] = getCommonBounds(selectedElements);\n    const isElbowArrowOnly = selectedElements.findIndex(isElbowArrow) === 0;\n\n    return {\n      origin,\n      withCmdOrCtrl: event[KEYS.CTRL_OR_CMD],\n      originInGrid: tupleToCoors(\n        getGridPoint(\n          origin.x,\n          origin.y,\n          event[KEYS.CTRL_OR_CMD] || isElbowArrowOnly\n            ? null\n            : this.getEffectiveGridSize(),\n        ),\n      ),\n      scrollbars: isOverScrollBars(\n        currentScrollBars,\n        event.clientX - this.state.offsetLeft,\n        event.clientY - this.state.offsetTop,\n      ),\n      // we need to duplicate because we'll be updating this state\n      lastCoords: { ...origin },\n      originalElements: this.scene\n        .getNonDeletedElements()\n        .reduce((acc, element) => {\n          acc.set(element.id, deepCopyElement(element));\n          return acc;\n        }, new Map() as PointerDownState[\"originalElements\"]),\n      resize: {\n        handleType: false,\n        isResizing: false,\n        offset: { x: 0, y: 0 },\n        arrowDirection: \"origin\",\n        center: { x: (maxX + minX) / 2, y: (maxY + minY) / 2 },\n      },\n      hit: {\n        element: null,\n        allHitElements: [],\n        wasAddedToSelection: false,\n        hasBeenDuplicated: false,\n        hasHitCommonBoundingBoxOfSelectedElements:\n          this.isHittingCommonBoundingBoxOfSelectedElements(\n            origin,\n            selectedElements,\n          ),\n      },\n      drag: {\n        hasOccurred: false,\n        offset: null,\n      },\n      eventListeners: {\n        onMove: null,\n        onUp: null,\n        onKeyUp: null,\n        onKeyDown: null,\n      },\n      boxSelection: {\n        hasOccurred: false,\n      },\n    };\n  }\n\n  // Returns whether the event is a dragging a scrollbar\n  private handleDraggingScrollBar(\n    event: React.PointerEvent<HTMLElement>,\n    pointerDownState: PointerDownState,\n  ): boolean {\n    if (\n      !(pointerDownState.scrollbars.isOverEither && !this.state.multiElement)\n    ) {\n      return false;\n    }\n    isDraggingScrollBar = true;\n    pointerDownState.lastCoords.x = event.clientX;\n    pointerDownState.lastCoords.y = event.clientY;\n    const onPointerMove = withBatchedUpdatesThrottled((event: PointerEvent) => {\n      const target = event.target;\n      if (!(target instanceof HTMLElement)) {\n        return;\n      }\n\n      this.handlePointerMoveOverScrollbars(event, pointerDownState);\n    });\n    const onPointerUp = withBatchedUpdates(() => {\n      lastPointerUp = null;\n      isDraggingScrollBar = false;\n      setCursorForShape(this.interactiveCanvas, this.state);\n      this.setState({\n        cursorButton: \"up\",\n      });\n      this.savePointer(event.clientX, event.clientY, \"up\");\n      window.removeEventListener(EVENT.POINTER_MOVE, onPointerMove);\n      window.removeEventListener(EVENT.POINTER_UP, onPointerUp);\n      onPointerMove.flush();\n    });\n\n    lastPointerUp = onPointerUp;\n\n    window.addEventListener(EVENT.POINTER_MOVE, onPointerMove);\n    window.addEventListener(EVENT.POINTER_UP, onPointerUp);\n    return true;\n  }\n\n  private clearSelectionIfNotUsingSelection = (): void => {\n    if (this.state.activeTool.type !== \"selection\") {\n      this.setState({\n        selectedElementIds: makeNextSelectedElementIds({}, this.state),\n        selectedGroupIds: {},\n        editingGroupId: null,\n        activeEmbeddable: null,\n      });\n    }\n  };\n\n  /**\n   * @returns whether the pointer event has been completely handled\n   */\n  private handleSelectionOnPointerDown = (\n    event: React.PointerEvent<HTMLElement>,\n    pointerDownState: PointerDownState,\n  ): boolean => {\n    if (this.state.activeTool.type === \"selection\") {\n      const elements = this.scene.getNonDeletedElements();\n      const elementsMap = this.scene.getNonDeletedElementsMap();\n      const selectedElements = this.scene.getSelectedElements(this.state);\n\n      if (\n        selectedElements.length === 1 &&\n        !this.state.editingLinearElement &&\n        !isElbowArrow(selectedElements[0]) &&\n        !(\n          this.state.selectedLinearElement &&\n          this.state.selectedLinearElement.hoverPointIndex !== -1\n        )\n      ) {\n        const elementWithTransformHandleType =\n          getElementWithTransformHandleType(\n            elements,\n            this.state,\n            pointerDownState.origin.x,\n            pointerDownState.origin.y,\n            this.state.zoom,\n            event.pointerType,\n            this.scene.getNonDeletedElementsMap(),\n            this.device,\n          );\n        if (elementWithTransformHandleType != null) {\n          if (\n            elementWithTransformHandleType.transformHandleType === \"rotation\"\n          ) {\n            this.setState({\n              resizingElement: elementWithTransformHandleType.element,\n            });\n            pointerDownState.resize.handleType =\n              elementWithTransformHandleType.transformHandleType;\n          } else if (this.state.croppingElementId) {\n            pointerDownState.resize.handleType =\n              elementWithTransformHandleType.transformHandleType;\n          } else {\n            this.setState({\n              resizingElement: elementWithTransformHandleType.element,\n            });\n            pointerDownState.resize.handleType =\n              elementWithTransformHandleType.transformHandleType;\n          }\n        }\n      } else if (selectedElements.length > 1) {\n        pointerDownState.resize.handleType = getTransformHandleTypeFromCoords(\n          getCommonBounds(selectedElements),\n          pointerDownState.origin.x,\n          pointerDownState.origin.y,\n          this.state.zoom,\n          event.pointerType,\n          this.device,\n        );\n      }\n      if (pointerDownState.resize.handleType) {\n        pointerDownState.resize.isResizing = true;\n        pointerDownState.resize.offset = tupleToCoors(\n          getResizeOffsetXY(\n            pointerDownState.resize.handleType,\n            selectedElements,\n            elementsMap,\n            pointerDownState.origin.x,\n            pointerDownState.origin.y,\n          ),\n        );\n        if (\n          selectedElements.length === 1 &&\n          isLinearElement(selectedElements[0]) &&\n          selectedElements[0].points.length === 2\n        ) {\n          pointerDownState.resize.arrowDirection = getResizeArrowDirection(\n            pointerDownState.resize.handleType,\n            selectedElements[0],\n          );\n        }\n      } else {\n        if (this.state.selectedLinearElement) {\n          const linearElementEditor =\n            this.state.editingLinearElement || this.state.selectedLinearElement;\n          const ret = LinearElementEditor.handlePointerDown(\n            event,\n            this,\n            this.store,\n            pointerDownState.origin,\n            linearElementEditor,\n            this.scene,\n          );\n          if (ret.hitElement) {\n            pointerDownState.hit.element = ret.hitElement;\n          }\n          if (ret.linearElementEditor) {\n            this.setState({ selectedLinearElement: ret.linearElementEditor });\n\n            if (this.state.editingLinearElement) {\n              this.setState({ editingLinearElement: ret.linearElementEditor });\n            }\n          }\n          if (ret.didAddPoint) {\n            return true;\n          }\n        }\n        // hitElement may already be set above, so check first\n        pointerDownState.hit.element =\n          pointerDownState.hit.element ??\n          this.getElementAtPosition(\n            pointerDownState.origin.x,\n            pointerDownState.origin.y,\n          );\n\n        this.hitLinkElement = this.getElementLinkAtPosition(\n          pointerDownState.origin,\n          pointerDownState.hit.element,\n        );\n\n        if (this.hitLinkElement) {\n          return true;\n        }\n\n        if (\n          this.state.croppingElementId &&\n          pointerDownState.hit.element?.id !== this.state.croppingElementId\n        ) {\n          this.finishImageCropping();\n        }\n\n        if (pointerDownState.hit.element) {\n          // Early return if pointer is hitting link icon\n          const hitLinkElement = this.getElementLinkAtPosition(\n            {\n              x: pointerDownState.origin.x,\n              y: pointerDownState.origin.y,\n            },\n            pointerDownState.hit.element,\n          );\n          if (hitLinkElement) {\n            return false;\n          }\n        }\n\n        // For overlapped elements one position may hit\n        // multiple elements\n        pointerDownState.hit.allHitElements = this.getElementsAtPosition(\n          pointerDownState.origin.x,\n          pointerDownState.origin.y,\n        );\n\n        const hitElement = pointerDownState.hit.element;\n        const someHitElementIsSelected =\n          pointerDownState.hit.allHitElements.some((element) =>\n            this.isASelectedElement(element),\n          );\n        if (\n          (hitElement === null || !someHitElementIsSelected) &&\n          !event.shiftKey &&\n          !pointerDownState.hit.hasHitCommonBoundingBoxOfSelectedElements\n        ) {\n          this.clearSelection(hitElement);\n        }\n\n        if (this.state.editingLinearElement) {\n          this.setState({\n            selectedElementIds: makeNextSelectedElementIds(\n              {\n                [this.state.editingLinearElement.elementId]: true,\n              },\n              this.state,\n            ),\n          });\n          // If we click on something\n        } else if (hitElement != null) {\n          // on CMD/CTRL, drill down to hit element regardless of groups etc.\n          if (event[KEYS.CTRL_OR_CMD]) {\n            if (!this.state.selectedElementIds[hitElement.id]) {\n              pointerDownState.hit.wasAddedToSelection = true;\n            }\n            this.setState((prevState) => ({\n              ...editGroupForSelectedElement(prevState, hitElement),\n              previousSelectedElementIds: this.state.selectedElementIds,\n            }));\n            // mark as not completely handled so as to allow dragging etc.\n            return false;\n          }\n\n          // deselect if item is selected\n          // if shift is not clicked, this will always return true\n          // otherwise, it will trigger selection based on current\n          // state of the box\n          if (!this.state.selectedElementIds[hitElement.id]) {\n            // if we are currently editing a group, exiting editing mode and deselect the group.\n            if (\n              this.state.editingGroupId &&\n              !isElementInGroup(hitElement, this.state.editingGroupId)\n            ) {\n              this.setState({\n                selectedElementIds: makeNextSelectedElementIds({}, this.state),\n                selectedGroupIds: {},\n                editingGroupId: null,\n                activeEmbeddable: null,\n              });\n            }\n\n            // Add hit element to selection. At this point if we're not holding\n            // SHIFT the previously selected element(s) were deselected above\n            // (make sure you use setState updater to use latest state)\n            // With shift-selection, we want to make sure that frames and their containing\n            // elements are not selected at the same time.\n            if (\n              !someHitElementIsSelected &&\n              !pointerDownState.hit.hasHitCommonBoundingBoxOfSelectedElements\n            ) {\n              this.setState((prevState) => {\n                let nextSelectedElementIds: { [id: string]: true } = {\n                  ...prevState.selectedElementIds,\n                  [hitElement.id]: true,\n                };\n\n                const previouslySelectedElements: ExcalidrawElement[] = [];\n\n                Object.keys(prevState.selectedElementIds).forEach((id) => {\n                  const element = this.scene.getElement(id);\n                  element && previouslySelectedElements.push(element);\n                });\n\n                // if hitElement is frame-like, deselect all of its elements\n                // if they are selected\n                if (isFrameLikeElement(hitElement)) {\n                  getFrameChildren(\n                    previouslySelectedElements,\n                    hitElement.id,\n                  ).forEach((element) => {\n                    delete nextSelectedElementIds[element.id];\n                  });\n                } else if (hitElement.frameId) {\n                  // if hitElement is in a frame and its frame has been selected\n                  // disable selection for the given element\n                  if (nextSelectedElementIds[hitElement.frameId]) {\n                    delete nextSelectedElementIds[hitElement.id];\n                  }\n                } else {\n                  // hitElement is neither a frame nor an element in a frame\n                  // but since hitElement could be in a group with some frames\n                  // this means selecting hitElement will have the frames selected as well\n                  // because we want to keep the invariant:\n                  // - frames and their elements are not selected at the same time\n                  // we deselect elements in those frames that were previously selected\n\n                  const groupIds = hitElement.groupIds;\n                  const framesInGroups = new Set(\n                    groupIds\n                      .flatMap((gid) =>\n                        getElementsInGroup(\n                          this.scene.getNonDeletedElements(),\n                          gid,\n                        ),\n                      )\n                      .filter((element) => isFrameLikeElement(element))\n                      .map((frame) => frame.id),\n                  );\n\n                  if (framesInGroups.size > 0) {\n                    previouslySelectedElements.forEach((element) => {\n                      if (\n                        element.frameId &&\n                        framesInGroups.has(element.frameId)\n                      ) {\n                        // deselect element and groups containing the element\n                        delete nextSelectedElementIds[element.id];\n                        element.groupIds\n                          .flatMap((gid) =>\n                            getElementsInGroup(\n                              this.scene.getNonDeletedElements(),\n                              gid,\n                            ),\n                          )\n                          .forEach((element) => {\n                            delete nextSelectedElementIds[element.id];\n                          });\n                      }\n                    });\n                  }\n                }\n\n                // Finally, in shape selection mode, we'd like to\n                // keep only one shape or group selected at a time.\n                // This means, if the hitElement is a different shape or group\n                // than the previously selected ones, we deselect the previous ones\n                // and select the hitElement\n                if (prevState.openDialog?.name === \"elementLinkSelector\") {\n                  if (\n                    !hitElement.groupIds.some(\n                      (gid) => prevState.selectedGroupIds[gid],\n                    )\n                  ) {\n                    nextSelectedElementIds = {\n                      [hitElement.id]: true,\n                    };\n                  }\n                }\n\n                return {\n                  ...selectGroupsForSelectedElements(\n                    {\n                      editingGroupId: prevState.editingGroupId,\n                      selectedElementIds: nextSelectedElementIds,\n                    },\n                    this.scene.getNonDeletedElements(),\n                    prevState,\n                    this,\n                  ),\n                  showHyperlinkPopup:\n                    hitElement.link || isEmbeddableElement(hitElement)\n                      ? \"info\"\n                      : false,\n                };\n              });\n              pointerDownState.hit.wasAddedToSelection = true;\n            }\n          }\n        }\n\n        this.setState({\n          previousSelectedElementIds: this.state.selectedElementIds,\n        });\n      }\n    }\n    return false;\n  };\n\n  private isASelectedElement(hitElement: ExcalidrawElement | null): boolean {\n    return hitElement != null && this.state.selectedElementIds[hitElement.id];\n  }\n\n  private isHittingCommonBoundingBoxOfSelectedElements(\n    point: Readonly<{ x: number; y: number }>,\n    selectedElements: readonly ExcalidrawElement[],\n  ): boolean {\n    if (selectedElements.length < 2) {\n      return false;\n    }\n\n    // How many pixels off the shape boundary we still consider a hit\n    const threshold = this.getElementHitThreshold();\n    const [x1, y1, x2, y2] = getCommonBounds(selectedElements);\n    return (\n      point.x > x1 - threshold &&\n      point.x < x2 + threshold &&\n      point.y > y1 - threshold &&\n      point.y < y2 + threshold\n    );\n  }\n\n  private handleTextOnPointerDown = (\n    event: React.PointerEvent<HTMLElement>,\n    pointerDownState: PointerDownState,\n  ): void => {\n    // if we're currently still editing text, clicking outside\n    // should only finalize it, not create another (irrespective\n    // of state.activeTool.locked)\n    if (this.state.editingTextElement) {\n      return;\n    }\n    let sceneX = pointerDownState.origin.x;\n    let sceneY = pointerDownState.origin.y;\n\n    const element = this.getElementAtPosition(sceneX, sceneY, {\n      includeBoundTextElement: true,\n    });\n\n    // FIXME\n    let container = this.getTextBindableContainerAtPosition(sceneX, sceneY);\n\n    if (hasBoundTextElement(element)) {\n      container = element as ExcalidrawTextContainer;\n      sceneX = element.x + element.width / 2;\n      sceneY = element.y + element.height / 2;\n    }\n    this.startTextEditing({\n      sceneX,\n      sceneY,\n      insertAtParentCenter: !event.altKey,\n      container,\n      autoEdit: false,\n    });\n\n    resetCursor(this.interactiveCanvas);\n    if (!this.state.activeTool.locked) {\n      this.setState({\n        activeTool: updateActiveTool(this.state, { type: \"selection\" }),\n      });\n    }\n  };\n\n  private handleFreeDrawElementOnPointerDown = (\n    event: React.PointerEvent<HTMLElement>,\n    elementType: ExcalidrawFreeDrawElement[\"type\"],\n    pointerDownState: PointerDownState,\n  ) => {\n    // Begin a mark capture. This does not have to update state yet.\n    const [gridX, gridY] = getGridPoint(\n      pointerDownState.origin.x,\n      pointerDownState.origin.y,\n      null,\n    );\n\n    const topLayerFrame = this.getTopLayerFrameAtSceneCoords({\n      x: gridX,\n      y: gridY,\n    });\n\n    const simulatePressure = event.pressure === 0.5;\n\n    const element = newFreeDrawElement({\n      type: elementType,\n      x: gridX,\n      y: gridY,\n      strokeColor: this.state.currentItemStrokeColor,\n      backgroundColor: this.state.currentItemBackgroundColor,\n      fillStyle: this.state.currentItemFillStyle,\n      strokeWidth: this.state.currentItemStrokeWidth,\n      strokeStyle: this.state.currentItemStrokeStyle,\n      roughness: this.state.currentItemRoughness,\n      opacity: this.state.currentItemOpacity,\n      roundness: null,\n      simulatePressure,\n      locked: false,\n      frameId: topLayerFrame ? topLayerFrame.id : null,\n      points: [pointFrom<LocalPoint>(0, 0)],\n      pressures: simulatePressure ? [] : [event.pressure],\n    });\n\n    this.scene.insertElement(element);\n\n    this.setState((prevState) => {\n      const nextSelectedElementIds = {\n        ...prevState.selectedElementIds,\n      };\n      delete nextSelectedElementIds[element.id];\n      return {\n        selectedElementIds: makeNextSelectedElementIds(\n          nextSelectedElementIds,\n          prevState,\n        ),\n      };\n    });\n\n    const boundElement = getHoveredElementForBinding(\n      pointerDownState.origin,\n      this.scene.getNonDeletedElements(),\n      this.scene.getNonDeletedElementsMap(),\n      this.state.zoom,\n    );\n\n    this.setState({\n      newElement: element,\n      startBoundElement: boundElement,\n      suggestedBindings: [],\n    });\n  };\n\n  public insertIframeElement = ({\n    sceneX,\n    sceneY,\n    width,\n    height,\n  }: {\n    sceneX: number;\n    sceneY: number;\n    width: number;\n    height: number;\n  }) => {\n    const [gridX, gridY] = getGridPoint(\n      sceneX,\n      sceneY,\n      this.lastPointerDownEvent?.[KEYS.CTRL_OR_CMD]\n        ? null\n        : this.getEffectiveGridSize(),\n    );\n\n    const element = newIframeElement({\n      type: \"iframe\",\n      x: gridX,\n      y: gridY,\n      strokeColor: \"transparent\",\n      backgroundColor: \"transparent\",\n      fillStyle: this.state.currentItemFillStyle,\n      strokeWidth: this.state.currentItemStrokeWidth,\n      strokeStyle: this.state.currentItemStrokeStyle,\n      roughness: this.state.currentItemRoughness,\n      roundness: this.getCurrentItemRoundness(\"iframe\"),\n      opacity: this.state.currentItemOpacity,\n      locked: false,\n      width,\n      height,\n    });\n\n    this.scene.insertElement(element);\n\n    return element;\n  };\n\n  //create rectangle element with youtube top left on nearest grid point width / hight 640/360\n  public insertEmbeddableElement = ({\n    sceneX,\n    sceneY,\n    link,\n  }: {\n    sceneX: number;\n    sceneY: number;\n    link: string;\n  }) => {\n    const [gridX, gridY] = getGridPoint(\n      sceneX,\n      sceneY,\n      this.lastPointerDownEvent?.[KEYS.CTRL_OR_CMD]\n        ? null\n        : this.getEffectiveGridSize(),\n    );\n\n    const embedLink = getEmbedLink(link);\n\n    if (!embedLink) {\n      return;\n    }\n\n    if (embedLink.error instanceof URIError) {\n      this.setToast({\n        message: t(\"toast.unrecognizedLinkFormat\"),\n        closable: true,\n      });\n    }\n\n    const element = newEmbeddableElement({\n      type: \"embeddable\",\n      x: gridX,\n      y: gridY,\n      strokeColor: \"transparent\",\n      backgroundColor: \"transparent\",\n      fillStyle: this.state.currentItemFillStyle,\n      strokeWidth: this.state.currentItemStrokeWidth,\n      strokeStyle: this.state.currentItemStrokeStyle,\n      roughness: this.state.currentItemRoughness,\n      roundness: this.getCurrentItemRoundness(\"embeddable\"),\n      opacity: this.state.currentItemOpacity,\n      locked: false,\n      width: embedLink.intrinsicSize.w,\n      height: embedLink.intrinsicSize.h,\n      link,\n    });\n\n    this.scene.insertElement(element);\n\n    return element;\n  };\n\n  private createImageElement = ({\n    sceneX,\n    sceneY,\n    addToFrameUnderCursor = true,\n  }: {\n    sceneX: number;\n    sceneY: number;\n    addToFrameUnderCursor?: boolean;\n  }) => {\n    const [gridX, gridY] = getGridPoint(\n      sceneX,\n      sceneY,\n      this.lastPointerDownEvent?.[KEYS.CTRL_OR_CMD]\n        ? null\n        : this.getEffectiveGridSize(),\n    );\n\n    const topLayerFrame = addToFrameUnderCursor\n      ? this.getTopLayerFrameAtSceneCoords({\n          x: gridX,\n          y: gridY,\n        })\n      : null;\n\n    const element = newImageElement({\n      type: \"image\",\n      x: gridX,\n      y: gridY,\n      strokeColor: this.state.currentItemStrokeColor,\n      backgroundColor: this.state.currentItemBackgroundColor,\n      fillStyle: this.state.currentItemFillStyle,\n      strokeWidth: this.state.currentItemStrokeWidth,\n      strokeStyle: this.state.currentItemStrokeStyle,\n      roughness: this.state.currentItemRoughness,\n      roundness: null,\n      opacity: this.state.currentItemOpacity,\n      locked: false,\n      frameId: topLayerFrame ? topLayerFrame.id : null,\n    });\n\n    return element;\n  };\n\n  private handleLinearElementOnPointerDown = (\n    event: React.PointerEvent<HTMLElement>,\n    elementType: ExcalidrawLinearElement[\"type\"],\n    pointerDownState: PointerDownState,\n  ): void => {\n    if (this.state.multiElement) {\n      const { multiElement } = this.state;\n\n      // finalize if completing a loop\n      if (\n        multiElement.type === \"line\" &&\n        isPathALoop(multiElement.points, this.state.zoom.value)\n      ) {\n        mutateElement(multiElement, {\n          lastCommittedPoint:\n            multiElement.points[multiElement.points.length - 1],\n        });\n        this.actionManager.executeAction(actionFinalize);\n        return;\n      }\n\n      // Elbow arrows cannot be created by putting down points\n      // only the start and end points can be defined\n      if (isElbowArrow(multiElement) && multiElement.points.length > 1) {\n        mutateElement(multiElement, {\n          lastCommittedPoint:\n            multiElement.points[multiElement.points.length - 1],\n        });\n        this.actionManager.executeAction(actionFinalize);\n        return;\n      }\n\n      const { x: rx, y: ry, lastCommittedPoint } = multiElement;\n\n      // clicking inside commit zone \u2192 finalize arrow\n      if (\n        multiElement.points.length > 1 &&\n        lastCommittedPoint &&\n        pointDistance(\n          pointFrom(\n            pointerDownState.origin.x - rx,\n            pointerDownState.origin.y - ry,\n          ),\n          lastCommittedPoint,\n        ) < LINE_CONFIRM_THRESHOLD\n      ) {\n        this.actionManager.executeAction(actionFinalize);\n        return;\n      }\n\n      this.setState((prevState) => ({\n        selectedElementIds: makeNextSelectedElementIds(\n          {\n            ...prevState.selectedElementIds,\n            [multiElement.id]: true,\n          },\n          prevState,\n        ),\n      }));\n      // clicking outside commit zone \u2192 update reference for last committed\n      // point\n      mutateElement(multiElement, {\n        lastCommittedPoint: multiElement.points[multiElement.points.length - 1],\n      });\n      setCursor(this.interactiveCanvas, CURSOR_TYPE.POINTER);\n    } else {\n      const [gridX, gridY] = getGridPoint(\n        pointerDownState.origin.x,\n        pointerDownState.origin.y,\n        event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize(),\n      );\n\n      const topLayerFrame = this.getTopLayerFrameAtSceneCoords({\n        x: gridX,\n        y: gridY,\n      });\n\n      /* If arrow is pre-arrowheads, it will have undefined for both start and end arrowheads.\n      If so, we want it to be null for start and \"arrow\" for end. If the linear item is not\n      an arrow, we want it to be null for both. Otherwise, we want it to use the\n      values from appState. */\n\n      const { currentItemStartArrowhead, currentItemEndArrowhead } = this.state;\n      const [startArrowhead, endArrowhead] =\n        elementType === \"arrow\"\n          ? [currentItemStartArrowhead, currentItemEndArrowhead]\n          : [null, null];\n\n      const element =\n        elementType === \"arrow\"\n          ? newArrowElement({\n              type: elementType,\n              x: gridX,\n              y: gridY,\n              strokeColor: this.state.currentItemStrokeColor,\n              backgroundColor: this.state.currentItemBackgroundColor,\n              fillStyle: this.state.currentItemFillStyle,\n              strokeWidth: this.state.currentItemStrokeWidth,\n              strokeStyle: this.state.currentItemStrokeStyle,\n              roughness: this.state.currentItemRoughness,\n              opacity: this.state.currentItemOpacity,\n              roundness:\n                this.state.currentItemArrowType === ARROW_TYPE.round\n                  ? { type: ROUNDNESS.PROPORTIONAL_RADIUS }\n                  : // note, roundness doesn't have any effect for elbow arrows,\n                    // but it's best to set it to null as well\n                    null,\n              startArrowhead,\n              endArrowhead,\n              locked: false,\n              frameId: topLayerFrame ? topLayerFrame.id : null,\n              elbowed: this.state.currentItemArrowType === ARROW_TYPE.elbow,\n              fixedSegments:\n                this.state.currentItemArrowType === ARROW_TYPE.elbow\n                  ? []\n                  : null,\n            })\n          : newLinearElement({\n              type: elementType,\n              x: gridX,\n              y: gridY,\n              strokeColor: this.state.currentItemStrokeColor,\n              backgroundColor: this.state.currentItemBackgroundColor,\n              fillStyle: this.state.currentItemFillStyle,\n              strokeWidth: this.state.currentItemStrokeWidth,\n              strokeStyle: this.state.currentItemStrokeStyle,\n              roughness: this.state.currentItemRoughness,\n              opacity: this.state.currentItemOpacity,\n              roundness:\n                this.state.currentItemRoundness === \"round\"\n                  ? { type: ROUNDNESS.PROPORTIONAL_RADIUS }\n                  : null,\n              locked: false,\n              frameId: topLayerFrame ? topLayerFrame.id : null,\n            });\n      this.setState((prevState) => {\n        const nextSelectedElementIds = {\n          ...prevState.selectedElementIds,\n        };\n        delete nextSelectedElementIds[element.id];\n        return {\n          selectedElementIds: makeNextSelectedElementIds(\n            nextSelectedElementIds,\n            prevState,\n          ),\n        };\n      });\n      mutateElement(element, {\n        points: [...element.points, pointFrom<LocalPoint>(0, 0)],\n      });\n      const boundElement = getHoveredElementForBinding(\n        pointerDownState.origin,\n        this.scene.getNonDeletedElements(),\n        this.scene.getNonDeletedElementsMap(),\n        this.state.zoom,\n        isElbowArrow(element),\n        isElbowArrow(element),\n      );\n\n      this.scene.insertElement(element);\n      this.setState({\n        newElement: element,\n        startBoundElement: boundElement,\n        suggestedBindings: [],\n      });\n    }\n  };\n\n  private getCurrentItemRoundness(\n    elementType:\n      | \"selection\"\n      | \"rectangle\"\n      | \"diamond\"\n      | \"ellipse\"\n      | \"iframe\"\n      | \"embeddable\",\n  ) {\n    return this.state.currentItemRoundness === \"round\"\n      ? {\n          type: isUsingAdaptiveRadius(elementType)\n            ? ROUNDNESS.ADAPTIVE_RADIUS\n            : ROUNDNESS.PROPORTIONAL_RADIUS,\n        }\n      : null;\n  }\n\n  private createGenericElementOnPointerDown = (\n    elementType: ExcalidrawGenericElement[\"type\"] | \"embeddable\",\n    pointerDownState: PointerDownState,\n  ): void => {\n    const [gridX, gridY] = getGridPoint(\n      pointerDownState.origin.x,\n      pointerDownState.origin.y,\n      this.lastPointerDownEvent?.[KEYS.CTRL_OR_CMD]\n        ? null\n        : this.getEffectiveGridSize(),\n    );\n\n    const topLayerFrame = this.getTopLayerFrameAtSceneCoords({\n      x: gridX,\n      y: gridY,\n    });\n\n    const baseElementAttributes = {\n      x: gridX,\n      y: gridY,\n      strokeColor: this.state.currentItemStrokeColor,\n      backgroundColor: this.state.currentItemBackgroundColor,\n      fillStyle: this.state.currentItemFillStyle,\n      strokeWidth: this.state.currentItemStrokeWidth,\n      strokeStyle: this.state.currentItemStrokeStyle,\n      roughness: this.state.currentItemRoughness,\n      opacity: this.state.currentItemOpacity,\n      roundness: this.getCurrentItemRoundness(elementType),\n      locked: false,\n      frameId: topLayerFrame ? topLayerFrame.id : null,\n    } as const;\n\n    let element;\n    if (elementType === \"embeddable\") {\n      element = newEmbeddableElement({\n        type: \"embeddable\",\n        ...baseElementAttributes,\n      });\n    } else {\n      element = newElement({\n        type: elementType,\n        ...baseElementAttributes,\n      });\n    }\n\n    if (element.type === \"selection\") {\n      this.setState({\n        selectionElement: element,\n      });\n    } else {\n      this.scene.insertElement(element);\n      this.setState({\n        multiElement: null,\n        newElement: element,\n      });\n    }\n  };\n\n  private createFrameElementOnPointerDown = (\n    pointerDownState: PointerDownState,\n    type: Extract<ToolType, \"frame\" | \"magicframe\">,\n  ): void => {\n    const [gridX, gridY] = getGridPoint(\n      pointerDownState.origin.x,\n      pointerDownState.origin.y,\n      this.lastPointerDownEvent?.[KEYS.CTRL_OR_CMD]\n        ? null\n        : this.getEffectiveGridSize(),\n    );\n\n    const constructorOpts = {\n      x: gridX,\n      y: gridY,\n      opacity: this.state.currentItemOpacity,\n      locked: false,\n      ...FRAME_STYLE,\n    } as const;\n\n    const frame =\n      type === TOOL_TYPE.magicframe\n        ? newMagicFrameElement(constructorOpts)\n        : newFrameElement(constructorOpts);\n\n    this.scene.insertElement(frame);\n\n    this.setState({\n      multiElement: null,\n      newElement: frame,\n    });\n  };\n\n  private maybeCacheReferenceSnapPoints(\n    event: KeyboardModifiersObject,\n    selectedElements: ExcalidrawElement[],\n    recomputeAnyways: boolean = false,\n  ) {\n    if (\n      isSnappingEnabled({\n        event,\n        app: this,\n        selectedElements,\n      }) &&\n      (recomputeAnyways || !SnapCache.getReferenceSnapPoints())\n    ) {\n      SnapCache.setReferenceSnapPoints(\n        getReferenceSnapPoints(\n          this.scene.getNonDeletedElements(),\n          selectedElements,\n          this.state,\n          this.scene.getNonDeletedElementsMap(),\n        ),\n      );\n    }\n  }\n\n  private maybeCacheVisibleGaps(\n    event: KeyboardModifiersObject,\n    selectedElements: ExcalidrawElement[],\n    recomputeAnyways: boolean = false,\n  ) {\n    if (\n      isSnappingEnabled({\n        event,\n        app: this,\n        selectedElements,\n      }) &&\n      (recomputeAnyways || !SnapCache.getVisibleGaps())\n    ) {\n      SnapCache.setVisibleGaps(\n        getVisibleGaps(\n          this.scene.getNonDeletedElements(),\n          selectedElements,\n          this.state,\n          this.scene.getNonDeletedElementsMap(),\n        ),\n      );\n    }\n  }\n\n  private onKeyDownFromPointerDownHandler(\n    pointerDownState: PointerDownState,\n  ): (event: KeyboardEvent) => void {\n    return withBatchedUpdates((event: KeyboardEvent) => {\n      if (this.maybeHandleResize(pointerDownState, event)) {\n        return;\n      }\n      this.maybeDragNewGenericElement(pointerDownState, event);\n    });\n  }\n\n  private onKeyUpFromPointerDownHandler(\n    pointerDownState: PointerDownState,\n  ): (event: KeyboardEvent) => void {\n    return withBatchedUpdates((event: KeyboardEvent) => {\n      // Prevents focus from escaping excalidraw tab\n      event.key === KEYS.ALT && event.preventDefault();\n      if (this.maybeHandleResize(pointerDownState, event)) {\n        return;\n      }\n      this.maybeDragNewGenericElement(pointerDownState, event);\n    });\n  }\n\n  private onPointerMoveFromPointerDownHandler(\n    pointerDownState: PointerDownState,\n  ) {\n    return withBatchedUpdatesThrottled((event: PointerEvent) => {\n      if (this.state.openDialog?.name === \"elementLinkSelector\") {\n        return;\n      }\n      const pointerCoords = viewportCoordsToSceneCoords(event, this.state);\n\n      if (\n        this.state.selectedLinearElement &&\n        this.state.selectedLinearElement.elbowed &&\n        this.state.selectedLinearElement.pointerDownState.segmentMidpoint.index\n      ) {\n        const [gridX, gridY] = getGridPoint(\n          pointerCoords.x,\n          pointerCoords.y,\n          event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize(),\n        );\n\n        let index =\n          this.state.selectedLinearElement.pointerDownState.segmentMidpoint\n            .index;\n        if (index < 0) {\n          const nextCoords = LinearElementEditor.getSegmentMidpointHitCoords(\n            {\n              ...this.state.selectedLinearElement,\n              segmentMidPointHoveredCoords: null,\n            },\n            { x: gridX, y: gridY },\n            this.state,\n            this.scene.getNonDeletedElementsMap(),\n          );\n          index = nextCoords\n            ? LinearElementEditor.getSegmentMidPointIndex(\n                this.state.selectedLinearElement,\n                this.state,\n                nextCoords,\n                this.scene.getNonDeletedElementsMap(),\n              )\n            : -1;\n        }\n\n        const ret = LinearElementEditor.moveFixedSegment(\n          this.state.selectedLinearElement,\n          index,\n          gridX,\n          gridY,\n          this.scene.getNonDeletedElementsMap(),\n        );\n\n        flushSync(() => {\n          if (this.state.selectedLinearElement) {\n            this.setState({\n              selectedLinearElement: {\n                ...this.state.selectedLinearElement,\n                segmentMidPointHoveredCoords: ret.segmentMidPointHoveredCoords,\n                pointerDownState: ret.pointerDownState,\n              },\n            });\n          }\n        });\n        return;\n      }\n\n      const lastPointerCoords =\n        this.lastPointerMoveCoords ?? pointerDownState.origin;\n      this.lastPointerMoveCoords = pointerCoords;\n\n      // We need to initialize dragOffsetXY only after we've updated\n      // `state.selectedElementIds` on pointerDown. Doing it here in pointerMove\n      // event handler should hopefully ensure we're already working with\n      // the updated state.\n      if (pointerDownState.drag.offset === null) {\n        pointerDownState.drag.offset = tupleToCoors(\n          getDragOffsetXY(\n            this.scene.getSelectedElements(this.state),\n            pointerDownState.origin.x,\n            pointerDownState.origin.y,\n          ),\n        );\n      }\n      const target = event.target;\n      if (!(target instanceof HTMLElement)) {\n        return;\n      }\n\n      if (this.handlePointerMoveOverScrollbars(event, pointerDownState)) {\n        return;\n      }\n\n      if (isEraserActive(this.state)) {\n        this.handleEraser(event, pointerDownState, pointerCoords);\n        return;\n      }\n\n      if (this.state.activeTool.type === \"laser\") {\n        this.laserTrails.addPointToPath(pointerCoords.x, pointerCoords.y);\n      }\n\n      const [gridX, gridY] = getGridPoint(\n        pointerCoords.x,\n        pointerCoords.y,\n        event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize(),\n      );\n\n      // for arrows/lines, don't start dragging until a given threshold\n      // to ensure we don't create a 2-point arrow by mistake when\n      // user clicks mouse in a way that it moves a tiny bit (thus\n      // triggering pointermove)\n      if (\n        !pointerDownState.drag.hasOccurred &&\n        (this.state.activeTool.type === \"arrow\" ||\n          this.state.activeTool.type === \"line\")\n      ) {\n        if (\n          pointDistance(\n            pointFrom(pointerCoords.x, pointerCoords.y),\n            pointFrom(pointerDownState.origin.x, pointerDownState.origin.y),\n          ) < DRAGGING_THRESHOLD\n        ) {\n          return;\n        }\n      }\n      if (pointerDownState.resize.isResizing) {\n        pointerDownState.lastCoords.x = pointerCoords.x;\n        pointerDownState.lastCoords.y = pointerCoords.y;\n        if (this.maybeHandleCrop(pointerDownState, event)) {\n          return true;\n        }\n        if (this.maybeHandleResize(pointerDownState, event)) {\n          return true;\n        }\n      }\n      const elementsMap = this.scene.getNonDeletedElementsMap();\n\n      if (this.state.selectedLinearElement) {\n        const linearElementEditor =\n          this.state.editingLinearElement || this.state.selectedLinearElement;\n\n        if (\n          LinearElementEditor.shouldAddMidpoint(\n            this.state.selectedLinearElement,\n            pointerCoords,\n            this.state,\n            elementsMap,\n          )\n        ) {\n          const ret = LinearElementEditor.addMidpoint(\n            this.state.selectedLinearElement,\n            pointerCoords,\n            this,\n            !event[KEYS.CTRL_OR_CMD],\n            elementsMap,\n          );\n          if (!ret) {\n            return;\n          }\n\n          // Since we are reading from previous state which is not possible with\n          // automatic batching in React 18 hence using flush sync to synchronously\n          // update the state. Check https://github.com/excalidraw/excalidraw/pull/5508 for more details.\n\n          flushSync(() => {\n            if (this.state.selectedLinearElement) {\n              this.setState({\n                selectedLinearElement: {\n                  ...this.state.selectedLinearElement,\n                  pointerDownState: ret.pointerDownState,\n                  selectedPointsIndices: ret.selectedPointsIndices,\n                },\n              });\n            }\n            if (this.state.editingLinearElement) {\n              this.setState({\n                editingLinearElement: {\n                  ...this.state.editingLinearElement,\n                  pointerDownState: ret.pointerDownState,\n                  selectedPointsIndices: ret.selectedPointsIndices,\n                },\n              });\n            }\n          });\n\n          return;\n        } else if (\n          linearElementEditor.pointerDownState.segmentMidpoint.value !== null &&\n          !linearElementEditor.pointerDownState.segmentMidpoint.added\n        ) {\n          return;\n        }\n\n        const didDrag = LinearElementEditor.handlePointDragging(\n          event,\n          this,\n          pointerCoords.x,\n          pointerCoords.y,\n          (element, pointsSceneCoords) => {\n            this.maybeSuggestBindingsForLinearElementAtCoords(\n              element,\n              pointsSceneCoords,\n            );\n          },\n          linearElementEditor,\n          this.scene,\n        );\n        if (didDrag) {\n          pointerDownState.lastCoords.x = pointerCoords.x;\n          pointerDownState.lastCoords.y = pointerCoords.y;\n          pointerDownState.drag.hasOccurred = true;\n          if (\n            this.state.editingLinearElement &&\n            !this.state.editingLinearElement.isDragging\n          ) {\n            this.setState({\n              editingLinearElement: {\n                ...this.state.editingLinearElement,\n                isDragging: true,\n              },\n            });\n          }\n          if (!this.state.selectedLinearElement.isDragging) {\n            this.setState({\n              selectedLinearElement: {\n                ...this.state.selectedLinearElement,\n                isDragging: true,\n              },\n            });\n          }\n          return;\n        }\n      }\n\n      const hasHitASelectedElement = pointerDownState.hit.allHitElements.some(\n        (element) => this.isASelectedElement(element),\n      );\n\n      const isSelectingPointsInLineEditor =\n        this.state.editingLinearElement &&\n        event.shiftKey &&\n        this.state.editingLinearElement.elementId ===\n          pointerDownState.hit.element?.id;\n      if (\n        (hasHitASelectedElement ||\n          pointerDownState.hit.hasHitCommonBoundingBoxOfSelectedElements) &&\n        !isSelectingPointsInLineEditor\n      ) {\n        const selectedElements = this.scene.getSelectedElements(this.state);\n\n        if (selectedElements.every((element) => element.locked)) {\n          return;\n        }\n\n        const selectedElementsHasAFrame = selectedElements.find((e) =>\n          isFrameLikeElement(e),\n        );\n        const topLayerFrame = this.getTopLayerFrameAtSceneCoords(pointerCoords);\n        const frameToHighlight =\n          topLayerFrame && !selectedElementsHasAFrame ? topLayerFrame : null;\n        // Only update the state if there is a difference\n        if (this.state.frameToHighlight !== frameToHighlight) {\n          flushSync(() => {\n            this.setState({ frameToHighlight });\n          });\n        }\n\n        // Marking that click was used for dragging to check\n        // if elements should be deselected on pointerup\n        pointerDownState.drag.hasOccurred = true;\n\n        // prevent dragging even if we're no longer holding cmd/ctrl otherwise\n        // it would have weird results (stuff jumping all over the screen)\n        // Checking for editingTextElement to avoid jump while editing on mobile #6503\n        if (\n          selectedElements.length > 0 &&\n          !pointerDownState.withCmdOrCtrl &&\n          !this.state.editingTextElement &&\n          this.state.activeEmbeddable?.state !== \"active\"\n        ) {\n          const dragOffset = {\n            x: pointerCoords.x - pointerDownState.origin.x,\n            y: pointerCoords.y - pointerDownState.origin.y,\n          };\n\n          const originalElements = [\n            ...pointerDownState.originalElements.values(),\n          ];\n\n          // We only drag in one direction if shift is pressed\n          const lockDirection = event.shiftKey;\n\n          if (lockDirection) {\n            const distanceX = Math.abs(dragOffset.x);\n            const distanceY = Math.abs(dragOffset.y);\n\n            const lockX = lockDirection && distanceX < distanceY;\n            const lockY = lockDirection && distanceX > distanceY;\n\n            if (lockX) {\n              dragOffset.x = 0;\n            }\n\n            if (lockY) {\n              dragOffset.y = 0;\n            }\n          }\n\n          // #region move crop region\n          if (this.state.croppingElementId) {\n            const croppingElement = this.scene\n              .getNonDeletedElementsMap()\n              .get(this.state.croppingElementId);\n\n            if (\n              croppingElement &&\n              isImageElement(croppingElement) &&\n              croppingElement.crop !== null &&\n              pointerDownState.hit.element === croppingElement\n            ) {\n              const crop = croppingElement.crop;\n              const image =\n                isInitializedImageElement(croppingElement) &&\n                this.imageCache.get(croppingElement.fileId)?.image;\n\n              if (image && !(image instanceof Promise)) {\n                const instantDragOffset = vectorScale(\n                  vector(\n                    pointerCoords.x - lastPointerCoords.x,\n                    pointerCoords.y - lastPointerCoords.y,\n                  ),\n                  Math.max(this.state.zoom.value, 2),\n                );\n\n                const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(\n                  croppingElement,\n                  elementsMap,\n                );\n\n                const topLeft = vectorFromPoint(\n                  pointRotateRads(\n                    pointFrom(x1, y1),\n                    pointFrom(cx, cy),\n                    croppingElement.angle,\n                  ),\n                );\n                const topRight = vectorFromPoint(\n                  pointRotateRads(\n                    pointFrom(x2, y1),\n                    pointFrom(cx, cy),\n                    croppingElement.angle,\n                  ),\n                );\n                const bottomLeft = vectorFromPoint(\n                  pointRotateRads(\n                    pointFrom(x1, y2),\n                    pointFrom(cx, cy),\n                    croppingElement.angle,\n                  ),\n                );\n                const topEdge = vectorNormalize(\n                  vectorSubtract(topRight, topLeft),\n                );\n                const leftEdge = vectorNormalize(\n                  vectorSubtract(bottomLeft, topLeft),\n                );\n\n                // project instantDrafOffset onto leftEdge and topEdge to decompose\n                const offsetVector = vector(\n                  vectorDot(instantDragOffset, topEdge),\n                  vectorDot(instantDragOffset, leftEdge),\n                );\n\n                const nextCrop = {\n                  ...crop,\n                  x: clamp(\n                    crop.x -\n                      offsetVector[0] * Math.sign(croppingElement.scale[0]),\n                    0,\n                    image.naturalWidth - crop.width,\n                  ),\n                  y: clamp(\n                    crop.y -\n                      offsetVector[1] * Math.sign(croppingElement.scale[1]),\n                    0,\n                    image.naturalHeight - crop.height,\n                  ),\n                };\n\n                mutateElement(croppingElement, {\n                  crop: nextCrop,\n                });\n\n                return;\n              }\n            }\n          }\n\n          // Snap cache *must* be synchronously popuplated before initial drag,\n          // otherwise the first drag even will not snap, causing a jump before\n          // it snaps to its position if previously snapped already.\n          this.maybeCacheVisibleGaps(event, selectedElements);\n          this.maybeCacheReferenceSnapPoints(event, selectedElements);\n\n          const { snapOffset, snapLines } = snapDraggedElements(\n            originalElements,\n            dragOffset,\n            this,\n            event,\n            this.scene.getNonDeletedElementsMap(),\n          );\n\n          this.setState({ snapLines });\n\n          // when we're editing the name of a frame, we want the user to be\n          // able to select and interact with the text input\n          if (!this.state.editingFrame) {\n            dragSelectedElements(\n              pointerDownState,\n              selectedElements,\n              dragOffset,\n              this.scene,\n              snapOffset,\n              event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize(),\n            );\n          }\n\n          this.setState({\n            selectedElementsAreBeingDragged: true,\n            // element is being dragged and selectionElement that was created on pointer down\n            // should be removed\n            selectionElement: null,\n          });\n\n          if (\n            selectedElements.length !== 1 ||\n            !isElbowArrow(selectedElements[0])\n          ) {\n            this.setState({\n              suggestedBindings: getSuggestedBindingsForArrows(\n                selectedElements,\n                this.scene.getNonDeletedElementsMap(),\n                this.state.zoom,\n              ),\n            });\n          }\n\n          // We duplicate the selected element if alt is pressed on pointer move\n          if (event.altKey && !pointerDownState.hit.hasBeenDuplicated) {\n            // Move the currently selected elements to the top of the z index stack, and\n            // put the duplicates where the selected elements used to be.\n            // (the origin point where the dragging started)\n\n            pointerDownState.hit.hasBeenDuplicated = true;\n\n            const nextElements = [];\n            const elementsToAppend = [];\n            const groupIdMap = new Map();\n            const oldIdToDuplicatedId = new Map();\n            const hitElement = pointerDownState.hit.element;\n            const selectedElementIds = new Set(\n              this.scene\n                .getSelectedElements({\n                  selectedElementIds: this.state.selectedElementIds,\n                  includeBoundTextElement: true,\n                  includeElementsInFrames: true,\n                })\n                .map((element) => element.id),\n            );\n\n            const elements = this.scene.getElementsIncludingDeleted();\n\n            for (const element of elements) {\n              const isInSelection =\n                selectedElementIds.has(element.id) ||\n                // case: the state.selectedElementIds might not have been\n                // updated yet by the time this mousemove event is fired\n                (element.id === hitElement?.id &&\n                  pointerDownState.hit.wasAddedToSelection);\n              // NOTE (mtolmacs): This is a temporary fix for very large scenes\n              if (\n                Math.abs(element.x) > 1e7 ||\n                Math.abs(element.x) > 1e7 ||\n                Math.abs(element.width) > 1e7 ||\n                Math.abs(element.height) > 1e7\n              ) {\n                console.error(\n                  `Alt+dragging element in scene with invalid dimensions`,\n                  element.x,\n                  element.y,\n                  element.width,\n                  element.height,\n                  isInSelection,\n                );\n\n                return;\n              }\n\n              if (isInSelection) {\n                const duplicatedElement = duplicateElement(\n                  this.state.editingGroupId,\n                  groupIdMap,\n                  element,\n                );\n\n                // NOTE (mtolmacs): This is a temporary fix for very large scenes\n                if (\n                  Math.abs(duplicatedElement.x) > 1e7 ||\n                  Math.abs(duplicatedElement.x) > 1e7 ||\n                  Math.abs(duplicatedElement.width) > 1e7 ||\n                  Math.abs(duplicatedElement.height) > 1e7\n                ) {\n                  console.error(\n                    `Alt+dragging duplicated element with invalid dimensions`,\n                    duplicatedElement.x,\n                    duplicatedElement.y,\n                    duplicatedElement.width,\n                    duplicatedElement.height,\n                  );\n\n                  return;\n                }\n\n                const origElement = pointerDownState.originalElements.get(\n                  element.id,\n                )!;\n\n                // NOTE (mtolmacs): This is a temporary fix for very large scenes\n                if (\n                  Math.abs(origElement.x) > 1e7 ||\n                  Math.abs(origElement.x) > 1e7 ||\n                  Math.abs(origElement.width) > 1e7 ||\n                  Math.abs(origElement.height) > 1e7\n                ) {\n                  console.error(\n                    `Alt+dragging duplicated element with invalid dimensions`,\n                    origElement.x,\n                    origElement.y,\n                    origElement.width,\n                    origElement.height,\n                  );\n\n                  return;\n                }\n\n                mutateElement(duplicatedElement, {\n                  x: origElement.x,\n                  y: origElement.y,\n                });\n\n                // put duplicated element to pointerDownState.originalElements\n                // so that we can snap to the duplicated element without releasing\n                pointerDownState.originalElements.set(\n                  duplicatedElement.id,\n                  duplicatedElement,\n                );\n\n                nextElements.push(duplicatedElement);\n                elementsToAppend.push(element);\n                oldIdToDuplicatedId.set(element.id, duplicatedElement.id);\n              } else {\n                nextElements.push(element);\n              }\n            }\n\n            let nextSceneElements: ExcalidrawElement[] = [\n              ...nextElements,\n              ...elementsToAppend,\n            ];\n\n            const mappedNewSceneElements = this.props.onDuplicate?.(\n              nextSceneElements,\n              elements,\n            );\n\n            nextSceneElements = mappedNewSceneElements || nextSceneElements;\n\n            syncMovedIndices(nextSceneElements, arrayToMap(elementsToAppend));\n\n            bindTextToShapeAfterDuplication(\n              nextElements,\n              elementsToAppend,\n              oldIdToDuplicatedId,\n            );\n            fixBindingsAfterDuplication(\n              nextSceneElements,\n              elementsToAppend,\n              oldIdToDuplicatedId,\n              \"duplicatesServeAsOld\",\n            );\n            bindElementsToFramesAfterDuplication(\n              nextSceneElements,\n              elementsToAppend,\n              oldIdToDuplicatedId,\n            );\n\n            this.scene.replaceAllElements(nextSceneElements);\n            this.maybeCacheVisibleGaps(event, selectedElements, true);\n            this.maybeCacheReferenceSnapPoints(event, selectedElements, true);\n          }\n\n          return;\n        }\n      }\n\n      if (this.state.selectionElement) {\n        pointerDownState.lastCoords.x = pointerCoords.x;\n        pointerDownState.lastCoords.y = pointerCoords.y;\n        this.maybeDragNewGenericElement(pointerDownState, event);\n      } else {\n        // It is very important to read this.state within each move event,\n        // otherwise we would read a stale one!\n        const newElement = this.state.newElement;\n\n        if (!newElement) {\n          return;\n        }\n\n        if (newElement.type === \"freedraw\") {\n          const points = newElement.points;\n          const dx = pointerCoords.x - newElement.x;\n          const dy = pointerCoords.y - newElement.y;\n\n          const lastPoint = points.length > 0 && points[points.length - 1];\n          const discardPoint =\n            lastPoint && lastPoint[0] === dx && lastPoint[1] === dy;\n\n          if (!discardPoint) {\n            const pressures = newElement.simulatePressure\n              ? newElement.pressures\n              : [...newElement.pressures, event.pressure];\n\n            mutateElement(\n              newElement,\n              {\n                points: [...points, pointFrom<LocalPoint>(dx, dy)],\n                pressures,\n              },\n              false,\n            );\n\n            this.setState({\n              newElement,\n            });\n          }\n        } else if (isLinearElement(newElement)) {\n          pointerDownState.drag.hasOccurred = true;\n          const points = newElement.points;\n          let dx = gridX - newElement.x;\n          let dy = gridY - newElement.y;\n\n          if (shouldRotateWithDiscreteAngle(event) && points.length === 2) {\n            ({ width: dx, height: dy } = getLockedLinearCursorAlignSize(\n              newElement.x,\n              newElement.y,\n              pointerCoords.x,\n              pointerCoords.y,\n            ));\n          }\n\n          if (points.length === 1) {\n            mutateElement(\n              newElement,\n              {\n                points: [...points, pointFrom<LocalPoint>(dx, dy)],\n              },\n              false,\n            );\n          } else if (\n            points.length === 2 ||\n            (points.length > 1 && isElbowArrow(newElement))\n          ) {\n            mutateElement(\n              newElement,\n              {\n                points: [...points.slice(0, -1), pointFrom<LocalPoint>(dx, dy)],\n              },\n              false,\n              { isDragging: true },\n            );\n          }\n\n          this.setState({\n            newElement,\n          });\n\n          if (isBindingElement(newElement, false)) {\n            // When creating a linear element by dragging\n            this.maybeSuggestBindingsForLinearElementAtCoords(\n              newElement,\n              [pointerCoords],\n              this.state.startBoundElement,\n            );\n          }\n        } else {\n          pointerDownState.lastCoords.x = pointerCoords.x;\n          pointerDownState.lastCoords.y = pointerCoords.y;\n          this.maybeDragNewGenericElement(pointerDownState, event, false);\n        }\n      }\n\n      if (this.state.activeTool.type === \"selection\") {\n        pointerDownState.boxSelection.hasOccurred = true;\n\n        const elements = this.scene.getNonDeletedElements();\n\n        // box-select line editor points\n        if (this.state.editingLinearElement) {\n          LinearElementEditor.handleBoxSelection(\n            event,\n            this.state,\n            this.setState.bind(this),\n            this.scene.getNonDeletedElementsMap(),\n          );\n          // regular box-select\n        } else {\n          let shouldReuseSelection = true;\n\n          if (!event.shiftKey && isSomeElementSelected(elements, this.state)) {\n            if (\n              pointerDownState.withCmdOrCtrl &&\n              pointerDownState.hit.element\n            ) {\n              this.setState((prevState) =>\n                selectGroupsForSelectedElements(\n                  {\n                    ...prevState,\n                    selectedElementIds: {\n                      [pointerDownState.hit.element!.id]: true,\n                    },\n                  },\n                  this.scene.getNonDeletedElements(),\n                  prevState,\n                  this,\n                ),\n              );\n            } else {\n              shouldReuseSelection = false;\n            }\n          }\n          const elementsWithinSelection = this.state.selectionElement\n            ? getElementsWithinSelection(\n                elements,\n                this.state.selectionElement,\n                this.scene.getNonDeletedElementsMap(),\n                false,\n              )\n            : [];\n\n          this.setState((prevState) => {\n            const nextSelectedElementIds = {\n              ...(shouldReuseSelection && prevState.selectedElementIds),\n              ...elementsWithinSelection.reduce(\n                (acc: Record<ExcalidrawElement[\"id\"], true>, element) => {\n                  acc[element.id] = true;\n                  return acc;\n                },\n                {},\n              ),\n            };\n\n            if (pointerDownState.hit.element) {\n              // if using ctrl/cmd, select the hitElement only if we\n              // haven't box-selected anything else\n              if (!elementsWithinSelection.length) {\n                nextSelectedElementIds[pointerDownState.hit.element.id] = true;\n              } else {\n                delete nextSelectedElementIds[pointerDownState.hit.element.id];\n              }\n            }\n\n            prevState = !shouldReuseSelection\n              ? { ...prevState, selectedGroupIds: {}, editingGroupId: null }\n              : prevState;\n\n            return {\n              ...selectGroupsForSelectedElements(\n                {\n                  editingGroupId: prevState.editingGroupId,\n                  selectedElementIds: nextSelectedElementIds,\n                },\n                this.scene.getNonDeletedElements(),\n                prevState,\n                this,\n              ),\n              // select linear element only when we haven't box-selected anything else\n              selectedLinearElement:\n                elementsWithinSelection.length === 1 &&\n                isLinearElement(elementsWithinSelection[0])\n                  ? new LinearElementEditor(elementsWithinSelection[0])\n                  : null,\n              showHyperlinkPopup:\n                elementsWithinSelection.length === 1 &&\n                (elementsWithinSelection[0].link ||\n                  isEmbeddableElement(elementsWithinSelection[0]))\n                  ? \"info\"\n                  : false,\n            };\n          });\n        }\n      }\n    });\n  }\n\n  // Returns whether the pointer move happened over either scrollbar\n  private handlePointerMoveOverScrollbars(\n    event: PointerEvent,\n    pointerDownState: PointerDownState,\n  ): boolean {\n    if (pointerDownState.scrollbars.isOverHorizontal) {\n      const x = event.clientX;\n      const dx = x - pointerDownState.lastCoords.x;\n      this.translateCanvas({\n        scrollX: this.state.scrollX - dx / this.state.zoom.value,\n      });\n      pointerDownState.lastCoords.x = x;\n      return true;\n    }\n\n    if (pointerDownState.scrollbars.isOverVertical) {\n      const y = event.clientY;\n      const dy = y - pointerDownState.lastCoords.y;\n      this.translateCanvas({\n        scrollY: this.state.scrollY - dy / this.state.zoom.value,\n      });\n      pointerDownState.lastCoords.y = y;\n      return true;\n    }\n    return false;\n  }\n\n  private onPointerUpFromPointerDownHandler(\n    pointerDownState: PointerDownState,\n  ): (event: PointerEvent) => void {\n    return withBatchedUpdates((childEvent: PointerEvent) => {\n      this.removePointer(childEvent);\n      if (pointerDownState.eventListeners.onMove) {\n        pointerDownState.eventListeners.onMove.flush();\n      }\n      const {\n        newElement,\n        resizingElement,\n        croppingElementId,\n        multiElement,\n        activeTool,\n        isResizing,\n        isRotating,\n        isCropping,\n      } = this.state;\n\n      this.setState((prevState) => ({\n        isResizing: false,\n        isRotating: false,\n        isCropping: false,\n        resizingElement: null,\n        selectionElement: null,\n        frameToHighlight: null,\n        elementsToHighlight: null,\n        cursorButton: \"up\",\n        snapLines: updateStable(prevState.snapLines, []),\n        originSnapOffset: null,\n      }));\n\n      this.lastPointerMoveCoords = null;\n\n      SnapCache.setReferenceSnapPoints(null);\n      SnapCache.setVisibleGaps(null);\n\n      this.savePointer(childEvent.clientX, childEvent.clientY, \"up\");\n\n      this.setState({\n        selectedElementsAreBeingDragged: false,\n      });\n      const elementsMap = this.scene.getNonDeletedElementsMap();\n\n      if (\n        pointerDownState.drag.hasOccurred &&\n        pointerDownState.hit?.element?.id\n      ) {\n        const element = elementsMap.get(pointerDownState.hit.element.id);\n        if (isBindableElement(element)) {\n          // Renormalize elbow arrows when they are changed via indirect move\n          element.boundElements\n            ?.filter((e) => e.type === \"arrow\")\n            .map((e) => elementsMap.get(e.id))\n            .filter((e) => isElbowArrow(e))\n            .forEach((e) => {\n              !!e && mutateElement(e, {}, true);\n            });\n        }\n      }\n\n      // Handle end of dragging a point of a linear element, might close a loop\n      // and sets binding element\n      if (this.state.editingLinearElement) {\n        if (\n          !pointerDownState.boxSelection.hasOccurred &&\n          pointerDownState.hit?.element?.id !==\n            this.state.editingLinearElement.elementId\n        ) {\n          this.actionManager.executeAction(actionFinalize);\n        } else {\n          const editingLinearElement = LinearElementEditor.handlePointerUp(\n            childEvent,\n            this.state.editingLinearElement,\n            this.state,\n            this.scene,\n          );\n          if (editingLinearElement !== this.state.editingLinearElement) {\n            this.setState({\n              editingLinearElement,\n              suggestedBindings: [],\n            });\n          }\n        }\n      } else if (this.state.selectedLinearElement) {\n        // Normalize elbow arrow points, remove close parallel segments\n        if (this.state.selectedLinearElement.elbowed) {\n          const element = LinearElementEditor.getElement(\n            this.state.selectedLinearElement.elementId,\n            this.scene.getNonDeletedElementsMap(),\n          );\n          if (element) {\n            mutateElement(element, {}, true);\n          }\n        }\n\n        if (\n          pointerDownState.hit?.element?.id !==\n          this.state.selectedLinearElement.elementId\n        ) {\n          const selectedELements = this.scene.getSelectedElements(this.state);\n          // set selectedLinearElement to null if there is more than one element selected since we don't want to show linear element handles\n          if (selectedELements.length > 1) {\n            this.setState({ selectedLinearElement: null });\n          }\n        } else {\n          const linearElementEditor = LinearElementEditor.handlePointerUp(\n            childEvent,\n            this.state.selectedLinearElement,\n            this.state,\n            this.scene,\n          );\n\n          const { startBindingElement, endBindingElement } =\n            linearElementEditor;\n          const element = this.scene.getElement(linearElementEditor.elementId);\n          if (isBindingElement(element)) {\n            bindOrUnbindLinearElement(\n              element,\n              startBindingElement,\n              endBindingElement,\n              elementsMap,\n              this.scene,\n            );\n          }\n\n          if (linearElementEditor !== this.state.selectedLinearElement) {\n            this.setState({\n              selectedLinearElement: {\n                ...linearElementEditor,\n                selectedPointsIndices: null,\n              },\n              suggestedBindings: [],\n            });\n          }\n        }\n      }\n\n      this.missingPointerEventCleanupEmitter.clear();\n\n      window.removeEventListener(\n        EVENT.POINTER_MOVE,\n        pointerDownState.eventListeners.onMove!,\n      );\n      window.removeEventListener(\n        EVENT.POINTER_UP,\n        pointerDownState.eventListeners.onUp!,\n      );\n      window.removeEventListener(\n        EVENT.KEYDOWN,\n        pointerDownState.eventListeners.onKeyDown!,\n      );\n      window.removeEventListener(\n        EVENT.KEYUP,\n        pointerDownState.eventListeners.onKeyUp!,\n      );\n\n      if (this.state.pendingImageElementId) {\n        this.setState({ pendingImageElementId: null });\n      }\n\n      this.props?.onPointerUp?.(activeTool, pointerDownState);\n      this.onPointerUpEmitter.trigger(\n        this.state.activeTool,\n        pointerDownState,\n        childEvent,\n      );\n\n      if (newElement?.type === \"freedraw\") {\n        const pointerCoords = viewportCoordsToSceneCoords(\n          childEvent,\n          this.state,\n        );\n\n        const points = newElement.points;\n        let dx = pointerCoords.x - newElement.x;\n        let dy = pointerCoords.y - newElement.y;\n\n        // Allows dots to avoid being flagged as infinitely small\n        if (dx === points[0][0] && dy === points[0][1]) {\n          dy += 0.0001;\n          dx += 0.0001;\n        }\n\n        const pressures = newElement.simulatePressure\n          ? []\n          : [...newElement.pressures, childEvent.pressure];\n\n        mutateElement(newElement, {\n          points: [...points, pointFrom<LocalPoint>(dx, dy)],\n          pressures,\n          lastCommittedPoint: pointFrom<LocalPoint>(dx, dy),\n        });\n\n        this.actionManager.executeAction(actionFinalize);\n\n        return;\n      }\n      if (isImageElement(newElement)) {\n        const imageElement = newElement;\n        try {\n          this.initializeImageDimensions(imageElement);\n          this.setState(\n            {\n              selectedElementIds: makeNextSelectedElementIds(\n                { [imageElement.id]: true },\n                this.state,\n              ),\n            },\n            () => {\n              this.actionManager.executeAction(actionFinalize);\n            },\n          );\n        } catch (error: any) {\n          console.error(error);\n          this.scene.replaceAllElements(\n            this.scene\n              .getElementsIncludingDeleted()\n              .filter((el) => el.id !== imageElement.id),\n          );\n          this.actionManager.executeAction(actionFinalize);\n        }\n        return;\n      }\n\n      if (isLinearElement(newElement)) {\n        if (newElement!.points.length > 1) {\n          this.store.shouldCaptureIncrement();\n        }\n        const pointerCoords = viewportCoordsToSceneCoords(\n          childEvent,\n          this.state,\n        );\n\n        if (!pointerDownState.drag.hasOccurred && newElement && !multiElement) {\n          mutateElement(newElement, {\n            points: [\n              ...newElement.points,\n              pointFrom<LocalPoint>(\n                pointerCoords.x - newElement.x,\n                pointerCoords.y - newElement.y,\n              ),\n            ],\n          });\n          this.setState({\n            multiElement: newElement,\n            newElement,\n          });\n        } else if (pointerDownState.drag.hasOccurred && !multiElement) {\n          if (\n            isBindingEnabled(this.state) &&\n            isBindingElement(newElement, false)\n          ) {\n            maybeBindLinearElement(\n              newElement,\n              this.state,\n              pointerCoords,\n              this.scene.getNonDeletedElementsMap(),\n              this.scene.getNonDeletedElements(),\n            );\n          }\n          this.setState({ suggestedBindings: [], startBoundElement: null });\n          if (!activeTool.locked) {\n            resetCursor(this.interactiveCanvas);\n            this.setState((prevState) => ({\n              newElement: null,\n              activeTool: updateActiveTool(this.state, {\n                type: \"selection\",\n              }),\n              selectedElementIds: makeNextSelectedElementIds(\n                {\n                  ...prevState.selectedElementIds,\n                  [newElement.id]: true,\n                },\n                prevState,\n              ),\n              selectedLinearElement: new LinearElementEditor(newElement),\n            }));\n          } else {\n            this.setState((prevState) => ({\n              newElement: null,\n            }));\n          }\n          // so that the scene gets rendered again to display the newly drawn linear as well\n          this.scene.triggerUpdate();\n        }\n        return;\n      }\n\n      if (isTextElement(newElement)) {\n        const minWidth = getMinTextElementWidth(\n          getFontString({\n            fontSize: newElement.fontSize,\n            fontFamily: newElement.fontFamily,\n          }),\n          newElement.lineHeight,\n        );\n\n        if (newElement.width < minWidth) {\n          mutateElement(newElement, {\n            autoResize: true,\n          });\n        }\n\n        this.resetCursor();\n\n        this.handleTextWysiwyg(newElement, {\n          isExistingElement: true,\n        });\n      }\n\n      if (\n        activeTool.type !== \"selection\" &&\n        newElement &&\n        isInvisiblySmallElement(newElement)\n      ) {\n        // remove invisible element which was added in onPointerDown\n        // update the store snapshot, so that invisible elements are not captured by the store\n        this.updateScene({\n          elements: this.scene\n            .getElementsIncludingDeleted()\n            .filter((el) => el.id !== newElement.id),\n          appState: {\n            newElement: null,\n          },\n          captureUpdate: CaptureUpdateAction.NEVER,\n        });\n\n        return;\n      }\n\n      if (isFrameLikeElement(newElement)) {\n        const elementsInsideFrame = getElementsInNewFrame(\n          this.scene.getElementsIncludingDeleted(),\n          newElement,\n          this.scene.getNonDeletedElementsMap(),\n        );\n\n        this.scene.replaceAllElements(\n          addElementsToFrame(\n            this.scene.getElementsMapIncludingDeleted(),\n            elementsInsideFrame,\n            newElement,\n            this.state,\n          ),\n        );\n      }\n\n      if (newElement) {\n        mutateElement(newElement, getNormalizedDimensions(newElement));\n        // the above does not guarantee the scene to be rendered again, hence the trigger below\n        this.scene.triggerUpdate();\n      }\n\n      if (pointerDownState.drag.hasOccurred) {\n        const sceneCoords = viewportCoordsToSceneCoords(childEvent, this.state);\n\n        // when editing the points of a linear element, we check if the\n        // linear element still is in the frame afterwards\n        // if not, the linear element will be removed from its frame (if any)\n        if (\n          this.state.selectedLinearElement &&\n          this.state.selectedLinearElement.isDragging\n        ) {\n          const linearElement = this.scene.getElement(\n            this.state.selectedLinearElement.elementId,\n          );\n\n          if (linearElement?.frameId) {\n            const frame = getContainingFrame(linearElement, elementsMap);\n\n            if (frame && linearElement) {\n              if (\n                !elementOverlapsWithFrame(\n                  linearElement,\n                  frame,\n                  this.scene.getNonDeletedElementsMap(),\n                )\n              ) {\n                // remove the linear element from all groups\n                // before removing it from the frame as well\n                mutateElement(linearElement, {\n                  groupIds: [],\n                });\n\n                removeElementsFromFrame(\n                  [linearElement],\n                  this.scene.getNonDeletedElementsMap(),\n                );\n\n                this.scene.triggerUpdate();\n              }\n            }\n          }\n        } else {\n          // update the relationships between selected elements and frames\n          const topLayerFrame = this.getTopLayerFrameAtSceneCoords(sceneCoords);\n\n          const selectedElements = this.scene.getSelectedElements(this.state);\n          let nextElements = this.scene.getElementsMapIncludingDeleted();\n\n          const updateGroupIdsAfterEditingGroup = (\n            elements: ExcalidrawElement[],\n          ) => {\n            if (elements.length > 0) {\n              for (const element of elements) {\n                const index = element.groupIds.indexOf(\n                  this.state.editingGroupId!,\n                );\n\n                mutateElement(\n                  element,\n                  {\n                    groupIds: element.groupIds.slice(0, index),\n                  },\n                  false,\n                );\n              }\n\n              nextElements.forEach((element) => {\n                if (\n                  element.groupIds.length &&\n                  getElementsInGroup(\n                    nextElements,\n                    element.groupIds[element.groupIds.length - 1],\n                  ).length < 2\n                ) {\n                  mutateElement(\n                    element,\n                    {\n                      groupIds: [],\n                    },\n                    false,\n                  );\n                }\n              });\n\n              this.setState({\n                editingGroupId: null,\n              });\n            }\n          };\n\n          if (\n            topLayerFrame &&\n            !this.state.selectedElementIds[topLayerFrame.id]\n          ) {\n            const elementsToAdd = selectedElements.filter(\n              (element) =>\n                element.frameId !== topLayerFrame.id &&\n                isElementInFrame(element, nextElements, this.state),\n            );\n\n            if (this.state.editingGroupId) {\n              updateGroupIdsAfterEditingGroup(elementsToAdd);\n            }\n\n            nextElements = addElementsToFrame(\n              nextElements,\n              elementsToAdd,\n              topLayerFrame,\n              this.state,\n            );\n          } else if (!topLayerFrame) {\n            if (this.state.editingGroupId) {\n              const elementsToRemove = selectedElements.filter(\n                (element) =>\n                  element.frameId &&\n                  !isElementInFrame(element, nextElements, this.state),\n              );\n\n              updateGroupIdsAfterEditingGroup(elementsToRemove);\n            }\n          }\n\n          nextElements = updateFrameMembershipOfSelectedElements(\n            nextElements,\n            this.state,\n            this,\n          );\n\n          this.scene.replaceAllElements(nextElements);\n        }\n      }\n\n      if (resizingElement) {\n        this.store.shouldCaptureIncrement();\n      }\n\n      if (resizingElement && isInvisiblySmallElement(resizingElement)) {\n        // update the store snapshot, so that invisible elements are not captured by the store\n        this.updateScene({\n          elements: this.scene\n            .getElementsIncludingDeleted()\n            .filter((el) => el.id !== resizingElement.id),\n          captureUpdate: CaptureUpdateAction.NEVER,\n        });\n      }\n\n      // handle frame membership for resizing frames and/or selected elements\n      if (pointerDownState.resize.isResizing) {\n        let nextElements = updateFrameMembershipOfSelectedElements(\n          this.scene.getElementsIncludingDeleted(),\n          this.state,\n          this,\n        );\n\n        const selectedFrames = this.scene\n          .getSelectedElements(this.state)\n          .filter((element): element is ExcalidrawFrameLikeElement =>\n            isFrameLikeElement(element),\n          );\n\n        for (const frame of selectedFrames) {\n          nextElements = replaceAllElementsInFrame(\n            nextElements,\n            getElementsInResizingFrame(\n              this.scene.getElementsIncludingDeleted(),\n              frame,\n              this.state,\n              elementsMap,\n            ),\n            frame,\n            this,\n          );\n        }\n\n        this.scene.replaceAllElements(nextElements);\n      }\n\n      // Code below handles selection when element(s) weren't\n      // drag or added to selection on pointer down phase.\n      const hitElement = pointerDownState.hit.element;\n      if (\n        this.state.selectedLinearElement?.elementId !== hitElement?.id &&\n        isLinearElement(hitElement)\n      ) {\n        const selectedElements = this.scene.getSelectedElements(this.state);\n        // set selectedLinearElement when no other element selected except\n        // the one we've hit\n        if (selectedElements.length === 1) {\n          this.setState({\n            selectedLinearElement: new LinearElementEditor(hitElement),\n          });\n        }\n      }\n\n      // click outside the cropping region to exit\n      if (\n        // not in the cropping mode at all\n        !croppingElementId ||\n        // in the cropping mode\n        (croppingElementId &&\n          // not cropping and no hit element\n          ((!hitElement && !isCropping) ||\n            // hitting something else\n            (hitElement && hitElement.id !== croppingElementId)))\n      ) {\n        this.finishImageCropping();\n      }\n\n      const pointerStart = this.lastPointerDownEvent;\n      const pointerEnd = this.lastPointerUpEvent || this.lastPointerMoveEvent;\n\n      if (isEraserActive(this.state) && pointerStart && pointerEnd) {\n        this.eraserTrail.endPath();\n\n        const draggedDistance = pointDistance(\n          pointFrom(pointerStart.clientX, pointerStart.clientY),\n          pointFrom(pointerEnd.clientX, pointerEnd.clientY),\n        );\n\n        if (draggedDistance === 0) {\n          const scenePointer = viewportCoordsToSceneCoords(\n            {\n              clientX: pointerEnd.clientX,\n              clientY: pointerEnd.clientY,\n            },\n            this.state,\n          );\n          const hitElements = this.getElementsAtPosition(\n            scenePointer.x,\n            scenePointer.y,\n          );\n          hitElements.forEach((hitElement) =>\n            this.elementsPendingErasure.add(hitElement.id),\n          );\n        }\n        this.eraseElements();\n        return;\n      } else if (this.elementsPendingErasure.size) {\n        this.restoreReadyToEraseElements();\n      }\n\n      if (\n        hitElement &&\n        !pointerDownState.drag.hasOccurred &&\n        !pointerDownState.hit.wasAddedToSelection &&\n        // if we're editing a line, pointerup shouldn't switch selection if\n        // box selected\n        (!this.state.editingLinearElement ||\n          !pointerDownState.boxSelection.hasOccurred)\n      ) {\n        // when inside line editor, shift selects points instead\n        if (childEvent.shiftKey && !this.state.editingLinearElement) {\n          if (this.state.selectedElementIds[hitElement.id]) {\n            if (isSelectedViaGroup(this.state, hitElement)) {\n              this.setState((_prevState) => {\n                const nextSelectedElementIds = {\n                  ..._prevState.selectedElementIds,\n                };\n\n                // We want to unselect all groups hitElement is part of\n                // as well as all elements that are part of the groups\n                // hitElement is part of\n                for (const groupedElement of hitElement.groupIds.flatMap(\n                  (groupId) =>\n                    getElementsInGroup(\n                      this.scene.getNonDeletedElements(),\n                      groupId,\n                    ),\n                )) {\n                  delete nextSelectedElementIds[groupedElement.id];\n                }\n\n                return {\n                  selectedGroupIds: {\n                    ..._prevState.selectedElementIds,\n                    ...hitElement.groupIds\n                      .map((gId) => ({ [gId]: false }))\n                      .reduce((prev, acc) => ({ ...prev, ...acc }), {}),\n                  },\n                  selectedElementIds: makeNextSelectedElementIds(\n                    nextSelectedElementIds,\n                    _prevState,\n                  ),\n                };\n              });\n              // if not dragging a linear element point (outside editor)\n            } else if (!this.state.selectedLinearElement?.isDragging) {\n              // remove element from selection while\n              // keeping prev elements selected\n\n              this.setState((prevState) => {\n                const newSelectedElementIds = {\n                  ...prevState.selectedElementIds,\n                };\n                delete newSelectedElementIds[hitElement!.id];\n                const newSelectedElements = getSelectedElements(\n                  this.scene.getNonDeletedElements(),\n                  { selectedElementIds: newSelectedElementIds },\n                );\n\n                return {\n                  ...selectGroupsForSelectedElements(\n                    {\n                      editingGroupId: prevState.editingGroupId,\n                      selectedElementIds: newSelectedElementIds,\n                    },\n                    this.scene.getNonDeletedElements(),\n                    prevState,\n                    this,\n                  ),\n                  // set selectedLinearElement only if thats the only element selected\n                  selectedLinearElement:\n                    newSelectedElements.length === 1 &&\n                    isLinearElement(newSelectedElements[0])\n                      ? new LinearElementEditor(newSelectedElements[0])\n                      : prevState.selectedLinearElement,\n                };\n              });\n            }\n          } else if (\n            hitElement.frameId &&\n            this.state.selectedElementIds[hitElement.frameId]\n          ) {\n            // when hitElement is part of a selected frame, deselect the frame\n            // to avoid frame and containing elements selected simultaneously\n            this.setState((prevState) => {\n              const nextSelectedElementIds: {\n                [id: string]: true;\n              } = {\n                ...prevState.selectedElementIds,\n                [hitElement.id]: true,\n              };\n              // deselect the frame\n              delete nextSelectedElementIds[hitElement.frameId!];\n\n              // deselect groups containing the frame\n              (this.scene.getElement(hitElement.frameId!)?.groupIds ?? [])\n                .flatMap((gid) =>\n                  getElementsInGroup(this.scene.getNonDeletedElements(), gid),\n                )\n                .forEach((element) => {\n                  delete nextSelectedElementIds[element.id];\n                });\n\n              return {\n                ...selectGroupsForSelectedElements(\n                  {\n                    editingGroupId: prevState.editingGroupId,\n                    selectedElementIds: nextSelectedElementIds,\n                  },\n                  this.scene.getNonDeletedElements(),\n                  prevState,\n                  this,\n                ),\n                showHyperlinkPopup:\n                  hitElement.link || isEmbeddableElement(hitElement)\n                    ? \"info\"\n                    : false,\n              };\n            });\n          } else {\n            // add element to selection while keeping prev elements selected\n            this.setState((_prevState) => ({\n              selectedElementIds: makeNextSelectedElementIds(\n                {\n                  ..._prevState.selectedElementIds,\n                  [hitElement!.id]: true,\n                },\n                _prevState,\n              ),\n            }));\n          }\n        } else {\n          this.setState((prevState) => ({\n            ...selectGroupsForSelectedElements(\n              {\n                editingGroupId: prevState.editingGroupId,\n                selectedElementIds: { [hitElement.id]: true },\n              },\n              this.scene.getNonDeletedElements(),\n              prevState,\n              this,\n            ),\n            selectedLinearElement:\n              isLinearElement(hitElement) &&\n              // Don't set `selectedLinearElement` if its same as the hitElement, this is mainly to prevent resetting the `hoverPointIndex` to -1.\n              // Future we should update the API to take care of setting the correct `hoverPointIndex` when initialized\n              prevState.selectedLinearElement?.elementId !== hitElement.id\n                ? new LinearElementEditor(hitElement)\n                : prevState.selectedLinearElement,\n          }));\n        }\n      }\n\n      if (\n        // not elbow midpoint dragged\n        !(hitElement && isElbowArrow(hitElement)) &&\n        // not dragged\n        !pointerDownState.drag.hasOccurred &&\n        // not resized\n        !this.state.isResizing &&\n        // only hitting the bounding box of the previous hit element\n        ((hitElement &&\n          hitElementBoundingBoxOnly(\n            {\n              x: pointerDownState.origin.x,\n              y: pointerDownState.origin.y,\n              element: hitElement,\n              shape: getElementShape(\n                hitElement,\n                this.scene.getNonDeletedElementsMap(),\n              ),\n              threshold: this.getElementHitThreshold(),\n              frameNameBound: isFrameLikeElement(hitElement)\n                ? this.frameNameBoundsCache.get(hitElement)\n                : null,\n            },\n            elementsMap,\n          )) ||\n          (!hitElement &&\n            pointerDownState.hit.hasHitCommonBoundingBoxOfSelectedElements))\n      ) {\n        if (this.state.editingLinearElement) {\n          this.setState({ editingLinearElement: null });\n        } else {\n          // Deselect selected elements\n          this.setState({\n            selectedElementIds: makeNextSelectedElementIds({}, this.state),\n            selectedGroupIds: {},\n            editingGroupId: null,\n            activeEmbeddable: null,\n          });\n        }\n        // reset cursor\n        setCursor(this.interactiveCanvas, CURSOR_TYPE.AUTO);\n        return;\n      }\n\n      if (!activeTool.locked && activeTool.type !== \"freedraw\" && newElement) {\n        this.setState((prevState) => ({\n          selectedElementIds: makeNextSelectedElementIds(\n            {\n              ...prevState.selectedElementIds,\n              [newElement.id]: true,\n            },\n            prevState,\n          ),\n          showHyperlinkPopup:\n            isEmbeddableElement(newElement) && !newElement.link\n              ? \"editor\"\n              : prevState.showHyperlinkPopup,\n        }));\n      }\n\n      if (\n        activeTool.type !== \"selection\" ||\n        isSomeElementSelected(this.scene.getNonDeletedElements(), this.state) ||\n        !isShallowEqual(\n          this.state.previousSelectedElementIds,\n          this.state.selectedElementIds,\n        )\n      ) {\n        this.store.shouldCaptureIncrement();\n      }\n\n      if (\n        pointerDownState.drag.hasOccurred ||\n        isResizing ||\n        isRotating ||\n        isCropping\n      ) {\n        // We only allow binding via linear elements, specifically via dragging\n        // the endpoints (\"start\" or \"end\").\n        const linearElements = this.scene\n          .getSelectedElements(this.state)\n          .filter(isLinearElement);\n\n        bindOrUnbindLinearElements(\n          linearElements,\n          this.scene.getNonDeletedElementsMap(),\n          this.scene.getNonDeletedElements(),\n          this.scene,\n          isBindingEnabled(this.state),\n          this.state.selectedLinearElement?.selectedPointsIndices ?? [],\n          this.state.zoom,\n        );\n      }\n\n      if (activeTool.type === \"laser\") {\n        this.laserTrails.endPath();\n        return;\n      }\n\n      if (!activeTool.locked && activeTool.type !== \"freedraw\") {\n        resetCursor(this.interactiveCanvas);\n        this.setState({\n          newElement: null,\n          suggestedBindings: [],\n          activeTool: updateActiveTool(this.state, { type: \"selection\" }),\n        });\n      } else {\n        this.setState({\n          newElement: null,\n          suggestedBindings: [],\n        });\n      }\n\n      if (\n        hitElement &&\n        this.lastPointerUpEvent &&\n        this.lastPointerDownEvent &&\n        this.lastPointerUpEvent.timeStamp -\n          this.lastPointerDownEvent.timeStamp <\n          300 &&\n        gesture.pointers.size <= 1 &&\n        isIframeLikeElement(hitElement) &&\n        this.isIframeLikeElementCenter(\n          hitElement,\n          this.lastPointerUpEvent,\n          pointerDownState.origin.x,\n          pointerDownState.origin.y,\n        )\n      ) {\n        this.handleEmbeddableCenterClick(hitElement);\n      }\n    });\n  }\n\n  private restoreReadyToEraseElements = () => {\n    this.elementsPendingErasure = new Set();\n    this.triggerRender();\n  };\n\n  private eraseElements = () => {\n    let didChange = false;\n    const elements = this.scene.getElementsIncludingDeleted().map((ele) => {\n      if (\n        this.elementsPendingErasure.has(ele.id) ||\n        (ele.frameId && this.elementsPendingErasure.has(ele.frameId)) ||\n        (isBoundToContainer(ele) &&\n          this.elementsPendingErasure.has(ele.containerId))\n      ) {\n        didChange = true;\n        return newElementWith(ele, { isDeleted: true });\n      }\n      return ele;\n    });\n\n    this.elementsPendingErasure = new Set();\n\n    if (didChange) {\n      this.store.shouldCaptureIncrement();\n      this.scene.replaceAllElements(elements);\n    }\n  };\n\n  private initializeImage = async ({\n    imageFile,\n    imageElement: _imageElement,\n    showCursorImagePreview = false,\n  }: {\n    imageFile: File;\n    imageElement: ExcalidrawImageElement;\n    showCursorImagePreview?: boolean;\n  }) => {\n    // at this point this should be guaranteed image file, but we do this check\n    // to satisfy TS down the line\n    if (!isSupportedImageFile(imageFile)) {\n      throw new Error(t(\"errors.unsupportedFileType\"));\n    }\n    const mimeType = imageFile.type;\n\n    setCursor(this.interactiveCanvas, \"wait\");\n\n    if (mimeType === MIME_TYPES.svg) {\n      try {\n        imageFile = SVGStringToFile(\n          normalizeSVG(await imageFile.text()),\n          imageFile.name,\n        );\n      } catch (error: any) {\n        console.warn(error);\n        throw new Error(t(\"errors.svgImageInsertError\"));\n      }\n    }\n\n    // generate image id (by default the file digest) before any\n    // resizing/compression takes place to keep it more portable\n    const fileId = await ((this.props.generateIdForFile?.(\n      imageFile,\n    ) as Promise<FileId>) || generateIdFromFile(imageFile));\n\n    if (!fileId) {\n      console.warn(\n        \"Couldn't generate file id or the supplied `generateIdForFile` didn't resolve to one.\",\n      );\n      throw new Error(t(\"errors.imageInsertError\"));\n    }\n\n    const existingFileData = this.files[fileId];\n    if (!existingFileData?.dataURL) {\n      try {\n        imageFile = await resizeImageFile(imageFile, {\n          maxWidthOrHeight: DEFAULT_MAX_IMAGE_WIDTH_OR_HEIGHT,\n        });\n      } catch (error: any) {\n        console.error(\n          \"Error trying to resizing image file on insertion\",\n          error,\n        );\n      }\n\n      if (imageFile.size > MAX_ALLOWED_FILE_BYTES) {\n        throw new Error(\n          t(\"errors.fileTooBig\", {\n            maxSize: `${Math.trunc(MAX_ALLOWED_FILE_BYTES / 1024 / 1024)}MB`,\n          }),\n        );\n      }\n    }\n\n    if (showCursorImagePreview) {\n      const dataURL = this.files[fileId]?.dataURL;\n      // optimization so that we don't unnecessarily resize the original\n      // full-size file for cursor preview\n      // (it's much faster to convert the resized dataURL to File)\n      const resizedFile = dataURL && dataURLToFile(dataURL);\n\n      this.setImagePreviewCursor(resizedFile || imageFile);\n    }\n\n    const dataURL =\n      this.files[fileId]?.dataURL || (await getDataURL(imageFile));\n\n    const imageElement = mutateElement(\n      _imageElement,\n      {\n        fileId,\n      },\n      false,\n    ) as NonDeleted<InitializedExcalidrawImageElement>;\n\n    return new Promise<NonDeleted<InitializedExcalidrawImageElement>>(\n      async (resolve, reject) => {\n        try {\n          this.addMissingFiles([\n            {\n              mimeType,\n              id: fileId,\n              dataURL,\n              created: Date.now(),\n              lastRetrieved: Date.now(),\n            },\n          ]);\n          const cachedImageData = this.imageCache.get(fileId);\n          if (!cachedImageData) {\n            this.addNewImagesToImageCache();\n            await this.updateImageCache([imageElement]);\n          }\n          if (cachedImageData?.image instanceof Promise) {\n            await cachedImageData.image;\n          }\n          if (\n            this.state.pendingImageElementId !== imageElement.id &&\n            this.state.newElement?.id !== imageElement.id\n          ) {\n            this.initializeImageDimensions(imageElement, true);\n          }\n          resolve(imageElement);\n        } catch (error: any) {\n          console.error(error);\n          reject(new Error(t(\"errors.imageInsertError\")));\n        } finally {\n          if (!showCursorImagePreview) {\n            resetCursor(this.interactiveCanvas);\n          }\n        }\n      },\n    );\n  };\n\n  /**\n   * inserts image into elements array and rerenders\n   */\n  insertImageElement = async (\n    imageElement: ExcalidrawImageElement,\n    imageFile: File,\n    showCursorImagePreview?: boolean,\n  ) => {\n    // we should be handling all cases upstream, but in case we forget to handle\n    // a future case, let's throw here\n    if (!this.isToolSupported(\"image\")) {\n      this.setState({ errorMessage: t(\"errors.imageToolNotSupported\") });\n      return;\n    }\n\n    this.scene.insertElement(imageElement);\n\n    try {\n      return await this.initializeImage({\n        imageFile,\n        imageElement,\n        showCursorImagePreview,\n      });\n    } catch (error: any) {\n      mutateElement(imageElement, {\n        isDeleted: true,\n      });\n      this.actionManager.executeAction(actionFinalize);\n      this.setState({\n        errorMessage: error.message || t(\"errors.imageInsertError\"),\n      });\n      return null;\n    }\n  };\n\n  private setImagePreviewCursor = async (imageFile: File) => {\n    // mustn't be larger than 128 px\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Basic_User_Interface/Using_URL_values_for_the_cursor_property\n    const cursorImageSizePx = 96;\n    let imagePreview;\n\n    try {\n      imagePreview = await resizeImageFile(imageFile, {\n        maxWidthOrHeight: cursorImageSizePx,\n      });\n    } catch (e: any) {\n      if (e.cause === \"UNSUPPORTED\") {\n        throw new Error(t(\"errors.unsupportedFileType\"));\n      }\n      throw e;\n    }\n\n    let previewDataURL = await getDataURL(imagePreview);\n\n    // SVG cannot be resized via `resizeImageFile` so we resize by rendering to\n    // a small canvas\n    if (imageFile.type === MIME_TYPES.svg) {\n      const img = await loadHTMLImageElement(previewDataURL);\n\n      let height = Math.min(img.height, cursorImageSizePx);\n      let width = height * (img.width / img.height);\n\n      if (width > cursorImageSizePx) {\n        width = cursorImageSizePx;\n        height = width * (img.height / img.width);\n      }\n\n      const canvas = document.createElement(\"canvas\");\n      canvas.height = height;\n      canvas.width = width;\n      const context = canvas.getContext(\"2d\")!;\n\n      context.drawImage(img, 0, 0, width, height);\n\n      previewDataURL = canvas.toDataURL(MIME_TYPES.svg) as DataURL;\n    }\n\n    if (this.state.pendingImageElementId) {\n      setCursor(this.interactiveCanvas, `url(${previewDataURL}) 4 4, auto`);\n    }\n  };\n\n  private onImageAction = async ({\n    insertOnCanvasDirectly,\n  }: {\n    insertOnCanvasDirectly: boolean;\n  }) => {\n    try {\n      const clientX = this.state.width / 2 + this.state.offsetLeft;\n      const clientY = this.state.height / 2 + this.state.offsetTop;\n\n      const { x, y } = viewportCoordsToSceneCoords(\n        { clientX, clientY },\n        this.state,\n      );\n\n      const imageFile = await fileOpen({\n        description: \"Image\",\n        extensions: Object.keys(\n          IMAGE_MIME_TYPES,\n        ) as (keyof typeof IMAGE_MIME_TYPES)[],\n      });\n\n      const imageElement = this.createImageElement({\n        sceneX: x,\n        sceneY: y,\n        addToFrameUnderCursor: false,\n      });\n\n      if (insertOnCanvasDirectly) {\n        this.insertImageElement(imageElement, imageFile);\n        this.initializeImageDimensions(imageElement);\n        this.setState(\n          {\n            selectedElementIds: makeNextSelectedElementIds(\n              { [imageElement.id]: true },\n              this.state,\n            ),\n          },\n          () => {\n            this.actionManager.executeAction(actionFinalize);\n          },\n        );\n      } else {\n        this.setState(\n          {\n            pendingImageElementId: imageElement.id,\n          },\n          () => {\n            this.insertImageElement(\n              imageElement,\n              imageFile,\n              /* showCursorImagePreview */ true,\n            );\n          },\n        );\n      }\n    } catch (error: any) {\n      if (error.name !== \"AbortError\") {\n        console.error(error);\n      } else {\n        console.warn(error);\n      }\n      this.setState(\n        {\n          pendingImageElementId: null,\n          newElement: null,\n          activeTool: updateActiveTool(this.state, { type: \"selection\" }),\n        },\n        () => {\n          this.actionManager.executeAction(actionFinalize);\n        },\n      );\n    }\n  };\n\n  initializeImageDimensions = (\n    imageElement: ExcalidrawImageElement,\n    forceNaturalSize = false,\n  ) => {\n    const image =\n      isInitializedImageElement(imageElement) &&\n      this.imageCache.get(imageElement.fileId)?.image;\n\n    if (!image || image instanceof Promise) {\n      if (\n        imageElement.width < DRAGGING_THRESHOLD / this.state.zoom.value &&\n        imageElement.height < DRAGGING_THRESHOLD / this.state.zoom.value\n      ) {\n        const placeholderSize = 100 / this.state.zoom.value;\n        mutateElement(imageElement, {\n          x: imageElement.x - placeholderSize / 2,\n          y: imageElement.y - placeholderSize / 2,\n          width: placeholderSize,\n          height: placeholderSize,\n        });\n      }\n\n      return;\n    }\n\n    if (\n      forceNaturalSize ||\n      // if user-created bounding box is below threshold, assume the\n      // intention was to click instead of drag, and use the image's\n      // intrinsic size\n      (imageElement.width < DRAGGING_THRESHOLD / this.state.zoom.value &&\n        imageElement.height < DRAGGING_THRESHOLD / this.state.zoom.value)\n    ) {\n      const minHeight = Math.max(this.state.height - 120, 160);\n      // max 65% of canvas height, clamped to <300px, vh - 120px>\n      const maxHeight = Math.min(\n        minHeight,\n        Math.floor(this.state.height * 0.5) / this.state.zoom.value,\n      );\n\n      const height = Math.min(image.naturalHeight, maxHeight);\n      const width = height * (image.naturalWidth / image.naturalHeight);\n\n      // add current imageElement width/height to account for previous centering\n      // of the placeholder image\n      const x = imageElement.x + imageElement.width / 2 - width / 2;\n      const y = imageElement.y + imageElement.height / 2 - height / 2;\n\n      mutateElement(imageElement, {\n        x,\n        y,\n        width,\n        height,\n        crop: null,\n      });\n    }\n  };\n\n  /** updates image cache, refreshing updated elements and/or setting status\n      to error for images that fail during <img> element creation */\n  private updateImageCache = async (\n    elements: readonly InitializedExcalidrawImageElement[],\n    files = this.files,\n  ) => {\n    const { updatedFiles, erroredFiles } = await _updateImageCache({\n      imageCache: this.imageCache,\n      fileIds: elements.map((element) => element.fileId),\n      files,\n    });\n    if (updatedFiles.size || erroredFiles.size) {\n      for (const element of elements) {\n        if (updatedFiles.has(element.fileId)) {\n          ShapeCache.delete(element);\n        }\n      }\n    }\n    if (erroredFiles.size) {\n      this.scene.replaceAllElements(\n        this.scene.getElementsIncludingDeleted().map((element) => {\n          if (\n            isInitializedImageElement(element) &&\n            erroredFiles.has(element.fileId)\n          ) {\n            return newElementWith(element, {\n              status: \"error\",\n            });\n          }\n          return element;\n        }),\n      );\n    }\n\n    return { updatedFiles, erroredFiles };\n  };\n\n  /** adds new images to imageCache and re-renders if needed */\n  private addNewImagesToImageCache = async (\n    imageElements: InitializedExcalidrawImageElement[] = getInitializedImageElements(\n      this.scene.getNonDeletedElements(),\n    ),\n    files: BinaryFiles = this.files,\n  ) => {\n    const uncachedImageElements = imageElements.filter(\n      (element) => !element.isDeleted && !this.imageCache.has(element.fileId),\n    );\n\n    if (uncachedImageElements.length) {\n      const { updatedFiles } = await this.updateImageCache(\n        uncachedImageElements,\n        files,\n      );\n      if (updatedFiles.size) {\n        this.scene.triggerUpdate();\n      }\n    }\n  };\n\n  /** generally you should use `addNewImagesToImageCache()` directly if you need\n   *  to render new images. This is just a failsafe  */\n  private scheduleImageRefresh = throttle(() => {\n    this.addNewImagesToImageCache();\n  }, IMAGE_RENDER_TIMEOUT);\n\n  private updateBindingEnabledOnPointerMove = (\n    event: React.PointerEvent<HTMLElement>,\n  ) => {\n    const shouldEnableBinding = shouldEnableBindingForPointerEvent(event);\n    if (this.state.isBindingEnabled !== shouldEnableBinding) {\n      this.setState({ isBindingEnabled: shouldEnableBinding });\n    }\n  };\n\n  private maybeSuggestBindingAtCursor = (\n    pointerCoords: {\n      x: number;\n      y: number;\n    },\n    considerAll: boolean,\n  ): void => {\n    const hoveredBindableElement = getHoveredElementForBinding(\n      pointerCoords,\n      this.scene.getNonDeletedElements(),\n      this.scene.getNonDeletedElementsMap(),\n      this.state.zoom,\n      false,\n      considerAll,\n    );\n    this.setState({\n      suggestedBindings:\n        hoveredBindableElement != null ? [hoveredBindableElement] : [],\n    });\n  };\n\n  private maybeSuggestBindingsForLinearElementAtCoords = (\n    linearElement: NonDeleted<ExcalidrawLinearElement>,\n    /** scene coords */\n    pointerCoords: {\n      x: number;\n      y: number;\n    }[],\n    // During line creation the start binding hasn't been written yet\n    // into `linearElement`\n    oppositeBindingBoundElement?: ExcalidrawBindableElement | null,\n  ): void => {\n    if (!pointerCoords.length) {\n      return;\n    }\n\n    const suggestedBindings = pointerCoords.reduce(\n      (acc: NonDeleted<ExcalidrawBindableElement>[], coords) => {\n        const hoveredBindableElement = getHoveredElementForBinding(\n          coords,\n          this.scene.getNonDeletedElements(),\n          this.scene.getNonDeletedElementsMap(),\n          this.state.zoom,\n          isElbowArrow(linearElement),\n          isElbowArrow(linearElement),\n        );\n        if (\n          hoveredBindableElement != null &&\n          !isLinearElementSimpleAndAlreadyBound(\n            linearElement,\n            oppositeBindingBoundElement?.id,\n            hoveredBindableElement,\n          )\n        ) {\n          acc.push(hoveredBindableElement);\n        }\n        return acc;\n      },\n      [],\n    );\n\n    this.setState({ suggestedBindings });\n  };\n\n  private clearSelection(hitElement: ExcalidrawElement | null): void {\n    this.setState((prevState) => ({\n      selectedElementIds: makeNextSelectedElementIds({}, prevState),\n      activeEmbeddable: null,\n      selectedGroupIds: {},\n      // Continue editing the same group if the user selected a different\n      // element from it\n      editingGroupId:\n        prevState.editingGroupId &&\n        hitElement != null &&\n        isElementInGroup(hitElement, prevState.editingGroupId)\n          ? prevState.editingGroupId\n          : null,\n    }));\n    this.setState({\n      selectedElementIds: makeNextSelectedElementIds({}, this.state),\n      activeEmbeddable: null,\n      previousSelectedElementIds: this.state.selectedElementIds,\n    });\n  }\n\n  private handleInteractiveCanvasRef = (canvas: HTMLCanvasElement | null) => {\n    // canvas is null when unmounting\n    if (canvas !== null) {\n      this.interactiveCanvas = canvas;\n\n      // -----------------------------------------------------------------------\n      // NOTE wheel, touchstart, touchend events must be registered outside\n      // of react because react binds them them passively (so we can't prevent\n      // default on them)\n      this.interactiveCanvas.addEventListener(\n        EVENT.TOUCH_START,\n        this.onTouchStart,\n        { passive: false },\n      );\n      this.interactiveCanvas.addEventListener(EVENT.TOUCH_END, this.onTouchEnd);\n      // -----------------------------------------------------------------------\n    } else {\n      this.interactiveCanvas?.removeEventListener(\n        EVENT.TOUCH_START,\n        this.onTouchStart,\n      );\n      this.interactiveCanvas?.removeEventListener(\n        EVENT.TOUCH_END,\n        this.onTouchEnd,\n      );\n    }\n  };\n\n  private handleAppOnDrop = async (event: React.DragEvent<HTMLDivElement>) => {\n    // must be retrieved first, in the same frame\n    const { file, fileHandle } = await getFileFromEvent(event);\n    const { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(\n      event,\n      this.state,\n    );\n\n    try {\n      // if image tool not supported, don't show an error here and let it fall\n      // through so we still support importing scene data from images. If no\n      // scene data encoded, we'll show an error then\n      if (isSupportedImageFile(file) && this.isToolSupported(\"image\")) {\n        // first attempt to decode scene from the image if it's embedded\n        // ---------------------------------------------------------------------\n\n        if (file?.type === MIME_TYPES.png || file?.type === MIME_TYPES.svg) {\n          try {\n            const scene = await loadFromBlob(\n              file,\n              this.state,\n              this.scene.getElementsIncludingDeleted(),\n              fileHandle,\n            );\n            this.syncActionResult({\n              ...scene,\n              appState: {\n                ...(scene.appState || this.state),\n                isLoading: false,\n              },\n              replaceFiles: true,\n              captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n            });\n            return;\n          } catch (error: any) {\n            // Don't throw for image scene daa\n            if (error.name !== \"EncodingError\") {\n              throw new Error(t(\"alerts.couldNotLoadInvalidFile\"));\n            }\n          }\n        }\n\n        // if no scene is embedded or we fail for whatever reason, fall back\n        // to importing as regular image\n        // ---------------------------------------------------------------------\n\n        const imageElement = this.createImageElement({ sceneX, sceneY });\n        this.insertImageElement(imageElement, file);\n        this.initializeImageDimensions(imageElement);\n        this.setState({\n          selectedElementIds: makeNextSelectedElementIds(\n            { [imageElement.id]: true },\n            this.state,\n          ),\n        });\n\n        return;\n      }\n    } catch (error: any) {\n      return this.setState({\n        isLoading: false,\n        errorMessage: error.message,\n      });\n    }\n\n    const libraryJSON = event.dataTransfer.getData(MIME_TYPES.excalidrawlib);\n    if (libraryJSON && typeof libraryJSON === \"string\") {\n      try {\n        const libraryItems = parseLibraryJSON(libraryJSON);\n        this.addElementsFromPasteOrLibrary({\n          elements: distributeLibraryItemsOnSquareGrid(libraryItems),\n          position: event,\n          files: null,\n        });\n      } catch (error: any) {\n        this.setState({ errorMessage: error.message });\n      }\n      return;\n    }\n\n    if (file) {\n      // Attempt to parse an excalidraw/excalidrawlib file\n      await this.loadFileToCanvas(file, fileHandle);\n    }\n\n    if (event.dataTransfer?.types?.includes(\"text/plain\")) {\n      const text = event.dataTransfer?.getData(\"text\");\n      if (\n        text &&\n        embeddableURLValidator(text, this.props.validateEmbeddable) &&\n        (/^(http|https):\\/\\/[^\\s/$.?#].[^\\s]*$/.test(text) ||\n          getEmbedLink(text)?.type === \"video\")\n      ) {\n        const embeddable = this.insertEmbeddableElement({\n          sceneX,\n          sceneY,\n          link: normalizeLink(text),\n        });\n        if (embeddable) {\n          this.setState({ selectedElementIds: { [embeddable.id]: true } });\n        }\n      }\n    }\n  };\n\n  loadFileToCanvas = async (\n    file: File,\n    fileHandle: FileSystemHandle | null,\n  ) => {\n    file = await normalizeFile(file);\n    try {\n      const elements = this.scene.getElementsIncludingDeleted();\n      let ret;\n      try {\n        ret = await loadSceneOrLibraryFromBlob(\n          file,\n          this.state,\n          elements,\n          fileHandle,\n        );\n      } catch (error: any) {\n        const imageSceneDataError = error instanceof ImageSceneDataError;\n        if (\n          imageSceneDataError &&\n          error.code === \"IMAGE_NOT_CONTAINS_SCENE_DATA\" &&\n          !this.isToolSupported(\"image\")\n        ) {\n          this.setState({\n            isLoading: false,\n            errorMessage: t(\"errors.imageToolNotSupported\"),\n          });\n          return;\n        }\n        const errorMessage = imageSceneDataError\n          ? t(\"alerts.cannotRestoreFromImage\")\n          : t(\"alerts.couldNotLoadInvalidFile\");\n        this.setState({\n          isLoading: false,\n          errorMessage,\n        });\n      }\n      if (!ret) {\n        return;\n      }\n\n      if (ret.type === MIME_TYPES.excalidraw) {\n        // restore the fractional indices by mutating elements\n        syncInvalidIndices(elements.concat(ret.data.elements));\n\n        // update the store snapshot for old elements, otherwise we would end up with duplicated fractional indices on undo\n        this.store.updateSnapshot(arrayToMap(elements), this.state);\n\n        this.setState({ isLoading: true });\n        this.syncActionResult({\n          ...ret.data,\n          appState: {\n            ...(ret.data.appState || this.state),\n            isLoading: false,\n          },\n          replaceFiles: true,\n          captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n        });\n      } else if (ret.type === MIME_TYPES.excalidrawlib) {\n        await this.library\n          .updateLibrary({\n            libraryItems: file,\n            merge: true,\n            openLibraryMenu: true,\n          })\n          .catch((error) => {\n            console.error(error);\n            this.setState({ errorMessage: t(\"errors.importLibraryError\") });\n          });\n      }\n    } catch (error: any) {\n      this.setState({ isLoading: false, errorMessage: error.message });\n    }\n  };\n\n  private handleCanvasContextMenu = (\n    event: React.MouseEvent<HTMLElement | HTMLCanvasElement>,\n  ) => {\n    event.preventDefault();\n\n    if (\n      ((\"pointerType\" in event.nativeEvent &&\n        event.nativeEvent.pointerType === \"touch\") ||\n        (\"pointerType\" in event.nativeEvent &&\n          event.nativeEvent.pointerType === \"pen\" &&\n          // always allow if user uses a pen secondary button\n          event.button !== POINTER_BUTTON.SECONDARY)) &&\n      this.state.activeTool.type !== \"selection\"\n    ) {\n      return;\n    }\n\n    const { x, y } = viewportCoordsToSceneCoords(event, this.state);\n    const element = this.getElementAtPosition(x, y, {\n      preferSelected: true,\n      includeLockedElements: true,\n    });\n\n    const selectedElements = this.scene.getSelectedElements(this.state);\n    const isHittingCommonBoundBox =\n      this.isHittingCommonBoundingBoxOfSelectedElements(\n        { x, y },\n        selectedElements,\n      );\n\n    const type = element || isHittingCommonBoundBox ? \"element\" : \"canvas\";\n\n    const container = this.excalidrawContainerRef.current!;\n    const { top: offsetTop, left: offsetLeft } =\n      container.getBoundingClientRect();\n    const left = event.clientX - offsetLeft;\n    const top = event.clientY - offsetTop;\n\n    trackEvent(\"contextMenu\", \"openContextMenu\", type);\n\n    this.setState(\n      {\n        ...(element && !this.state.selectedElementIds[element.id]\n          ? {\n              ...this.state,\n              ...selectGroupsForSelectedElements(\n                {\n                  editingGroupId: this.state.editingGroupId,\n                  selectedElementIds: { [element.id]: true },\n                },\n                this.scene.getNonDeletedElements(),\n                this.state,\n                this,\n              ),\n              selectedLinearElement: isLinearElement(element)\n                ? new LinearElementEditor(element)\n                : null,\n            }\n          : this.state),\n        showHyperlinkPopup: false,\n      },\n      () => {\n        this.setState({\n          contextMenu: { top, left, items: this.getContextMenuItems(type) },\n        });\n      },\n    );\n  };\n\n  private maybeDragNewGenericElement = (\n    pointerDownState: PointerDownState,\n    event: MouseEvent | KeyboardEvent,\n    informMutation = true,\n  ): void => {\n    const selectionElement = this.state.selectionElement;\n    const pointerCoords = pointerDownState.lastCoords;\n    if (selectionElement && this.state.activeTool.type !== \"eraser\") {\n      dragNewElement({\n        newElement: selectionElement,\n        elementType: this.state.activeTool.type,\n        originX: pointerDownState.origin.x,\n        originY: pointerDownState.origin.y,\n        x: pointerCoords.x,\n        y: pointerCoords.y,\n        width: distance(pointerDownState.origin.x, pointerCoords.x),\n        height: distance(pointerDownState.origin.y, pointerCoords.y),\n        shouldMaintainAspectRatio: shouldMaintainAspectRatio(event),\n        shouldResizeFromCenter: shouldResizeFromCenter(event),\n        zoom: this.state.zoom.value,\n        informMutation,\n      });\n      return;\n    }\n\n    const newElement = this.state.newElement;\n    if (!newElement) {\n      return;\n    }\n\n    let [gridX, gridY] = getGridPoint(\n      pointerCoords.x,\n      pointerCoords.y,\n      event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize(),\n    );\n\n    const image =\n      isInitializedImageElement(newElement) &&\n      this.imageCache.get(newElement.fileId)?.image;\n    const aspectRatio =\n      image && !(image instanceof Promise) ? image.width / image.height : null;\n\n    this.maybeCacheReferenceSnapPoints(event, [newElement]);\n\n    const { snapOffset, snapLines } = snapNewElement(\n      newElement,\n      this,\n      event,\n      {\n        x:\n          pointerDownState.originInGrid.x +\n          (this.state.originSnapOffset?.x ?? 0),\n        y:\n          pointerDownState.originInGrid.y +\n          (this.state.originSnapOffset?.y ?? 0),\n      },\n      {\n        x: gridX - pointerDownState.originInGrid.x,\n        y: gridY - pointerDownState.originInGrid.y,\n      },\n      this.scene.getNonDeletedElementsMap(),\n    );\n\n    gridX += snapOffset.x;\n    gridY += snapOffset.y;\n\n    this.setState({\n      snapLines,\n    });\n\n    dragNewElement({\n      newElement,\n      elementType: this.state.activeTool.type,\n      originX: pointerDownState.originInGrid.x,\n      originY: pointerDownState.originInGrid.y,\n      x: gridX,\n      y: gridY,\n      width: distance(pointerDownState.originInGrid.x, gridX),\n      height: distance(pointerDownState.originInGrid.y, gridY),\n      shouldMaintainAspectRatio: isImageElement(newElement)\n        ? !shouldMaintainAspectRatio(event)\n        : shouldMaintainAspectRatio(event),\n      shouldResizeFromCenter: shouldResizeFromCenter(event),\n      zoom: this.state.zoom.value,\n      widthAspectRatio: aspectRatio,\n      originOffset: this.state.originSnapOffset,\n      informMutation,\n    });\n\n    this.setState({\n      newElement,\n    });\n\n    // highlight elements that are to be added to frames on frames creation\n    if (\n      this.state.activeTool.type === TOOL_TYPE.frame ||\n      this.state.activeTool.type === TOOL_TYPE.magicframe\n    ) {\n      this.setState({\n        elementsToHighlight: getElementsInResizingFrame(\n          this.scene.getNonDeletedElements(),\n          newElement as ExcalidrawFrameLikeElement,\n          this.state,\n          this.scene.getNonDeletedElementsMap(),\n        ),\n      });\n    }\n  };\n\n  private maybeHandleCrop = (\n    pointerDownState: PointerDownState,\n    event: MouseEvent | KeyboardEvent,\n  ): boolean => {\n    // to crop, we must already be in the cropping mode, where croppingElement has been set\n    if (!this.state.croppingElementId) {\n      return false;\n    }\n\n    const transformHandleType = pointerDownState.resize.handleType;\n    const pointerCoords = pointerDownState.lastCoords;\n    const [x, y] = getGridPoint(\n      pointerCoords.x - pointerDownState.resize.offset.x,\n      pointerCoords.y - pointerDownState.resize.offset.y,\n      event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize(),\n    );\n\n    const croppingElement = this.scene\n      .getNonDeletedElementsMap()\n      .get(this.state.croppingElementId);\n\n    if (\n      transformHandleType &&\n      croppingElement &&\n      isImageElement(croppingElement)\n    ) {\n      const croppingAtStateStart = pointerDownState.originalElements.get(\n        croppingElement.id,\n      );\n\n      const image =\n        isInitializedImageElement(croppingElement) &&\n        this.imageCache.get(croppingElement.fileId)?.image;\n\n      if (\n        croppingAtStateStart &&\n        isImageElement(croppingAtStateStart) &&\n        image &&\n        !(image instanceof Promise)\n      ) {\n        const [gridX, gridY] = getGridPoint(\n          pointerCoords.x,\n          pointerCoords.y,\n          event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize(),\n        );\n\n        const dragOffset = {\n          x: gridX - pointerDownState.originInGrid.x,\n          y: gridY - pointerDownState.originInGrid.y,\n        };\n\n        this.maybeCacheReferenceSnapPoints(event, [croppingElement]);\n\n        const { snapOffset, snapLines } = snapResizingElements(\n          [croppingElement],\n          [croppingAtStateStart],\n          this,\n          event,\n          dragOffset,\n          transformHandleType,\n        );\n\n        mutateElement(\n          croppingElement,\n          cropElement(\n            croppingElement,\n            transformHandleType,\n            image.naturalWidth,\n            image.naturalHeight,\n            x + snapOffset.x,\n            y + snapOffset.y,\n            event.shiftKey\n              ? croppingAtStateStart.width / croppingAtStateStart.height\n              : undefined,\n          ),\n        );\n\n        updateBoundElements(\n          croppingElement,\n          this.scene.getNonDeletedElementsMap(),\n          {\n            newSize: {\n              width: croppingElement.width,\n              height: croppingElement.height,\n            },\n          },\n        );\n\n        this.setState({\n          isCropping: transformHandleType && transformHandleType !== \"rotation\",\n          snapLines,\n        });\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  private maybeHandleResize = (\n    pointerDownState: PointerDownState,\n    event: MouseEvent | KeyboardEvent,\n  ): boolean => {\n    const selectedElements = this.scene.getSelectedElements(this.state);\n    const selectedFrames = selectedElements.filter(\n      (element): element is ExcalidrawFrameLikeElement =>\n        isFrameLikeElement(element),\n    );\n\n    const transformHandleType = pointerDownState.resize.handleType;\n\n    if (\n      // Frames cannot be rotated.\n      (selectedFrames.length > 0 && transformHandleType === \"rotation\") ||\n      // Elbow arrows cannot be transformed (resized or rotated).\n      (selectedElements.length === 1 && isElbowArrow(selectedElements[0])) ||\n      // Do not resize when in crop mode\n      this.state.croppingElementId\n    ) {\n      return false;\n    }\n\n    this.setState({\n      // TODO: rename this state field to \"isScaling\" to distinguish\n      // it from the generic \"isResizing\" which includes scaling and\n      // rotating\n      isResizing: transformHandleType && transformHandleType !== \"rotation\",\n      isRotating: transformHandleType === \"rotation\",\n      activeEmbeddable: null,\n    });\n    const pointerCoords = pointerDownState.lastCoords;\n    let [resizeX, resizeY] = getGridPoint(\n      pointerCoords.x - pointerDownState.resize.offset.x,\n      pointerCoords.y - pointerDownState.resize.offset.y,\n      event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize(),\n    );\n\n    const frameElementsOffsetsMap = new Map<\n      string,\n      {\n        x: number;\n        y: number;\n      }\n    >();\n\n    selectedFrames.forEach((frame) => {\n      const elementsInFrame = getFrameChildren(\n        this.scene.getNonDeletedElements(),\n        frame.id,\n      );\n\n      elementsInFrame.forEach((element) => {\n        frameElementsOffsetsMap.set(frame.id + element.id, {\n          x: element.x - frame.x,\n          y: element.y - frame.y,\n        });\n      });\n    });\n\n    // check needed for avoiding flickering when a key gets pressed\n    // during dragging\n    if (!this.state.selectedElementsAreBeingDragged) {\n      const [gridX, gridY] = getGridPoint(\n        pointerCoords.x,\n        pointerCoords.y,\n        event[KEYS.CTRL_OR_CMD] ? null : this.getEffectiveGridSize(),\n      );\n\n      const dragOffset = {\n        x: gridX - pointerDownState.originInGrid.x,\n        y: gridY - pointerDownState.originInGrid.y,\n      };\n\n      const originalElements = [...pointerDownState.originalElements.values()];\n\n      this.maybeCacheReferenceSnapPoints(event, selectedElements);\n\n      const { snapOffset, snapLines } = snapResizingElements(\n        selectedElements,\n        getSelectedElements(originalElements, this.state),\n        this,\n        event,\n        dragOffset,\n        transformHandleType,\n      );\n\n      resizeX += snapOffset.x;\n      resizeY += snapOffset.y;\n\n      this.setState({\n        snapLines,\n      });\n    }\n\n    if (\n      transformElements(\n        pointerDownState.originalElements,\n        transformHandleType,\n        selectedElements,\n        this.scene.getElementsMapIncludingDeleted(),\n        this.scene,\n        shouldRotateWithDiscreteAngle(event),\n        shouldResizeFromCenter(event),\n        selectedElements.some((element) => isImageElement(element))\n          ? !shouldMaintainAspectRatio(event)\n          : shouldMaintainAspectRatio(event),\n        resizeX,\n        resizeY,\n        pointerDownState.resize.center.x,\n        pointerDownState.resize.center.y,\n      )\n    ) {\n      const suggestedBindings = getSuggestedBindingsForArrows(\n        selectedElements,\n        this.scene.getNonDeletedElementsMap(),\n        this.state.zoom,\n      );\n\n      const elementsToHighlight = new Set<ExcalidrawElement>();\n      selectedFrames.forEach((frame) => {\n        getElementsInResizingFrame(\n          this.scene.getNonDeletedElements(),\n          frame,\n          this.state,\n          this.scene.getNonDeletedElementsMap(),\n        ).forEach((element) => elementsToHighlight.add(element));\n      });\n\n      this.setState({\n        elementsToHighlight: [...elementsToHighlight],\n        suggestedBindings,\n      });\n\n      return true;\n    }\n    return false;\n  };\n\n  private getContextMenuItems = (\n    type: \"canvas\" | \"element\",\n  ): ContextMenuItems => {\n    const options: ContextMenuItems = [];\n\n    options.push(actionCopyAsPng, actionCopyAsSvg);\n\n    // canvas contextMenu\n    // -------------------------------------------------------------------------\n\n    if (type === \"canvas\") {\n      if (this.state.viewModeEnabled) {\n        return [\n          ...options,\n          actionToggleGridMode,\n          actionToggleZenMode,\n          actionToggleViewMode,\n          actionToggleStats,\n        ];\n      }\n\n      return [\n        actionPaste,\n        CONTEXT_MENU_SEPARATOR,\n        actionCopyAsPng,\n        actionCopyAsSvg,\n        copyText,\n        CONTEXT_MENU_SEPARATOR,\n        actionSelectAll,\n        actionUnlockAllElements,\n        CONTEXT_MENU_SEPARATOR,\n        actionToggleGridMode,\n        actionToggleObjectsSnapMode,\n        actionToggleZenMode,\n        actionToggleViewMode,\n        actionToggleStats,\n      ];\n    }\n\n    // element contextMenu\n    // -------------------------------------------------------------------------\n\n    options.push(copyText);\n\n    if (this.state.viewModeEnabled) {\n      return [actionCopy, ...options];\n    }\n\n    return [\n      CONTEXT_MENU_SEPARATOR,\n      actionCut,\n      actionCopy,\n      actionPaste,\n      CONTEXT_MENU_SEPARATOR,\n      actionSelectAllElementsInFrame,\n      actionRemoveAllElementsFromFrame,\n      actionWrapSelectionInFrame,\n      CONTEXT_MENU_SEPARATOR,\n      actionToggleCropEditor,\n      CONTEXT_MENU_SEPARATOR,\n      ...options,\n      CONTEXT_MENU_SEPARATOR,\n      actionCopyStyles,\n      actionPasteStyles,\n      CONTEXT_MENU_SEPARATOR,\n      actionGroup,\n      actionTextAutoResize,\n      actionUnbindText,\n      actionBindText,\n      actionWrapTextInContainer,\n      actionUngroup,\n      CONTEXT_MENU_SEPARATOR,\n      actionAddToLibrary,\n      CONTEXT_MENU_SEPARATOR,\n      actionSendBackward,\n      actionBringForward,\n      actionSendToBack,\n      actionBringToFront,\n      CONTEXT_MENU_SEPARATOR,\n      actionFlipHorizontal,\n      actionFlipVertical,\n      CONTEXT_MENU_SEPARATOR,\n      actionToggleLinearEditor,\n      CONTEXT_MENU_SEPARATOR,\n      actionLink,\n      actionCopyElementLink,\n      CONTEXT_MENU_SEPARATOR,\n      actionDuplicateSelection,\n      actionToggleElementLock,\n      CONTEXT_MENU_SEPARATOR,\n      actionDeleteSelected,\n    ];\n  };\n\n  private handleWheel = withBatchedUpdates(\n    (\n      event: WheelEvent | React.WheelEvent<HTMLDivElement | HTMLCanvasElement>,\n    ) => {\n      // if not scrolling on canvas/wysiwyg, ignore\n      if (\n        !(\n          event.target instanceof HTMLCanvasElement ||\n          event.target instanceof HTMLTextAreaElement ||\n          event.target instanceof HTMLIFrameElement\n        )\n      ) {\n        // prevent zooming the browser (but allow scrolling DOM)\n        if (event[KEYS.CTRL_OR_CMD]) {\n          event.preventDefault();\n        }\n\n        return;\n      }\n\n      event.preventDefault();\n\n      if (isPanning) {\n        return;\n      }\n\n      const { deltaX, deltaY } = event;\n      // note that event.ctrlKey is necessary to handle pinch zooming\n      if (event.metaKey || event.ctrlKey) {\n        const sign = Math.sign(deltaY);\n        const MAX_STEP = ZOOM_STEP * 100;\n        const absDelta = Math.abs(deltaY);\n        let delta = deltaY;\n        if (absDelta > MAX_STEP) {\n          delta = MAX_STEP * sign;\n        }\n\n        let newZoom = this.state.zoom.value - delta / 100;\n        // increase zoom steps the more zoomed-in we are (applies to >100% only)\n        newZoom +=\n          Math.log10(Math.max(1, this.state.zoom.value)) *\n          -sign *\n          // reduced amplification for small deltas (small movements on a trackpad)\n          Math.min(1, absDelta / 20);\n\n        this.translateCanvas((state) => ({\n          ...getStateForZoom(\n            {\n              viewportX: this.lastViewportPosition.x,\n              viewportY: this.lastViewportPosition.y,\n              nextZoom: getNormalizedZoom(newZoom),\n            },\n            state,\n          ),\n          shouldCacheIgnoreZoom: true,\n        }));\n        this.resetShouldCacheIgnoreZoomDebounced();\n        return;\n      }\n\n      // scroll horizontally when shift pressed\n      if (event.shiftKey) {\n        this.translateCanvas(({ zoom, scrollX }) => ({\n          // on Mac, shift+wheel tends to result in deltaX\n          scrollX: scrollX - (deltaY || deltaX) / zoom.value,\n        }));\n        return;\n      }\n\n      this.translateCanvas(({ zoom, scrollX, scrollY }) => ({\n        scrollX: scrollX - deltaX / zoom.value,\n        scrollY: scrollY - deltaY / zoom.value,\n      }));\n    },\n  );\n\n  private getTextWysiwygSnappedToCenterPosition(\n    x: number,\n    y: number,\n    appState: AppState,\n    container?: ExcalidrawTextContainer | null,\n  ) {\n    if (container) {\n      let elementCenterX = container.x + container.width / 2;\n      let elementCenterY = container.y + container.height / 2;\n\n      const elementCenter = getContainerCenter(\n        container,\n        appState,\n        this.scene.getNonDeletedElementsMap(),\n      );\n      if (elementCenter) {\n        elementCenterX = elementCenter.x;\n        elementCenterY = elementCenter.y;\n      }\n      const distanceToCenter = Math.hypot(\n        x - elementCenterX,\n        y - elementCenterY,\n      );\n      const isSnappedToCenter =\n        distanceToCenter < TEXT_TO_CENTER_SNAP_THRESHOLD;\n      if (isSnappedToCenter) {\n        const { x: viewportX, y: viewportY } = sceneCoordsToViewportCoords(\n          { sceneX: elementCenterX, sceneY: elementCenterY },\n          appState,\n        );\n        return { viewportX, viewportY, elementCenterX, elementCenterY };\n      }\n    }\n  }\n\n  private savePointer = (x: number, y: number, button: \"up\" | \"down\") => {\n    if (!x || !y) {\n      return;\n    }\n    const { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(\n      { clientX: x, clientY: y },\n      this.state,\n    );\n\n    if (isNaN(sceneX) || isNaN(sceneY)) {\n      // sometimes the pointer goes off screen\n    }\n\n    const pointer: CollaboratorPointer = {\n      x: sceneX,\n      y: sceneY,\n      tool: this.state.activeTool.type === \"laser\" ? \"laser\" : \"pointer\",\n    };\n\n    this.props.onPointerUpdate?.({\n      pointer,\n      button,\n      pointersMap: gesture.pointers,\n    });\n  };\n\n  private resetShouldCacheIgnoreZoomDebounced = debounce(() => {\n    if (!this.unmounted) {\n      this.setState({ shouldCacheIgnoreZoom: false });\n    }\n  }, 300);\n\n  private updateDOMRect = (cb?: () => void) => {\n    if (this.excalidrawContainerRef?.current) {\n      const excalidrawContainer = this.excalidrawContainerRef.current;\n      const {\n        width,\n        height,\n        left: offsetLeft,\n        top: offsetTop,\n      } = excalidrawContainer.getBoundingClientRect();\n      const {\n        width: currentWidth,\n        height: currentHeight,\n        offsetTop: currentOffsetTop,\n        offsetLeft: currentOffsetLeft,\n      } = this.state;\n\n      if (\n        width === currentWidth &&\n        height === currentHeight &&\n        offsetLeft === currentOffsetLeft &&\n        offsetTop === currentOffsetTop\n      ) {\n        if (cb) {\n          cb();\n        }\n        return;\n      }\n\n      this.setState(\n        {\n          width,\n          height,\n          offsetLeft,\n          offsetTop,\n        },\n        () => {\n          cb && cb();\n        },\n      );\n    }\n  };\n\n  public refresh = () => {\n    this.setState({ ...this.getCanvasOffsets() });\n  };\n\n  private getCanvasOffsets(): Pick<AppState, \"offsetTop\" | \"offsetLeft\"> {\n    if (this.excalidrawContainerRef?.current) {\n      const excalidrawContainer = this.excalidrawContainerRef.current;\n      const { left, top } = excalidrawContainer.getBoundingClientRect();\n      return {\n        offsetLeft: left,\n        offsetTop: top,\n      };\n    }\n    return {\n      offsetLeft: 0,\n      offsetTop: 0,\n    };\n  }\n\n  private async updateLanguage() {\n    const currentLang =\n      languages.find((lang) => lang.code === this.props.langCode) ||\n      defaultLang;\n    await setLanguage(currentLang);\n    this.setAppState({});\n  }\n}\n\n// -----------------------------------------------------------------------------\n// TEST HOOKS\n// -----------------------------------------------------------------------------\ndeclare global {\n  interface Window {\n    h: {\n      scene: Scene;\n      elements: readonly ExcalidrawElement[];\n      state: AppState;\n      setState: React.Component<any, AppState>[\"setState\"];\n      app: InstanceType<typeof App>;\n      history: History;\n      store: Store;\n    };\n  }\n}\n\nexport const createTestHook = () => {\n  if (import.meta.env.MODE === ENV.TEST || import.meta.env.DEV) {\n    window.h = window.h || ({} as Window[\"h\"]);\n\n    Object.defineProperties(window.h, {\n      elements: {\n        configurable: true,\n        get() {\n          return this.app?.scene.getElementsIncludingDeleted();\n        },\n        set(elements: ExcalidrawElement[]) {\n          return this.app?.scene.replaceAllElements(\n            syncInvalidIndices(elements),\n          );\n        },\n      },\n      scene: {\n        configurable: true,\n        get() {\n          return this.app?.scene;\n        },\n      },\n    });\n  }\n};\n\ncreateTestHook();\nexport default App;\n", "import \"./ToolIcon.scss\";\n\nimport type { CSSProperties } from \"react\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { useExcalidrawContainer } from \"./App\";\nimport { AbortError } from \"../errors\";\nimport Spinner from \"./Spinner\";\nimport type { PointerType } from \"../element/types\";\nimport { isPromiseLike } from \"../utils\";\n\nexport type ToolButtonSize = \"small\" | \"medium\";\n\ntype ToolButtonBaseProps = {\n  icon?: React.ReactNode;\n  \"aria-label\": string;\n  \"aria-keyshortcuts\"?: string;\n  \"data-testid\"?: string;\n  label?: string;\n  title?: string;\n  name?: string;\n  id?: string;\n  size?: ToolButtonSize;\n  keyBindingLabel?: string | null;\n  showAriaLabel?: boolean;\n  hidden?: boolean;\n  visible?: boolean;\n  selected?: boolean;\n  disabled?: boolean;\n  className?: string;\n  style?: CSSProperties;\n  isLoading?: boolean;\n};\n\ntype ToolButtonProps =\n  | (ToolButtonBaseProps & {\n      type: \"button\";\n      children?: React.ReactNode;\n      onClick?(event: React.MouseEvent): void;\n    })\n  | (ToolButtonBaseProps & {\n      type: \"submit\";\n      children?: React.ReactNode;\n      onClick?(event: React.MouseEvent): void;\n    })\n  | (ToolButtonBaseProps & {\n      type: \"icon\";\n      children?: React.ReactNode;\n      onClick?(): void;\n    })\n  | (ToolButtonBaseProps & {\n      type: \"radio\";\n      checked: boolean;\n      onChange?(data: { pointerType: PointerType | null }): void;\n      onPointerDown?(data: { pointerType: PointerType }): void;\n    });\n\nexport const ToolButton = React.forwardRef(\n  (\n    {\n      size = \"medium\",\n      visible = true,\n      className = \"\",\n      ...props\n    }: ToolButtonProps,\n    ref,\n  ) => {\n    const { id: excalId } = useExcalidrawContainer();\n    const innerRef = React.useRef(null);\n    React.useImperativeHandle(ref, () => innerRef.current);\n    const sizeCn = `ToolIcon_size_${size}`;\n\n    const [isLoading, setIsLoading] = useState(false);\n\n    const isMountedRef = useRef(true);\n\n    const onClick = async (event: React.MouseEvent) => {\n      const ret = \"onClick\" in props && props.onClick?.(event);\n\n      if (isPromiseLike(ret)) {\n        try {\n          setIsLoading(true);\n          await ret;\n        } catch (error: any) {\n          if (!(error instanceof AbortError)) {\n            throw error;\n          } else {\n            console.warn(error);\n          }\n        } finally {\n          if (isMountedRef.current) {\n            setIsLoading(false);\n          }\n        }\n      }\n    };\n\n    useEffect(() => {\n      isMountedRef.current = true;\n      return () => {\n        isMountedRef.current = false;\n      };\n    }, []);\n\n    const lastPointerTypeRef = useRef<PointerType | null>(null);\n\n    if (\n      props.type === \"button\" ||\n      props.type === \"icon\" ||\n      props.type === \"submit\"\n    ) {\n      const type = (props.type === \"icon\" ? \"button\" : props.type) as\n        | \"button\"\n        | \"submit\";\n      return (\n        <button\n          className={clsx(\n            \"ToolIcon_type_button\",\n            sizeCn,\n            className,\n            visible && !props.hidden\n              ? \"ToolIcon_type_button--show\"\n              : \"ToolIcon_type_button--hide\",\n            {\n              ToolIcon: !props.hidden,\n              \"ToolIcon--selected\": props.selected,\n              \"ToolIcon--plain\": props.type === \"icon\",\n            },\n          )}\n          style={props.style}\n          data-testid={props[\"data-testid\"]}\n          hidden={props.hidden}\n          title={props.title}\n          aria-label={props[\"aria-label\"]}\n          type={type}\n          onClick={onClick}\n          ref={innerRef}\n          disabled={isLoading || props.isLoading || !!props.disabled}\n        >\n          {(props.icon || props.label) && (\n            <div\n              className=\"ToolIcon__icon\"\n              aria-hidden=\"true\"\n              aria-disabled={!!props.disabled}\n            >\n              {props.icon || props.label}\n              {props.keyBindingLabel && (\n                <span className=\"ToolIcon__keybinding\">\n                  {props.keyBindingLabel}\n                </span>\n              )}\n              {props.isLoading && <Spinner />}\n            </div>\n          )}\n          {props.showAriaLabel && (\n            <div className=\"ToolIcon__label\">\n              {props[\"aria-label\"]} {isLoading && <Spinner />}\n            </div>\n          )}\n          {props.children}\n        </button>\n      );\n    }\n\n    return (\n      <label\n        className={clsx(\"ToolIcon\", className)}\n        title={props.title}\n        onPointerDown={(event) => {\n          lastPointerTypeRef.current = event.pointerType || null;\n          props.onPointerDown?.({ pointerType: event.pointerType || null });\n        }}\n        onPointerUp={() => {\n          requestAnimationFrame(() => {\n            lastPointerTypeRef.current = null;\n          });\n        }}\n      >\n        <input\n          className={`ToolIcon_type_radio ${sizeCn}`}\n          type=\"radio\"\n          name={props.name}\n          aria-label={props[\"aria-label\"]}\n          aria-keyshortcuts={props[\"aria-keyshortcuts\"]}\n          data-testid={props[\"data-testid\"]}\n          id={`${excalId}-${props.id}`}\n          onChange={() => {\n            props.onChange?.({ pointerType: lastPointerTypeRef.current });\n          }}\n          checked={props.checked}\n          ref={innerRef}\n        />\n        <div className=\"ToolIcon__icon\">\n          {props.icon}\n          {props.keyBindingLabel && (\n            <span className=\"ToolIcon__keybinding\">\n              {props.keyBindingLabel}\n            </span>\n          )}\n        </div>\n      </label>\n    );\n  },\n);\n\nToolButton.displayName = \"ToolButton\";\n", "import { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { KEYS } from \"../keys\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { getNonDeletedElements } from \"../element\";\nimport type { ExcalidrawElement } from \"../element/types\";\nimport type { AppClassProperties, AppState } from \"../types\";\nimport { mutateElement, newElementWith } from \"../element/mutateElement\";\nimport { getElementsInGroup, selectGroupsForSelectedElements } from \"../groups\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport { fixBindingsAfterDeletion } from \"../element/binding\";\nimport {\n  isBoundToContainer,\n  isElbowArrow,\n  isFrameLikeElement,\n} from \"../element/typeChecks\";\nimport { updateActiveTool } from \"../utils\";\nimport { TrashIcon } from \"../components/icons\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { getContainerElement } from \"../element/textElement\";\nimport { getFrameChildren } from \"../frame\";\n\nconst deleteSelectedElements = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  app: AppClassProperties,\n) => {\n  const framesToBeDeleted = new Set(\n    getSelectedElements(\n      elements.filter((el) => isFrameLikeElement(el)),\n      appState,\n    ).map((el) => el.id),\n  );\n\n  const selectedElementIds: Record<ExcalidrawElement[\"id\"], true> = {};\n\n  const elementsMap = app.scene.getNonDeletedElementsMap();\n\n  const processedElements = new Set<ExcalidrawElement[\"id\"]>();\n\n  for (const frameId of framesToBeDeleted) {\n    const frameChildren = getFrameChildren(elements, frameId);\n    for (const el of frameChildren) {\n      if (processedElements.has(el.id)) {\n        continue;\n      }\n\n      if (isBoundToContainer(el)) {\n        const containerElement = getContainerElement(el, elementsMap);\n        if (containerElement) {\n          selectedElementIds[containerElement.id] = true;\n        }\n      } else {\n        selectedElementIds[el.id] = true;\n      }\n      processedElements.add(el.id);\n    }\n  }\n\n  let shouldSelectEditingGroup = true;\n\n  const nextElements = elements.map((el) => {\n    if (appState.selectedElementIds[el.id]) {\n      const boundElement = isBoundToContainer(el)\n        ? getContainerElement(el, elementsMap)\n        : null;\n\n      if (el.frameId && framesToBeDeleted.has(el.frameId)) {\n        shouldSelectEditingGroup = false;\n        selectedElementIds[el.id] = true;\n        return el;\n      }\n\n      if (\n        boundElement?.frameId &&\n        framesToBeDeleted.has(boundElement?.frameId)\n      ) {\n        return el;\n      }\n\n      if (el.boundElements) {\n        el.boundElements.forEach((candidate) => {\n          const bound = app.scene.getNonDeletedElementsMap().get(candidate.id);\n          if (bound && isElbowArrow(bound)) {\n            mutateElement(bound, {\n              startBinding:\n                el.id === bound.startBinding?.elementId\n                  ? null\n                  : bound.startBinding,\n              endBinding:\n                el.id === bound.endBinding?.elementId ? null : bound.endBinding,\n            });\n            mutateElement(bound, { points: bound.points });\n          }\n        });\n      }\n      return newElementWith(el, { isDeleted: true });\n    }\n\n    // if deleting a frame, remove the children from it and select them\n    if (el.frameId && framesToBeDeleted.has(el.frameId)) {\n      shouldSelectEditingGroup = false;\n      if (!isBoundToContainer(el)) {\n        selectedElementIds[el.id] = true;\n      }\n      return newElementWith(el, { frameId: null });\n    }\n\n    if (isBoundToContainer(el) && appState.selectedElementIds[el.containerId]) {\n      return newElementWith(el, { isDeleted: true });\n    }\n    return el;\n  });\n\n  let nextEditingGroupId = appState.editingGroupId;\n\n  // select next eligible element in currently editing group or supergroup\n  if (shouldSelectEditingGroup && appState.editingGroupId) {\n    const elems = getElementsInGroup(\n      nextElements,\n      appState.editingGroupId,\n    ).filter((el) => !el.isDeleted);\n    if (elems.length > 1) {\n      if (elems[0]) {\n        selectedElementIds[elems[0].id] = true;\n      }\n    } else {\n      nextEditingGroupId = null;\n      if (elems[0]) {\n        selectedElementIds[elems[0].id] = true;\n      }\n\n      const lastElementInGroup = elems[0];\n      if (lastElementInGroup) {\n        const editingGroupIdx = lastElementInGroup.groupIds.findIndex(\n          (groupId) => {\n            return groupId === appState.editingGroupId;\n          },\n        );\n        const superGroupId = lastElementInGroup.groupIds[editingGroupIdx + 1];\n        if (superGroupId) {\n          const elems = getElementsInGroup(nextElements, superGroupId).filter(\n            (el) => !el.isDeleted,\n          );\n          if (elems.length > 1) {\n            nextEditingGroupId = superGroupId;\n\n            elems.forEach((el) => {\n              selectedElementIds[el.id] = true;\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    elements: nextElements,\n    appState: {\n      ...appState,\n      ...selectGroupsForSelectedElements(\n        {\n          selectedElementIds,\n          editingGroupId: nextEditingGroupId,\n        },\n        nextElements,\n        appState,\n        null,\n      ),\n    },\n  };\n};\n\nconst handleGroupEditingState = (\n  appState: AppState,\n  elements: readonly ExcalidrawElement[],\n): AppState => {\n  if (appState.editingGroupId) {\n    const siblingElements = getElementsInGroup(\n      getNonDeletedElements(elements),\n      appState.editingGroupId!,\n    );\n    if (siblingElements.length) {\n      return {\n        ...appState,\n        selectedElementIds: { [siblingElements[0].id]: true },\n      };\n    }\n  }\n  return appState;\n};\n\nexport const actionDeleteSelected = register({\n  name: \"deleteSelectedElements\",\n  label: \"labels.delete\",\n  icon: TrashIcon,\n  trackEvent: { category: \"element\", action: \"delete\" },\n  perform: (elements, appState, formData, app) => {\n    if (appState.editingLinearElement) {\n      const {\n        elementId,\n        selectedPointsIndices,\n        startBindingElement,\n        endBindingElement,\n      } = appState.editingLinearElement;\n      const elementsMap = app.scene.getNonDeletedElementsMap();\n      const element = LinearElementEditor.getElement(elementId, elementsMap);\n      if (!element) {\n        return false;\n      }\n      // case: no point selected \u2192 do nothing, as deleting the whole element\n      // is most likely a mistake, where you wanted to delete a specific point\n      // but failed to select it (or you thought it's selected, while it was\n      // only in a hover state)\n      if (selectedPointsIndices == null) {\n        return false;\n      }\n\n      // case: deleting last remaining point\n      if (element.points.length < 2) {\n        const nextElements = elements.map((el) => {\n          if (el.id === element.id) {\n            return newElementWith(el, { isDeleted: true });\n          }\n          return el;\n        });\n        const nextAppState = handleGroupEditingState(appState, nextElements);\n\n        return {\n          elements: nextElements,\n          appState: {\n            ...nextAppState,\n            editingLinearElement: null,\n          },\n          captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n        };\n      }\n\n      // We cannot do this inside `movePoint` because it is also called\n      // when deleting the uncommitted point (which hasn't caused any binding)\n      const binding = {\n        startBindingElement: selectedPointsIndices?.includes(0)\n          ? null\n          : startBindingElement,\n        endBindingElement: selectedPointsIndices?.includes(\n          element.points.length - 1,\n        )\n          ? null\n          : endBindingElement,\n      };\n\n      LinearElementEditor.deletePoints(element, selectedPointsIndices);\n\n      return {\n        elements,\n        appState: {\n          ...appState,\n          editingLinearElement: {\n            ...appState.editingLinearElement,\n            ...binding,\n            selectedPointsIndices:\n              selectedPointsIndices?.[0] > 0\n                ? [selectedPointsIndices[0] - 1]\n                : [0],\n          },\n        },\n        captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n      };\n    }\n\n    let { elements: nextElements, appState: nextAppState } =\n      deleteSelectedElements(elements, appState, app);\n\n    fixBindingsAfterDeletion(\n      nextElements,\n      nextElements.filter((el) => el.isDeleted),\n    );\n\n    nextAppState = handleGroupEditingState(nextAppState, nextElements);\n\n    return {\n      elements: nextElements,\n      appState: {\n        ...nextAppState,\n        activeTool: updateActiveTool(appState, { type: \"selection\" }),\n        multiElement: null,\n        activeEmbeddable: null,\n      },\n      captureUpdate: isSomeElementSelected(\n        getNonDeletedElements(elements),\n        appState,\n      )\n        ? CaptureUpdateAction.IMMEDIATELY\n        : CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  keyTest: (event, appState, elements) =>\n    (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) &&\n    !event[KEYS.CTRL_OR_CMD],\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={TrashIcon}\n      title={t(\"labels.delete\")}\n      aria-label={t(\"labels.delete\")}\n      onClick={() => updateData(null)}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n", "import { isFrameLikeElement } from \"./element/typeChecks\";\nimport type {\n  ExcalidrawElement,\n  ExcalidrawFrameLikeElement,\n} from \"./element/types\";\nimport { syncMovedIndices } from \"./fractionalIndex\";\nimport { getElementsInGroup } from \"./groups\";\nimport { getSelectedElements } from \"./scene\";\nimport Scene from \"./scene/Scene\";\nimport type { AppState } from \"./types\";\nimport { arrayToMap, findIndex, findLastIndex } from \"./utils\";\n\nconst isOfTargetFrame = (element: ExcalidrawElement, frameId: string) => {\n  return element.frameId === frameId || element.id === frameId;\n};\n\n/**\n * Returns indices of elements to move based on selected elements.\n * Includes contiguous deleted elements that are between two selected elements,\n *  e.g.: [0 (selected), 1 (deleted), 2 (deleted), 3 (selected)]\n *\n * Specified elements (elementsToBeMoved) take precedence over\n * appState.selectedElementsIds\n */\nconst getIndicesToMove = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  elementsToBeMoved?: readonly ExcalidrawElement[],\n) => {\n  let selectedIndices: number[] = [];\n  let deletedIndices: number[] = [];\n  let includeDeletedIndex = null;\n  let index = -1;\n  const selectedElementIds = arrayToMap(\n    elementsToBeMoved\n      ? elementsToBeMoved\n      : getSelectedElements(elements, appState, {\n          includeBoundTextElement: true,\n          includeElementsInFrames: true,\n        }),\n  );\n  while (++index < elements.length) {\n    const element = elements[index];\n    if (selectedElementIds.get(element.id)) {\n      if (deletedIndices.length) {\n        selectedIndices = selectedIndices.concat(deletedIndices);\n        deletedIndices = [];\n      }\n      selectedIndices.push(index);\n      includeDeletedIndex = index + 1;\n    } else if (element.isDeleted && includeDeletedIndex === index) {\n      includeDeletedIndex = index + 1;\n      deletedIndices.push(index);\n    } else {\n      deletedIndices = [];\n    }\n  }\n  return selectedIndices;\n};\n\nconst toContiguousGroups = (array: number[]) => {\n  let cursor = 0;\n  return array.reduce((acc, value, index) => {\n    if (index > 0 && array[index - 1] !== value - 1) {\n      cursor = ++cursor;\n    }\n    (acc[cursor] || (acc[cursor] = [])).push(value);\n    return acc;\n  }, [] as number[][]);\n};\n\n/**\n * @returns index of target element, consindering tightly-bound elements\n * (currently non-linear elements bound to a container) as a one unit.\n * If no binding present, returns `undefined`.\n */\nconst getTargetIndexAccountingForBinding = (\n  nextElement: ExcalidrawElement,\n  elements: readonly ExcalidrawElement[],\n  direction: \"left\" | \"right\",\n) => {\n  if (\"containerId\" in nextElement && nextElement.containerId) {\n    const containerElement = Scene.getScene(nextElement)!.getElement(\n      nextElement.containerId,\n    );\n    if (containerElement) {\n      return direction === \"left\"\n        ? Math.min(\n            elements.indexOf(containerElement),\n            elements.indexOf(nextElement),\n          )\n        : Math.max(\n            elements.indexOf(containerElement),\n            elements.indexOf(nextElement),\n          );\n    }\n  } else {\n    const boundElementId = nextElement.boundElements?.find(\n      (binding) => binding.type !== \"arrow\",\n    )?.id;\n    if (boundElementId) {\n      const boundTextElement =\n        Scene.getScene(nextElement)!.getElement(boundElementId);\n      if (boundTextElement) {\n        return direction === \"left\"\n          ? Math.min(\n              elements.indexOf(boundTextElement),\n              elements.indexOf(nextElement),\n            )\n          : Math.max(\n              elements.indexOf(boundTextElement),\n              elements.indexOf(nextElement),\n            );\n      }\n    }\n  }\n};\n\nconst getContiguousFrameRangeElements = (\n  allElements: readonly ExcalidrawElement[],\n  frameId: ExcalidrawFrameLikeElement[\"id\"],\n) => {\n  let rangeStart = -1;\n  let rangeEnd = -1;\n  allElements.forEach((element, index) => {\n    if (isOfTargetFrame(element, frameId)) {\n      if (rangeStart === -1) {\n        rangeStart = index;\n      }\n      rangeEnd = index;\n    }\n  });\n  if (rangeStart === -1) {\n    return [];\n  }\n  return allElements.slice(rangeStart, rangeEnd + 1);\n};\n\n/**\n * Returns next candidate index that's available to be moved to. Currently that\n *  is a non-deleted element, and not inside a group (unless we're editing it).\n */\nconst getTargetIndex = (\n  appState: AppState,\n  elements: readonly ExcalidrawElement[],\n  boundaryIndex: number,\n  direction: \"left\" | \"right\",\n  /**\n   * Frame id if moving frame children.\n   * If whole frame (including all children) is being moved, supply `null`.\n   */\n  containingFrame: ExcalidrawFrameLikeElement[\"id\"] | null,\n) => {\n  const sourceElement = elements[boundaryIndex];\n\n  const indexFilter = (element: ExcalidrawElement) => {\n    if (element.isDeleted) {\n      return false;\n    }\n    if (containingFrame) {\n      return element.frameId === containingFrame;\n    }\n    // if we're editing group, find closest sibling irrespective of whether\n    // there's a different-group element between them (for legacy reasons)\n    if (appState.editingGroupId) {\n      return element.groupIds.includes(appState.editingGroupId);\n    }\n    return true;\n  };\n\n  const candidateIndex =\n    direction === \"left\"\n      ? findLastIndex(\n          elements,\n          (el) => indexFilter(el),\n          Math.max(0, boundaryIndex - 1),\n        )\n      : findIndex(elements, (el) => indexFilter(el), boundaryIndex + 1);\n\n  const nextElement = elements[candidateIndex];\n\n  if (!nextElement) {\n    return -1;\n  }\n\n  if (appState.editingGroupId) {\n    if (\n      // candidate element is a sibling in current editing group \u2192 return\n      sourceElement?.groupIds.join(\"\") === nextElement?.groupIds.join(\"\")\n    ) {\n      return (\n        getTargetIndexAccountingForBinding(nextElement, elements, direction) ??\n        candidateIndex\n      );\n    } else if (!nextElement?.groupIds.includes(appState.editingGroupId)) {\n      // candidate element is outside current editing group \u2192 prevent\n      return -1;\n    }\n  }\n\n  if (\n    !containingFrame &&\n    (nextElement.frameId || isFrameLikeElement(nextElement))\n  ) {\n    const frameElements = getContiguousFrameRangeElements(\n      elements,\n      nextElement.frameId || nextElement.id,\n    );\n    return direction === \"left\"\n      ? elements.indexOf(frameElements[0])\n      : elements.indexOf(frameElements[frameElements.length - 1]);\n  }\n\n  if (!nextElement.groupIds.length) {\n    return (\n      getTargetIndexAccountingForBinding(nextElement, elements, direction) ??\n      candidateIndex\n    );\n  }\n\n  const siblingGroupId = appState.editingGroupId\n    ? nextElement.groupIds[\n        nextElement.groupIds.indexOf(appState.editingGroupId) - 1\n      ]\n    : nextElement.groupIds[nextElement.groupIds.length - 1];\n\n  const elementsInSiblingGroup = getElementsInGroup(elements, siblingGroupId);\n\n  if (elementsInSiblingGroup.length) {\n    // assumes getElementsInGroup() returned elements are sorted\n    // by zIndex (ascending)\n    return direction === \"left\"\n      ? elements.indexOf(elementsInSiblingGroup[0])\n      : elements.indexOf(\n          elementsInSiblingGroup[elementsInSiblingGroup.length - 1],\n        );\n  }\n\n  return candidateIndex;\n};\n\nconst getTargetElementsMap = <T extends ExcalidrawElement>(\n  elements: readonly T[],\n  indices: number[],\n) => {\n  return indices.reduce((acc, index) => {\n    const element = elements[index];\n    acc.set(element.id, element);\n    return acc;\n  }, new Map<string, ExcalidrawElement>());\n};\n\nconst shiftElementsByOne = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  direction: \"left\" | \"right\",\n) => {\n  const indicesToMove = getIndicesToMove(elements, appState);\n  const targetElementsMap = getTargetElementsMap(elements, indicesToMove);\n\n  let groupedIndices = toContiguousGroups(indicesToMove);\n\n  if (direction === \"right\") {\n    groupedIndices = groupedIndices.reverse();\n  }\n\n  const selectedFrames = new Set<ExcalidrawFrameLikeElement[\"id\"]>(\n    indicesToMove\n      .filter((idx) => isFrameLikeElement(elements[idx]))\n      .map((idx) => elements[idx].id),\n  );\n\n  groupedIndices.forEach((indices, i) => {\n    const leadingIndex = indices[0];\n    const trailingIndex = indices[indices.length - 1];\n    const boundaryIndex = direction === \"left\" ? leadingIndex : trailingIndex;\n\n    const containingFrame = indices.some((idx) => {\n      const el = elements[idx];\n      return el.frameId && selectedFrames.has(el.frameId);\n    })\n      ? null\n      : elements[boundaryIndex]?.frameId;\n\n    const targetIndex = getTargetIndex(\n      appState,\n      elements,\n      boundaryIndex,\n      direction,\n      containingFrame,\n    );\n\n    if (targetIndex === -1 || boundaryIndex === targetIndex) {\n      return;\n    }\n\n    const leadingElements =\n      direction === \"left\"\n        ? elements.slice(0, targetIndex)\n        : elements.slice(0, leadingIndex);\n    const targetElements = elements.slice(leadingIndex, trailingIndex + 1);\n    const displacedElements =\n      direction === \"left\"\n        ? elements.slice(targetIndex, leadingIndex)\n        : elements.slice(trailingIndex + 1, targetIndex + 1);\n    const trailingElements =\n      direction === \"left\"\n        ? elements.slice(trailingIndex + 1)\n        : elements.slice(targetIndex + 1);\n\n    elements =\n      direction === \"left\"\n        ? [\n            ...leadingElements,\n            ...targetElements,\n            ...displacedElements,\n            ...trailingElements,\n          ]\n        : [\n            ...leadingElements,\n            ...displacedElements,\n            ...targetElements,\n            ...trailingElements,\n          ];\n  });\n\n  syncMovedIndices(elements, targetElementsMap);\n\n  return elements;\n};\n\nconst shiftElementsToEnd = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  direction: \"left\" | \"right\",\n  containingFrame: ExcalidrawFrameLikeElement[\"id\"] | null,\n  elementsToBeMoved?: readonly ExcalidrawElement[],\n) => {\n  const indicesToMove = getIndicesToMove(elements, appState, elementsToBeMoved);\n  const targetElementsMap = getTargetElementsMap(elements, indicesToMove);\n  const displacedElements: ExcalidrawElement[] = [];\n\n  let leadingIndex: number;\n  let trailingIndex: number;\n  if (direction === \"left\") {\n    if (containingFrame) {\n      leadingIndex = findIndex(elements, (el) =>\n        isOfTargetFrame(el, containingFrame),\n      );\n    } else if (appState.editingGroupId) {\n      const groupElements = getElementsInGroup(\n        elements,\n        appState.editingGroupId,\n      );\n      if (!groupElements.length) {\n        return elements;\n      }\n      leadingIndex = elements.indexOf(groupElements[0]);\n    } else {\n      leadingIndex = 0;\n    }\n\n    trailingIndex = indicesToMove[indicesToMove.length - 1];\n  } else {\n    if (containingFrame) {\n      trailingIndex = findLastIndex(elements, (el) =>\n        isOfTargetFrame(el, containingFrame),\n      );\n    } else if (appState.editingGroupId) {\n      const groupElements = getElementsInGroup(\n        elements,\n        appState.editingGroupId,\n      );\n      if (!groupElements.length) {\n        return elements;\n      }\n      trailingIndex = elements.indexOf(groupElements[groupElements.length - 1]);\n    } else {\n      trailingIndex = elements.length - 1;\n    }\n\n    leadingIndex = indicesToMove[0];\n  }\n\n  if (leadingIndex === -1) {\n    leadingIndex = 0;\n  }\n\n  for (let index = leadingIndex; index < trailingIndex + 1; index++) {\n    if (!indicesToMove.includes(index)) {\n      displacedElements.push(elements[index]);\n    }\n  }\n\n  const targetElements = Array.from(targetElementsMap.values());\n  const leadingElements = elements.slice(0, leadingIndex);\n  const trailingElements = elements.slice(trailingIndex + 1);\n  const nextElements =\n    direction === \"left\"\n      ? [\n          ...leadingElements,\n          ...targetElements,\n          ...displacedElements,\n          ...trailingElements,\n        ]\n      : [\n          ...leadingElements,\n          ...displacedElements,\n          ...targetElements,\n          ...trailingElements,\n        ];\n\n  syncMovedIndices(nextElements, targetElementsMap);\n\n  return nextElements;\n};\n\nfunction shiftElementsAccountingForFrames(\n  allElements: readonly ExcalidrawElement[],\n  appState: AppState,\n  direction: \"left\" | \"right\",\n  shiftFunction: (\n    elements: readonly ExcalidrawElement[],\n    appState: AppState,\n    direction: \"left\" | \"right\",\n    containingFrame: ExcalidrawFrameLikeElement[\"id\"] | null,\n    elementsToBeMoved?: readonly ExcalidrawElement[],\n  ) => ExcalidrawElement[] | readonly ExcalidrawElement[],\n) {\n  const elementsToMove = arrayToMap(\n    getSelectedElements(allElements, appState, {\n      includeBoundTextElement: true,\n      includeElementsInFrames: true,\n    }),\n  );\n\n  const frameAwareContiguousElementsToMove: {\n    regularElements: ExcalidrawElement[];\n    frameChildren: Map<ExcalidrawFrameLikeElement[\"id\"], ExcalidrawElement[]>;\n  } = { regularElements: [], frameChildren: new Map() };\n\n  const fullySelectedFrames = new Set<ExcalidrawFrameLikeElement[\"id\"]>();\n\n  for (const element of allElements) {\n    if (elementsToMove.has(element.id) && isFrameLikeElement(element)) {\n      fullySelectedFrames.add(element.id);\n    }\n  }\n\n  for (const element of allElements) {\n    if (elementsToMove.has(element.id)) {\n      if (\n        isFrameLikeElement(element) ||\n        (element.frameId && fullySelectedFrames.has(element.frameId))\n      ) {\n        frameAwareContiguousElementsToMove.regularElements.push(element);\n      } else if (!element.frameId) {\n        frameAwareContiguousElementsToMove.regularElements.push(element);\n      } else {\n        const frameChildren =\n          frameAwareContiguousElementsToMove.frameChildren.get(\n            element.frameId,\n          ) || [];\n        frameChildren.push(element);\n        frameAwareContiguousElementsToMove.frameChildren.set(\n          element.frameId,\n          frameChildren,\n        );\n      }\n    }\n  }\n\n  let nextElements = allElements;\n\n  const frameChildrenSets = Array.from(\n    frameAwareContiguousElementsToMove.frameChildren.entries(),\n  );\n\n  for (const [frameId, children] of frameChildrenSets) {\n    nextElements = shiftFunction(\n      allElements,\n      appState,\n      direction,\n      frameId,\n      children,\n    );\n  }\n\n  return shiftFunction(\n    nextElements,\n    appState,\n    direction,\n    null,\n    frameAwareContiguousElementsToMove.regularElements,\n  );\n}\n\n// public API\n// -----------------------------------------------------------------------------\n\nexport const moveOneLeft = (\n  allElements: readonly ExcalidrawElement[],\n  appState: AppState,\n) => {\n  return shiftElementsByOne(allElements, appState, \"left\");\n};\n\nexport const moveOneRight = (\n  allElements: readonly ExcalidrawElement[],\n  appState: AppState,\n) => {\n  return shiftElementsByOne(allElements, appState, \"right\");\n};\n\nexport const moveAllLeft = (\n  allElements: readonly ExcalidrawElement[],\n  appState: AppState,\n) => {\n  return shiftElementsAccountingForFrames(\n    allElements,\n    appState,\n    \"left\",\n    shiftElementsToEnd,\n  );\n};\n\nexport const moveAllRight = (\n  allElements: readonly ExcalidrawElement[],\n  appState: AppState,\n) => {\n  return shiftElementsAccountingForFrames(\n    allElements,\n    appState,\n    \"right\",\n    shiftElementsToEnd,\n  );\n};\n", "import {\n  moveOneLeft,\n  moveOneRight,\n  moveAllLeft,\n  moveAllRight,\n} from \"../zindex\";\nimport { KEYS, CODES } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nimport {\n  BringForwardIcon,\n  BringToFrontIcon,\n  SendBackwardIcon,\n  SendToBackIcon,\n} from \"../components/icons\";\nimport { isDarwin } from \"../constants\";\nimport { CaptureUpdateAction } from \"../store\";\n\nexport const actionSendBackward = register({\n  name: \"sendBackward\",\n  label: \"labels.sendBackward\",\n  keywords: [\"move down\", \"zindex\", \"layer\"],\n  icon: SendBackwardIcon,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState) => {\n    return {\n      elements: moveOneLeft(elements, appState),\n      appState,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyPriority: 40,\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] &&\n    !event.shiftKey &&\n    event.code === CODES.BRACKET_LEFT,\n  PanelComponent: ({ updateData, appState }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.sendBackward\")} \u2014 ${getShortcutKey(\"CtrlOrCmd+[\")}`}\n    >\n      {SendBackwardIcon}\n    </button>\n  ),\n});\n\nexport const actionBringForward = register({\n  name: \"bringForward\",\n  label: \"labels.bringForward\",\n  keywords: [\"move up\", \"zindex\", \"layer\"],\n  icon: BringForwardIcon,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState) => {\n    return {\n      elements: moveOneRight(elements, appState),\n      appState,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyPriority: 40,\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] &&\n    !event.shiftKey &&\n    event.code === CODES.BRACKET_RIGHT,\n  PanelComponent: ({ updateData, appState }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.bringForward\")} \u2014 ${getShortcutKey(\"CtrlOrCmd+]\")}`}\n    >\n      {BringForwardIcon}\n    </button>\n  ),\n});\n\nexport const actionSendToBack = register({\n  name: \"sendToBack\",\n  label: \"labels.sendToBack\",\n  keywords: [\"move down\", \"zindex\", \"layer\"],\n  icon: SendToBackIcon,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState) => {\n    return {\n      elements: moveAllLeft(elements, appState),\n      appState,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    isDarwin\n      ? event[KEYS.CTRL_OR_CMD] &&\n        event.altKey &&\n        event.code === CODES.BRACKET_LEFT\n      : event[KEYS.CTRL_OR_CMD] &&\n        event.shiftKey &&\n        event.code === CODES.BRACKET_LEFT,\n  PanelComponent: ({ updateData, appState }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.sendToBack\")} \u2014 ${\n        isDarwin\n          ? getShortcutKey(\"CtrlOrCmd+Alt+[\")\n          : getShortcutKey(\"CtrlOrCmd+Shift+[\")\n      }`}\n    >\n      {SendToBackIcon}\n    </button>\n  ),\n});\n\nexport const actionBringToFront = register({\n  name: \"bringToFront\",\n  label: \"labels.bringToFront\",\n  keywords: [\"move up\", \"zindex\", \"layer\"],\n  icon: BringToFrontIcon,\n  trackEvent: { category: \"element\" },\n\n  perform: (elements, appState) => {\n    return {\n      elements: moveAllRight(elements, appState),\n      appState,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    isDarwin\n      ? event[KEYS.CTRL_OR_CMD] &&\n        event.altKey &&\n        event.code === CODES.BRACKET_RIGHT\n      : event[KEYS.CTRL_OR_CMD] &&\n        event.shiftKey &&\n        event.code === CODES.BRACKET_RIGHT,\n  PanelComponent: ({ updateData, appState }) => (\n    <button\n      type=\"button\"\n      className=\"zIndexButton\"\n      onClick={(event) => updateData(null)}\n      title={`${t(\"labels.bringToFront\")} \u2014 ${\n        isDarwin\n          ? getShortcutKey(\"CtrlOrCmd+Alt+]\")\n          : getShortcutKey(\"CtrlOrCmd+Shift+]\")\n      }`}\n    >\n      {BringToFrontIcon}\n    </button>\n  ),\n});\n", "import { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport { selectGroupsForSelectedElements } from \"../groups\";\nimport { getNonDeletedElements, isTextElement } from \"../element\";\nimport type { ExcalidrawElement } from \"../element/types\";\nimport { isLinearElement } from \"../element/typeChecks\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport { selectAllIcon } from \"../components/icons\";\nimport { CaptureUpdateAction } from \"../store\";\n\nexport const actionSelectAll = register({\n  name: \"selectAll\",\n  label: \"labels.selectAll\",\n  icon: selectAllIcon,\n  trackEvent: { category: \"canvas\" },\n  viewMode: false,\n  perform: (elements, appState, value, app) => {\n    if (appState.editingLinearElement) {\n      return false;\n    }\n\n    const selectedElementIds = elements\n      .filter(\n        (element) =>\n          !element.isDeleted &&\n          !(isTextElement(element) && element.containerId) &&\n          !element.locked,\n      )\n      .reduce((map: Record<ExcalidrawElement[\"id\"], true>, element) => {\n        map[element.id] = true;\n        return map;\n      }, {});\n\n    return {\n      appState: {\n        ...appState,\n        ...selectGroupsForSelectedElements(\n          {\n            editingGroupId: null,\n            selectedElementIds,\n          },\n          getNonDeletedElements(elements),\n          appState,\n          app,\n        ),\n        selectedLinearElement:\n          // single linear element selected\n          Object.keys(selectedElementIds).length === 1 &&\n          isLinearElement(elements[0])\n            ? new LinearElementEditor(elements[0])\n            : null,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.A,\n});\n", "import { arrayToMapWithIndex } from \"../utils\";\nimport type { ExcalidrawElement } from \"./types\";\n\nconst normalizeGroupElementOrder = (elements: readonly ExcalidrawElement[]) => {\n  const origElements: ExcalidrawElement[] = elements.slice();\n  const sortedElements = new Set<ExcalidrawElement>();\n\n  const orderInnerGroups = (\n    elements: readonly ExcalidrawElement[],\n  ): ExcalidrawElement[] => {\n    const firstGroupSig = elements[0]?.groupIds?.join(\"\");\n    const aGroup: ExcalidrawElement[] = [elements[0]];\n    const bGroup: ExcalidrawElement[] = [];\n    for (const element of elements.slice(1)) {\n      if (element.groupIds?.join(\"\") === firstGroupSig) {\n        aGroup.push(element);\n      } else {\n        bGroup.push(element);\n      }\n    }\n    return bGroup.length ? [...aGroup, ...orderInnerGroups(bGroup)] : aGroup;\n  };\n\n  const groupHandledElements = new Map<string, true>();\n\n  origElements.forEach((element, idx) => {\n    if (groupHandledElements.has(element.id)) {\n      return;\n    }\n    if (element.groupIds?.length) {\n      const topGroup = element.groupIds[element.groupIds.length - 1];\n      const groupElements = origElements.slice(idx).filter((element) => {\n        const ret = element?.groupIds?.some((id) => id === topGroup);\n        if (ret) {\n          groupHandledElements.set(element!.id, true);\n        }\n        return ret;\n      });\n\n      for (const elem of orderInnerGroups(groupElements)) {\n        sortedElements.add(elem);\n      }\n    } else {\n      sortedElements.add(element);\n    }\n  });\n\n  // if there's a bug which resulted in losing some of the elements, return\n  // original instead as that's better than losing data\n  if (sortedElements.size !== elements.length) {\n    console.error(\"normalizeGroupElementOrder: lost some elements... bailing!\");\n    return elements;\n  }\n\n  return [...sortedElements];\n};\n\n/**\n * In theory, when we have text elements bound to a container, they\n * should be right after the container element in the elements array.\n * However, this is not guaranteed due to old and potential future bugs.\n *\n * This function sorts containers and their bound texts together. It prefers\n * original z-index of container (i.e. it moves bound text elements after\n * containers).\n */\nconst normalizeBoundElementsOrder = (\n  elements: readonly ExcalidrawElement[],\n) => {\n  const elementsMap = arrayToMapWithIndex(elements);\n\n  const origElements: (ExcalidrawElement | null)[] = elements.slice();\n  const sortedElements = new Set<ExcalidrawElement>();\n\n  origElements.forEach((element, idx) => {\n    if (!element) {\n      return;\n    }\n    if (element.boundElements?.length) {\n      sortedElements.add(element);\n      origElements[idx] = null;\n      element.boundElements.forEach((boundElement) => {\n        const child = elementsMap.get(boundElement.id);\n        if (child && boundElement.type === \"text\") {\n          sortedElements.add(child[0]);\n          origElements[child[1]] = null;\n        }\n      });\n    } else if (element.type === \"text\" && element.containerId) {\n      const parent = elementsMap.get(element.containerId);\n      if (!parent?.[0].boundElements?.find((x) => x.id === element.id)) {\n        sortedElements.add(element);\n        origElements[idx] = null;\n\n        // if element has a container and container lists it, skip this element\n        // as it'll be taken care of by the container\n      }\n    } else {\n      sortedElements.add(element);\n      origElements[idx] = null;\n    }\n  });\n\n  // if there's a bug which resulted in losing some of the elements, return\n  // original instead as that's better than losing data\n  if (sortedElements.size !== elements.length) {\n    console.error(\n      \"normalizeBoundElementsOrder: lost some elements... bailing!\",\n    );\n    return elements;\n  }\n\n  return [...sortedElements];\n};\n\nexport const normalizeElementOrder = (\n  elements: readonly ExcalidrawElement[],\n) => {\n  return normalizeBoundElementsOrder(normalizeGroupElementOrder(elements));\n};\n", "import { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport type { ExcalidrawElement } from \"../element/types\";\nimport { duplicateElement, getNonDeletedElements } from \"../element\";\nimport { isSomeElementSelected } from \"../scene\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport {\n  arrayToMap,\n  castArray,\n  findLastIndex,\n  getShortcutKey,\n  invariant,\n} from \"../utils\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport {\n  selectGroupsForSelectedElements,\n  getSelectedGroupForElement,\n  getElementsInGroup,\n} from \"../groups\";\nimport type { AppState } from \"../types\";\nimport { fixBindingsAfterDuplication } from \"../element/binding\";\nimport type { ActionResult } from \"./types\";\nimport { DEFAULT_GRID_SIZE } from \"../constants\";\nimport {\n  bindTextToShapeAfterDuplication,\n  getBoundTextElement,\n  getContainerElement,\n} from \"../element/textElement\";\nimport {\n  hasBoundTextElement,\n  isBoundToContainer,\n  isFrameLikeElement,\n} from \"../element/typeChecks\";\nimport { normalizeElementOrder } from \"../element/sortElements\";\nimport { DuplicateIcon } from \"../components/icons\";\nimport {\n  bindElementsToFramesAfterDuplication,\n  getFrameChildren,\n} from \"../frame\";\nimport {\n  excludeElementsInFramesFromSelection,\n  getSelectedElements,\n} from \"../scene/selection\";\nimport { CaptureUpdateAction } from \"../store\";\n\nexport const actionDuplicateSelection = register({\n  name: \"duplicateSelection\",\n  label: \"labels.duplicateSelection\",\n  icon: DuplicateIcon,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, formData, app) => {\n    // duplicate selected point(s) if editing a line\n    if (appState.editingLinearElement) {\n      // TODO: Invariants should be checked here instead of duplicateSelectedPoints()\n      try {\n        const newAppState = LinearElementEditor.duplicateSelectedPoints(\n          appState,\n          app.scene.getNonDeletedElementsMap(),\n        );\n\n        return {\n          elements,\n          appState: newAppState,\n          captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n        };\n      } catch {\n        return false;\n      }\n    }\n\n    const nextState = duplicateElements(elements, appState);\n\n    if (app.props.onDuplicate && nextState.elements) {\n      const mappedElements = app.props.onDuplicate(\n        nextState.elements,\n        elements,\n      );\n      if (mappedElements) {\n        nextState.elements = mappedElements;\n      }\n    }\n\n    return {\n      ...nextState,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.D,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={DuplicateIcon}\n      title={`${t(\"labels.duplicateSelection\")} \u2014 ${getShortcutKey(\n        \"CtrlOrCmd+D\",\n      )}`}\n      aria-label={t(\"labels.duplicateSelection\")}\n      onClick={() => updateData(null)}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nconst duplicateElements = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n): Partial<Exclude<ActionResult, false>> => {\n  // ---------------------------------------------------------------------------\n\n  const groupIdMap = new Map();\n  const newElements: ExcalidrawElement[] = [];\n  const oldElements: ExcalidrawElement[] = [];\n  const oldIdToDuplicatedId = new Map();\n  const duplicatedElementsMap = new Map<string, ExcalidrawElement>();\n\n  const elementsMap = arrayToMap(elements);\n\n  const duplicateAndOffsetElement = <\n    T extends ExcalidrawElement | ExcalidrawElement[],\n  >(\n    element: T,\n  ): T extends ExcalidrawElement[]\n    ? ExcalidrawElement[]\n    : ExcalidrawElement | null => {\n    const elements = castArray(element);\n\n    const _newElements = elements.reduce(\n      (acc: ExcalidrawElement[], element) => {\n        if (processedIds.has(element.id)) {\n          return acc;\n        }\n\n        processedIds.set(element.id, true);\n\n        const newElement = duplicateElement(\n          appState.editingGroupId,\n          groupIdMap,\n          element,\n          {\n            x: element.x + DEFAULT_GRID_SIZE / 2,\n            y: element.y + DEFAULT_GRID_SIZE / 2,\n          },\n        );\n\n        processedIds.set(newElement.id, true);\n\n        duplicatedElementsMap.set(newElement.id, newElement);\n        oldIdToDuplicatedId.set(element.id, newElement.id);\n\n        oldElements.push(element);\n        newElements.push(newElement);\n\n        acc.push(newElement);\n        return acc;\n      },\n      [],\n    );\n\n    return (\n      Array.isArray(element) ? _newElements : _newElements[0] || null\n    ) as T extends ExcalidrawElement[]\n      ? ExcalidrawElement[]\n      : ExcalidrawElement | null;\n  };\n\n  elements = normalizeElementOrder(elements);\n\n  const idsOfElementsToDuplicate = arrayToMap(\n    getSelectedElements(elements, appState, {\n      includeBoundTextElement: true,\n      includeElementsInFrames: true,\n    }),\n  );\n\n  // Ids of elements that have already been processed so we don't push them\n  // into the array twice if we end up backtracking when retrieving\n  // discontiguous group of elements (can happen due to a bug, or in edge\n  // cases such as a group containing deleted elements which were not selected).\n  //\n  // This is not enough to prevent duplicates, so we do a second loop afterwards\n  // to remove them.\n  //\n  // For convenience we mark even the newly created ones even though we don't\n  // loop over them.\n  const processedIds = new Map<ExcalidrawElement[\"id\"], true>();\n\n  const elementsWithClones: ExcalidrawElement[] = elements.slice();\n\n  const insertAfterIndex = (\n    index: number,\n    elements: ExcalidrawElement | null | ExcalidrawElement[],\n  ) => {\n    invariant(index !== -1, \"targetIndex === -1 \");\n\n    if (!Array.isArray(elements) && !elements) {\n      return;\n    }\n\n    elementsWithClones.splice(index + 1, 0, ...castArray(elements));\n  };\n\n  const frameIdsToDuplicate = new Set(\n    elements\n      .filter(\n        (el) => idsOfElementsToDuplicate.has(el.id) && isFrameLikeElement(el),\n      )\n      .map((el) => el.id),\n  );\n\n  for (const element of elements) {\n    if (processedIds.has(element.id)) {\n      continue;\n    }\n\n    if (!idsOfElementsToDuplicate.has(element.id)) {\n      continue;\n    }\n\n    // groups\n    // -------------------------------------------------------------------------\n\n    const groupId = getSelectedGroupForElement(appState, element);\n    if (groupId) {\n      const groupElements = getElementsInGroup(elements, groupId).flatMap(\n        (element) =>\n          isFrameLikeElement(element)\n            ? [...getFrameChildren(elements, element.id), element]\n            : [element],\n      );\n\n      const targetIndex = findLastIndex(elementsWithClones, (el) => {\n        return el.groupIds?.includes(groupId);\n      });\n\n      insertAfterIndex(targetIndex, duplicateAndOffsetElement(groupElements));\n      continue;\n    }\n\n    // frame duplication\n    // -------------------------------------------------------------------------\n\n    if (element.frameId && frameIdsToDuplicate.has(element.frameId)) {\n      continue;\n    }\n\n    if (isFrameLikeElement(element)) {\n      const frameId = element.id;\n\n      const frameChildren = getFrameChildren(elements, frameId);\n\n      const targetIndex = findLastIndex(elementsWithClones, (el) => {\n        return el.frameId === frameId || el.id === frameId;\n      });\n\n      insertAfterIndex(\n        targetIndex,\n        duplicateAndOffsetElement([...frameChildren, element]),\n      );\n      continue;\n    }\n\n    // text container\n    // -------------------------------------------------------------------------\n\n    if (hasBoundTextElement(element)) {\n      const boundTextElement = getBoundTextElement(element, elementsMap);\n\n      const targetIndex = findLastIndex(elementsWithClones, (el) => {\n        return (\n          el.id === element.id ||\n          (\"containerId\" in el && el.containerId === element.id)\n        );\n      });\n\n      if (boundTextElement) {\n        insertAfterIndex(\n          targetIndex,\n          duplicateAndOffsetElement([element, boundTextElement]),\n        );\n      } else {\n        insertAfterIndex(targetIndex, duplicateAndOffsetElement(element));\n      }\n\n      continue;\n    }\n\n    if (isBoundToContainer(element)) {\n      const container = getContainerElement(element, elementsMap);\n\n      const targetIndex = findLastIndex(elementsWithClones, (el) => {\n        return el.id === element.id || el.id === container?.id;\n      });\n\n      if (container) {\n        insertAfterIndex(\n          targetIndex,\n          duplicateAndOffsetElement([container, element]),\n        );\n      } else {\n        insertAfterIndex(targetIndex, duplicateAndOffsetElement(element));\n      }\n\n      continue;\n    }\n\n    // default duplication (regular elements)\n    // -------------------------------------------------------------------------\n\n    insertAfterIndex(\n      findLastIndex(elementsWithClones, (el) => el.id === element.id),\n      duplicateAndOffsetElement(element),\n    );\n  }\n\n  // ---------------------------------------------------------------------------\n\n  bindTextToShapeAfterDuplication(\n    elementsWithClones,\n    oldElements,\n    oldIdToDuplicatedId,\n  );\n  fixBindingsAfterDuplication(\n    elementsWithClones,\n    oldElements,\n    oldIdToDuplicatedId,\n  );\n  bindElementsToFramesAfterDuplication(\n    elementsWithClones,\n    oldElements,\n    oldIdToDuplicatedId,\n  );\n\n  const nextElementsToSelect =\n    excludeElementsInFramesFromSelection(newElements);\n\n  return {\n    elements: elementsWithClones,\n    appState: {\n      ...appState,\n      ...selectGroupsForSelectedElements(\n        {\n          editingGroupId: appState.editingGroupId,\n          selectedElementIds: nextElementsToSelect.reduce(\n            (acc: Record<ExcalidrawElement[\"id\"], true>, element) => {\n              if (!isBoundToContainer(element)) {\n                acc[element.id] = true;\n              }\n              return acc;\n            },\n            {},\n          ),\n        },\n        getNonDeletedElements(elementsWithClones),\n        appState,\n        null,\n      ),\n    },\n  };\n};\n", "import { useEffect, useMemo, useRef, useState } from \"react\";\nimport type { AppClassProperties, AppState, Primitive } from \"../types\";\nimport type { CaptureUpdateActionType } from \"../store\";\nimport {\n  DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE,\n  DEFAULT_ELEMENT_BACKGROUND_PICKS,\n  DEFAULT_ELEMENT_STROKE_COLOR_PALETTE,\n  DEFAULT_ELEMENT_STROKE_PICKS,\n} from \"../colors\";\nimport { trackEvent } from \"../analytics\";\nimport { ButtonIconSelect } from \"../components/ButtonIconSelect\";\nimport { ColorPicker } from \"../components/ColorPicker/ColorPicker\";\nimport { IconPicker } from \"../components/IconPicker\";\nimport { FontPicker } from \"../components/FontPicker/FontPicker\";\n// TODO barnabasmolnar/editor-redesign\n// TextAlignTopIcon, TextAlignBottomIcon,TextAlignMiddleIcon,\n// ArrowHead icons\nimport {\n  ArrowheadArrowIcon,\n  ArrowheadBarIcon,\n  ArrowheadCircleIcon,\n  ArrowheadTriangleIcon,\n  ArrowheadNoneIcon,\n  StrokeStyleDashedIcon,\n  StrokeStyleDottedIcon,\n  TextAlignTopIcon,\n  TextAlignBottomIcon,\n  TextAlignMiddleIcon,\n  FillHachureIcon,\n  FillCrossHatchIcon,\n  FillSolidIcon,\n  SloppinessArchitectIcon,\n  SloppinessArtistIcon,\n  SloppinessCartoonistIcon,\n  StrokeWidthBaseIcon,\n  StrokeWidthBoldIcon,\n  StrokeWidthExtraBoldIcon,\n  FontSizeSmallIcon,\n  FontSizeMediumIcon,\n  FontSizeLargeIcon,\n  FontSizeExtraLargeIcon,\n  EdgeSharpIcon,\n  EdgeRoundIcon,\n  TextAlignLeftIcon,\n  TextAlignCenterIcon,\n  TextAlignRightIcon,\n  FillZigZagIcon,\n  ArrowheadTriangleOutlineIcon,\n  ArrowheadCircleOutlineIcon,\n  ArrowheadDiamondIcon,\n  ArrowheadDiamondOutlineIcon,\n  fontSizeIcon,\n  sharpArrowIcon,\n  roundArrowIcon,\n  elbowArrowIcon,\n  ArrowheadCrowfootIcon,\n  ArrowheadCrowfootOneIcon,\n  ArrowheadCrowfootOneOrManyIcon,\n} from \"../components/icons\";\nimport {\n  ARROW_TYPE,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_SIZE,\n  FONT_FAMILY,\n  ROUNDNESS,\n  STROKE_WIDTH,\n  VERTICAL_ALIGN,\n} from \"../constants\";\nimport {\n  getNonDeletedElements,\n  isTextElement,\n  redrawTextBoundingBox,\n} from \"../element\";\nimport { mutateElement, newElementWith } from \"../element/mutateElement\";\nimport { getBoundTextElement } from \"../element/textElement\";\nimport {\n  isArrowElement,\n  isBoundToContainer,\n  isElbowArrow,\n  isLinearElement,\n  isUsingAdaptiveRadius,\n} from \"../element/typeChecks\";\nimport type {\n  Arrowhead,\n  ExcalidrawBindableElement,\n  ExcalidrawElement,\n  ExcalidrawLinearElement,\n  ExcalidrawTextElement,\n  FontFamilyValues,\n  TextAlign,\n  VerticalAlign,\n  NonDeletedSceneElementsMap,\n} from \"../element/types\";\nimport { getLanguage, t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { randomInteger } from \"../random\";\nimport {\n  canHaveArrowheads,\n  getCommonAttributeOfSelectedElements,\n  getSelectedElements,\n  getTargetElements,\n  isSomeElementSelected,\n} from \"../scene\";\nimport { hasStrokeColor } from \"../scene/comparisons\";\nimport {\n  arrayToMap,\n  getFontFamilyString,\n  getShortcutKey,\n  tupleToCoors,\n} from \"../utils\";\nimport { register } from \"./register\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { Fonts, getLineHeight } from \"../fonts\";\nimport {\n  bindLinearElement,\n  bindPointToSnapToElementOutline,\n  calculateFixedPointForElbowArrowBinding,\n  getHoveredElementForBinding,\n  updateBoundElements,\n} from \"../element/binding\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport type { LocalPoint } from \"@excalidraw/math\";\nimport { pointFrom } from \"@excalidraw/math\";\nimport { Range } from \"../components/Range\";\n\nconst FONT_SIZE_RELATIVE_INCREASE_STEP = 0.1;\n\nexport const changeProperty = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  callback: (element: ExcalidrawElement) => ExcalidrawElement,\n  includeBoundText = false,\n) => {\n  const selectedElementIds = arrayToMap(\n    getSelectedElements(elements, appState, {\n      includeBoundTextElement: includeBoundText,\n    }),\n  );\n\n  return elements.map((element) => {\n    if (\n      selectedElementIds.get(element.id) ||\n      element.id === appState.editingTextElement?.id\n    ) {\n      return callback(element);\n    }\n    return element;\n  });\n};\n\nexport const getFormValue = function <T extends Primitive>(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  getAttribute: (element: ExcalidrawElement) => T,\n  isRelevantElement: true | ((element: ExcalidrawElement) => boolean),\n  defaultValue: T | ((isSomeElementSelected: boolean) => T),\n): T {\n  const editingTextElement = appState.editingTextElement;\n  const nonDeletedElements = getNonDeletedElements(elements);\n\n  let ret: T | null = null;\n\n  if (editingTextElement) {\n    ret = getAttribute(editingTextElement);\n  }\n\n  if (!ret) {\n    const hasSelection = isSomeElementSelected(nonDeletedElements, appState);\n\n    if (hasSelection) {\n      ret =\n        getCommonAttributeOfSelectedElements(\n          isRelevantElement === true\n            ? nonDeletedElements\n            : nonDeletedElements.filter((el) => isRelevantElement(el)),\n          appState,\n          getAttribute,\n        ) ??\n        (typeof defaultValue === \"function\"\n          ? defaultValue(true)\n          : defaultValue);\n    } else {\n      ret =\n        typeof defaultValue === \"function\" ? defaultValue(false) : defaultValue;\n    }\n  }\n\n  return ret;\n};\n\nconst offsetElementAfterFontResize = (\n  prevElement: ExcalidrawTextElement,\n  nextElement: ExcalidrawTextElement,\n) => {\n  if (isBoundToContainer(nextElement) || !nextElement.autoResize) {\n    return nextElement;\n  }\n  return mutateElement(\n    nextElement,\n    {\n      x:\n        prevElement.textAlign === \"left\"\n          ? prevElement.x\n          : prevElement.x +\n            (prevElement.width - nextElement.width) /\n              (prevElement.textAlign === \"center\" ? 2 : 1),\n      // centering vertically is non-standard, but for Excalidraw I think\n      // it makes sense\n      y: prevElement.y + (prevElement.height - nextElement.height) / 2,\n    },\n    false,\n  );\n};\n\nconst changeFontSize = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  app: AppClassProperties,\n  getNewFontSize: (element: ExcalidrawTextElement) => number,\n  fallbackValue?: ExcalidrawTextElement[\"fontSize\"],\n) => {\n  const newFontSizes = new Set<number>();\n\n  const updatedElements = changeProperty(\n    elements,\n    appState,\n    (oldElement) => {\n      if (isTextElement(oldElement)) {\n        const newFontSize = getNewFontSize(oldElement);\n        newFontSizes.add(newFontSize);\n\n        let newElement: ExcalidrawTextElement = newElementWith(oldElement, {\n          fontSize: newFontSize,\n        });\n        redrawTextBoundingBox(\n          newElement,\n          app.scene.getContainerElement(oldElement),\n          app.scene.getNonDeletedElementsMap(),\n        );\n\n        newElement = offsetElementAfterFontResize(oldElement, newElement);\n\n        return newElement;\n      }\n      return oldElement;\n    },\n    true,\n  );\n\n  // Update arrow elements after text elements have been updated\n  const updatedElementsMap = arrayToMap(updatedElements);\n  getSelectedElements(elements, appState, {\n    includeBoundTextElement: true,\n  }).forEach((element) => {\n    if (isTextElement(element)) {\n      updateBoundElements(\n        element,\n        updatedElementsMap as NonDeletedSceneElementsMap,\n      );\n    }\n  });\n\n  return {\n    elements: updatedElements,\n    appState: {\n      ...appState,\n      // update state only if we've set all select text elements to\n      // the same font size\n      currentItemFontSize:\n        newFontSizes.size === 1\n          ? [...newFontSizes][0]\n          : fallbackValue ?? appState.currentItemFontSize,\n    },\n    captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n  };\n};\n\n// -----------------------------------------------------------------------------\n\nexport const actionChangeStrokeColor = register({\n  name: \"changeStrokeColor\",\n  label: \"labels.stroke\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      ...(value.currentItemStrokeColor && {\n        elements: changeProperty(\n          elements,\n          appState,\n          (el) => {\n            return hasStrokeColor(el.type)\n              ? newElementWith(el, {\n                  strokeColor: value.currentItemStrokeColor,\n                })\n              : el;\n          },\n          true,\n        ),\n      }),\n      appState: {\n        ...appState,\n        ...value,\n      },\n      captureUpdate: !!value.currentItemStrokeColor\n        ? CaptureUpdateAction.IMMEDIATELY\n        : CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData, appProps }) => (\n    <>\n      <h3 aria-hidden=\"true\">{t(\"labels.stroke\")}</h3>\n      <ColorPicker\n        topPicks={DEFAULT_ELEMENT_STROKE_PICKS}\n        palette={DEFAULT_ELEMENT_STROKE_COLOR_PALETTE}\n        type=\"elementStroke\"\n        label={t(\"labels.stroke\")}\n        color={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeColor,\n          true,\n          appState.currentItemStrokeColor,\n        )}\n        onChange={(color) => updateData({ currentItemStrokeColor: color })}\n        elements={elements}\n        appState={appState}\n        updateData={updateData}\n      />\n    </>\n  ),\n});\n\nexport const actionChangeBackgroundColor = register({\n  name: \"changeBackgroundColor\",\n  label: \"labels.changeBackground\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      ...(value.currentItemBackgroundColor && {\n        elements: changeProperty(elements, appState, (el) =>\n          newElementWith(el, {\n            backgroundColor: value.currentItemBackgroundColor,\n          }),\n        ),\n      }),\n      appState: {\n        ...appState,\n        ...value,\n      },\n      captureUpdate: !!value.currentItemBackgroundColor\n        ? CaptureUpdateAction.IMMEDIATELY\n        : CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData, appProps }) => (\n    <>\n      <h3 aria-hidden=\"true\">{t(\"labels.background\")}</h3>\n      <ColorPicker\n        topPicks={DEFAULT_ELEMENT_BACKGROUND_PICKS}\n        palette={DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE}\n        type=\"elementBackground\"\n        label={t(\"labels.background\")}\n        color={getFormValue(\n          elements,\n          appState,\n          (element) => element.backgroundColor,\n          true,\n          appState.currentItemBackgroundColor,\n        )}\n        onChange={(color) => updateData({ currentItemBackgroundColor: color })}\n        elements={elements}\n        appState={appState}\n        updateData={updateData}\n      />\n    </>\n  ),\n});\n\nexport const actionChangeFillStyle = register({\n  name: \"changeFillStyle\",\n  label: \"labels.fill\",\n  trackEvent: false,\n  perform: (elements, appState, value, app) => {\n    trackEvent(\n      \"element\",\n      \"changeFillStyle\",\n      `${value} (${app.device.editor.isMobile ? \"mobile\" : \"desktop\"})`,\n    );\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          fillStyle: value,\n        }),\n      ),\n      appState: { ...appState, currentItemFillStyle: value },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    const selectedElements = getSelectedElements(elements, appState);\n    const allElementsZigZag =\n      selectedElements.length > 0 &&\n      selectedElements.every((el) => el.fillStyle === \"zigzag\");\n\n    return (\n      <fieldset>\n        <legend>{t(\"labels.fill\")}</legend>\n        <ButtonIconSelect\n          type=\"button\"\n          options={[\n            {\n              value: \"hachure\",\n              text: `${\n                allElementsZigZag ? t(\"labels.zigzag\") : t(\"labels.hachure\")\n              } (${getShortcutKey(\"Alt-Click\")})`,\n              icon: allElementsZigZag ? FillZigZagIcon : FillHachureIcon,\n              active: allElementsZigZag ? true : undefined,\n              testId: `fill-hachure`,\n            },\n            {\n              value: \"cross-hatch\",\n              text: t(\"labels.crossHatch\"),\n              icon: FillCrossHatchIcon,\n              testId: `fill-cross-hatch`,\n            },\n            {\n              value: \"solid\",\n              text: t(\"labels.solid\"),\n              icon: FillSolidIcon,\n              testId: `fill-solid`,\n            },\n          ]}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) => element.fillStyle,\n            (element) => element.hasOwnProperty(\"fillStyle\"),\n            (hasSelection) =>\n              hasSelection ? null : appState.currentItemFillStyle,\n          )}\n          onClick={(value, event) => {\n            const nextValue =\n              event.altKey &&\n              value === \"hachure\" &&\n              selectedElements.every((el) => el.fillStyle === \"hachure\")\n                ? \"zigzag\"\n                : value;\n\n            updateData(nextValue);\n          }}\n        />\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeStrokeWidth = register({\n  name: \"changeStrokeWidth\",\n  label: \"labels.strokeWidth\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          strokeWidth: value,\n        }),\n      ),\n      appState: { ...appState, currentItemStrokeWidth: value },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.strokeWidth\")}</legend>\n      <ButtonIconSelect\n        group=\"stroke-width\"\n        options={[\n          {\n            value: STROKE_WIDTH.thin,\n            text: t(\"labels.thin\"),\n            icon: StrokeWidthBaseIcon,\n            testId: \"strokeWidth-thin\",\n          },\n          {\n            value: STROKE_WIDTH.bold,\n            text: t(\"labels.bold\"),\n            icon: StrokeWidthBoldIcon,\n            testId: \"strokeWidth-bold\",\n          },\n          {\n            value: STROKE_WIDTH.extraBold,\n            text: t(\"labels.extraBold\"),\n            icon: StrokeWidthExtraBoldIcon,\n            testId: \"strokeWidth-extraBold\",\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeWidth,\n          (element) => element.hasOwnProperty(\"strokeWidth\"),\n          (hasSelection) =>\n            hasSelection ? null : appState.currentItemStrokeWidth,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeSloppiness = register({\n  name: \"changeSloppiness\",\n  label: \"labels.sloppiness\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          seed: randomInteger(),\n          roughness: value,\n        }),\n      ),\n      appState: { ...appState, currentItemRoughness: value },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.sloppiness\")}</legend>\n      <ButtonIconSelect\n        group=\"sloppiness\"\n        options={[\n          {\n            value: 0,\n            text: t(\"labels.architect\"),\n            icon: SloppinessArchitectIcon,\n          },\n          {\n            value: 1,\n            text: t(\"labels.artist\"),\n            icon: SloppinessArtistIcon,\n          },\n          {\n            value: 2,\n            text: t(\"labels.cartoonist\"),\n            icon: SloppinessCartoonistIcon,\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.roughness,\n          (element) => element.hasOwnProperty(\"roughness\"),\n          (hasSelection) =>\n            hasSelection ? null : appState.currentItemRoughness,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeStrokeStyle = register({\n  name: \"changeStrokeStyle\",\n  label: \"labels.strokeStyle\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          strokeStyle: value,\n        }),\n      ),\n      appState: { ...appState, currentItemStrokeStyle: value },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.strokeStyle\")}</legend>\n      <ButtonIconSelect\n        group=\"strokeStyle\"\n        options={[\n          {\n            value: \"solid\",\n            text: t(\"labels.strokeStyle_solid\"),\n            icon: StrokeWidthBaseIcon,\n          },\n          {\n            value: \"dashed\",\n            text: t(\"labels.strokeStyle_dashed\"),\n            icon: StrokeStyleDashedIcon,\n          },\n          {\n            value: \"dotted\",\n            text: t(\"labels.strokeStyle_dotted\"),\n            icon: StrokeStyleDottedIcon,\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeStyle,\n          (element) => element.hasOwnProperty(\"strokeStyle\"),\n          (hasSelection) =>\n            hasSelection ? null : appState.currentItemStrokeStyle,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeOpacity = register({\n  name: \"changeOpacity\",\n  label: \"labels.opacity\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(\n        elements,\n        appState,\n        (el) =>\n          newElementWith(el, {\n            opacity: value,\n          }),\n        true,\n      ),\n      appState: { ...appState, currentItemOpacity: value },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <Range\n      updateData={updateData}\n      elements={elements}\n      appState={appState}\n      testId=\"opacity\"\n    />\n  ),\n});\n\nexport const actionChangeFontSize = register({\n  name: \"changeFontSize\",\n  label: \"labels.fontSize\",\n  trackEvent: false,\n  perform: (elements, appState, value, app) => {\n    return changeFontSize(elements, appState, app, () => value, value);\n  },\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <fieldset>\n      <legend>{t(\"labels.fontSize\")}</legend>\n      <ButtonIconSelect\n        group=\"font-size\"\n        options={[\n          {\n            value: 16,\n            text: t(\"labels.small\"),\n            icon: FontSizeSmallIcon,\n            testId: \"fontSize-small\",\n          },\n          {\n            value: 20,\n            text: t(\"labels.medium\"),\n            icon: FontSizeMediumIcon,\n            testId: \"fontSize-medium\",\n          },\n          {\n            value: 28,\n            text: t(\"labels.large\"),\n            icon: FontSizeLargeIcon,\n            testId: \"fontSize-large\",\n          },\n          {\n            value: 36,\n            text: t(\"labels.veryLarge\"),\n            icon: FontSizeExtraLargeIcon,\n            testId: \"fontSize-veryLarge\",\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => {\n            if (isTextElement(element)) {\n              return element.fontSize;\n            }\n            const boundTextElement = getBoundTextElement(\n              element,\n              app.scene.getNonDeletedElementsMap(),\n            );\n            if (boundTextElement) {\n              return boundTextElement.fontSize;\n            }\n            return null;\n          },\n          (element) =>\n            isTextElement(element) ||\n            getBoundTextElement(\n              element,\n              app.scene.getNonDeletedElementsMap(),\n            ) !== null,\n          (hasSelection) =>\n            hasSelection\n              ? null\n              : appState.currentItemFontSize || DEFAULT_FONT_SIZE,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionDecreaseFontSize = register({\n  name: \"decreaseFontSize\",\n  label: \"labels.decreaseFontSize\",\n  icon: fontSizeIcon,\n  trackEvent: false,\n  perform: (elements, appState, value, app) => {\n    return changeFontSize(elements, appState, app, (element) =>\n      Math.round(\n        // get previous value before relative increase (doesn't work fully\n        // due to rounding and float precision issues)\n        (1 / (1 + FONT_SIZE_RELATIVE_INCREASE_STEP)) * element.fontSize,\n      ),\n    );\n  },\n  keyTest: (event) => {\n    return (\n      event[KEYS.CTRL_OR_CMD] &&\n      event.shiftKey &&\n      // KEYS.COMMA needed for MacOS\n      (event.key === KEYS.CHEVRON_LEFT || event.key === KEYS.COMMA)\n    );\n  },\n});\n\nexport const actionIncreaseFontSize = register({\n  name: \"increaseFontSize\",\n  label: \"labels.increaseFontSize\",\n  icon: fontSizeIcon,\n  trackEvent: false,\n  perform: (elements, appState, value, app) => {\n    return changeFontSize(elements, appState, app, (element) =>\n      Math.round(element.fontSize * (1 + FONT_SIZE_RELATIVE_INCREASE_STEP)),\n    );\n  },\n  keyTest: (event) => {\n    return (\n      event[KEYS.CTRL_OR_CMD] &&\n      event.shiftKey &&\n      // KEYS.PERIOD needed for MacOS\n      (event.key === KEYS.CHEVRON_RIGHT || event.key === KEYS.PERIOD)\n    );\n  },\n});\n\ntype ChangeFontFamilyData = Partial<\n  Pick<\n    AppState,\n    \"openPopup\" | \"currentItemFontFamily\" | \"currentHoveredFontFamily\"\n  >\n> & {\n  /** cache of selected & editing elements populated on opened popup */\n  cachedElements?: Map<string, ExcalidrawElement>;\n  /** flag to reset all elements to their cached versions  */\n  resetAll?: true;\n  /** flag to reset all containers to their cached versions */\n  resetContainers?: true;\n};\n\nexport const actionChangeFontFamily = register({\n  name: \"changeFontFamily\",\n  label: \"labels.fontFamily\",\n  trackEvent: false,\n  perform: (elements, appState, value, app) => {\n    const { cachedElements, resetAll, resetContainers, ...nextAppState } =\n      value as ChangeFontFamilyData;\n\n    if (resetAll) {\n      const nextElements = changeProperty(\n        elements,\n        appState,\n        (element) => {\n          const cachedElement = cachedElements?.get(element.id);\n          if (cachedElement) {\n            const newElement = newElementWith(element, {\n              ...cachedElement,\n            });\n\n            return newElement;\n          }\n\n          return element;\n        },\n        true,\n      );\n\n      return {\n        elements: nextElements,\n        appState: {\n          ...appState,\n          ...nextAppState,\n        },\n        captureUpdate: CaptureUpdateAction.NEVER,\n      };\n    }\n\n    const { currentItemFontFamily, currentHoveredFontFamily } = value;\n\n    let nextCaptureUpdateAction: CaptureUpdateActionType =\n      CaptureUpdateAction.EVENTUALLY;\n    let nextFontFamily: FontFamilyValues | undefined;\n    let skipOnHoverRender = false;\n\n    if (currentItemFontFamily) {\n      nextFontFamily = currentItemFontFamily;\n      nextCaptureUpdateAction = CaptureUpdateAction.IMMEDIATELY;\n    } else if (currentHoveredFontFamily) {\n      nextFontFamily = currentHoveredFontFamily;\n      nextCaptureUpdateAction = CaptureUpdateAction.EVENTUALLY;\n\n      const selectedTextElements = getSelectedElements(elements, appState, {\n        includeBoundTextElement: true,\n      }).filter((element) => isTextElement(element));\n\n      // skip on hover re-render for more than 200 text elements or for text element with more than 5000 chars combined\n      if (selectedTextElements.length > 200) {\n        skipOnHoverRender = true;\n      } else {\n        let i = 0;\n        let textLengthAccumulator = 0;\n\n        while (\n          i < selectedTextElements.length &&\n          textLengthAccumulator < 5000\n        ) {\n          const textElement = selectedTextElements[i] as ExcalidrawTextElement;\n          textLengthAccumulator += textElement?.originalText.length || 0;\n          i++;\n        }\n\n        if (textLengthAccumulator > 5000) {\n          skipOnHoverRender = true;\n        }\n      }\n    }\n\n    const result = {\n      appState: {\n        ...appState,\n        ...nextAppState,\n      },\n      captureUpdate: nextCaptureUpdateAction,\n    };\n\n    if (nextFontFamily && !skipOnHoverRender) {\n      const elementContainerMapping = new Map<\n        ExcalidrawTextElement,\n        ExcalidrawElement | null\n      >();\n      let uniqueChars = new Set<string>();\n      let skipFontFaceCheck = false;\n\n      const fontsCache = Array.from(Fonts.loadedFontsCache.values());\n      const fontFamily = Object.entries(FONT_FAMILY).find(\n        ([_, value]) => value === nextFontFamily,\n      )?.[0];\n\n      // skip `document.font.check` check on hover, if at least one font family has loaded as it's super slow (could result in slightly different bbox, which is fine)\n      if (\n        currentHoveredFontFamily &&\n        fontFamily &&\n        fontsCache.some((sig) => sig.startsWith(fontFamily))\n      ) {\n        skipFontFaceCheck = true;\n      }\n\n      // following causes re-render so make sure we changed the family\n      // otherwise it could cause unexpected issues, such as preventing opening the popover when in wysiwyg\n      Object.assign(result, {\n        elements: changeProperty(\n          elements,\n          appState,\n          (oldElement) => {\n            if (\n              isTextElement(oldElement) &&\n              (oldElement.fontFamily !== nextFontFamily ||\n                currentItemFontFamily) // force update on selection\n            ) {\n              const newElement: ExcalidrawTextElement = newElementWith(\n                oldElement,\n                {\n                  fontFamily: nextFontFamily,\n                  lineHeight: getLineHeight(nextFontFamily!),\n                },\n              );\n\n              const cachedContainer =\n                cachedElements?.get(oldElement.containerId || \"\") || {};\n\n              const container = app.scene.getContainerElement(oldElement);\n\n              if (resetContainers && container && cachedContainer) {\n                // reset the container back to it's cached version\n                mutateElement(container, { ...cachedContainer }, false);\n              }\n\n              if (!skipFontFaceCheck) {\n                uniqueChars = new Set([\n                  ...uniqueChars,\n                  ...Array.from(newElement.originalText),\n                ]);\n              }\n\n              elementContainerMapping.set(newElement, container);\n\n              return newElement;\n            }\n\n            return oldElement;\n          },\n          true,\n        ),\n      });\n\n      // size is irrelevant, but necessary\n      const fontString = `10px ${getFontFamilyString({\n        fontFamily: nextFontFamily,\n      })}`;\n      const chars = Array.from(uniqueChars.values()).join();\n\n      if (skipFontFaceCheck || window.document.fonts.check(fontString, chars)) {\n        // we either skip the check (have at least one font face loaded) or do the check and find out all the font faces have loaded\n        for (const [element, container] of elementContainerMapping) {\n          // trigger synchronous redraw\n          redrawTextBoundingBox(\n            element,\n            container,\n            app.scene.getNonDeletedElementsMap(),\n            false,\n          );\n        }\n      } else {\n        // otherwise try to load all font faces for the given chars and redraw elements once our font faces loaded\n        window.document.fonts.load(fontString, chars).then((fontFaces) => {\n          for (const [element, container] of elementContainerMapping) {\n            // use latest element state to ensure we don't have closure over an old instance in order to avoid possible race conditions (i.e. font faces load out-of-order while rapidly switching fonts)\n            const latestElement = app.scene.getElement(element.id);\n            const latestContainer = container\n              ? app.scene.getElement(container.id)\n              : null;\n\n            if (latestElement) {\n              // trigger async redraw\n              redrawTextBoundingBox(\n                latestElement as ExcalidrawTextElement,\n                latestContainer,\n                app.scene.getNonDeletedElementsMap(),\n                false,\n              );\n            }\n          }\n\n          // trigger update once we've mutated all the elements, which also updates our cache\n          app.fonts.onLoaded(fontFaces);\n        });\n      }\n    }\n\n    return result;\n  },\n  PanelComponent: ({ elements, appState, app, updateData }) => {\n    const cachedElementsRef = useRef<Map<string, ExcalidrawElement>>(new Map());\n    const prevSelectedFontFamilyRef = useRef<number | null>(null);\n    // relying on state batching as multiple `FontPicker` handlers could be called in rapid succession and we want to combine them\n    const [batchedData, setBatchedData] = useState<ChangeFontFamilyData>({});\n    const isUnmounted = useRef(true);\n\n    const selectedFontFamily = useMemo(() => {\n      const getFontFamily = (\n        elementsArray: readonly ExcalidrawElement[],\n        elementsMap: Map<string, ExcalidrawElement>,\n      ) =>\n        getFormValue(\n          elementsArray,\n          appState,\n          (element) => {\n            if (isTextElement(element)) {\n              return element.fontFamily;\n            }\n            const boundTextElement = getBoundTextElement(element, elementsMap);\n            if (boundTextElement) {\n              return boundTextElement.fontFamily;\n            }\n            return null;\n          },\n          (element) =>\n            isTextElement(element) ||\n            getBoundTextElement(element, elementsMap) !== null,\n          (hasSelection) =>\n            hasSelection\n              ? null\n              : appState.currentItemFontFamily || DEFAULT_FONT_FAMILY,\n        );\n\n      // popup opened, use cached elements\n      if (\n        batchedData.openPopup === \"fontFamily\" &&\n        appState.openPopup === \"fontFamily\"\n      ) {\n        return getFontFamily(\n          Array.from(cachedElementsRef.current?.values() ?? []),\n          cachedElementsRef.current,\n        );\n      }\n\n      // popup closed, use all elements\n      if (!batchedData.openPopup && appState.openPopup !== \"fontFamily\") {\n        return getFontFamily(elements, app.scene.getNonDeletedElementsMap());\n      }\n\n      // popup props are not in sync, hence we are in the middle of an update, so keeping the previous value we've had\n      return prevSelectedFontFamilyRef.current;\n    }, [batchedData.openPopup, appState, elements, app.scene]);\n\n    useEffect(() => {\n      prevSelectedFontFamilyRef.current = selectedFontFamily;\n    }, [selectedFontFamily]);\n\n    useEffect(() => {\n      if (Object.keys(batchedData).length) {\n        updateData(batchedData);\n        // reset the data after we've used the data\n        setBatchedData({});\n      }\n      // call update only on internal state changes\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [batchedData]);\n\n    useEffect(() => {\n      isUnmounted.current = false;\n\n      return () => {\n        isUnmounted.current = true;\n      };\n    }, []);\n\n    return (\n      <fieldset>\n        <legend>{t(\"labels.fontFamily\")}</legend>\n        <FontPicker\n          isOpened={appState.openPopup === \"fontFamily\"}\n          selectedFontFamily={selectedFontFamily}\n          hoveredFontFamily={appState.currentHoveredFontFamily}\n          onSelect={(fontFamily) => {\n            setBatchedData({\n              openPopup: null,\n              currentHoveredFontFamily: null,\n              currentItemFontFamily: fontFamily,\n            });\n\n            // defensive clear so immediate close won't abuse the cached elements\n            cachedElementsRef.current.clear();\n          }}\n          onHover={(fontFamily) => {\n            setBatchedData({\n              currentHoveredFontFamily: fontFamily,\n              cachedElements: new Map(cachedElementsRef.current),\n              resetContainers: true,\n            });\n          }}\n          onLeave={() => {\n            setBatchedData({\n              currentHoveredFontFamily: null,\n              cachedElements: new Map(cachedElementsRef.current),\n              resetAll: true,\n            });\n          }}\n          onPopupChange={(open) => {\n            if (open) {\n              // open, populate the cache from scratch\n              cachedElementsRef.current.clear();\n\n              const { editingTextElement } = appState;\n\n              // still check type to be safe\n              if (editingTextElement?.type === \"text\") {\n                // retrieve the latest version from the scene, as `editingTextElement` isn't mutated\n                const latesteditingTextElement = app.scene.getElement(\n                  editingTextElement.id,\n                );\n\n                // inside the wysiwyg editor\n                cachedElementsRef.current.set(\n                  editingTextElement.id,\n                  newElementWith(\n                    latesteditingTextElement || editingTextElement,\n                    {},\n                    true,\n                  ),\n                );\n              } else {\n                const selectedElements = getSelectedElements(\n                  elements,\n                  appState,\n                  {\n                    includeBoundTextElement: true,\n                  },\n                );\n\n                for (const element of selectedElements) {\n                  cachedElementsRef.current.set(\n                    element.id,\n                    newElementWith(element, {}, true),\n                  );\n                }\n              }\n\n              setBatchedData({\n                openPopup: \"fontFamily\",\n              });\n            } else {\n              // close, use the cache and clear it afterwards\n              const data = {\n                openPopup: null,\n                currentHoveredFontFamily: null,\n                cachedElements: new Map(cachedElementsRef.current),\n                resetAll: true,\n              } as ChangeFontFamilyData;\n\n              if (isUnmounted.current) {\n                // in case the component was unmounted by the parent, trigger the update directly\n                updateData({ ...batchedData, ...data });\n              } else {\n                setBatchedData(data);\n              }\n\n              cachedElementsRef.current.clear();\n            }\n          }}\n        />\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeTextAlign = register({\n  name: \"changeTextAlign\",\n  label: \"Change text alignment\",\n  trackEvent: false,\n  perform: (elements, appState, value, app) => {\n    return {\n      elements: changeProperty(\n        elements,\n        appState,\n        (oldElement) => {\n          if (isTextElement(oldElement)) {\n            const newElement: ExcalidrawTextElement = newElementWith(\n              oldElement,\n              { textAlign: value },\n            );\n            redrawTextBoundingBox(\n              newElement,\n              app.scene.getContainerElement(oldElement),\n              app.scene.getNonDeletedElementsMap(),\n            );\n            return newElement;\n          }\n\n          return oldElement;\n        },\n        true,\n      ),\n      appState: {\n        ...appState,\n        currentItemTextAlign: value,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData, app }) => {\n    const elementsMap = app.scene.getNonDeletedElementsMap();\n    return (\n      <fieldset>\n        <legend>{t(\"labels.textAlign\")}</legend>\n        <ButtonIconSelect<TextAlign | false>\n          group=\"text-align\"\n          options={[\n            {\n              value: \"left\",\n              text: t(\"labels.left\"),\n              icon: TextAlignLeftIcon,\n              testId: \"align-left\",\n            },\n            {\n              value: \"center\",\n              text: t(\"labels.center\"),\n              icon: TextAlignCenterIcon,\n              testId: \"align-horizontal-center\",\n            },\n            {\n              value: \"right\",\n              text: t(\"labels.right\"),\n              icon: TextAlignRightIcon,\n              testId: \"align-right\",\n            },\n          ]}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) => {\n              if (isTextElement(element)) {\n                return element.textAlign;\n              }\n              const boundTextElement = getBoundTextElement(\n                element,\n                elementsMap,\n              );\n              if (boundTextElement) {\n                return boundTextElement.textAlign;\n              }\n              return null;\n            },\n            (element) =>\n              isTextElement(element) ||\n              getBoundTextElement(element, elementsMap) !== null,\n            (hasSelection) =>\n              hasSelection ? null : appState.currentItemTextAlign,\n          )}\n          onChange={(value) => updateData(value)}\n        />\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeVerticalAlign = register({\n  name: \"changeVerticalAlign\",\n  label: \"Change vertical alignment\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, value, app) => {\n    return {\n      elements: changeProperty(\n        elements,\n        appState,\n        (oldElement) => {\n          if (isTextElement(oldElement)) {\n            const newElement: ExcalidrawTextElement = newElementWith(\n              oldElement,\n              { verticalAlign: value },\n            );\n\n            redrawTextBoundingBox(\n              newElement,\n              app.scene.getContainerElement(oldElement),\n              app.scene.getNonDeletedElementsMap(),\n            );\n            return newElement;\n          }\n\n          return oldElement;\n        },\n        true,\n      ),\n      appState: {\n        ...appState,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData, app }) => {\n    return (\n      <fieldset>\n        <ButtonIconSelect<VerticalAlign | false>\n          group=\"text-align\"\n          options={[\n            {\n              value: VERTICAL_ALIGN.TOP,\n              text: t(\"labels.alignTop\"),\n              icon: <TextAlignTopIcon theme={appState.theme} />,\n              testId: \"align-top\",\n            },\n            {\n              value: VERTICAL_ALIGN.MIDDLE,\n              text: t(\"labels.centerVertically\"),\n              icon: <TextAlignMiddleIcon theme={appState.theme} />,\n              testId: \"align-middle\",\n            },\n            {\n              value: VERTICAL_ALIGN.BOTTOM,\n              text: t(\"labels.alignBottom\"),\n              icon: <TextAlignBottomIcon theme={appState.theme} />,\n              testId: \"align-bottom\",\n            },\n          ]}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) => {\n              if (isTextElement(element) && element.containerId) {\n                return element.verticalAlign;\n              }\n              const boundTextElement = getBoundTextElement(\n                element,\n                app.scene.getNonDeletedElementsMap(),\n              );\n              if (boundTextElement) {\n                return boundTextElement.verticalAlign;\n              }\n              return null;\n            },\n            (element) =>\n              isTextElement(element) ||\n              getBoundTextElement(\n                element,\n                app.scene.getNonDeletedElementsMap(),\n              ) !== null,\n            (hasSelection) => (hasSelection ? null : VERTICAL_ALIGN.MIDDLE),\n          )}\n          onChange={(value) => updateData(value)}\n        />\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeRoundness = register({\n  name: \"changeRoundness\",\n  label: \"Change edge roundness\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) => {\n        if (isElbowArrow(el)) {\n          return el;\n        }\n\n        return newElementWith(el, {\n          roundness:\n            value === \"round\"\n              ? {\n                  type: isUsingAdaptiveRadius(el.type)\n                    ? ROUNDNESS.ADAPTIVE_RADIUS\n                    : ROUNDNESS.PROPORTIONAL_RADIUS,\n                }\n              : null,\n        });\n      }),\n      appState: {\n        ...appState,\n        currentItemRoundness: value,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    const targetElements = getTargetElements(\n      getNonDeletedElements(elements),\n      appState,\n    );\n\n    const hasLegacyRoundness = targetElements.some(\n      (el) => el.roundness?.type === ROUNDNESS.LEGACY,\n    );\n\n    return (\n      <fieldset>\n        <legend>{t(\"labels.edges\")}</legend>\n        <ButtonIconSelect\n          group=\"edges\"\n          options={[\n            {\n              value: \"sharp\",\n              text: t(\"labels.sharp\"),\n              icon: EdgeSharpIcon,\n            },\n            {\n              value: \"round\",\n              text: t(\"labels.round\"),\n              icon: EdgeRoundIcon,\n            },\n          ]}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) =>\n              hasLegacyRoundness ? null : element.roundness ? \"round\" : \"sharp\",\n            (element) =>\n              !isArrowElement(element) && element.hasOwnProperty(\"roundness\"),\n            (hasSelection) =>\n              hasSelection ? null : appState.currentItemRoundness,\n          )}\n          onChange={(value) => updateData(value)}\n        />\n      </fieldset>\n    );\n  },\n});\n\nconst getArrowheadOptions = (flip: boolean) => {\n  return [\n    {\n      value: null,\n      text: t(\"labels.arrowhead_none\"),\n      keyBinding: \"q\",\n      icon: ArrowheadNoneIcon,\n    },\n    {\n      value: \"arrow\",\n      text: t(\"labels.arrowhead_arrow\"),\n      keyBinding: \"w\",\n      icon: <ArrowheadArrowIcon flip={flip} />,\n    },\n    {\n      value: \"triangle\",\n      text: t(\"labels.arrowhead_triangle\"),\n      icon: <ArrowheadTriangleIcon flip={flip} />,\n      keyBinding: \"e\",\n    },\n    {\n      value: \"triangle_outline\",\n      text: t(\"labels.arrowhead_triangle_outline\"),\n      icon: <ArrowheadTriangleOutlineIcon flip={flip} />,\n      keyBinding: \"r\",\n    },\n    {\n      value: \"circle\",\n      text: t(\"labels.arrowhead_circle\"),\n      keyBinding: \"a\",\n      icon: <ArrowheadCircleIcon flip={flip} />,\n    },\n    {\n      value: \"circle_outline\",\n      text: t(\"labels.arrowhead_circle_outline\"),\n      keyBinding: \"s\",\n      icon: <ArrowheadCircleOutlineIcon flip={flip} />,\n    },\n    {\n      value: \"diamond\",\n      text: t(\"labels.arrowhead_diamond\"),\n      icon: <ArrowheadDiamondIcon flip={flip} />,\n      keyBinding: \"d\",\n    },\n    {\n      value: \"diamond_outline\",\n      text: t(\"labels.arrowhead_diamond_outline\"),\n      icon: <ArrowheadDiamondOutlineIcon flip={flip} />,\n      keyBinding: \"f\",\n    },\n    {\n      value: \"bar\",\n      text: t(\"labels.arrowhead_bar\"),\n      keyBinding: \"z\",\n      icon: <ArrowheadBarIcon flip={flip} />,\n    },\n    {\n      value: \"crowfoot_one\",\n      text: t(\"labels.arrowhead_crowfoot_one\"),\n      icon: <ArrowheadCrowfootOneIcon flip={flip} />,\n      keyBinding: \"c\",\n    },\n    {\n      value: \"crowfoot_many\",\n      text: t(\"labels.arrowhead_crowfoot_many\"),\n      icon: <ArrowheadCrowfootIcon flip={flip} />,\n      keyBinding: \"x\",\n    },\n    {\n      value: \"crowfoot_one_or_many\",\n      text: t(\"labels.arrowhead_crowfoot_one_or_many\"),\n      icon: <ArrowheadCrowfootOneOrManyIcon flip={flip} />,\n      keyBinding: \"v\",\n    },\n  ] as const;\n};\n\nexport const actionChangeArrowhead = register({\n  name: \"changeArrowhead\",\n  label: \"Change arrowheads\",\n  trackEvent: false,\n  perform: (\n    elements,\n    appState,\n    value: { position: \"start\" | \"end\"; type: Arrowhead },\n  ) => {\n    return {\n      elements: changeProperty(elements, appState, (el) => {\n        if (isLinearElement(el)) {\n          const { position, type } = value;\n\n          if (position === \"start\") {\n            const element: ExcalidrawLinearElement = newElementWith(el, {\n              startArrowhead: type,\n            });\n            return element;\n          } else if (position === \"end\") {\n            const element: ExcalidrawLinearElement = newElementWith(el, {\n              endArrowhead: type,\n            });\n            return element;\n          }\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        [value.position === \"start\"\n          ? \"currentItemStartArrowhead\"\n          : \"currentItemEndArrowhead\"]: value.type,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    const isRTL = getLanguage().rtl;\n\n    return (\n      <fieldset>\n        <legend>{t(\"labels.arrowheads\")}</legend>\n        <div className=\"iconSelectList buttonList\">\n          <IconPicker\n            label=\"arrowhead_start\"\n            options={getArrowheadOptions(!isRTL)}\n            value={getFormValue<Arrowhead | null>(\n              elements,\n              appState,\n              (element) =>\n                isLinearElement(element) && canHaveArrowheads(element.type)\n                  ? element.startArrowhead\n                  : appState.currentItemStartArrowhead,\n              true,\n              appState.currentItemStartArrowhead,\n            )}\n            onChange={(value) => updateData({ position: \"start\", type: value })}\n            numberOfOptionsToAlwaysShow={4}\n          />\n          <IconPicker\n            label=\"arrowhead_end\"\n            group=\"arrowheads\"\n            options={getArrowheadOptions(!!isRTL)}\n            value={getFormValue<Arrowhead | null>(\n              elements,\n              appState,\n              (element) =>\n                isLinearElement(element) && canHaveArrowheads(element.type)\n                  ? element.endArrowhead\n                  : appState.currentItemEndArrowhead,\n              true,\n              appState.currentItemEndArrowhead,\n            )}\n            onChange={(value) => updateData({ position: \"end\", type: value })}\n            numberOfOptionsToAlwaysShow={4}\n          />\n        </div>\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeArrowType = register({\n  name: \"changeArrowType\",\n  label: \"Change arrow types\",\n  trackEvent: false,\n  perform: (elements, appState, value, app) => {\n    const newElements = changeProperty(elements, appState, (el) => {\n      if (!isArrowElement(el)) {\n        return el;\n      }\n      const newElement = newElementWith(el, {\n        roundness:\n          value === ARROW_TYPE.round\n            ? {\n                type: ROUNDNESS.PROPORTIONAL_RADIUS,\n              }\n            : null,\n        elbowed: value === ARROW_TYPE.elbow,\n        points:\n          value === ARROW_TYPE.elbow || el.elbowed\n            ? [el.points[0], el.points[el.points.length - 1]]\n            : el.points,\n      });\n\n      if (isElbowArrow(newElement)) {\n        const elementsMap = app.scene.getNonDeletedElementsMap();\n\n        app.dismissLinearEditor();\n\n        const startGlobalPoint =\n          LinearElementEditor.getPointAtIndexGlobalCoordinates(\n            newElement,\n            0,\n            elementsMap,\n          );\n        const endGlobalPoint =\n          LinearElementEditor.getPointAtIndexGlobalCoordinates(\n            newElement,\n            -1,\n            elementsMap,\n          );\n        const startHoveredElement =\n          !newElement.startBinding &&\n          getHoveredElementForBinding(\n            tupleToCoors(startGlobalPoint),\n            elements,\n            elementsMap,\n            appState.zoom,\n            false,\n            true,\n          );\n        const endHoveredElement =\n          !newElement.endBinding &&\n          getHoveredElementForBinding(\n            tupleToCoors(endGlobalPoint),\n            elements,\n            elementsMap,\n            appState.zoom,\n            false,\n            true,\n          );\n        const startElement = startHoveredElement\n          ? startHoveredElement\n          : newElement.startBinding &&\n            (elementsMap.get(\n              newElement.startBinding.elementId,\n            ) as ExcalidrawBindableElement);\n        const endElement = endHoveredElement\n          ? endHoveredElement\n          : newElement.endBinding &&\n            (elementsMap.get(\n              newElement.endBinding.elementId,\n            ) as ExcalidrawBindableElement);\n\n        const finalStartPoint = startHoveredElement\n          ? bindPointToSnapToElementOutline(\n              newElement,\n              startHoveredElement,\n              \"start\",\n            )\n          : startGlobalPoint;\n        const finalEndPoint = endHoveredElement\n          ? bindPointToSnapToElementOutline(\n              newElement,\n              endHoveredElement,\n              \"end\",\n            )\n          : endGlobalPoint;\n\n        startHoveredElement &&\n          bindLinearElement(\n            newElement,\n            startHoveredElement,\n            \"start\",\n            elementsMap,\n          );\n        endHoveredElement &&\n          bindLinearElement(newElement, endHoveredElement, \"end\", elementsMap);\n\n        mutateElement(newElement, {\n          points: [finalStartPoint, finalEndPoint].map(\n            (p): LocalPoint =>\n              pointFrom(p[0] - newElement.x, p[1] - newElement.y),\n          ),\n          ...(startElement && newElement.startBinding\n            ? {\n                startBinding: {\n                  // @ts-ignore TS cannot discern check above\n                  ...newElement.startBinding!,\n                  ...calculateFixedPointForElbowArrowBinding(\n                    newElement,\n                    startElement,\n                    \"start\",\n                    elementsMap,\n                  ),\n                },\n              }\n            : {}),\n          ...(endElement && newElement.endBinding\n            ? {\n                endBinding: {\n                  // @ts-ignore TS cannot discern check above\n                  ...newElement.endBinding,\n                  ...calculateFixedPointForElbowArrowBinding(\n                    newElement,\n                    endElement,\n                    \"end\",\n                    elementsMap,\n                  ),\n                },\n              }\n            : {}),\n        });\n\n        LinearElementEditor.updateEditorMidPointsCache(\n          newElement,\n          elementsMap,\n          app.state,\n        );\n      }\n\n      return newElement;\n    });\n\n    const newState = {\n      ...appState,\n      currentItemArrowType: value,\n    };\n\n    // Change the arrow type and update any other state settings for\n    // the arrow.\n    const selectedId = appState.selectedLinearElement?.elementId;\n    if (selectedId) {\n      const selected = newElements.find((el) => el.id === selectedId);\n      if (selected) {\n        newState.selectedLinearElement = new LinearElementEditor(\n          selected as ExcalidrawLinearElement,\n        );\n      }\n    }\n\n    return {\n      elements: newElements,\n      appState: newState,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    return (\n      <fieldset>\n        <legend>{t(\"labels.arrowtypes\")}</legend>\n        <ButtonIconSelect\n          group=\"arrowtypes\"\n          options={[\n            {\n              value: ARROW_TYPE.sharp,\n              text: t(\"labels.arrowtype_sharp\"),\n              icon: sharpArrowIcon,\n              testId: \"sharp-arrow\",\n            },\n            {\n              value: ARROW_TYPE.round,\n              text: t(\"labels.arrowtype_round\"),\n              icon: roundArrowIcon,\n              testId: \"round-arrow\",\n            },\n            {\n              value: ARROW_TYPE.elbow,\n              text: t(\"labels.arrowtype_elbowed\"),\n              icon: elbowArrowIcon,\n              testId: \"elbow-arrow\",\n            },\n          ]}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) => {\n              if (isArrowElement(element)) {\n                return element.elbowed\n                  ? ARROW_TYPE.elbow\n                  : element.roundness\n                  ? ARROW_TYPE.round\n                  : ARROW_TYPE.sharp;\n              }\n\n              return null;\n            },\n            (element) => isArrowElement(element),\n            (hasSelection) =>\n              hasSelection ? null : appState.currentItemArrowType,\n          )}\n          onChange={(value) => updateData(value)}\n        />\n      </fieldset>\n    );\n  },\n});\n", "// place here categories that you want to track. We want to track just a\n// small subset of categories at a given time.\nconst ALLOWED_CATEGORIES_TO_TRACK = new Set([\"command_palette\", \"export\"]);\n\nexport const trackEvent = (\n  category: string,\n  action: string,\n  label?: string,\n  value?: number,\n) => {\n  try {\n    if (\n      typeof window === \"undefined\" ||\n      import.meta.env.VITE_WORKER_ID ||\n      import.meta.env.VITE_APP_ENABLE_TRACKING !== \"true\"\n    ) {\n      return;\n    }\n\n    if (!ALLOWED_CATEGORIES_TO_TRACK.has(category)) {\n      return;\n    }\n\n    if (import.meta.env.DEV) {\n      // comment out to debug in dev\n      return;\n    }\n\n    if (!import.meta.env.PROD) {\n      console.info(\"trackEvent\", { category, action, label, value });\n    }\n\n    if (window.sa_event) {\n      window.sa_event(action, {\n        category,\n        label,\n        value,\n      });\n    }\n  } catch (error) {\n    console.error(\"error during analytics\", error);\n  }\n};\n", "import type { JSX } from \"react\";\nimport clsx from \"clsx\";\nimport { ButtonIcon } from \"./ButtonIcon\";\n\n// TODO: It might be \"clever\" to add option.icon to the existing component <ButtonSelect />\nexport const ButtonIconSelect = <T extends Object>(\n  props: {\n    options: {\n      value: T;\n      text: string;\n      icon: JSX.Element;\n      testId?: string;\n      /** if not supplied, defaults to value identity check */\n      active?: boolean;\n    }[];\n    value: T | null;\n    type?: \"radio\" | \"button\";\n  } & (\n    | { type?: \"radio\"; group: string; onChange: (value: T) => void }\n    | {\n        type: \"button\";\n        onClick: (\n          value: T,\n          event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n        ) => void;\n      }\n  ),\n) => (\n  <div className=\"buttonList\">\n    {props.options.map((option) =>\n      props.type === \"button\" ? (\n        <ButtonIcon\n          key={option.text}\n          icon={option.icon}\n          title={option.text}\n          testId={option.testId}\n          active={option.active ?? props.value === option.value}\n          onClick={(event) => props.onClick(option.value, event)}\n        />\n      ) : (\n        <label\n          key={option.text}\n          className={clsx({ active: props.value === option.value })}\n          title={option.text}\n        >\n          <input\n            type=\"radio\"\n            name={props.group}\n            onChange={() => props.onChange(option.value)}\n            checked={props.value === option.value}\n            data-testid={option.testId}\n          />\n          {option.icon}\n        </label>\n      ),\n    )}\n  </div>\n);\n", "import { forwardRef } from \"react\";\nimport type { JSX } from \"react\";\nimport clsx from \"clsx\";\n\nimport \"./ButtonIcon.scss\";\n\ninterface ButtonIconProps {\n  icon: JSX.Element;\n  title: string;\n  className?: string;\n  testId?: string;\n  /** if not supplied, defaults to value identity check */\n  active?: boolean;\n  /** include standalone style (could interfere with parent styles) */\n  standalone?: boolean;\n  onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport const ButtonIcon = forwardRef<HTMLButtonElement, ButtonIconProps>(\n  (props, ref) => {\n    const { title, className, testId, active, standalone, icon, onClick } =\n      props;\n    return (\n      <button\n        type=\"button\"\n        ref={ref}\n        key={title}\n        title={title}\n        data-testid={testId}\n        className={clsx(className, { standalone, active })}\n        onClick={onClick}\n      >\n        {icon}\n      </button>\n    );\n  },\n);\n", "import clsx from \"clsx\";\nimport type { ColorPickerType } from \"./colorPickerUtils\";\nimport {\n  DEFAULT_CANVAS_BACKGROUND_PICKS,\n  DEFAULT_ELEMENT_BACKGROUND_PICKS,\n  DEFAULT_ELEMENT_STROKE_PICKS,\n} from \"../../colors\";\n\ninterface TopPicksProps {\n  onChange: (color: string) => void;\n  type: ColorPickerType;\n  activeColor: string;\n  topPicks?: readonly string[];\n}\n\nexport const TopPicks = ({\n  onChange,\n  type,\n  activeColor,\n  topPicks,\n}: TopPicksProps) => {\n  let colors;\n  if (type === \"elementStroke\") {\n    colors = DEFAULT_ELEMENT_STROKE_PICKS;\n  }\n\n  if (type === \"elementBackground\") {\n    colors = DEFAULT_ELEMENT_BACKGROUND_PICKS;\n  }\n\n  if (type === \"canvasBackground\") {\n    colors = DEFAULT_CANVAS_BACKGROUND_PICKS;\n  }\n\n  // this one can overwrite defaults\n  if (topPicks) {\n    colors = topPicks;\n  }\n\n  if (!colors) {\n    console.error(\"Invalid type for TopPicks\");\n    return null;\n  }\n\n  return (\n    <div className=\"color-picker__top-picks\">\n      {colors.map((color: string) => (\n        <button\n          className={clsx(\"color-picker__button\", {\n            active: color === activeColor,\n            \"is-transparent\": color === \"transparent\" || !color,\n          })}\n          style={{ \"--swatch-color\": color }}\n          key={color}\n          type=\"button\"\n          title={color}\n          onClick={() => onChange(color)}\n          data-testid={`color-top-pick-${color}`}\n        >\n          <div className=\"color-picker__button-outline\" />\n        </button>\n      ))}\n    </div>\n  );\n};\n", "export const ButtonSeparator = () => (\n  <div\n    style={{\n      width: 1,\n      height: \"1rem\",\n      backgroundColor: \"var(--default-border-color)\",\n      margin: \"0 auto\",\n    }}\n  />\n);\n", "import React, { useEffect, useState } from \"react\";\nimport { t } from \"../../i18n\";\n\nimport type { ExcalidrawElement } from \"../../element/types\";\nimport { ShadeList } from \"./ShadeList\";\n\nimport PickerColorList from \"./PickerColorList\";\nimport { useAtom } from \"../../editor-jotai\";\nimport { CustomColorList } from \"./CustomColorList\";\nimport { colorPickerKeyNavHandler } from \"./keyboardNavHandlers\";\nimport PickerHeading from \"./PickerHeading\";\nimport type { ColorPickerType } from \"./colorPickerUtils\";\nimport {\n  activeColorPickerSectionAtom,\n  getColorNameAndShadeFromColor,\n  getMostUsedCustomColors,\n  isCustomColor,\n} from \"./colorPickerUtils\";\nimport type { ColorPaletteCustom } from \"../../colors\";\nimport {\n  DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX,\n  DEFAULT_ELEMENT_STROKE_COLOR_INDEX,\n} from \"../../colors\";\nimport { KEYS } from \"../../keys\";\nimport { EVENT } from \"../../constants\";\n\ninterface PickerProps {\n  color: string;\n  onChange: (color: string) => void;\n  label: string;\n  type: ColorPickerType;\n  elements: readonly ExcalidrawElement[];\n  palette: ColorPaletteCustom;\n  updateData: (formData?: any) => void;\n  children?: React.ReactNode;\n  onEyeDropperToggle: (force?: boolean) => void;\n  onEscape: (event: React.KeyboardEvent | KeyboardEvent) => void;\n}\n\nexport const Picker = ({\n  color,\n  onChange,\n  label,\n  type,\n  elements,\n  palette,\n  updateData,\n  children,\n  onEyeDropperToggle,\n  onEscape,\n}: PickerProps) => {\n  const [customColors] = React.useState(() => {\n    if (type === \"canvasBackground\") {\n      return [];\n    }\n    return getMostUsedCustomColors(elements, type, palette);\n  });\n\n  const [activeColorPickerSection, setActiveColorPickerSection] = useAtom(\n    activeColorPickerSectionAtom,\n  );\n\n  const colorObj = getColorNameAndShadeFromColor({\n    color,\n    palette,\n  });\n\n  useEffect(() => {\n    if (!activeColorPickerSection) {\n      const isCustom = isCustomColor({ color, palette });\n      const isCustomButNotInList = isCustom && !customColors.includes(color);\n\n      setActiveColorPickerSection(\n        isCustomButNotInList\n          ? \"hex\"\n          : isCustom\n          ? \"custom\"\n          : colorObj?.shade != null\n          ? \"shades\"\n          : \"baseColors\",\n      );\n    }\n  }, [\n    activeColorPickerSection,\n    color,\n    palette,\n    setActiveColorPickerSection,\n    colorObj,\n    customColors,\n  ]);\n\n  const [activeShade, setActiveShade] = useState(\n    colorObj?.shade ??\n      (type === \"elementBackground\"\n        ? DEFAULT_ELEMENT_BACKGROUND_COLOR_INDEX\n        : DEFAULT_ELEMENT_STROKE_COLOR_INDEX),\n  );\n\n  useEffect(() => {\n    if (colorObj?.shade != null) {\n      setActiveShade(colorObj.shade);\n    }\n\n    const keyup = (event: KeyboardEvent) => {\n      if (event.key === KEYS.ALT) {\n        onEyeDropperToggle(false);\n      }\n    };\n    document.addEventListener(EVENT.KEYUP, keyup, { capture: true });\n    return () => {\n      document.removeEventListener(EVENT.KEYUP, keyup, { capture: true });\n    };\n  }, [colorObj, onEyeDropperToggle]);\n\n  const pickerRef = React.useRef<HTMLDivElement>(null);\n\n  return (\n    <div role=\"dialog\" aria-modal=\"true\" aria-label={t(\"labels.colorPicker\")}>\n      <div\n        ref={pickerRef}\n        onKeyDown={(event) => {\n          const handled = colorPickerKeyNavHandler({\n            event,\n            activeColorPickerSection,\n            palette,\n            color,\n            onChange,\n            onEyeDropperToggle,\n            customColors,\n            setActiveColorPickerSection,\n            updateData,\n            activeShade,\n            onEscape,\n          });\n\n          if (handled) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n        }}\n        className=\"color-picker-content properties-content\"\n        // to allow focusing by clicking but not by tabbing\n        tabIndex={-1}\n      >\n        {!!customColors.length && (\n          <div>\n            <PickerHeading>\n              {t(\"colorPicker.mostUsedCustomColors\")}\n            </PickerHeading>\n            <CustomColorList\n              colors={customColors}\n              color={color}\n              label={t(\"colorPicker.mostUsedCustomColors\")}\n              onChange={onChange}\n            />\n          </div>\n        )}\n\n        <div>\n          <PickerHeading>{t(\"colorPicker.colors\")}</PickerHeading>\n          <PickerColorList\n            color={color}\n            label={label}\n            palette={palette}\n            onChange={onChange}\n            activeShade={activeShade}\n          />\n        </div>\n\n        <div>\n          <PickerHeading>{t(\"colorPicker.shades\")}</PickerHeading>\n          <ShadeList hex={color} onChange={onChange} palette={palette} />\n        </div>\n        {children}\n      </div>\n    </div>\n  );\n};\n", "import clsx from \"clsx\";\nimport { useAtom } from \"../../editor-jotai\";\nimport { useEffect, useRef } from \"react\";\nimport {\n  activeColorPickerSectionAtom,\n  getColorNameAndShadeFromColor,\n} from \"./colorPickerUtils\";\nimport HotkeyLabel from \"./HotkeyLabel\";\nimport { t } from \"../../i18n\";\nimport type { ColorPaletteCustom } from \"../../colors\";\n\ninterface ShadeListProps {\n  hex: string;\n  onChange: (color: string) => void;\n  palette: ColorPaletteCustom;\n}\n\nexport const ShadeList = ({ hex, onChange, palette }: ShadeListProps) => {\n  const colorObj = getColorNameAndShadeFromColor({\n    color: hex || \"transparent\",\n    palette,\n  });\n\n  const [activeColorPickerSection, setActiveColorPickerSection] = useAtom(\n    activeColorPickerSectionAtom,\n  );\n\n  const btnRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    if (btnRef.current && activeColorPickerSection === \"shades\") {\n      btnRef.current.focus();\n    }\n  }, [colorObj, activeColorPickerSection]);\n\n  if (colorObj) {\n    const { colorName, shade } = colorObj;\n\n    const shades = palette[colorName];\n\n    if (Array.isArray(shades)) {\n      return (\n        <div className=\"color-picker-content--default shades\">\n          {shades.map((color, i) => (\n            <button\n              ref={\n                i === shade && activeColorPickerSection === \"shades\"\n                  ? btnRef\n                  : undefined\n              }\n              tabIndex={-1}\n              key={i}\n              type=\"button\"\n              className={clsx(\n                \"color-picker__button color-picker__button--large\",\n                { active: i === shade },\n              )}\n              aria-label=\"Shade\"\n              title={`${colorName} - ${i + 1}`}\n              style={color ? { \"--swatch-color\": color } : undefined}\n              onClick={() => {\n                onChange(color);\n                setActiveColorPickerSection(\"shades\");\n              }}\n            >\n              <div className=\"color-picker__button-outline\" />\n              <HotkeyLabel color={color} keyLabel={i + 1} isShade />\n            </button>\n          ))}\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div\n      className=\"color-picker-content--default\"\n      style={{ position: \"relative\" }}\n      tabIndex={-1}\n    >\n      <button\n        type=\"button\"\n        tabIndex={-1}\n        className=\"color-picker__button color-picker__button--large color-picker__button--no-focus-visible\"\n      />\n      <div\n        tabIndex={-1}\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n          fontSize: \"0.75rem\",\n        }}\n      >\n        {t(\"colorPicker.noShades\")}\n      </div>\n    </div>\n  );\n};\n", "import type { ExcalidrawElement } from \"../../element/types\";\nimport type { ColorPickerColor, ColorPaletteCustom } from \"../../colors\";\nimport { MAX_CUSTOM_COLORS_USED_IN_CANVAS } from \"../../colors\";\nimport { atom } from \"../../editor-jotai\";\n\nexport const getColorNameAndShadeFromColor = ({\n  palette,\n  color,\n}: {\n  palette: ColorPaletteCustom;\n  color: string;\n}): {\n  colorName: ColorPickerColor;\n  shade: number | null;\n} | null => {\n  for (const [colorName, colorVal] of Object.entries(palette)) {\n    if (Array.isArray(colorVal)) {\n      const shade = colorVal.indexOf(color);\n      if (shade > -1) {\n        return { colorName: colorName as ColorPickerColor, shade };\n      }\n    } else if (colorVal === color) {\n      return { colorName: colorName as ColorPickerColor, shade: null };\n    }\n  }\n  return null;\n};\n\nexport const colorPickerHotkeyBindings = [\n  [\"q\", \"w\", \"e\", \"r\", \"t\"],\n  [\"a\", \"s\", \"d\", \"f\", \"g\"],\n  [\"z\", \"x\", \"c\", \"v\", \"b\"],\n].flat();\n\nexport const isCustomColor = ({\n  color,\n  palette,\n}: {\n  color: string;\n  palette: ColorPaletteCustom;\n}) => {\n  const paletteValues = Object.values(palette).flat();\n  return !paletteValues.includes(color);\n};\n\nexport const getMostUsedCustomColors = (\n  elements: readonly ExcalidrawElement[],\n  type: \"elementBackground\" | \"elementStroke\",\n  palette: ColorPaletteCustom,\n) => {\n  const elementColorTypeMap = {\n    elementBackground: \"backgroundColor\",\n    elementStroke: \"strokeColor\",\n  };\n\n  const colors = elements.filter((element) => {\n    if (element.isDeleted) {\n      return false;\n    }\n\n    const color =\n      element[elementColorTypeMap[type] as \"backgroundColor\" | \"strokeColor\"];\n\n    return isCustomColor({ color, palette });\n  });\n\n  const colorCountMap = new Map<string, number>();\n  colors.forEach((element) => {\n    const color =\n      element[elementColorTypeMap[type] as \"backgroundColor\" | \"strokeColor\"];\n    if (colorCountMap.has(color)) {\n      colorCountMap.set(color, colorCountMap.get(color)! + 1);\n    } else {\n      colorCountMap.set(color, 1);\n    }\n  });\n\n  return [...colorCountMap.entries()]\n    .sort((a, b) => b[1] - a[1])\n    .map((c) => c[0])\n    .slice(0, MAX_CUSTOM_COLORS_USED_IN_CANVAS);\n};\n\nexport type ActiveColorPickerSectionAtomType =\n  | \"custom\"\n  | \"baseColors\"\n  | \"shades\"\n  | \"hex\"\n  | null;\nexport const activeColorPickerSectionAtom =\n  atom<ActiveColorPickerSectionAtomType>(null);\n\nconst calculateContrast = (r: number, g: number, b: number) => {\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  return yiq >= 160 ? \"black\" : \"white\";\n};\n\n// inspiration from https://stackoverflow.com/a/11868398\nexport const getContrastYIQ = (bgHex: string, isCustomColor: boolean) => {\n  if (isCustomColor) {\n    const style = new Option().style;\n    style.color = bgHex;\n\n    if (style.color) {\n      const rgb = style.color\n        .replace(/^(rgb|rgba)\\(/, \"\")\n        .replace(/\\)$/, \"\")\n        .replace(/\\s/g, \"\")\n        .split(\",\");\n      const r = parseInt(rgb[0]);\n      const g = parseInt(rgb[1]);\n      const b = parseInt(rgb[2]);\n\n      return calculateContrast(r, g, b);\n    }\n  }\n\n  // TODO: ? is this wanted?\n  if (bgHex === \"transparent\") {\n    return \"black\";\n  }\n\n  const r = parseInt(bgHex.substring(1, 3), 16);\n  const g = parseInt(bgHex.substring(3, 5), 16);\n  const b = parseInt(bgHex.substring(5, 7), 16);\n\n  return calculateContrast(r, g, b);\n};\n\nexport type ColorPickerType =\n  | \"canvasBackground\"\n  | \"elementBackground\"\n  | \"elementStroke\";\n", "import React from \"react\";\nimport { getContrastYIQ } from \"./colorPickerUtils\";\n\ninterface HotkeyLabelProps {\n  color: string;\n  keyLabel: string | number;\n  isCustomColor?: boolean;\n  isShade?: boolean;\n}\nconst HotkeyLabel = ({\n  color,\n  keyLabel,\n  isCustomColor = false,\n  isShade = false,\n}: HotkeyLabelProps) => {\n  return (\n    <div\n      className=\"color-picker__button__hotkey-label\"\n      style={{\n        color: getContrastYIQ(color, isCustomColor),\n      }}\n    >\n      {isShade && \"\u21E7\"}\n      {keyLabel}\n    </div>\n  );\n};\n\nexport default HotkeyLabel;\n", "import clsx from \"clsx\";\nimport { useAtom } from \"../../editor-jotai\";\nimport { useEffect, useRef } from \"react\";\nimport {\n  activeColorPickerSectionAtom,\n  colorPickerHotkeyBindings,\n  getColorNameAndShadeFromColor,\n} from \"./colorPickerUtils\";\nimport HotkeyLabel from \"./HotkeyLabel\";\nimport type { ColorPaletteCustom } from \"../../colors\";\nimport type { TranslationKeys } from \"../../i18n\";\nimport { t } from \"../../i18n\";\n\ninterface PickerColorListProps {\n  palette: ColorPaletteCustom;\n  color: string;\n  onChange: (color: string) => void;\n  label: string;\n  activeShade: number;\n}\n\nconst PickerColorList = ({\n  palette,\n  color,\n  onChange,\n  label,\n  activeShade,\n}: PickerColorListProps) => {\n  const colorObj = getColorNameAndShadeFromColor({\n    color: color || \"transparent\",\n    palette,\n  });\n  const [activeColorPickerSection, setActiveColorPickerSection] = useAtom(\n    activeColorPickerSectionAtom,\n  );\n\n  const btnRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    if (btnRef.current && activeColorPickerSection === \"baseColors\") {\n      btnRef.current.focus();\n    }\n  }, [colorObj?.colorName, activeColorPickerSection]);\n\n  return (\n    <div className=\"color-picker-content--default\">\n      {Object.entries(palette).map(([key, value], index) => {\n        const color =\n          (Array.isArray(value) ? value[activeShade] : value) || \"transparent\";\n\n        const keybinding = colorPickerHotkeyBindings[index];\n        const label = t(\n          `colors.${key.replace(/\\d+/, \"\")}` as unknown as TranslationKeys,\n          null,\n          \"\",\n        );\n\n        return (\n          <button\n            ref={colorObj?.colorName === key ? btnRef : undefined}\n            tabIndex={-1}\n            type=\"button\"\n            className={clsx(\n              \"color-picker__button color-picker__button--large\",\n              {\n                active: colorObj?.colorName === key,\n                \"is-transparent\": color === \"transparent\" || !color,\n              },\n            )}\n            onClick={() => {\n              onChange(color);\n              setActiveColorPickerSection(\"baseColors\");\n            }}\n            title={`${label}${\n              color.startsWith(\"#\") ? ` ${color}` : \"\"\n            } \u2014 ${keybinding}`}\n            aria-label={`${label} \u2014 ${keybinding}`}\n            style={color ? { \"--swatch-color\": color } : undefined}\n            data-testid={`color-${key}`}\n            key={key}\n          >\n            <div className=\"color-picker__button-outline\" />\n            <HotkeyLabel color={color} keyLabel={keybinding} />\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default PickerColorList;\n", "import clsx from \"clsx\";\nimport { useAtom } from \"../../editor-jotai\";\nimport { useEffect, useRef } from \"react\";\nimport { activeColorPickerSectionAtom } from \"./colorPickerUtils\";\nimport HotkeyLabel from \"./HotkeyLabel\";\n\ninterface CustomColorListProps {\n  colors: string[];\n  color: string;\n  onChange: (color: string) => void;\n  label: string;\n}\n\nexport const CustomColorList = ({\n  colors,\n  color,\n  onChange,\n  label,\n}: CustomColorListProps) => {\n  const [activeColorPickerSection, setActiveColorPickerSection] = useAtom(\n    activeColorPickerSectionAtom,\n  );\n\n  const btnRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    if (btnRef.current) {\n      btnRef.current.focus();\n    }\n  }, [color, activeColorPickerSection]);\n\n  return (\n    <div className=\"color-picker-content--default\">\n      {colors.map((c, i) => {\n        return (\n          <button\n            ref={color === c ? btnRef : undefined}\n            tabIndex={-1}\n            type=\"button\"\n            className={clsx(\n              \"color-picker__button color-picker__button--large\",\n              {\n                active: color === c,\n                \"is-transparent\": c === \"transparent\" || !c,\n              },\n            )}\n            onClick={() => {\n              onChange(c);\n              setActiveColorPickerSection(\"custom\");\n            }}\n            title={c}\n            aria-label={label}\n            style={{ \"--swatch-color\": c }}\n            key={i}\n          >\n            <div className=\"color-picker__button-outline\" />\n            <HotkeyLabel color={c} keyLabel={i + 1} isCustomColor />\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n", "import { KEYS } from \"../../keys\";\nimport type {\n  ColorPickerColor,\n  ColorPalette,\n  ColorPaletteCustom,\n} from \"../../colors\";\nimport { COLORS_PER_ROW, COLOR_PALETTE } from \"../../colors\";\nimport type { ValueOf } from \"../../utility-types\";\nimport type { ActiveColorPickerSectionAtomType } from \"./colorPickerUtils\";\nimport {\n  colorPickerHotkeyBindings,\n  getColorNameAndShadeFromColor,\n} from \"./colorPickerUtils\";\n\nconst arrowHandler = (\n  eventKey: string,\n  currentIndex: number | null,\n  length: number,\n) => {\n  const rows = Math.ceil(length / COLORS_PER_ROW);\n\n  currentIndex = currentIndex ?? -1;\n\n  switch (eventKey) {\n    case \"ArrowLeft\": {\n      const prevIndex = currentIndex - 1;\n      return prevIndex < 0 ? length - 1 : prevIndex;\n    }\n    case \"ArrowRight\": {\n      return (currentIndex + 1) % length;\n    }\n    case \"ArrowDown\": {\n      const nextIndex = currentIndex + COLORS_PER_ROW;\n      return nextIndex >= length ? currentIndex % COLORS_PER_ROW : nextIndex;\n    }\n    case \"ArrowUp\": {\n      const prevIndex = currentIndex - COLORS_PER_ROW;\n      const newIndex =\n        prevIndex < 0 ? COLORS_PER_ROW * rows + prevIndex : prevIndex;\n      return newIndex >= length ? undefined : newIndex;\n    }\n  }\n};\n\ninterface HotkeyHandlerProps {\n  e: React.KeyboardEvent;\n  colorObj: { colorName: ColorPickerColor; shade: number | null } | null;\n  onChange: (color: string) => void;\n  palette: ColorPaletteCustom;\n  customColors: string[];\n  setActiveColorPickerSection: (\n    update: React.SetStateAction<ActiveColorPickerSectionAtomType>,\n  ) => void;\n  activeShade: number;\n}\n\n/**\n * @returns true if the event was handled\n */\nconst hotkeyHandler = ({\n  e,\n  colorObj,\n  onChange,\n  palette,\n  customColors,\n  setActiveColorPickerSection,\n  activeShade,\n}: HotkeyHandlerProps): boolean => {\n  if (colorObj?.shade != null) {\n    // shift + numpad is extremely messed up on windows apparently\n    if (\n      [\"Digit1\", \"Digit2\", \"Digit3\", \"Digit4\", \"Digit5\"].includes(e.code) &&\n      e.shiftKey\n    ) {\n      const newShade = Number(e.code.slice(-1)) - 1;\n      onChange(palette[colorObj.colorName][newShade]);\n      setActiveColorPickerSection(\"shades\");\n      return true;\n    }\n  }\n\n  if ([\"1\", \"2\", \"3\", \"4\", \"5\"].includes(e.key)) {\n    const c = customColors[Number(e.key) - 1];\n    if (c) {\n      onChange(customColors[Number(e.key) - 1]);\n      setActiveColorPickerSection(\"custom\");\n      return true;\n    }\n  }\n\n  if (colorPickerHotkeyBindings.includes(e.key)) {\n    const index = colorPickerHotkeyBindings.indexOf(e.key);\n    const paletteKey = Object.keys(palette)[index] as keyof ColorPalette;\n    const paletteValue = palette[paletteKey];\n    const r = Array.isArray(paletteValue)\n      ? paletteValue[activeShade]\n      : paletteValue;\n    onChange(r);\n    setActiveColorPickerSection(\"baseColors\");\n    return true;\n  }\n  return false;\n};\n\ninterface ColorPickerKeyNavHandlerProps {\n  event: React.KeyboardEvent;\n  activeColorPickerSection: ActiveColorPickerSectionAtomType;\n  palette: ColorPaletteCustom;\n  color: string;\n  onChange: (color: string) => void;\n  customColors: string[];\n  setActiveColorPickerSection: (\n    update: React.SetStateAction<ActiveColorPickerSectionAtomType>,\n  ) => void;\n  updateData: (formData?: any) => void;\n  activeShade: number;\n  onEyeDropperToggle: (force?: boolean) => void;\n  onEscape: (event: React.KeyboardEvent | KeyboardEvent) => void;\n}\n\n/**\n * @returns true if the event was handled\n */\nexport const colorPickerKeyNavHandler = ({\n  event,\n  activeColorPickerSection,\n  palette,\n  color,\n  onChange,\n  customColors,\n  setActiveColorPickerSection,\n  updateData,\n  activeShade,\n  onEyeDropperToggle,\n  onEscape,\n}: ColorPickerKeyNavHandlerProps): boolean => {\n  if (event[KEYS.CTRL_OR_CMD]) {\n    return false;\n  }\n\n  if (event.key === KEYS.ESCAPE) {\n    onEscape(event);\n    return true;\n  }\n\n  // checkt using `key` to ignore combos with Alt modifier\n  if (event.key === KEYS.ALT) {\n    onEyeDropperToggle(true);\n    return true;\n  }\n\n  if (event.key === KEYS.I) {\n    onEyeDropperToggle();\n    return true;\n  }\n\n  const colorObj = getColorNameAndShadeFromColor({ color, palette });\n\n  if (event.key === KEYS.TAB) {\n    const sectionsMap: Record<\n      NonNullable<ActiveColorPickerSectionAtomType>,\n      boolean\n    > = {\n      custom: !!customColors.length,\n      baseColors: true,\n      shades: colorObj?.shade != null,\n      hex: true,\n    };\n\n    const sections = Object.entries(sectionsMap).reduce((acc, [key, value]) => {\n      if (value) {\n        acc.push(key as ActiveColorPickerSectionAtomType);\n      }\n      return acc;\n    }, [] as ActiveColorPickerSectionAtomType[]);\n\n    const activeSectionIndex = sections.indexOf(activeColorPickerSection);\n    const indexOffset = event.shiftKey ? -1 : 1;\n    const nextSectionIndex =\n      activeSectionIndex + indexOffset > sections.length - 1\n        ? 0\n        : activeSectionIndex + indexOffset < 0\n        ? sections.length - 1\n        : activeSectionIndex + indexOffset;\n\n    const nextSection = sections[nextSectionIndex];\n\n    if (nextSection) {\n      setActiveColorPickerSection(nextSection);\n    }\n\n    if (nextSection === \"custom\") {\n      onChange(customColors[0]);\n    } else if (nextSection === \"baseColors\") {\n      const baseColorName = (\n        Object.entries(palette) as [string, ValueOf<ColorPalette>][]\n      ).find(([name, shades]) => {\n        if (Array.isArray(shades)) {\n          return shades.includes(color);\n        } else if (shades === color) {\n          return name;\n        }\n        return null;\n      });\n\n      if (!baseColorName) {\n        onChange(COLOR_PALETTE.black);\n      }\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    return true;\n  }\n\n  if (\n    hotkeyHandler({\n      e: event,\n      colorObj,\n      onChange,\n      palette,\n      customColors,\n      setActiveColorPickerSection,\n      activeShade,\n    })\n  ) {\n    return true;\n  }\n\n  if (activeColorPickerSection === \"shades\") {\n    if (colorObj) {\n      const { shade } = colorObj;\n      const newShade = arrowHandler(event.key, shade, COLORS_PER_ROW);\n\n      if (newShade !== undefined) {\n        onChange(palette[colorObj.colorName][newShade]);\n        return true;\n      }\n    }\n  }\n\n  if (activeColorPickerSection === \"baseColors\") {\n    if (colorObj) {\n      const { colorName } = colorObj;\n      const colorNames = Object.keys(palette) as (keyof ColorPalette)[];\n      const indexOfColorName = colorNames.indexOf(colorName);\n\n      const newColorIndex = arrowHandler(\n        event.key,\n        indexOfColorName,\n        colorNames.length,\n      );\n\n      if (newColorIndex !== undefined) {\n        const newColorName = colorNames[newColorIndex];\n        const newColorNameValue = palette[newColorName];\n\n        onChange(\n          Array.isArray(newColorNameValue)\n            ? newColorNameValue[activeShade]\n            : newColorNameValue,\n        );\n        return true;\n      }\n    }\n  }\n\n  if (activeColorPickerSection === \"custom\") {\n    const indexOfColor = customColors.indexOf(color);\n\n    const newColorIndex = arrowHandler(\n      event.key,\n      indexOfColor,\n      customColors.length,\n    );\n\n    if (newColorIndex !== undefined) {\n      const newColor = customColors[newColorIndex];\n      onChange(newColor);\n      return true;\n    }\n  }\n\n  return false;\n};\n", "import type { ReactNode } from \"react\";\n\nconst PickerHeading = ({ children }: { children: ReactNode }) => (\n  <div className=\"color-picker__heading\">{children}</div>\n);\n\nexport default PickerHeading;\n", "import { isTransparent } from \"../../utils\";\nimport type { ExcalidrawElement } from \"../../element/types\";\nimport type { AppState } from \"../../types\";\nimport { TopPicks } from \"./TopPicks\";\nimport { ButtonSeparator } from \"../ButtonSeparator\";\nimport { Picker } from \"./Picker\";\nimport * as Popover from \"@radix-ui/react-popover\";\nimport type { ColorPickerType } from \"./colorPickerUtils\";\nimport { activeColorPickerSectionAtom } from \"./colorPickerUtils\";\nimport { useExcalidrawContainer } from \"../App\";\nimport type { ColorTuple, ColorPaletteCustom } from \"../../colors\";\nimport { COLOR_PALETTE } from \"../../colors\";\nimport PickerHeading from \"./PickerHeading\";\nimport { t } from \"../../i18n\";\nimport clsx from \"clsx\";\nimport { useRef } from \"react\";\nimport { useAtom } from \"../../editor-jotai\";\nimport { ColorInput } from \"./ColorInput\";\nimport { activeEyeDropperAtom } from \"../EyeDropper\";\nimport { PropertiesPopover } from \"../PropertiesPopover\";\n\nimport \"./ColorPicker.scss\";\n\nconst isValidColor = (color: string) => {\n  const style = new Option().style;\n  style.color = color;\n  return !!style.color;\n};\n\nexport const getColor = (color: string): string | null => {\n  if (isTransparent(color)) {\n    return color;\n  }\n\n  // testing for `#` first fixes a bug on Electron (more specfically, an\n  // Obsidian popout window), where a hex color without `#` is (incorrectly)\n  // considered valid\n  return isValidColor(`#${color}`)\n    ? `#${color}`\n    : isValidColor(color)\n    ? color\n    : null;\n};\n\ninterface ColorPickerProps {\n  type: ColorPickerType;\n  color: string;\n  onChange: (color: string) => void;\n  label: string;\n  elements: readonly ExcalidrawElement[];\n  appState: AppState;\n  palette?: ColorPaletteCustom | null;\n  topPicks?: ColorTuple;\n  updateData: (formData?: any) => void;\n}\n\nconst ColorPickerPopupContent = ({\n  type,\n  color,\n  onChange,\n  label,\n  elements,\n  palette = COLOR_PALETTE,\n  updateData,\n}: Pick<\n  ColorPickerProps,\n  | \"type\"\n  | \"color\"\n  | \"onChange\"\n  | \"label\"\n  | \"elements\"\n  | \"palette\"\n  | \"updateData\"\n>) => {\n  const { container } = useExcalidrawContainer();\n  const [, setActiveColorPickerSection] = useAtom(activeColorPickerSectionAtom);\n\n  const [eyeDropperState, setEyeDropperState] = useAtom(activeEyeDropperAtom);\n\n  const colorInputJSX = (\n    <div>\n      <PickerHeading>{t(\"colorPicker.hexCode\")}</PickerHeading>\n      <ColorInput\n        color={color}\n        label={label}\n        onChange={(color) => {\n          onChange(color);\n        }}\n        colorPickerType={type}\n      />\n    </div>\n  );\n\n  const popoverRef = useRef<HTMLDivElement>(null);\n\n  const focusPickerContent = () => {\n    popoverRef.current\n      ?.querySelector<HTMLDivElement>(\".color-picker-content\")\n      ?.focus();\n  };\n\n  return (\n    <PropertiesPopover\n      container={container}\n      style={{ maxWidth: \"13rem\" }}\n      onFocusOutside={(event) => {\n        // refocus due to eye dropper\n        focusPickerContent();\n        event.preventDefault();\n      }}\n      onPointerDownOutside={(event) => {\n        if (eyeDropperState) {\n          // prevent from closing if we click outside the popover\n          // while eyedropping (e.g. click when clicking the sidebar;\n          // the eye-dropper-backdrop is prevented downstream)\n          event.preventDefault();\n        }\n      }}\n      onClose={() => {\n        updateData({ openPopup: null });\n        setActiveColorPickerSection(null);\n      }}\n    >\n      {palette ? (\n        <Picker\n          palette={palette}\n          color={color}\n          onChange={(changedColor) => {\n            onChange(changedColor);\n          }}\n          onEyeDropperToggle={(force) => {\n            setEyeDropperState((state) => {\n              if (force) {\n                state = state || {\n                  keepOpenOnAlt: true,\n                  onSelect: onChange,\n                  colorPickerType: type,\n                };\n                state.keepOpenOnAlt = true;\n                return state;\n              }\n\n              return force === false || state\n                ? null\n                : {\n                    keepOpenOnAlt: false,\n                    onSelect: onChange,\n                    colorPickerType: type,\n                  };\n            });\n          }}\n          onEscape={(event) => {\n            if (eyeDropperState) {\n              setEyeDropperState(null);\n            } else {\n              updateData({ openPopup: null });\n            }\n          }}\n          label={label}\n          type={type}\n          elements={elements}\n          updateData={updateData}\n        >\n          {colorInputJSX}\n        </Picker>\n      ) : (\n        colorInputJSX\n      )}\n    </PropertiesPopover>\n  );\n};\n\nconst ColorPickerTrigger = ({\n  label,\n  color,\n  type,\n}: {\n  color: string;\n  label: string;\n  type: ColorPickerType;\n}) => {\n  return (\n    <Popover.Trigger\n      type=\"button\"\n      className={clsx(\"color-picker__button active-color properties-trigger\", {\n        \"is-transparent\": color === \"transparent\" || !color,\n      })}\n      aria-label={label}\n      style={color ? { \"--swatch-color\": color } : undefined}\n      title={\n        type === \"elementStroke\"\n          ? t(\"labels.showStroke\")\n          : t(\"labels.showBackground\")\n      }\n    >\n      <div className=\"color-picker__button-outline\" />\n    </Popover.Trigger>\n  );\n};\n\nexport const ColorPicker = ({\n  type,\n  color,\n  onChange,\n  label,\n  elements,\n  palette = COLOR_PALETTE,\n  topPicks,\n  updateData,\n  appState,\n}: ColorPickerProps) => {\n  return (\n    <div>\n      <div role=\"dialog\" aria-modal=\"true\" className=\"color-picker-container\">\n        <TopPicks\n          activeColor={color}\n          onChange={onChange}\n          type={type}\n          topPicks={topPicks}\n        />\n        <ButtonSeparator />\n        <Popover.Root\n          open={appState.openPopup === type}\n          onOpenChange={(open) => {\n            updateData({ openPopup: open ? type : null });\n          }}\n        >\n          {/* serves as an active color indicator as well */}\n          <ColorPickerTrigger color={color} label={label} type={type} />\n          {/* popup content */}\n          {appState.openPopup === type && (\n            <ColorPickerPopupContent\n              type={type}\n              color={color}\n              onChange={onChange}\n              label={label}\n              elements={elements}\n              palette={palette}\n              updateData={updateData}\n            />\n          )}\n        </Popover.Root>\n      </div>\n    </div>\n  );\n};\n", "import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { getColor } from \"./ColorPicker\";\nimport type { ColorPickerType } from \"./colorPickerUtils\";\nimport { activeColorPickerSectionAtom } from \"./colorPickerUtils\";\nimport { eyeDropperIcon } from \"../icons\";\nimport { useAtom } from \"../../editor-jotai\";\nimport { KEYS } from \"../../keys\";\nimport { activeEyeDropperAtom } from \"../EyeDropper\";\nimport clsx from \"clsx\";\nimport { t } from \"../../i18n\";\nimport { useDevice } from \"../App\";\nimport { getShortcutKey } from \"../../utils\";\n\ninterface ColorInputProps {\n  color: string;\n  onChange: (color: string) => void;\n  label: string;\n  colorPickerType: ColorPickerType;\n}\n\nexport const ColorInput = ({\n  color,\n  onChange,\n  label,\n  colorPickerType,\n}: ColorInputProps) => {\n  const device = useDevice();\n  const [innerValue, setInnerValue] = useState(color);\n  const [activeSection, setActiveColorPickerSection] = useAtom(\n    activeColorPickerSectionAtom,\n  );\n\n  useEffect(() => {\n    setInnerValue(color);\n  }, [color]);\n\n  const changeColor = useCallback(\n    (inputValue: string) => {\n      const value = inputValue.toLowerCase();\n      const color = getColor(value);\n\n      if (color) {\n        onChange(color);\n      }\n      setInnerValue(value);\n    },\n    [onChange],\n  );\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const eyeDropperTriggerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [activeSection]);\n\n  const [eyeDropperState, setEyeDropperState] = useAtom(activeEyeDropperAtom);\n\n  useEffect(() => {\n    return () => {\n      setEyeDropperState(null);\n    };\n  }, [setEyeDropperState]);\n\n  return (\n    <div className=\"color-picker__input-label\">\n      <div className=\"color-picker__input-hash\">#</div>\n      <input\n        ref={activeSection === \"hex\" ? inputRef : undefined}\n        style={{ border: 0, padding: 0 }}\n        spellCheck={false}\n        className=\"color-picker-input\"\n        aria-label={label}\n        onChange={(event) => {\n          changeColor(event.target.value);\n        }}\n        value={(innerValue || \"\").replace(/^#/, \"\")}\n        onBlur={() => {\n          setInnerValue(color);\n        }}\n        tabIndex={-1}\n        onFocus={() => setActiveColorPickerSection(\"hex\")}\n        onKeyDown={(event) => {\n          if (event.key === KEYS.TAB) {\n            return;\n          } else if (event.key === KEYS.ESCAPE) {\n            eyeDropperTriggerRef.current?.focus();\n          }\n          event.stopPropagation();\n        }}\n      />\n      {/* TODO reenable on mobile with a better UX */}\n      {!device.editor.isMobile && (\n        <>\n          <div\n            style={{\n              width: \"1px\",\n              height: \"1.25rem\",\n              backgroundColor: \"var(--default-border-color)\",\n            }}\n          />\n          <div\n            ref={eyeDropperTriggerRef}\n            className={clsx(\"excalidraw-eye-dropper-trigger\", {\n              selected: eyeDropperState,\n            })}\n            onClick={() =>\n              setEyeDropperState((s) =>\n                s\n                  ? null\n                  : {\n                      keepOpenOnAlt: false,\n                      onSelect: (color) => onChange(color),\n                      colorPickerType,\n                    },\n              )\n            }\n            title={`${t(\n              \"labels.eyeDropper\",\n            )} \u2014 ${KEYS.I.toLocaleUpperCase()} or ${getShortcutKey(\"Alt\")} `}\n          >\n            {eyeDropperIcon}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n", "import { useEffect, useRef } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { rgbToHex } from \"../colors\";\nimport { EVENT } from \"../constants\";\nimport { useUIAppState } from \"../context/ui-appState\";\nimport { useCreatePortalContainer } from \"../hooks/useCreatePortalContainer\";\nimport { useOutsideClick } from \"../hooks/useOutsideClick\";\nimport { KEYS } from \"../keys\";\nimport { getSelectedElements } from \"../scene\";\nimport { useApp, useExcalidrawContainer, useExcalidrawElements } from \"./App\";\nimport { useStable } from \"../hooks/useStable\";\n\nimport \"./EyeDropper.scss\";\nimport type { ColorPickerType } from \"./ColorPicker/colorPickerUtils\";\nimport type { ExcalidrawElement } from \"../element/types\";\nimport { atom } from \"../editor-jotai\";\n\nexport type EyeDropperProperties = {\n  keepOpenOnAlt: boolean;\n  swapPreviewOnAlt?: boolean;\n  /** called when user picks color (on pointerup) */\n  onSelect: (color: string, event: PointerEvent) => void;\n  /**\n   * property of selected elements to update live when alt-dragging.\n   * Supply `null` if not applicable (e.g. updating the canvas bg instead of\n   * elements)\n   **/\n  colorPickerType: ColorPickerType;\n};\n\nexport const activeEyeDropperAtom = atom<null | EyeDropperProperties>(null);\n\nexport const EyeDropper: React.FC<{\n  onCancel: () => void;\n  onSelect: EyeDropperProperties[\"onSelect\"];\n  /** called when color changes, on pointerdown for preview */\n  onChange: (\n    type: ColorPickerType,\n    color: string,\n    selectedElements: ExcalidrawElement[],\n    event: { altKey: boolean },\n  ) => void;\n  colorPickerType: EyeDropperProperties[\"colorPickerType\"];\n}> = ({ onCancel, onChange, onSelect, colorPickerType }) => {\n  const eyeDropperContainer = useCreatePortalContainer({\n    className: \"excalidraw-eye-dropper-backdrop\",\n    parentSelector: \".excalidraw-eye-dropper-container\",\n  });\n  const appState = useUIAppState();\n  const elements = useExcalidrawElements();\n  const app = useApp();\n\n  const selectedElements = getSelectedElements(elements, appState);\n\n  const stableProps = useStable({\n    app,\n    onCancel,\n    onChange,\n    onSelect,\n    selectedElements,\n  });\n\n  const { container: excalidrawContainer } = useExcalidrawContainer();\n\n  useEffect(() => {\n    const colorPreviewDiv = ref.current;\n\n    if (!colorPreviewDiv || !app.canvas || !eyeDropperContainer) {\n      return;\n    }\n\n    let isHoldingPointerDown = false;\n\n    const ctx = app.canvas.getContext(\"2d\")!;\n\n    const getCurrentColor = ({\n      clientX,\n      clientY,\n    }: {\n      clientX: number;\n      clientY: number;\n    }) => {\n      const pixel = ctx.getImageData(\n        (clientX - appState.offsetLeft) * window.devicePixelRatio,\n        (clientY - appState.offsetTop) * window.devicePixelRatio,\n        1,\n        1,\n      ).data;\n\n      return rgbToHex(pixel[0], pixel[1], pixel[2]);\n    };\n\n    const mouseMoveListener = ({\n      clientX,\n      clientY,\n      altKey,\n    }: {\n      clientX: number;\n      clientY: number;\n      altKey: boolean;\n    }) => {\n      // FIXME swap offset when the preview gets outside viewport\n      colorPreviewDiv.style.top = `${clientY + 20}px`;\n      colorPreviewDiv.style.left = `${clientX + 20}px`;\n\n      const currentColor = getCurrentColor({ clientX, clientY });\n\n      if (isHoldingPointerDown) {\n        stableProps.onChange(\n          colorPickerType,\n          currentColor,\n          stableProps.selectedElements,\n          { altKey },\n        );\n      }\n\n      colorPreviewDiv.style.background = currentColor;\n    };\n\n    const onCancel = () => {\n      stableProps.onCancel();\n    };\n\n    const onSelect: Required<EyeDropperProperties>[\"onSelect\"] = (\n      color,\n      event,\n    ) => {\n      stableProps.onSelect(color, event);\n    };\n\n    const pointerDownListener = (event: PointerEvent) => {\n      isHoldingPointerDown = true;\n      // NOTE we can't event.preventDefault() as that would stop\n      // pointermove events\n      event.stopImmediatePropagation();\n    };\n\n    const pointerUpListener = (event: PointerEvent) => {\n      isHoldingPointerDown = false;\n\n      // since we're not preventing default on pointerdown, the focus would\n      // goes back to `body` so we want to refocus the editor container instead\n      excalidrawContainer?.focus();\n\n      event.stopImmediatePropagation();\n      event.preventDefault();\n\n      onSelect(getCurrentColor(event), event);\n    };\n\n    const keyDownListener = (event: KeyboardEvent) => {\n      if (event.key === KEYS.ESCAPE) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        onCancel();\n      }\n    };\n\n    // -------------------------------------------------------------------------\n\n    eyeDropperContainer.tabIndex = -1;\n    // focus container so we can listen on keydown events\n    eyeDropperContainer.focus();\n\n    // init color preview else it would show only after the first mouse move\n    mouseMoveListener({\n      clientX: stableProps.app.lastViewportPosition.x,\n      clientY: stableProps.app.lastViewportPosition.y,\n      altKey: false,\n    });\n\n    eyeDropperContainer.addEventListener(EVENT.KEYDOWN, keyDownListener);\n    eyeDropperContainer.addEventListener(\n      EVENT.POINTER_DOWN,\n      pointerDownListener,\n    );\n    eyeDropperContainer.addEventListener(EVENT.POINTER_UP, pointerUpListener);\n    window.addEventListener(\"pointermove\", mouseMoveListener, {\n      passive: true,\n    });\n    window.addEventListener(EVENT.BLUR, onCancel);\n\n    return () => {\n      isHoldingPointerDown = false;\n      eyeDropperContainer.removeEventListener(EVENT.KEYDOWN, keyDownListener);\n      eyeDropperContainer.removeEventListener(\n        EVENT.POINTER_DOWN,\n        pointerDownListener,\n      );\n      eyeDropperContainer.removeEventListener(\n        EVENT.POINTER_UP,\n        pointerUpListener,\n      );\n      window.removeEventListener(\"pointermove\", mouseMoveListener);\n      window.removeEventListener(EVENT.BLUR, onCancel);\n    };\n  }, [\n    stableProps,\n    app.canvas,\n    eyeDropperContainer,\n    colorPickerType,\n    excalidrawContainer,\n    appState.offsetLeft,\n    appState.offsetTop,\n  ]);\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOutsideClick(\n    ref,\n    () => {\n      onCancel();\n    },\n    (event) => {\n      if (\n        event.target.closest(\n          \".excalidraw-eye-dropper-trigger, .excalidraw-eye-dropper-backdrop\",\n        )\n      ) {\n        return true;\n      }\n      // consider all other clicks as outside\n      return false;\n    },\n  );\n\n  if (!eyeDropperContainer) {\n    return null;\n  }\n\n  return createPortal(\n    <div ref={ref} className=\"excalidraw-eye-dropper-preview\" />,\n    eyeDropperContainer,\n  );\n};\n", "import React from \"react\";\nimport type { UIAppState } from \"../types\";\n\nexport const UIAppStateContext = React.createContext<UIAppState>(null!);\nexport const useUIAppState = () => React.useContext(UIAppStateContext);\n", "import { useState, useLayoutEffect } from \"react\";\nimport { useDevice, useExcalidrawContainer } from \"../components/App\";\nimport { THEME } from \"../constants\";\nimport { useUIAppState } from \"../context/ui-appState\";\n\nexport const useCreatePortalContainer = (opts?: {\n  className?: string;\n  parentSelector?: string;\n}) => {\n  const [div, setDiv] = useState<HTMLDivElement | null>(null);\n\n  const device = useDevice();\n  const { theme } = useUIAppState();\n\n  const { container: excalidrawContainer } = useExcalidrawContainer();\n\n  useLayoutEffect(() => {\n    if (div) {\n      div.className = \"\";\n      div.classList.add(\"excalidraw\", ...(opts?.className?.split(/\\s+/) || []));\n      div.classList.toggle(\"excalidraw--mobile\", device.editor.isMobile);\n      div.classList.toggle(\"theme--dark\", theme === THEME.DARK);\n    }\n  }, [div, theme, device.editor.isMobile, opts?.className]);\n\n  useLayoutEffect(() => {\n    const container = opts?.parentSelector\n      ? excalidrawContainer?.querySelector(opts.parentSelector)\n      : document.body;\n\n    if (!container) {\n      return;\n    }\n\n    const div = document.createElement(\"div\");\n\n    container.appendChild(div);\n\n    setDiv(div);\n\n    return () => {\n      container.removeChild(div);\n    };\n  }, [excalidrawContainer, opts?.parentSelector]);\n\n  return div;\n};\n", "import { useEffect } from \"react\";\nimport { EVENT } from \"../constants\";\n\nexport function useOutsideClick<T extends HTMLElement>(\n  ref: React.RefObject<T | null>,\n  /** if performance is of concern, memoize the callback */\n  callback: (event: Event) => void,\n  /**\n   * Optional callback which is called on every click.\n   *\n   * Should return `true` if click should be considered as inside the container,\n   * and `false` if it falls outside and should call the `callback`.\n   *\n   * Returning `true` overrides the default behavior and `callback` won't be\n   * called.\n   *\n   * Returning `undefined` will fallback to the default behavior.\n   */\n  isInside?: (\n    event: Event & { target: HTMLElement },\n    /** the element of the passed ref */\n    container: T,\n  ) => boolean | undefined,\n) {\n  useEffect(() => {\n    function onOutsideClick(event: Event) {\n      const _event = event as Event & { target: T };\n\n      if (!ref.current) {\n        return;\n      }\n\n      const isInsideOverride = isInside?.(_event, ref.current);\n\n      if (isInsideOverride === true) {\n        return;\n      } else if (isInsideOverride === false) {\n        return callback(_event);\n      }\n\n      // clicked element is in the descenendant of the target container\n      if (\n        ref.current.contains(_event.target) ||\n        // target is detached from DOM (happens when the element is removed\n        // on a pointerup event fired *before* this handler's pointerup is\n        // dispatched)\n        !document.documentElement.contains(_event.target)\n      ) {\n        return;\n      }\n\n      const isClickOnRadixPortal =\n        _event.target.closest(\"[data-radix-portal]\") ||\n        // when radix popup is in \"modal\" mode, it disables pointer events on\n        // the `body` element, so the target element is going to be the `html`\n        // (note: this won't work if we selectively re-enable pointer events on\n        // specific elements as we do with navbar or excalidraw UI elements)\n        (_event.target === document.documentElement &&\n          document.body.style.pointerEvents === \"none\");\n\n      // if clicking on radix portal, assume it's a popup that\n      // should be considered as part of the UI. Obviously this is a terrible\n      // hack you can end up click on radix popups that outside the tree,\n      // but it works for most cases and the downside is minimal for now\n      if (isClickOnRadixPortal) {\n        return;\n      }\n\n      // clicking on a container that ignores outside clicks\n      if (_event.target.closest(\"[data-prevent-outside-click]\")) {\n        return;\n      }\n\n      callback(_event);\n    }\n\n    // note: don't use `click` because it often reports incorrect `event.target`\n    document.addEventListener(EVENT.POINTER_DOWN, onOutsideClick);\n    document.addEventListener(EVENT.TOUCH_START, onOutsideClick);\n\n    return () => {\n      document.removeEventListener(EVENT.POINTER_DOWN, onOutsideClick);\n      document.removeEventListener(EVENT.TOUCH_START, onOutsideClick);\n    };\n  }, [ref, callback, isInside]);\n}\n", "import { useRef } from \"react\";\n\nexport const useStable = <T extends Record<string, any>>(value: T) => {\n  const ref = useRef<T>(value);\n  Object.assign(ref.current, value);\n  return ref.current;\n};\n", "import React, { type ReactNode } from \"react\";\nimport clsx from \"clsx\";\nimport * as Popover from \"@radix-ui/react-popover\";\n\nimport { useDevice } from \"./App\";\nimport { Island } from \"./Island\";\nimport { isInteractive } from \"../utils\";\n\ninterface PropertiesPopoverProps {\n  className?: string;\n  container: HTMLDivElement | null;\n  children: ReactNode;\n  style?: object;\n  onClose: () => void;\n  onKeyDown?: React.KeyboardEventHandler<HTMLDivElement>;\n  onPointerLeave?: React.PointerEventHandler<HTMLDivElement>;\n  onFocusOutside?: Popover.PopoverContentProps[\"onFocusOutside\"];\n  onPointerDownOutside?: Popover.PopoverContentProps[\"onPointerDownOutside\"];\n}\n\nexport const PropertiesPopover = React.forwardRef<\n  HTMLDivElement,\n  PropertiesPopoverProps\n>(\n  (\n    {\n      className,\n      container,\n      children,\n      style,\n      onClose,\n      onKeyDown,\n      onFocusOutside,\n      onPointerLeave,\n      onPointerDownOutside,\n    },\n    ref,\n  ) => {\n    const device = useDevice();\n\n    return (\n      <Popover.Portal container={container}>\n        <Popover.Content\n          ref={ref}\n          className={clsx(\"focus-visible-none\", className)}\n          data-prevent-outside-click\n          side={\n            device.editor.isMobile && !device.viewport.isLandscape\n              ? \"bottom\"\n              : \"right\"\n          }\n          align={\n            device.editor.isMobile && !device.viewport.isLandscape\n              ? \"center\"\n              : \"start\"\n          }\n          alignOffset={-16}\n          sideOffset={20}\n          style={{\n            zIndex: \"var(--zIndex-popup)\",\n          }}\n          onPointerLeave={onPointerLeave}\n          onKeyDown={onKeyDown}\n          onFocusOutside={onFocusOutside}\n          onPointerDownOutside={onPointerDownOutside}\n          onCloseAutoFocus={(e) => {\n            e.stopPropagation();\n            // prevents focusing the trigger\n            e.preventDefault();\n\n            // return focus to excalidraw container unless\n            // user focuses an interactive element, such as a button, or\n            // enters the text editor by clicking on canvas with the text tool\n            if (container && !isInteractive(document.activeElement)) {\n              container.focus();\n            }\n\n            onClose();\n          }}\n        >\n          <Island padding={3} style={style}>\n            {children}\n          </Island>\n          <Popover.Arrow\n            width={20}\n            height={10}\n            style={{\n              fill: \"var(--popup-bg-color)\",\n              filter: \"drop-shadow(rgba(0, 0, 0, 0.05) 0px 3px 2px)\",\n            }}\n          />\n        </Popover.Content>\n      </Popover.Portal>\n    );\n  },\n);\n", "import \"./Island.scss\";\n\nimport React from \"react\";\nimport clsx from \"clsx\";\n\ntype IslandProps = {\n  children: React.ReactNode;\n  padding?: number;\n  className?: string | boolean;\n  style?: object;\n};\n\nexport const Island = React.forwardRef<HTMLDivElement, IslandProps>(\n  ({ children, padding, className, style }, ref) => (\n    <div\n      className={clsx(\"Island\", className)}\n      style={{ \"--padding\": padding, ...style }}\n      ref={ref}\n    >\n      {children}\n    </div>\n  ),\n);\n", "import type { JSX } from \"react\";\nimport React, { useEffect } from \"react\";\nimport * as Popover from \"@radix-ui/react-popover\";\nimport { isArrowKey, KEYS } from \"../keys\";\nimport { getLanguage, t } from \"../i18n\";\nimport clsx from \"clsx\";\nimport Collapsible from \"./Stats/Collapsible\";\nimport { atom, useAtom } from \"../editor-jotai\";\nimport { useDevice } from \"./App\";\n\nimport \"./IconPicker.scss\";\n\nconst moreOptionsAtom = atom(false);\n\ntype Option<T> = {\n  value: T;\n  text: string;\n  icon: JSX.Element;\n  keyBinding: string | null;\n};\n\nfunction Picker<T>({\n  options,\n  value,\n  label,\n  onChange,\n  onClose,\n  numberOfOptionsToAlwaysShow = options.length,\n}: {\n  label: string;\n  value: T;\n  options: readonly Option<T>[];\n  onChange: (value: T) => void;\n  onClose: () => void;\n  numberOfOptionsToAlwaysShow?: number;\n}) {\n  const device = useDevice();\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    const pressedOption = options.find(\n      (option) => option.keyBinding === event.key.toLowerCase(),\n    )!;\n\n    if (!(event.metaKey || event.altKey || event.ctrlKey) && pressedOption) {\n      // Keybinding navigation\n      onChange(pressedOption.value);\n\n      event.preventDefault();\n    } else if (event.key === KEYS.TAB) {\n      const index = options.findIndex((option) => option.value === value);\n      const nextIndex = event.shiftKey\n        ? (options.length + index - 1) % options.length\n        : (index + 1) % options.length;\n      onChange(options[nextIndex].value);\n    } else if (isArrowKey(event.key)) {\n      // Arrow navigation\n      const isRTL = getLanguage().rtl;\n      const index = options.findIndex((option) => option.value === value);\n      if (index !== -1) {\n        const length = options.length;\n        let nextIndex = index;\n\n        switch (event.key) {\n          // Select the next option\n          case isRTL ? KEYS.ARROW_LEFT : KEYS.ARROW_RIGHT:\n            nextIndex = (index + 1) % length;\n            break;\n          // Select the previous option\n          case isRTL ? KEYS.ARROW_RIGHT : KEYS.ARROW_LEFT:\n            nextIndex = (length + index - 1) % length;\n            break;\n          // Go the next row\n          case KEYS.ARROW_DOWN: {\n            nextIndex = (index + (numberOfOptionsToAlwaysShow ?? 1)) % length;\n            break;\n          }\n          // Go the previous row\n          case KEYS.ARROW_UP: {\n            nextIndex =\n              (length + index - (numberOfOptionsToAlwaysShow ?? 1)) % length;\n            break;\n          }\n        }\n\n        onChange(options[nextIndex].value);\n      }\n      event.preventDefault();\n    } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) {\n      // Close on escape or enter\n      event.preventDefault();\n      onClose();\n    }\n    event.nativeEvent.stopImmediatePropagation();\n    event.stopPropagation();\n  };\n\n  const [showMoreOptions, setShowMoreOptions] = useAtom(moreOptionsAtom);\n\n  const alwaysVisibleOptions = React.useMemo(\n    () => options.slice(0, numberOfOptionsToAlwaysShow),\n    [options, numberOfOptionsToAlwaysShow],\n  );\n  const moreOptions = React.useMemo(\n    () => options.slice(numberOfOptionsToAlwaysShow),\n    [options, numberOfOptionsToAlwaysShow],\n  );\n\n  useEffect(() => {\n    if (!alwaysVisibleOptions.some((option) => option.value === value)) {\n      setShowMoreOptions(true);\n    }\n  }, [value, alwaysVisibleOptions, setShowMoreOptions]);\n\n  const renderOptions = (options: Option<T>[]) => {\n    return (\n      <div className=\"picker-content\">\n        {options.map((option, i) => (\n          <button\n            type=\"button\"\n            className={clsx(\"picker-option\", {\n              active: value === option.value,\n            })}\n            onClick={(event) => {\n              onChange(option.value);\n            }}\n            title={`${option.text} ${\n              option.keyBinding && `\u2014 ${option.keyBinding.toUpperCase()}`\n            }`}\n            aria-label={option.text || \"none\"}\n            aria-keyshortcuts={option.keyBinding || undefined}\n            key={option.text}\n            ref={(ref) => {\n              if (value === option.value) {\n                // Use a timeout here to render focus properly\n                setTimeout(() => {\n                  ref?.focus();\n                }, 0);\n              }\n            }}\n          >\n            {option.icon}\n            {option.keyBinding && (\n              <span className=\"picker-keybinding\">{option.keyBinding}</span>\n            )}\n          </button>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <Popover.Content\n      side={\n        device.editor.isMobile && !device.viewport.isLandscape\n          ? \"top\"\n          : \"bottom\"\n      }\n      align=\"start\"\n      sideOffset={12}\n      style={{ zIndex: \"var(--zIndex-popup)\" }}\n      onKeyDown={handleKeyDown}\n    >\n      <div\n        className={`picker`}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-label={label}\n      >\n        {renderOptions(alwaysVisibleOptions)}\n\n        {moreOptions.length > 0 && (\n          <Collapsible\n            label={t(\"labels.more_options\")}\n            open={showMoreOptions}\n            openTrigger={() => {\n              setShowMoreOptions((value) => !value);\n            }}\n            className=\"picker-collapsible\"\n          >\n            {renderOptions(moreOptions)}\n          </Collapsible>\n        )}\n      </div>\n    </Popover.Content>\n  );\n}\n\nexport function IconPicker<T>({\n  value,\n  label,\n  options,\n  onChange,\n  group = \"\",\n  numberOfOptionsToAlwaysShow,\n}: {\n  label: string;\n  value: T;\n  options: readonly {\n    value: T;\n    text: string;\n    icon: JSX.Element;\n    keyBinding: string | null;\n  }[];\n  onChange: (value: T) => void;\n  numberOfOptionsToAlwaysShow?: number;\n  group?: string;\n}) {\n  const [isActive, setActive] = React.useState(false);\n  const rPickerButton = React.useRef<any>(null);\n\n  return (\n    <div>\n      <Popover.Root open={isActive} onOpenChange={(open) => setActive(open)}>\n        <Popover.Trigger\n          name={group}\n          type=\"button\"\n          aria-label={label}\n          onClick={() => setActive(!isActive)}\n          ref={rPickerButton}\n          className={isActive ? \"active\" : \"\"}\n        >\n          {options.find((option) => option.value === value)?.icon}\n        </Popover.Trigger>\n        {isActive && (\n          <Picker\n            options={options}\n            value={value}\n            label={label}\n            onChange={onChange}\n            onClose={() => {\n              setActive(false);\n            }}\n            numberOfOptionsToAlwaysShow={numberOfOptionsToAlwaysShow}\n          />\n        )}\n      </Popover.Root>\n    </div>\n  );\n}\n", "export const InlineIcon = ({ icon }: { icon: React.ReactNode }) => {\n  return (\n    <span\n      style={{\n        width: \"1em\",\n        margin: \"0 0.5ex 0 0.5ex\",\n        display: \"inline-block\",\n        lineHeight: 0,\n        verticalAlign: \"middle\",\n      }}\n    >\n      {icon}\n    </span>\n  );\n};\n", "import { InlineIcon } from \"../InlineIcon\";\nimport { collapseDownIcon, collapseUpIcon } from \"../icons\";\n\ninterface CollapsibleProps {\n  label: React.ReactNode;\n  // having it controlled so that the state is managed outside\n  // this is to keep the user's previous choice even when the\n  // Collapsible is unmounted\n  open: boolean;\n  openTrigger: () => void;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst Collapsible = ({\n  label,\n  open,\n  openTrigger,\n  children,\n  className,\n}: CollapsibleProps) => {\n  return (\n    <>\n      <div\n        style={{\n          cursor: \"pointer\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n        className={className}\n        onClick={openTrigger}\n      >\n        {label}\n        <InlineIcon icon={open ? collapseUpIcon : collapseDownIcon} />\n      </div>\n      {open && (\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          {children}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Collapsible;\n", "import React, { useCallback, useMemo } from \"react\";\nimport * as Popover from \"@radix-ui/react-popover\";\n\nimport { FontPickerList } from \"./FontPickerList\";\nimport { FontPickerTrigger } from \"./FontPickerTrigger\";\nimport { ButtonIconSelect } from \"../ButtonIconSelect\";\nimport {\n  FontFamilyCodeIcon,\n  FontFamilyNormalIcon,\n  FreedrawIcon,\n} from \"../icons\";\nimport { ButtonSeparator } from \"../ButtonSeparator\";\nimport type { FontFamilyValues } from \"../../element/types\";\nimport { FONT_FAMILY } from \"../../constants\";\nimport { t } from \"../../i18n\";\n\nimport \"./FontPicker.scss\";\n\nexport const DEFAULT_FONTS = [\n  {\n    value: FONT_FAMILY.Excalifont,\n    icon: FreedrawIcon,\n    text: t(\"labels.handDrawn\"),\n    testId: \"font-family-hand-drawn\",\n  },\n  {\n    value: FONT_FAMILY.Nunito,\n    icon: FontFamilyNormalIcon,\n    text: t(\"labels.normal\"),\n    testId: \"font-family-normal\",\n  },\n  {\n    value: FONT_FAMILY[\"Comic Shanns\"],\n    icon: FontFamilyCodeIcon,\n    text: t(\"labels.code\"),\n    testId: \"font-family-code\",\n  },\n];\n\nconst defaultFontFamilies = new Set(DEFAULT_FONTS.map((x) => x.value));\n\nexport const isDefaultFont = (fontFamily: number | null) => {\n  if (!fontFamily) {\n    return false;\n  }\n\n  return defaultFontFamilies.has(fontFamily);\n};\n\ninterface FontPickerProps {\n  isOpened: boolean;\n  selectedFontFamily: FontFamilyValues | null;\n  hoveredFontFamily: FontFamilyValues | null;\n  onSelect: (fontFamily: FontFamilyValues) => void;\n  onHover: (fontFamily: FontFamilyValues) => void;\n  onLeave: () => void;\n  onPopupChange: (open: boolean) => void;\n}\n\nexport const FontPicker = React.memo(\n  ({\n    isOpened,\n    selectedFontFamily,\n    hoveredFontFamily,\n    onSelect,\n    onHover,\n    onLeave,\n    onPopupChange,\n  }: FontPickerProps) => {\n    const defaultFonts = useMemo(() => DEFAULT_FONTS, []);\n    const onSelectCallback = useCallback(\n      (value: number | false) => {\n        if (value) {\n          onSelect(value);\n        }\n      },\n      [onSelect],\n    );\n\n    return (\n      <div role=\"dialog\" aria-modal=\"true\" className=\"FontPicker__container\">\n        <ButtonIconSelect<FontFamilyValues | false>\n          type=\"button\"\n          options={defaultFonts}\n          value={selectedFontFamily}\n          onClick={onSelectCallback}\n        />\n        <ButtonSeparator />\n        <Popover.Root open={isOpened} onOpenChange={onPopupChange}>\n          <FontPickerTrigger selectedFontFamily={selectedFontFamily} />\n          {isOpened && (\n            <FontPickerList\n              selectedFontFamily={selectedFontFamily}\n              hoveredFontFamily={hoveredFontFamily}\n              onSelect={onSelectCallback}\n              onHover={onHover}\n              onLeave={onLeave}\n              onOpen={() => onPopupChange(true)}\n              onClose={() => onPopupChange(false)}\n            />\n          )}\n        </Popover.Root>\n      </div>\n    );\n  },\n  (prev, next) =>\n    prev.isOpened === next.isOpened &&\n    prev.selectedFontFamily === next.selectedFontFamily &&\n    prev.hoveredFontFamily === next.hoveredFontFamily,\n);\n", "import type { JSX } from \"react\";\nimport React, {\n  useMemo,\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n  type KeyboardEventHandler,\n} from \"react\";\nimport { useApp, useAppProps, useExcalidrawContainer } from \"../App\";\nimport { PropertiesPopover } from \"../PropertiesPopover\";\nimport { QuickSearch } from \"../QuickSearch\";\nimport { ScrollableList } from \"../ScrollableList\";\nimport DropdownMenuGroup from \"../dropdownMenu/DropdownMenuGroup\";\nimport DropdownMenuItem, {\n  DropDownMenuItemBadgeType,\n  DropDownMenuItemBadge,\n} from \"../dropdownMenu/DropdownMenuItem\";\nimport { type FontFamilyValues } from \"../../element/types\";\nimport { arrayToList, debounce, getFontFamilyString } from \"../../utils\";\nimport { t } from \"../../i18n\";\nimport { fontPickerKeyHandler } from \"./keyboardNavHandlers\";\nimport { Fonts } from \"../../fonts\";\nimport type { ValueOf } from \"../../utility-types\";\nimport { FontFamilyNormalIcon } from \"../icons\";\n\nexport interface FontDescriptor {\n  value: number;\n  icon: JSX.Element;\n  text: string;\n  deprecated?: true;\n  badge?: {\n    type: ValueOf<typeof DropDownMenuItemBadgeType>;\n    placeholder: string;\n  };\n}\n\ninterface FontPickerListProps {\n  selectedFontFamily: FontFamilyValues | null;\n  hoveredFontFamily: FontFamilyValues | null;\n  onSelect: (value: number) => void;\n  onHover: (value: number) => void;\n  onLeave: () => void;\n  onOpen: () => void;\n  onClose: () => void;\n}\n\nexport const FontPickerList = React.memo(\n  ({\n    selectedFontFamily,\n    hoveredFontFamily,\n    onSelect,\n    onHover,\n    onLeave,\n    onOpen,\n    onClose,\n  }: FontPickerListProps) => {\n    const { container } = useExcalidrawContainer();\n    const { fonts } = useApp();\n    const { showDeprecatedFonts } = useAppProps();\n\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const inputRef = useRef<HTMLInputElement>(null);\n    const allFonts = useMemo(\n      () =>\n        Array.from(Fonts.registered.entries())\n          .filter(\n            ([_, { metadata }]) => !metadata.serverSide && !metadata.fallback,\n          )\n          .map(([familyId, { metadata, fontFaces }]) => {\n            const fontDescriptor = {\n              value: familyId,\n              icon: metadata.icon ?? FontFamilyNormalIcon,\n              text: fontFaces[0]?.fontFace?.family ?? \"Unknown\",\n            };\n\n            if (metadata.deprecated) {\n              Object.assign(fontDescriptor, {\n                deprecated: metadata.deprecated,\n                badge: {\n                  type: DropDownMenuItemBadgeType.RED,\n                  placeholder: t(\"fontList.badge.old\"),\n                },\n              });\n            }\n\n            return fontDescriptor as FontDescriptor;\n          })\n          .sort((a, b) =>\n            a.text.toLowerCase() > b.text.toLowerCase() ? 1 : -1,\n          ),\n      [],\n    );\n\n    const sceneFamilies = useMemo(\n      () => new Set(fonts.getSceneFamilies()),\n      // cache per selected font family, so hover re-render won't mess it up\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [selectedFontFamily],\n    );\n\n    const sceneFonts = useMemo(\n      () => allFonts.filter((font) => sceneFamilies.has(font.value)), // always show all the fonts in the scene, even those that were deprecated\n      [allFonts, sceneFamilies],\n    );\n\n    const availableFonts = useMemo(\n      () =>\n        allFonts.filter(\n          (font) =>\n            !sceneFamilies.has(font.value) &&\n            (showDeprecatedFonts || !font.deprecated), // skip deprecated fonts\n        ),\n      [allFonts, sceneFamilies, showDeprecatedFonts],\n    );\n\n    const filteredFonts = useMemo(\n      () =>\n        arrayToList(\n          [...sceneFonts, ...availableFonts].filter((font) =>\n            font.text?.toLowerCase().includes(searchTerm),\n          ),\n        ),\n      [sceneFonts, availableFonts, searchTerm],\n    );\n\n    const hoveredFont = useMemo(() => {\n      let font;\n\n      if (hoveredFontFamily) {\n        font = filteredFonts.find((font) => font.value === hoveredFontFamily);\n      } else if (selectedFontFamily) {\n        font = filteredFonts.find((font) => font.value === selectedFontFamily);\n      }\n\n      if (!font && searchTerm) {\n        if (filteredFonts[0]?.value) {\n          // hover first element on search\n          onHover(filteredFonts[0].value);\n        } else {\n          // re-render cache on no results\n          onLeave();\n        }\n      }\n\n      return font;\n    }, [\n      hoveredFontFamily,\n      selectedFontFamily,\n      searchTerm,\n      filteredFonts,\n      onHover,\n      onLeave,\n    ]);\n\n    const onKeyDown = useCallback<KeyboardEventHandler<HTMLDivElement>>(\n      (event) => {\n        const handled = fontPickerKeyHandler({\n          event,\n          inputRef,\n          hoveredFont,\n          filteredFonts,\n          onSelect,\n          onHover,\n          onClose,\n        });\n\n        if (handled) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      },\n      [hoveredFont, filteredFonts, onSelect, onHover, onClose],\n    );\n\n    useEffect(() => {\n      onOpen();\n\n      return () => {\n        onClose();\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const sceneFilteredFonts = useMemo(\n      () => filteredFonts.filter((font) => sceneFamilies.has(font.value)),\n      [filteredFonts, sceneFamilies],\n    );\n\n    const availableFilteredFonts = useMemo(\n      () => filteredFonts.filter((font) => !sceneFamilies.has(font.value)),\n      [filteredFonts, sceneFamilies],\n    );\n\n    const renderFont = (font: FontDescriptor, index: number) => (\n      <DropdownMenuItem\n        key={font.value}\n        icon={font.icon}\n        value={font.value}\n        order={index}\n        textStyle={{\n          fontFamily: getFontFamilyString({ fontFamily: font.value }),\n        }}\n        hovered={font.value === hoveredFont?.value}\n        selected={font.value === selectedFontFamily}\n        // allow to tab between search and selected font\n        tabIndex={font.value === selectedFontFamily ? 0 : -1}\n        onClick={(e) => {\n          onSelect(Number(e.currentTarget.value));\n        }}\n        onMouseMove={() => {\n          if (hoveredFont?.value !== font.value) {\n            onHover(font.value);\n          }\n        }}\n      >\n        {font.text}\n        {font.badge && (\n          <DropDownMenuItemBadge type={font.badge.type}>\n            {font.badge.placeholder}\n          </DropDownMenuItemBadge>\n        )}\n      </DropdownMenuItem>\n    );\n\n    const groups = [];\n\n    if (sceneFilteredFonts.length) {\n      groups.push(\n        <DropdownMenuGroup title={t(\"fontList.sceneFonts\")} key=\"group_1\">\n          {sceneFilteredFonts.map(renderFont)}\n        </DropdownMenuGroup>,\n      );\n    }\n\n    if (availableFilteredFonts.length) {\n      groups.push(\n        <DropdownMenuGroup title={t(\"fontList.availableFonts\")} key=\"group_2\">\n          {availableFilteredFonts.map((font, index) =>\n            renderFont(font, index + sceneFilteredFonts.length),\n          )}\n        </DropdownMenuGroup>,\n      );\n    }\n\n    return (\n      <PropertiesPopover\n        className=\"properties-content\"\n        container={container}\n        style={{ width: \"15rem\" }}\n        onClose={onClose}\n        onPointerLeave={onLeave}\n        onKeyDown={onKeyDown}\n      >\n        <QuickSearch\n          ref={inputRef}\n          placeholder={t(\"quickSearch.placeholder\")}\n          onChange={debounce(setSearchTerm, 20)}\n        />\n        <ScrollableList\n          className=\"dropdown-menu fonts manual-hover\"\n          placeholder={t(\"fontList.empty\")}\n        >\n          {groups.length ? groups : null}\n        </ScrollableList>\n      </PropertiesPopover>\n    );\n  },\n  (prev, next) =>\n    prev.selectedFontFamily === next.selectedFontFamily &&\n    prev.hoveredFontFamily === next.hoveredFontFamily,\n);\n", "import clsx from \"clsx\";\nimport React from \"react\";\nimport { searchIcon } from \"./icons\";\n\nimport \"./QuickSearch.scss\";\n\ninterface QuickSearchProps {\n  className?: string;\n  placeholder: string;\n  onChange: (term: string) => void;\n}\n\nexport const QuickSearch = React.forwardRef<HTMLInputElement, QuickSearchProps>(\n  ({ className, placeholder, onChange }, ref) => {\n    return (\n      <div className={clsx(\"QuickSearch__wrapper\", className)}>\n        {searchIcon}\n        <input\n          ref={ref}\n          className=\"QuickSearch__input\"\n          type=\"text\"\n          placeholder={placeholder}\n          onChange={(e) => onChange(e.target.value.trim().toLowerCase())}\n        />\n      </div>\n    );\n  },\n);\n", "import clsx from \"clsx\";\nimport { Children } from \"react\";\n\nimport \"./ScrollableList.scss\";\n\ninterface ScrollableListProps {\n  className?: string;\n  placeholder: string;\n  children: React.ReactNode;\n}\n\nexport const ScrollableList = ({\n  className,\n  placeholder,\n  children,\n}: ScrollableListProps) => {\n  const isEmpty = !Children.count(children);\n\n  return (\n    <div className={clsx(\"ScrollableList__wrapper\", className)} role=\"menu\">\n      {isEmpty ? <div className=\"empty\">{placeholder}</div> : children}\n    </div>\n  );\n};\n", "import React from \"react\";\n\nconst MenuGroup = ({\n  children,\n  className = \"\",\n  style,\n  title,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n  title?: string;\n}) => {\n  return (\n    <div className={`dropdown-menu-group ${className}`} style={style}>\n      {title && <p className=\"dropdown-menu-group-title\">{title}</p>}\n      {children}\n    </div>\n  );\n};\n\nexport default MenuGroup;\nMenuGroup.displayName = \"DropdownMenuGroup\";\n", "import type { JSX } from \"react\";\nimport React, { useEffect, useRef } from \"react\";\nimport {\n  getDropdownMenuItemClassName,\n  useHandleDropdownMenuItemClick,\n} from \"./common\";\nimport MenuItemContent from \"./DropdownMenuItemContent\";\nimport { useExcalidrawAppState } from \"../App\";\nimport { THEME } from \"../../constants\";\nimport type { ValueOf } from \"../../utility-types\";\n\nconst DropdownMenuItem = ({\n  icon,\n  value,\n  order,\n  children,\n  shortcut,\n  className,\n  hovered,\n  selected,\n  textStyle,\n  onSelect,\n  onClick,\n  ...rest\n}: {\n  icon?: JSX.Element;\n  value?: string | number | undefined;\n  order?: number;\n  onSelect?: (event: Event) => void;\n  children: React.ReactNode;\n  shortcut?: string;\n  hovered?: boolean;\n  selected?: boolean;\n  textStyle?: React.CSSProperties;\n  className?: string;\n} & Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, \"onSelect\">) => {\n  const handleClick = useHandleDropdownMenuItemClick(onClick, onSelect);\n  const ref = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    if (hovered) {\n      if (order === 0) {\n        // scroll into the first item differently, so it's visible what is above (i.e. group title)\n        ref.current?.scrollIntoView({ block: \"end\" });\n      } else {\n        ref.current?.scrollIntoView({ block: \"nearest\" });\n      }\n    }\n  }, [hovered, order]);\n\n  return (\n    <button\n      {...rest}\n      ref={ref}\n      value={value}\n      onClick={handleClick}\n      className={getDropdownMenuItemClassName(className, selected, hovered)}\n      title={rest.title ?? rest[\"aria-label\"]}\n    >\n      <MenuItemContent textStyle={textStyle} icon={icon} shortcut={shortcut}>\n        {children}\n      </MenuItemContent>\n    </button>\n  );\n};\nDropdownMenuItem.displayName = \"DropdownMenuItem\";\n\nexport const DropDownMenuItemBadgeType = {\n  GREEN: \"green\",\n  RED: \"red\",\n  BLUE: \"blue\",\n} as const;\n\nexport const DropDownMenuItemBadge = ({\n  type = DropDownMenuItemBadgeType.BLUE,\n  children,\n}: {\n  type?: ValueOf<typeof DropDownMenuItemBadgeType>;\n  children: React.ReactNode;\n}) => {\n  const { theme } = useExcalidrawAppState();\n  const style = {\n    display: \"inline-flex\",\n    marginLeft: \"auto\",\n    padding: \"2px 4px\",\n    borderRadius: 6,\n    fontSize: 9,\n    fontFamily: \"Cascadia, monospace\",\n    border: theme === THEME.LIGHT ? \"1.5px solid white\" : \"none\",\n  };\n\n  switch (type) {\n    case DropDownMenuItemBadgeType.GREEN:\n      Object.assign(style, {\n        backgroundColor: \"var(--background-color-badge)\",\n        color: \"var(--color-badge)\",\n      });\n      break;\n    case DropDownMenuItemBadgeType.RED:\n      Object.assign(style, {\n        backgroundColor: \"pink\",\n        color: \"darkred\",\n      });\n      break;\n    case DropDownMenuItemBadgeType.BLUE:\n    default:\n      Object.assign(style, {\n        background: \"var(--color-promo)\",\n        color: \"var(--color-surface-lowest)\",\n      });\n  }\n\n  return (\n    <div className=\"DropDownMenuItemBadge\" style={style}>\n      {children}\n    </div>\n  );\n};\nDropDownMenuItemBadge.displayName = \"DropdownMenuItemBadge\";\n\nDropdownMenuItem.Badge = DropDownMenuItemBadge;\n\nexport default DropdownMenuItem;\n", "import React, { useContext } from \"react\";\nimport { EVENT } from \"../../constants\";\nimport { composeEventHandlers } from \"../../utils\";\n\nexport const DropdownMenuContentPropsContext = React.createContext<{\n  onSelect?: (event: Event) => void;\n}>({});\n\nexport const getDropdownMenuItemClassName = (\n  className = \"\",\n  selected = false,\n  hovered = false,\n) => {\n  return `dropdown-menu-item dropdown-menu-item-base ${className}\n  ${selected ? \"dropdown-menu-item--selected\" : \"\"} ${\n    hovered ? \"dropdown-menu-item--hovered\" : \"\"\n  }`.trim();\n};\n\nexport const useHandleDropdownMenuItemClick = (\n  origOnClick:\n    | React.MouseEventHandler<HTMLAnchorElement | HTMLButtonElement>\n    | undefined,\n  onSelect: ((event: Event) => void) | undefined,\n) => {\n  const DropdownMenuContentProps = useContext(DropdownMenuContentPropsContext);\n\n  return composeEventHandlers(origOnClick, (event) => {\n    const itemSelectEvent = new CustomEvent(EVENT.MENU_ITEM_SELECT, {\n      bubbles: true,\n      cancelable: true,\n    });\n    onSelect?.(itemSelectEvent);\n    if (!itemSelectEvent.defaultPrevented) {\n      DropdownMenuContentProps.onSelect?.(itemSelectEvent);\n    }\n  });\n};\n", "import type { JSX } from \"react\";\nimport { useDevice } from \"../App\";\n\nconst MenuItemContent = ({\n  textStyle,\n  icon,\n  shortcut,\n  children,\n}: {\n  icon?: JSX.Element;\n  shortcut?: string;\n  textStyle?: React.CSSProperties;\n  children: React.ReactNode;\n}) => {\n  const device = useDevice();\n  return (\n    <>\n      {icon && <div className=\"dropdown-menu-item__icon\">{icon}</div>}\n      <div style={textStyle} className=\"dropdown-menu-item__text\">\n        {children}\n      </div>\n      {shortcut && !device.editor.isMobile && (\n        <div className=\"dropdown-menu-item__shortcut\">{shortcut}</div>\n      )}\n    </>\n  );\n};\nexport default MenuItemContent;\n", "import type { Node } from \"../../utils\";\nimport { KEYS } from \"../../keys\";\nimport { type FontDescriptor } from \"./FontPickerList\";\n\ninterface FontPickerKeyNavHandlerProps {\n  event: React.KeyboardEvent<HTMLDivElement>;\n  inputRef: React.RefObject<HTMLInputElement | null>;\n  hoveredFont: Node<FontDescriptor> | undefined;\n  filteredFonts: Node<FontDescriptor>[];\n  onClose: () => void;\n  onSelect: (value: number) => void;\n  onHover: (value: number) => void;\n}\n\nexport const fontPickerKeyHandler = ({\n  event,\n  inputRef,\n  hoveredFont,\n  filteredFonts,\n  onClose,\n  onSelect,\n  onHover,\n}: FontPickerKeyNavHandlerProps) => {\n  if (\n    !event[KEYS.CTRL_OR_CMD] &&\n    event.shiftKey &&\n    event.key.toLowerCase() === KEYS.F\n  ) {\n    // refocus input on the popup trigger shortcut\n    inputRef.current?.focus();\n    return true;\n  }\n\n  if (event.key === KEYS.ESCAPE) {\n    onClose();\n    return true;\n  }\n\n  if (event.key === KEYS.ENTER) {\n    if (hoveredFont?.value) {\n      onSelect(hoveredFont.value);\n    }\n\n    return true;\n  }\n\n  if (event.key === KEYS.ARROW_DOWN) {\n    if (hoveredFont?.next) {\n      onHover(hoveredFont.next.value);\n    } else if (filteredFonts[0]?.value) {\n      onHover(filteredFonts[0].value);\n    }\n\n    return true;\n  }\n\n  if (event.key === KEYS.ARROW_UP) {\n    if (hoveredFont?.prev) {\n      onHover(hoveredFont.prev.value);\n    } else if (filteredFonts[filteredFonts.length - 1]?.value) {\n      onHover(filteredFonts[filteredFonts.length - 1].value);\n    }\n\n    return true;\n  }\n};\n", "import * as Popover from \"@radix-ui/react-popover\";\nimport { useMemo } from \"react\";\nimport { ButtonIcon } from \"../ButtonIcon\";\nimport { TextIcon } from \"../icons\";\nimport type { FontFamilyValues } from \"../../element/types\";\nimport { t } from \"../../i18n\";\nimport { isDefaultFont } from \"./FontPicker\";\n\ninterface FontPickerTriggerProps {\n  selectedFontFamily: FontFamilyValues | null;\n}\n\nexport const FontPickerTrigger = ({\n  selectedFontFamily,\n}: FontPickerTriggerProps) => {\n  const isTriggerActive = useMemo(\n    () => Boolean(selectedFontFamily && !isDefaultFont(selectedFontFamily)),\n    [selectedFontFamily],\n  );\n\n  return (\n    <Popover.Trigger asChild>\n      {/* Empty div as trigger so it's stretched 100% due to different button sizes */}\n      <div>\n        <ButtonIcon\n          standalone\n          icon={TextIcon}\n          title={t(\"labels.showFonts\")}\n          className=\"properties-trigger\"\n          testId={\"font-family-show-fonts\"}\n          active={isTriggerActive}\n          // no-op\n          onClick={() => {}}\n        />\n      </div>\n    </Popover.Trigger>\n  );\n};\n", "import React, { useEffect } from \"react\";\nimport { getFormValue } from \"../actions/actionProperties\";\nimport { t } from \"../i18n\";\nimport \"./Range.scss\";\n\nexport type RangeProps = {\n  updateData: (value: number) => void;\n  appState: any;\n  elements: any;\n  testId?: string;\n};\n\nexport const Range = ({\n  updateData,\n  appState,\n  elements,\n  testId,\n}: RangeProps) => {\n  const rangeRef = React.useRef<HTMLInputElement>(null);\n  const valueRef = React.useRef<HTMLDivElement>(null);\n  const value = getFormValue(\n    elements,\n    appState,\n    (element) => element.opacity,\n    true,\n    appState.currentItemOpacity,\n  );\n  useEffect(() => {\n    if (rangeRef.current && valueRef.current) {\n      const rangeElement = rangeRef.current;\n      const valueElement = valueRef.current;\n      const inputWidth = rangeElement.offsetWidth;\n      const thumbWidth = 15; // 15 is the width of the thumb\n      const position =\n        (value / 100) * (inputWidth - thumbWidth) + thumbWidth / 2;\n      valueElement.style.left = `${position}px`;\n      rangeElement.style.background = `linear-gradient(to right, var(--color-slider-track) 0%, var(--color-slider-track) ${value}%, var(--button-bg) ${value}%, var(--button-bg) 100%)`;\n    }\n  }, [value]);\n\n  return (\n    <label className=\"control-label\">\n      {t(\"labels.opacity\")}\n      <div className=\"range-wrapper\">\n        <input\n          ref={rangeRef}\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          step=\"10\"\n          onChange={(event) => {\n            updateData(+event.target.value);\n          }}\n          value={value}\n          className=\"range-input\"\n          data-testid={testId}\n        />\n        <div className=\"value-bubble\" ref={valueRef}>\n          {value !== 0 ? value : null}\n        </div>\n        <div className=\"zero-label\">0</div>\n      </div>\n    </label>\n  );\n};\n", "import type { AppState, NormalizedZoomValue } from \"../types\";\n\nexport const getStateForZoom = (\n  {\n    viewportX,\n    viewportY,\n    nextZoom,\n  }: {\n    viewportX: number;\n    viewportY: number;\n    nextZoom: NormalizedZoomValue;\n  },\n  appState: AppState,\n) => {\n  const appLayerX = viewportX - appState.offsetLeft;\n  const appLayerY = viewportY - appState.offsetTop;\n\n  const currentZoom = appState.zoom.value;\n\n  // get original scroll position without zoom\n  const baseScrollX = appState.scrollX + (appLayerX - appLayerX / currentZoom);\n  const baseScrollY = appState.scrollY + (appLayerY - appLayerY / currentZoom);\n\n  // get scroll offsets for target zoom level\n  const zoomOffsetScrollX = -(appLayerX - appLayerX / nextZoom);\n  const zoomOffsetScrollY = -(appLayerY - appLayerY / nextZoom);\n\n  return {\n    scrollX: baseScrollX + zoomOffsetScrollX,\n    scrollY: baseScrollY + zoomOffsetScrollY,\n    zoom: {\n      value: nextZoom,\n    },\n  };\n};\n", "import \"./Tooltip.scss\";\n\nimport React, { useEffect } from \"react\";\n\nexport const getTooltipDiv = () => {\n  const existingDiv = document.querySelector<HTMLDivElement>(\n    \".excalidraw-tooltip\",\n  );\n  if (existingDiv) {\n    return existingDiv;\n  }\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n  div.classList.add(\"excalidraw-tooltip\");\n  return div;\n};\n\nexport const updateTooltipPosition = (\n  tooltip: HTMLDivElement,\n  item: {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  },\n  position: \"bottom\" | \"top\" = \"bottom\",\n) => {\n  const tooltipRect = tooltip.getBoundingClientRect();\n\n  const viewportWidth = window.innerWidth;\n  const viewportHeight = window.innerHeight;\n\n  const margin = 5;\n\n  let left = item.left + item.width / 2 - tooltipRect.width / 2;\n  if (left < 0) {\n    left = margin;\n  } else if (left + tooltipRect.width >= viewportWidth) {\n    left = viewportWidth - tooltipRect.width - margin;\n  }\n\n  let top: number;\n\n  if (position === \"bottom\") {\n    top = item.top + item.height + margin;\n    if (top + tooltipRect.height >= viewportHeight) {\n      top = item.top - tooltipRect.height - margin;\n    }\n  } else {\n    top = item.top - tooltipRect.height - margin;\n    if (top < 0) {\n      top = item.top + item.height + margin;\n    }\n  }\n\n  Object.assign(tooltip.style, {\n    top: `${top}px`,\n    left: `${left}px`,\n  });\n};\n\nconst updateTooltip = (\n  item: HTMLDivElement,\n  tooltip: HTMLDivElement,\n  label: string,\n  long: boolean,\n) => {\n  tooltip.classList.add(\"excalidraw-tooltip--visible\");\n  tooltip.style.minWidth = long ? \"50ch\" : \"10ch\";\n  tooltip.style.maxWidth = long ? \"50ch\" : \"15ch\";\n\n  tooltip.textContent = label;\n\n  const itemRect = item.getBoundingClientRect();\n  updateTooltipPosition(tooltip, itemRect);\n};\n\ntype TooltipProps = {\n  children: React.ReactNode;\n  label: string;\n  long?: boolean;\n  style?: React.CSSProperties;\n  disabled?: boolean;\n};\n\nexport const Tooltip = ({\n  children,\n  label,\n  long = false,\n  style,\n  disabled,\n}: TooltipProps) => {\n  useEffect(() => {\n    return () =>\n      getTooltipDiv().classList.remove(\"excalidraw-tooltip--visible\");\n  }, []);\n  if (disabled) {\n    return null;\n  }\n  return (\n    <div\n      className=\"excalidraw-tooltip-wrapper\"\n      onPointerEnter={(event) =>\n        updateTooltip(\n          event.currentTarget as HTMLDivElement,\n          getTooltipDiv(),\n          label,\n          long,\n        )\n      }\n      onPointerLeave={() =>\n        getTooltipDiv().classList.remove(\"excalidraw-tooltip--visible\")\n      }\n      style={style}\n    >\n      {children}\n    </div>\n  );\n};\n", "import { ColorPicker } from \"../components/ColorPicker/ColorPicker\";\nimport {\n  handIcon,\n  MoonIcon,\n  SunIcon,\n  TrashIcon,\n  zoomAreaIcon,\n  ZoomInIcon,\n  ZoomOutIcon,\n  ZoomResetIcon,\n} from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport {\n  CURSOR_TYPE,\n  MAX_ZOOM,\n  MIN_ZOOM,\n  THEME,\n  ZOOM_STEP,\n} from \"../constants\";\nimport { getCommonBounds, getNonDeletedElements } from \"../element\";\nimport type { ExcalidrawElement } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { CODES, KEYS } from \"../keys\";\nimport { getNormalizedZoom } from \"../scene\";\nimport { centerScrollOn } from \"../scene/scroll\";\nimport { getStateForZoom } from \"../scene/zoom\";\nimport type { AppState, Offsets } from \"../types\";\nimport { getShortcutKey, updateActiveTool } from \"../utils\";\nimport { register } from \"./register\";\nimport { Tooltip } from \"../components/Tooltip\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport {\n  getDefaultAppState,\n  isEraserActive,\n  isHandToolActive,\n} from \"../appState\";\nimport { DEFAULT_CANVAS_BACKGROUND_PICKS } from \"../colors\";\nimport type { SceneBounds } from \"../element/bounds\";\nimport { setCursor } from \"../cursor\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { clamp, roundToStep } from \"@excalidraw/math\";\n\nexport const actionChangeViewBackgroundColor = register({\n  name: \"changeViewBackgroundColor\",\n  label: \"labels.canvasBackground\",\n  paletteName: \"Change canvas background color\",\n  trackEvent: false,\n  predicate: (elements, appState, props, app) => {\n    return (\n      !!app.props.UIOptions.canvasActions.changeViewBackgroundColor &&\n      !appState.viewModeEnabled\n    );\n  },\n  perform: (_, appState, value) => {\n    return {\n      appState: { ...appState, ...value },\n      captureUpdate: !!value.viewBackgroundColor\n        ? CaptureUpdateAction.IMMEDIATELY\n        : CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData, appProps }) => {\n    // FIXME move me to src/components/mainMenu/DefaultItems.tsx\n    return (\n      <ColorPicker\n        palette={null}\n        topPicks={DEFAULT_CANVAS_BACKGROUND_PICKS}\n        label={t(\"labels.canvasBackground\")}\n        type=\"canvasBackground\"\n        color={appState.viewBackgroundColor}\n        onChange={(color) => updateData({ viewBackgroundColor: color })}\n        data-testid=\"canvas-background-picker\"\n        elements={elements}\n        appState={appState}\n        updateData={updateData}\n      />\n    );\n  },\n});\n\nexport const actionClearCanvas = register({\n  name: \"clearCanvas\",\n  label: \"labels.clearCanvas\",\n  paletteName: \"Clear canvas\",\n  icon: TrashIcon,\n  trackEvent: { category: \"canvas\" },\n  predicate: (elements, appState, props, app) => {\n    return (\n      !!app.props.UIOptions.canvasActions.clearCanvas &&\n      !appState.viewModeEnabled &&\n      appState.openDialog?.name !== \"elementLinkSelector\"\n    );\n  },\n  perform: (elements, appState, _, app) => {\n    app.imageCache.clear();\n    return {\n      elements: elements.map((element) =>\n        newElementWith(element, { isDeleted: true }),\n      ),\n      appState: {\n        ...getDefaultAppState(),\n        files: {},\n        theme: appState.theme,\n        penMode: appState.penMode,\n        penDetected: appState.penDetected,\n        exportBackground: appState.exportBackground,\n        exportEmbedScene: appState.exportEmbedScene,\n        gridSize: appState.gridSize,\n        gridStep: appState.gridStep,\n        gridModeEnabled: appState.gridModeEnabled,\n        stats: appState.stats,\n        pasteDialog: appState.pasteDialog,\n        activeTool:\n          appState.activeTool.type === \"image\"\n            ? { ...appState.activeTool, type: \"selection\" }\n            : appState.activeTool,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n});\n\nexport const actionZoomIn = register({\n  name: \"zoomIn\",\n  label: \"buttons.zoomIn\",\n  viewMode: true,\n  icon: ZoomInIcon,\n  trackEvent: { category: \"canvas\" },\n  perform: (_elements, appState, _, app) => {\n    return {\n      appState: {\n        ...appState,\n        ...getStateForZoom(\n          {\n            viewportX: appState.width / 2 + appState.offsetLeft,\n            viewportY: appState.height / 2 + appState.offsetTop,\n            nextZoom: getNormalizedZoom(appState.zoom.value + ZOOM_STEP),\n          },\n          appState,\n        ),\n        userToFollow: null,\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ updateData, appState }) => (\n    <ToolButton\n      type=\"button\"\n      className=\"zoom-in-button zoom-button\"\n      icon={ZoomInIcon}\n      title={`${t(\"buttons.zoomIn\")} \u2014 ${getShortcutKey(\"CtrlOrCmd++\")}`}\n      aria-label={t(\"buttons.zoomIn\")}\n      disabled={appState.zoom.value >= MAX_ZOOM}\n      onClick={() => {\n        updateData(null);\n      }}\n    />\n  ),\n  keyTest: (event) =>\n    (event.code === CODES.EQUAL || event.code === CODES.NUM_ADD) &&\n    (event[KEYS.CTRL_OR_CMD] || event.shiftKey),\n});\n\nexport const actionZoomOut = register({\n  name: \"zoomOut\",\n  label: \"buttons.zoomOut\",\n  icon: ZoomOutIcon,\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (_elements, appState, _, app) => {\n    return {\n      appState: {\n        ...appState,\n        ...getStateForZoom(\n          {\n            viewportX: appState.width / 2 + appState.offsetLeft,\n            viewportY: appState.height / 2 + appState.offsetTop,\n            nextZoom: getNormalizedZoom(appState.zoom.value - ZOOM_STEP),\n          },\n          appState,\n        ),\n        userToFollow: null,\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ updateData, appState }) => (\n    <ToolButton\n      type=\"button\"\n      className=\"zoom-out-button zoom-button\"\n      icon={ZoomOutIcon}\n      title={`${t(\"buttons.zoomOut\")} \u2014 ${getShortcutKey(\"CtrlOrCmd+-\")}`}\n      aria-label={t(\"buttons.zoomOut\")}\n      disabled={appState.zoom.value <= MIN_ZOOM}\n      onClick={() => {\n        updateData(null);\n      }}\n    />\n  ),\n  keyTest: (event) =>\n    (event.code === CODES.MINUS || event.code === CODES.NUM_SUBTRACT) &&\n    (event[KEYS.CTRL_OR_CMD] || event.shiftKey),\n});\n\nexport const actionResetZoom = register({\n  name: \"resetZoom\",\n  label: \"buttons.resetZoom\",\n  icon: ZoomResetIcon,\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (_elements, appState, _, app) => {\n    return {\n      appState: {\n        ...appState,\n        ...getStateForZoom(\n          {\n            viewportX: appState.width / 2 + appState.offsetLeft,\n            viewportY: appState.height / 2 + appState.offsetTop,\n            nextZoom: getNormalizedZoom(1),\n          },\n          appState,\n        ),\n        userToFollow: null,\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ updateData, appState }) => (\n    <Tooltip label={t(\"buttons.resetZoom\")} style={{ height: \"100%\" }}>\n      <ToolButton\n        type=\"button\"\n        className=\"reset-zoom-button zoom-button\"\n        title={t(\"buttons.resetZoom\")}\n        aria-label={t(\"buttons.resetZoom\")}\n        onClick={() => {\n          updateData(null);\n        }}\n      >\n        {(appState.zoom.value * 100).toFixed(0)}%\n      </ToolButton>\n    </Tooltip>\n  ),\n  keyTest: (event) =>\n    (event.code === CODES.ZERO || event.code === CODES.NUM_ZERO) &&\n    (event[KEYS.CTRL_OR_CMD] || event.shiftKey),\n});\n\nconst zoomValueToFitBoundsOnViewport = (\n  bounds: SceneBounds,\n  viewportDimensions: { width: number; height: number },\n  viewportZoomFactor: number = 1, // default to 1 if not provided\n) => {\n  const [x1, y1, x2, y2] = bounds;\n  const commonBoundsWidth = x2 - x1;\n  const zoomValueForWidth = viewportDimensions.width / commonBoundsWidth;\n  const commonBoundsHeight = y2 - y1;\n  const zoomValueForHeight = viewportDimensions.height / commonBoundsHeight;\n  const smallestZoomValue = Math.min(zoomValueForWidth, zoomValueForHeight);\n\n  const adjustedZoomValue =\n    smallestZoomValue * clamp(viewportZoomFactor, 0.1, 1);\n\n  return Math.min(adjustedZoomValue, 1);\n};\n\nexport const zoomToFitBounds = ({\n  bounds,\n  appState,\n  canvasOffsets,\n  fitToViewport = false,\n  viewportZoomFactor = 1,\n  minZoom = -Infinity,\n  maxZoom = Infinity,\n}: {\n  bounds: SceneBounds;\n  canvasOffsets?: Offsets;\n  appState: Readonly<AppState>;\n  /** whether to fit content to viewport (beyond >100%) */\n  fitToViewport: boolean;\n  /** zoom content to cover X of the viewport, when fitToViewport=true */\n  viewportZoomFactor?: number;\n  minZoom?: number;\n  maxZoom?: number;\n}) => {\n  viewportZoomFactor = clamp(viewportZoomFactor, MIN_ZOOM, MAX_ZOOM);\n\n  const [x1, y1, x2, y2] = bounds;\n  const centerX = (x1 + x2) / 2;\n  const centerY = (y1 + y2) / 2;\n\n  const canvasOffsetLeft = canvasOffsets?.left ?? 0;\n  const canvasOffsetTop = canvasOffsets?.top ?? 0;\n  const canvasOffsetRight = canvasOffsets?.right ?? 0;\n  const canvasOffsetBottom = canvasOffsets?.bottom ?? 0;\n\n  const effectiveCanvasWidth =\n    appState.width - canvasOffsetLeft - canvasOffsetRight;\n  const effectiveCanvasHeight =\n    appState.height - canvasOffsetTop - canvasOffsetBottom;\n\n  let adjustedZoomValue;\n\n  if (fitToViewport) {\n    const commonBoundsWidth = x2 - x1;\n    const commonBoundsHeight = y2 - y1;\n\n    adjustedZoomValue =\n      Math.min(\n        effectiveCanvasWidth / commonBoundsWidth,\n        effectiveCanvasHeight / commonBoundsHeight,\n      ) * viewportZoomFactor;\n  } else {\n    adjustedZoomValue = zoomValueToFitBoundsOnViewport(\n      bounds,\n      {\n        width: effectiveCanvasWidth,\n        height: effectiveCanvasHeight,\n      },\n      viewportZoomFactor,\n    );\n  }\n\n  const newZoomValue = getNormalizedZoom(\n    clamp(roundToStep(adjustedZoomValue, ZOOM_STEP, \"floor\"), minZoom, maxZoom),\n  );\n\n  const centerScroll = centerScrollOn({\n    scenePoint: { x: centerX, y: centerY },\n    viewportDimensions: {\n      width: appState.width,\n      height: appState.height,\n    },\n    offsets: canvasOffsets,\n    zoom: { value: newZoomValue },\n  });\n\n  return {\n    appState: {\n      ...appState,\n      scrollX: centerScroll.scrollX,\n      scrollY: centerScroll.scrollY,\n      zoom: { value: newZoomValue },\n    },\n    captureUpdate: CaptureUpdateAction.EVENTUALLY,\n  };\n};\n\nexport const zoomToFit = ({\n  canvasOffsets,\n  targetElements,\n  appState,\n  fitToViewport,\n  viewportZoomFactor,\n  minZoom,\n  maxZoom,\n}: {\n  canvasOffsets?: Offsets;\n  targetElements: readonly ExcalidrawElement[];\n  appState: Readonly<AppState>;\n  /** whether to fit content to viewport (beyond >100%) */\n  fitToViewport: boolean;\n  /** zoom content to cover X of the viewport, when fitToViewport=true */\n  viewportZoomFactor?: number;\n  minZoom?: number;\n  maxZoom?: number;\n}) => {\n  const commonBounds = getCommonBounds(getNonDeletedElements(targetElements));\n\n  return zoomToFitBounds({\n    canvasOffsets,\n    bounds: commonBounds,\n    appState,\n    fitToViewport,\n    viewportZoomFactor,\n    minZoom,\n    maxZoom,\n  });\n};\n\n// Note, this action differs from actionZoomToFitSelection in that it doesn't\n// zoom beyond 100%. In other words, if the content is smaller than viewport\n// size, it won't be zoomed in.\nexport const actionZoomToFitSelectionInViewport = register({\n  name: \"zoomToFitSelectionInViewport\",\n  label: \"labels.zoomToFitViewport\",\n  icon: zoomAreaIcon,\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    return zoomToFit({\n      targetElements: selectedElements.length ? selectedElements : elements,\n      appState: {\n        ...appState,\n        userToFollow: null,\n      },\n      fitToViewport: false,\n      canvasOffsets: app.getEditorUIOffsets(),\n    });\n  },\n  // NOTE shift-2 should have been assigned actionZoomToFitSelection.\n  // TBD on how proceed\n  keyTest: (event) =>\n    event.code === CODES.TWO &&\n    event.shiftKey &&\n    !event.altKey &&\n    !event[KEYS.CTRL_OR_CMD],\n});\n\nexport const actionZoomToFitSelection = register({\n  name: \"zoomToFitSelection\",\n  label: \"helpDialog.zoomToSelection\",\n  icon: zoomAreaIcon,\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    return zoomToFit({\n      targetElements: selectedElements.length ? selectedElements : elements,\n      appState: {\n        ...appState,\n        userToFollow: null,\n      },\n      fitToViewport: true,\n      canvasOffsets: app.getEditorUIOffsets(),\n    });\n  },\n  // NOTE this action should use shift-2 per figma, alas\n  keyTest: (event) =>\n    event.code === CODES.THREE &&\n    event.shiftKey &&\n    !event.altKey &&\n    !event[KEYS.CTRL_OR_CMD],\n});\n\nexport const actionZoomToFit = register({\n  name: \"zoomToFit\",\n  label: \"helpDialog.zoomToFit\",\n  icon: zoomAreaIcon,\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState, _, app) =>\n    zoomToFit({\n      targetElements: elements,\n      appState: {\n        ...appState,\n        userToFollow: null,\n      },\n      fitToViewport: false,\n      canvasOffsets: app.getEditorUIOffsets(),\n    }),\n  keyTest: (event) =>\n    event.code === CODES.ONE &&\n    event.shiftKey &&\n    !event.altKey &&\n    !event[KEYS.CTRL_OR_CMD],\n});\n\nexport const actionToggleTheme = register({\n  name: \"toggleTheme\",\n  label: (_, appState) => {\n    return appState.theme === THEME.DARK\n      ? \"buttons.lightMode\"\n      : \"buttons.darkMode\";\n  },\n  keywords: [\"toggle\", \"dark\", \"light\", \"mode\", \"theme\"],\n  icon: (appState) => (appState.theme === THEME.LIGHT ? MoonIcon : SunIcon),\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (_, appState, value) => {\n    return {\n      appState: {\n        ...appState,\n        theme:\n          value || (appState.theme === THEME.LIGHT ? THEME.DARK : THEME.LIGHT),\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  keyTest: (event) => event.altKey && event.shiftKey && event.code === CODES.D,\n  predicate: (elements, appState, props, app) => {\n    return !!app.props.UIOptions.canvasActions.toggleTheme;\n  },\n});\n\nexport const actionToggleEraserTool = register({\n  name: \"toggleEraserTool\",\n  label: \"toolBar.eraser\",\n  trackEvent: { category: \"toolbar\" },\n  perform: (elements, appState) => {\n    let activeTool: AppState[\"activeTool\"];\n\n    if (isEraserActive(appState)) {\n      activeTool = updateActiveTool(appState, {\n        ...(appState.activeTool.lastActiveTool || {\n          type: \"selection\",\n        }),\n        lastActiveToolBeforeEraser: null,\n      });\n    } else {\n      activeTool = updateActiveTool(appState, {\n        type: \"eraser\",\n        lastActiveToolBeforeEraser: appState.activeTool,\n      });\n    }\n\n    return {\n      appState: {\n        ...appState,\n        selectedElementIds: {},\n        selectedGroupIds: {},\n        activeEmbeddable: null,\n        activeTool,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) => event.key === KEYS.E,\n});\n\nexport const actionToggleHandTool = register({\n  name: \"toggleHandTool\",\n  label: \"toolBar.hand\",\n  paletteName: \"Toggle hand tool\",\n  trackEvent: { category: \"toolbar\" },\n  icon: handIcon,\n  viewMode: false,\n  perform: (elements, appState, _, app) => {\n    let activeTool: AppState[\"activeTool\"];\n\n    if (isHandToolActive(appState)) {\n      activeTool = updateActiveTool(appState, {\n        ...(appState.activeTool.lastActiveTool || {\n          type: \"selection\",\n        }),\n        lastActiveToolBeforeEraser: null,\n      });\n    } else {\n      activeTool = updateActiveTool(appState, {\n        type: \"hand\",\n        lastActiveToolBeforeEraser: appState.activeTool,\n      });\n      setCursor(app.interactiveCanvas, CURSOR_TYPE.GRAB);\n    }\n\n    return {\n      appState: {\n        ...appState,\n        selectedElementIds: {},\n        selectedGroupIds: {},\n        activeEmbeddable: null,\n        activeTool,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    !event.altKey && !event[KEYS.CTRL_OR_CMD] && event.key === KEYS.H,\n});\n", "import { KEYS } from \"../keys\";\nimport { isInvisiblySmallElement } from \"../element\";\nimport { arrayToMap, updateActiveTool } from \"../utils\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { done } from \"../components/icons\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { mutateElement } from \"../element/mutateElement\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport {\n  maybeBindLinearElement,\n  bindOrUnbindLinearElement,\n} from \"../element/binding\";\nimport { isBindingElement, isLinearElement } from \"../element/typeChecks\";\nimport type { AppState } from \"../types\";\nimport { resetCursor } from \"../cursor\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { pointFrom } from \"@excalidraw/math\";\nimport { isPathALoop } from \"../shapes\";\n\nexport const actionFinalize = register({\n  name: \"finalize\",\n  label: \"\",\n  trackEvent: false,\n  perform: (elements, appState, _, app) => {\n    const { interactiveCanvas, focusContainer, scene } = app;\n\n    const elementsMap = scene.getNonDeletedElementsMap();\n\n    if (appState.editingLinearElement) {\n      const { elementId, startBindingElement, endBindingElement } =\n        appState.editingLinearElement;\n      const element = LinearElementEditor.getElement(elementId, elementsMap);\n\n      if (element) {\n        if (isBindingElement(element)) {\n          bindOrUnbindLinearElement(\n            element,\n            startBindingElement,\n            endBindingElement,\n            elementsMap,\n            scene,\n          );\n        }\n        return {\n          elements:\n            element.points.length < 2 || isInvisiblySmallElement(element)\n              ? elements.filter((el) => el.id !== element.id)\n              : undefined,\n          appState: {\n            ...appState,\n            cursorButton: \"up\",\n            editingLinearElement: null,\n          },\n          captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n        };\n      }\n    }\n\n    let newElements = elements;\n\n    const pendingImageElement =\n      appState.pendingImageElementId &&\n      scene.getElement(appState.pendingImageElementId);\n\n    if (pendingImageElement) {\n      mutateElement(pendingImageElement, { isDeleted: true }, false);\n    }\n\n    if (window.document.activeElement instanceof HTMLElement) {\n      focusContainer();\n    }\n\n    const multiPointElement = appState.multiElement\n      ? appState.multiElement\n      : appState.newElement?.type === \"freedraw\"\n      ? appState.newElement\n      : null;\n\n    if (multiPointElement) {\n      // pen and mouse have hover\n      if (\n        multiPointElement.type !== \"freedraw\" &&\n        appState.lastPointerDownWith !== \"touch\"\n      ) {\n        const { points, lastCommittedPoint } = multiPointElement;\n        if (\n          !lastCommittedPoint ||\n          points[points.length - 1] !== lastCommittedPoint\n        ) {\n          mutateElement(multiPointElement, {\n            points: multiPointElement.points.slice(0, -1),\n          });\n        }\n      }\n\n      if (isInvisiblySmallElement(multiPointElement)) {\n        // TODO: #7348 in theory this gets recorded by the store, so the invisible elements could be restored by the undo/redo, which might be not what we would want\n        newElements = newElements.filter(\n          (el) => el.id !== multiPointElement.id,\n        );\n      }\n\n      // If the multi point line closes the loop,\n      // set the last point to first point.\n      // This ensures that loop remains closed at different scales.\n      const isLoop = isPathALoop(multiPointElement.points, appState.zoom.value);\n      if (\n        multiPointElement.type === \"line\" ||\n        multiPointElement.type === \"freedraw\"\n      ) {\n        if (isLoop) {\n          const linePoints = multiPointElement.points;\n          const firstPoint = linePoints[0];\n          mutateElement(multiPointElement, {\n            points: linePoints.map((p, index) =>\n              index === linePoints.length - 1\n                ? pointFrom(firstPoint[0], firstPoint[1])\n                : p,\n            ),\n          });\n        }\n      }\n\n      if (\n        isBindingElement(multiPointElement) &&\n        !isLoop &&\n        multiPointElement.points.length > 1\n      ) {\n        const [x, y] = LinearElementEditor.getPointAtIndexGlobalCoordinates(\n          multiPointElement,\n          -1,\n          arrayToMap(elements),\n        );\n        maybeBindLinearElement(\n          multiPointElement,\n          appState,\n          { x, y },\n          elementsMap,\n          elements,\n        );\n      }\n    }\n\n    if (\n      (!appState.activeTool.locked &&\n        appState.activeTool.type !== \"freedraw\") ||\n      !multiPointElement\n    ) {\n      resetCursor(interactiveCanvas);\n    }\n\n    let activeTool: AppState[\"activeTool\"];\n    if (appState.activeTool.type === \"eraser\") {\n      activeTool = updateActiveTool(appState, {\n        ...(appState.activeTool.lastActiveTool || {\n          type: \"selection\",\n        }),\n        lastActiveToolBeforeEraser: null,\n      });\n    } else {\n      activeTool = updateActiveTool(appState, {\n        type: \"selection\",\n      });\n    }\n\n    return {\n      elements: newElements,\n      appState: {\n        ...appState,\n        cursorButton: \"up\",\n        activeTool:\n          (appState.activeTool.locked ||\n            appState.activeTool.type === \"freedraw\") &&\n          multiPointElement\n            ? appState.activeTool\n            : activeTool,\n        activeEmbeddable: null,\n        newElement: null,\n        selectionElement: null,\n        multiElement: null,\n        editingTextElement: null,\n        startBoundElement: null,\n        suggestedBindings: [],\n        selectedElementIds:\n          multiPointElement &&\n          !appState.activeTool.locked &&\n          appState.activeTool.type !== \"freedraw\"\n            ? {\n                ...appState.selectedElementIds,\n                [multiPointElement.id]: true,\n              }\n            : appState.selectedElementIds,\n        // To select the linear element when user has finished mutipoint editing\n        selectedLinearElement:\n          multiPointElement && isLinearElement(multiPointElement)\n            ? new LinearElementEditor(multiPointElement)\n            : appState.selectedLinearElement,\n        pendingImageElementId: null,\n      },\n      // TODO: #7348 we should not capture everything, but if we don't, it leads to incosistencies -> revisit\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event, appState) =>\n    (event.key === KEYS.ESCAPE &&\n      (appState.editingLinearElement !== null ||\n        (!appState.newElement && appState.multiElement === null))) ||\n    ((event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) &&\n      appState.multiElement !== null),\n  PanelComponent: ({ appState, updateData, data }) => (\n    <ToolButton\n      type=\"button\"\n      icon={done}\n      title={t(\"buttons.done\")}\n      aria-label={t(\"buttons.done\")}\n      onClick={updateData}\n      visible={appState.multiElement != null}\n      size={data?.size || \"medium\"}\n      style={{ pointerEvents: \"all\" }}\n    />\n  ),\n});\n", "import \"./TextInput.scss\";\n\nimport React, { useState } from \"react\";\nimport { focusNearestParent } from \"../utils\";\n\nimport \"./ProjectName.scss\";\nimport { useExcalidrawContainer } from \"./App\";\nimport { KEYS } from \"../keys\";\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n  label: string;\n  ignoreFocus?: boolean;\n};\n\nexport const ProjectName = (props: Props) => {\n  const { id } = useExcalidrawContainer();\n  const [fileName, setFileName] = useState<string>(props.value);\n\n  const handleBlur = (event: any) => {\n    if (!props.ignoreFocus) {\n      focusNearestParent(event.target);\n    }\n    const value = event.target.value;\n    if (value !== props.value) {\n      props.onChange(value);\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (event.key === KEYS.ENTER) {\n      event.preventDefault();\n      if (event.nativeEvent.isComposing || event.keyCode === 229) {\n        return;\n      }\n      event.currentTarget.blur();\n    }\n  };\n\n  return (\n    <div className=\"ProjectName\">\n      <label className=\"ProjectName-label\" htmlFor=\"filename\">\n        {`${props.label}:`}\n      </label>\n      <input\n        type=\"text\"\n        className=\"TextInput\"\n        onBlur={handleBlur}\n        onKeyDown={handleKeyDown}\n        id={`${id}-filename`}\n        value={fileName}\n        onChange={(event) => setFileName(event.target.value)}\n      />\n    </div>\n  );\n};\n", "import \"./ToolIcon.scss\";\n\nimport { t } from \"../i18n\";\nimport { ToolButton } from \"./ToolButton\";\nimport { THEME } from \"../constants\";\nimport type { Theme } from \"../element/types\";\n\n// We chose to use only explicit toggle and not a third option for system value,\n// but this could be added in the future.\nexport const DarkModeToggle = (props: {\n  value: Theme;\n  onChange: (value: Theme) => void;\n  title?: string;\n}) => {\n  const title =\n    props.title ||\n    (props.value === THEME.DARK\n      ? t(\"buttons.lightMode\")\n      : t(\"buttons.darkMode\"));\n\n  return (\n    <ToolButton\n      type=\"icon\"\n      icon={props.value === THEME.LIGHT ? ICONS.MOON : ICONS.SUN}\n      title={title}\n      aria-label={title}\n      onClick={() =>\n        props.onChange(props.value === THEME.DARK ? THEME.LIGHT : THEME.DARK)\n      }\n      data-testid=\"toggle-dark-mode\"\n    />\n  );\n};\n\nconst ICONS = {\n  SUN: (\n    <svg width=\"512\" height=\"512\" className=\"rtl-mirror\" viewBox=\"0 0 512 512\">\n      <path\n        fill=\"currentColor\"\n        d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\"\n      ></path>\n    </svg>\n  ),\n  MOON: (\n    <svg width=\"512\" height=\"512\" className=\"rtl-mirror\" viewBox=\"0 0 512 512\">\n      <path\n        fill=\"currentColor\"\n        d=\"M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z\"\n      ></path>\n    </svg>\n  ),\n};\n", "import {\n  copyBlobToClipboardAsPng,\n  copyTextToSystemClipboard,\n} from \"../clipboard\";\nimport {\n  DEFAULT_EXPORT_PADDING,\n  DEFAULT_FILENAME,\n  IMAGE_MIME_TYPES,\n  isFirefox,\n  MIME_TYPES,\n} from \"../constants\";\nimport { getNonDeletedElements } from \"../element\";\nimport { isFrameLikeElement } from \"../element/typeChecks\";\nimport type {\n  ExcalidrawElement,\n  ExcalidrawFrameLikeElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\nimport { getElementsOverlappingFrame } from \"../frame\";\nimport { t } from \"../i18n\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { exportToCanvas, exportToSvg } from \"../scene/export\";\nimport type { ExportType } from \"../scene/types\";\nimport type { AppState, BinaryFiles } from \"../types\";\nimport { cloneJSON } from \"../utils\";\nimport { canvasToBlob } from \"./blob\";\nimport type { FileSystemHandle } from \"./filesystem\";\nimport { fileSave } from \"./filesystem\";\nimport { serializeAsJSON } from \"./json\";\n\nexport { loadFromBlob } from \"./blob\";\nexport { loadFromJSON, saveAsJSON } from \"./json\";\n\nexport type ExportedElements = readonly NonDeletedExcalidrawElement[] & {\n  _brand: \"exportedElements\";\n};\n\nexport const prepareElementsForExport = (\n  elements: readonly ExcalidrawElement[],\n  { selectedElementIds }: Pick<AppState, \"selectedElementIds\">,\n  exportSelectionOnly: boolean,\n) => {\n  elements = getNonDeletedElements(elements);\n\n  const isExportingSelection =\n    exportSelectionOnly &&\n    isSomeElementSelected(elements, { selectedElementIds });\n\n  let exportingFrame: ExcalidrawFrameLikeElement | null = null;\n  let exportedElements = isExportingSelection\n    ? getSelectedElements(\n        elements,\n        { selectedElementIds },\n        {\n          includeBoundTextElement: true,\n        },\n      )\n    : elements;\n\n  if (isExportingSelection) {\n    if (\n      exportedElements.length === 1 &&\n      isFrameLikeElement(exportedElements[0])\n    ) {\n      exportingFrame = exportedElements[0];\n      exportedElements = getElementsOverlappingFrame(elements, exportingFrame);\n    } else if (exportedElements.length > 1) {\n      exportedElements = getSelectedElements(\n        elements,\n        { selectedElementIds },\n        {\n          includeBoundTextElement: true,\n          includeElementsInFrames: true,\n        },\n      );\n    }\n  }\n\n  return {\n    exportingFrame,\n    exportedElements: cloneJSON(exportedElements) as ExportedElements,\n  };\n};\n\nexport const exportCanvas = async (\n  type: Omit<ExportType, \"backend\">,\n  elements: ExportedElements,\n  appState: AppState,\n  files: BinaryFiles,\n  {\n    exportBackground,\n    exportPadding = DEFAULT_EXPORT_PADDING,\n    viewBackgroundColor,\n    name = appState.name || DEFAULT_FILENAME,\n    fileHandle = null,\n    exportingFrame = null,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    /** filename, if applicable */\n    name?: string;\n    fileHandle?: FileSystemHandle | null;\n    exportingFrame: ExcalidrawFrameLikeElement | null;\n  },\n) => {\n  if (elements.length === 0) {\n    throw new Error(t(\"alerts.cannotExportEmptyCanvas\"));\n  }\n  if (type === \"svg\" || type === \"clipboard-svg\") {\n    const svgPromise = exportToSvg(\n      elements,\n      {\n        exportBackground,\n        exportWithDarkMode: appState.exportWithDarkMode,\n        viewBackgroundColor,\n        exportPadding,\n        exportScale: appState.exportScale,\n        exportEmbedScene: appState.exportEmbedScene && type === \"svg\",\n      },\n      files,\n      { exportingFrame },\n    );\n\n    if (type === \"svg\") {\n      return fileSave(\n        svgPromise.then((svg) => {\n          return new Blob([svg.outerHTML], { type: MIME_TYPES.svg });\n        }),\n        {\n          description: \"Export to SVG\",\n          name,\n          extension: appState.exportEmbedScene ? \"excalidraw.svg\" : \"svg\",\n          mimeTypes: [IMAGE_MIME_TYPES.svg],\n          fileHandle,\n        },\n      );\n    } else if (type === \"clipboard-svg\") {\n      const svg = await svgPromise.then((svg) => svg.outerHTML);\n      try {\n        await copyTextToSystemClipboard(svg);\n      } catch (e) {\n        throw new Error(t(\"errors.copyToSystemClipboardFailed\"));\n      }\n      return;\n    }\n  }\n\n  const tempCanvas = exportToCanvas(elements, appState, files, {\n    exportBackground,\n    viewBackgroundColor,\n    exportPadding,\n    exportingFrame,\n  });\n\n  if (type === \"png\") {\n    let blob = canvasToBlob(tempCanvas);\n\n    if (appState.exportEmbedScene) {\n      blob = blob.then((blob) =>\n        import(\"./image\").then(({ encodePngMetadata }) =>\n          encodePngMetadata({\n            blob,\n            metadata: serializeAsJSON(elements, appState, files, \"local\"),\n          }),\n        ),\n      );\n    }\n\n    return fileSave(blob, {\n      description: \"Export to PNG\",\n      name,\n      extension: appState.exportEmbedScene ? \"excalidraw.png\" : \"png\",\n      mimeTypes: [IMAGE_MIME_TYPES.png],\n      fileHandle,\n    });\n  } else if (type === \"clipboard\") {\n    try {\n      const blob = canvasToBlob(tempCanvas);\n      await copyBlobToClipboardAsPng(blob);\n    } catch (error: any) {\n      console.warn(error);\n      if (error.name === \"CANVAS_POSSIBLY_TOO_BIG\") {\n        throw new Error(t(\"canvasError.canvasTooBig\"));\n      }\n      // TypeError *probably* suggests ClipboardItem not defined, which\n      // people on Firefox can enable through a flag, so let's tell them.\n      if (isFirefox && error.name === \"TypeError\") {\n        throw new Error(\n          `${t(\"alerts.couldNotCopyToClipboard\")}\\n\\n${t(\n            \"hints.firefox_clipboard_write\",\n          )}`,\n        );\n      } else {\n        throw new Error(t(\"alerts.couldNotCopyToClipboard\"));\n      }\n    }\n  } else {\n    // shouldn't happen\n    throw new Error(\"Unsupported export type\");\n  }\n};\n", "import type { ExcalidrawElement } from \"../element/types\";\nimport type { AppState, BinaryFiles } from \"../types\";\nimport { exportCanvas, prepareElementsForExport } from \".\";\nimport { getFileHandleType, isImageFileHandleType } from \"./blob\";\n\nexport const resaveAsImageWithScene = async (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  files: BinaryFiles,\n  name: string,\n) => {\n  const { exportBackground, viewBackgroundColor, fileHandle } = appState;\n\n  const fileHandleType = getFileHandleType(fileHandle);\n\n  if (!fileHandle || !isImageFileHandleType(fileHandleType)) {\n    throw new Error(\n      \"fileHandle should exist and should be of type svg or png when resaving\",\n    );\n  }\n  appState = {\n    ...appState,\n    exportEmbedScene: true,\n  };\n\n  const { exportedElements, exportingFrame } = prepareElementsForExport(\n    elements,\n    appState,\n    false,\n  );\n\n  await exportCanvas(fileHandleType, exportedElements, appState, files, {\n    exportBackground,\n    viewBackgroundColor,\n    name,\n    fileHandle,\n    exportingFrame,\n  });\n\n  return { fileHandle };\n};\n", "import React from \"react\";\nimport clsx from \"clsx\";\nimport { checkIcon } from \"./icons\";\n\nimport \"./CheckboxItem.scss\";\n\nexport const CheckboxItem: React.FC<{\n  checked: boolean;\n  onChange: (checked: boolean, event: React.MouseEvent) => void;\n  className?: string;\n  children?: React.ReactNode;\n}> = ({ children, checked, onChange, className }) => {\n  return (\n    <div\n      className={clsx(\"Checkbox\", className, { \"is-checked\": checked })}\n      onClick={(event) => {\n        onChange(!checked, event);\n        (\n          (event.currentTarget as HTMLDivElement).querySelector(\n            \".Checkbox-box\",\n          ) as HTMLButtonElement\n        ).focus();\n      }}\n    >\n      <button\n        type=\"button\"\n        className=\"Checkbox-box\"\n        role=\"checkbox\"\n        aria-checked={checked}\n      >\n        {checkIcon}\n      </button>\n      <div className=\"Checkbox-label\">{children}</div>\n    </div>\n  );\n};\n", "import { ExportIcon, questionCircle, saveAs } from \"../components/icons\";\nimport { ProjectName } from \"../components/ProjectName\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { Tooltip } from \"../components/Tooltip\";\nimport { DarkModeToggle } from \"../components/DarkModeToggle\";\nimport { loadFromJSON, saveAsJSON } from \"../data\";\nimport { resaveAsImageWithScene } from \"../data/resave\";\nimport { t } from \"../i18n\";\nimport { useDevice } from \"../components/App\";\nimport { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport { CheckboxItem } from \"../components/CheckboxItem\";\nimport { getExportSize } from \"../scene/export\";\nimport { DEFAULT_EXPORT_PADDING, EXPORT_SCALES, THEME } from \"../constants\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { getNonDeletedElements } from \"../element\";\nimport { isImageFileHandle } from \"../data/blob\";\nimport { nativeFileSystemSupported } from \"../data/filesystem\";\nimport type { Theme } from \"../element/types\";\n\nimport \"../components/ToolIcon.scss\";\nimport { CaptureUpdateAction } from \"../store\";\n\nexport const actionChangeProjectName = register({\n  name: \"changeProjectName\",\n  label: \"labels.fileTitle\",\n  trackEvent: false,\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, name: value },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ appState, updateData, appProps, data, app }) => (\n    <ProjectName\n      label={t(\"labels.fileTitle\")}\n      value={app.getName()}\n      onChange={(name: string) => updateData(name)}\n      ignoreFocus={data?.ignoreFocus ?? false}\n    />\n  ),\n});\n\nexport const actionChangeExportScale = register({\n  name: \"changeExportScale\",\n  label: \"imageExportDialog.scale\",\n  trackEvent: { category: \"export\", action: \"scale\" },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportScale: value },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ elements: allElements, appState, updateData }) => {\n    const elements = getNonDeletedElements(allElements);\n    const exportSelected = isSomeElementSelected(elements, appState);\n    const exportedElements = exportSelected\n      ? getSelectedElements(elements, appState)\n      : elements;\n\n    return (\n      <>\n        {EXPORT_SCALES.map((s) => {\n          const [width, height] = getExportSize(\n            exportedElements,\n            DEFAULT_EXPORT_PADDING,\n            s,\n          );\n\n          const scaleButtonTitle = `${t(\n            \"imageExportDialog.label.scale\",\n          )} ${s}x (${width}x${height})`;\n\n          return (\n            <ToolButton\n              key={s}\n              size=\"small\"\n              type=\"radio\"\n              icon={`${s}x`}\n              name=\"export-canvas-scale\"\n              title={scaleButtonTitle}\n              aria-label={scaleButtonTitle}\n              id=\"export-canvas-scale\"\n              checked={s === appState.exportScale}\n              onChange={() => updateData(s)}\n            />\n          );\n        })}\n      </>\n    );\n  },\n});\n\nexport const actionChangeExportBackground = register({\n  name: \"changeExportBackground\",\n  label: \"imageExportDialog.label.withBackground\",\n  trackEvent: { category: \"export\", action: \"toggleBackground\" },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportBackground: value },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <CheckboxItem\n      checked={appState.exportBackground}\n      onChange={(checked) => updateData(checked)}\n    >\n      {t(\"imageExportDialog.label.withBackground\")}\n    </CheckboxItem>\n  ),\n});\n\nexport const actionChangeExportEmbedScene = register({\n  name: \"changeExportEmbedScene\",\n  label: \"imageExportDialog.tooltip.embedScene\",\n  trackEvent: { category: \"export\", action: \"embedScene\" },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportEmbedScene: value },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <CheckboxItem\n      checked={appState.exportEmbedScene}\n      onChange={(checked) => updateData(checked)}\n    >\n      {t(\"imageExportDialog.label.embedScene\")}\n      <Tooltip label={t(\"imageExportDialog.tooltip.embedScene\")} long={true}>\n        <div className=\"excalidraw-tooltip-icon\">{questionCircle}</div>\n      </Tooltip>\n    </CheckboxItem>\n  ),\n});\n\nexport const actionSaveToActiveFile = register({\n  name: \"saveToActiveFile\",\n  label: \"buttons.save\",\n  icon: ExportIcon,\n  trackEvent: { category: \"export\" },\n  predicate: (elements, appState, props, app) => {\n    return (\n      !!app.props.UIOptions.canvasActions.saveToActiveFile &&\n      !!appState.fileHandle &&\n      !appState.viewModeEnabled\n    );\n  },\n  perform: async (elements, appState, value, app) => {\n    const fileHandleExists = !!appState.fileHandle;\n\n    try {\n      const { fileHandle } = isImageFileHandle(appState.fileHandle)\n        ? await resaveAsImageWithScene(\n            elements,\n            appState,\n            app.files,\n            app.getName(),\n          )\n        : await saveAsJSON(elements, appState, app.files, app.getName());\n\n      return {\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n        appState: {\n          ...appState,\n          fileHandle,\n          toast: fileHandleExists\n            ? {\n                message: fileHandle?.name\n                  ? t(\"toast.fileSavedToFilename\").replace(\n                      \"{filename}\",\n                      `\"${fileHandle.name}\"`,\n                    )\n                  : t(\"toast.fileSaved\"),\n              }\n            : null,\n        },\n      };\n    } catch (error: any) {\n      if (error?.name !== \"AbortError\") {\n        console.error(error);\n      } else {\n        console.warn(error);\n      }\n      return { captureUpdate: CaptureUpdateAction.EVENTUALLY };\n    }\n  },\n  keyTest: (event) =>\n    event.key === KEYS.S && event[KEYS.CTRL_OR_CMD] && !event.shiftKey,\n});\n\nexport const actionSaveFileToDisk = register({\n  name: \"saveFileToDisk\",\n  label: \"exportDialog.disk_title\",\n  icon: ExportIcon,\n  viewMode: true,\n  trackEvent: { category: \"export\" },\n  perform: async (elements, appState, value, app) => {\n    try {\n      const { fileHandle } = await saveAsJSON(\n        elements,\n        {\n          ...appState,\n          fileHandle: null,\n        },\n        app.files,\n        app.getName(),\n      );\n      return {\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n        appState: {\n          ...appState,\n          openDialog: null,\n          fileHandle,\n          toast: { message: t(\"toast.fileSaved\") },\n        },\n      };\n    } catch (error: any) {\n      if (error?.name !== \"AbortError\") {\n        console.error(error);\n      } else {\n        console.warn(error);\n      }\n      return { captureUpdate: CaptureUpdateAction.EVENTUALLY };\n    }\n  },\n  keyTest: (event) =>\n    event.key === KEYS.S && event.shiftKey && event[KEYS.CTRL_OR_CMD],\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={saveAs}\n      title={t(\"buttons.saveAs\")}\n      aria-label={t(\"buttons.saveAs\")}\n      showAriaLabel={useDevice().editor.isMobile}\n      hidden={!nativeFileSystemSupported}\n      onClick={() => updateData(null)}\n      data-testid=\"save-as-button\"\n    />\n  ),\n});\n\nexport const actionLoadScene = register({\n  name: \"loadScene\",\n  label: \"buttons.load\",\n  trackEvent: { category: \"export\" },\n  predicate: (elements, appState, props, app) => {\n    return (\n      !!app.props.UIOptions.canvasActions.loadScene && !appState.viewModeEnabled\n    );\n  },\n  perform: async (elements, appState, _, app) => {\n    try {\n      const {\n        elements: loadedElements,\n        appState: loadedAppState,\n        files,\n      } = await loadFromJSON(appState, elements);\n      return {\n        elements: loadedElements,\n        appState: loadedAppState,\n        files,\n        captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n      };\n    } catch (error: any) {\n      if (error?.name === \"AbortError\") {\n        console.warn(error);\n        return false;\n      }\n      return {\n        elements,\n        appState: { ...appState, errorMessage: error.message },\n        files: app.files,\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    }\n  },\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.O,\n});\n\nexport const actionExportWithDarkMode = register({\n  name: \"exportWithDarkMode\",\n  label: \"imageExportDialog.label.darkMode\",\n  trackEvent: { category: \"export\", action: \"toggleTheme\" },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportWithDarkMode: value },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        marginTop: \"-45px\",\n        marginBottom: \"10px\",\n      }}\n    >\n      <DarkModeToggle\n        value={appState.exportWithDarkMode ? THEME.DARK : THEME.LIGHT}\n        onChange={(theme: Theme) => {\n          updateData(theme === THEME.DARK);\n        }}\n        title={t(\"imageExportDialog.label.darkMode\")}\n      />\n    </div>\n  ),\n});\n", "import {\n  isTextElement,\n  isExcalidrawElement,\n  redrawTextBoundingBox,\n} from \"../element\";\nimport { CODES, KEYS } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport {\n  DEFAULT_FONT_SIZE,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_TEXT_ALIGN,\n} from \"../constants\";\nimport { getBoundTextElement } from \"../element/textElement\";\nimport {\n  hasBoundTextElement,\n  canApplyRoundnessTypeToElement,\n  getDefaultRoundnessTypeForElement,\n  isFrameLikeElement,\n  isArrowElement,\n} from \"../element/typeChecks\";\nimport { getSelectedElements } from \"../scene\";\nimport type { ExcalidrawTextElement } from \"../element/types\";\nimport { paintIcon } from \"../components/icons\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { getLineHeight } from \"../fonts\";\n\n// `copiedStyles` is exported only for tests.\nexport let copiedStyles: string = \"{}\";\n\nexport const actionCopyStyles = register({\n  name: \"copyStyles\",\n  label: \"labels.copyStyles\",\n  icon: paintIcon,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, formData, app) => {\n    const elementsCopied = [];\n    const element = elements.find((el) => appState.selectedElementIds[el.id]);\n    elementsCopied.push(element);\n    if (element && hasBoundTextElement(element)) {\n      const boundTextElement = getBoundTextElement(\n        element,\n        app.scene.getNonDeletedElementsMap(),\n      );\n      elementsCopied.push(boundTextElement);\n    }\n    if (element) {\n      copiedStyles = JSON.stringify(elementsCopied);\n    }\n    return {\n      appState: {\n        ...appState,\n        toast: { message: t(\"toast.copyStyles\") },\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.C,\n});\n\nexport const actionPasteStyles = register({\n  name: \"pasteStyles\",\n  label: \"labels.pasteStyles\",\n  icon: paintIcon,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, formData, app) => {\n    const elementsCopied = JSON.parse(copiedStyles);\n    const pastedElement = elementsCopied[0];\n    const boundTextElement = elementsCopied[1];\n    if (!isExcalidrawElement(pastedElement)) {\n      return { elements, captureUpdate: CaptureUpdateAction.EVENTUALLY };\n    }\n\n    const selectedElements = getSelectedElements(elements, appState, {\n      includeBoundTextElement: true,\n    });\n    const selectedElementIds = selectedElements.map((element) => element.id);\n    return {\n      elements: elements.map((element) => {\n        if (selectedElementIds.includes(element.id)) {\n          let elementStylesToCopyFrom = pastedElement;\n          if (isTextElement(element) && element.containerId) {\n            elementStylesToCopyFrom = boundTextElement;\n          }\n          if (!elementStylesToCopyFrom) {\n            return element;\n          }\n          let newElement = newElementWith(element, {\n            backgroundColor: elementStylesToCopyFrom?.backgroundColor,\n            strokeWidth: elementStylesToCopyFrom?.strokeWidth,\n            strokeColor: elementStylesToCopyFrom?.strokeColor,\n            strokeStyle: elementStylesToCopyFrom?.strokeStyle,\n            fillStyle: elementStylesToCopyFrom?.fillStyle,\n            opacity: elementStylesToCopyFrom?.opacity,\n            roughness: elementStylesToCopyFrom?.roughness,\n            roundness: elementStylesToCopyFrom.roundness\n              ? canApplyRoundnessTypeToElement(\n                  elementStylesToCopyFrom.roundness.type,\n                  element,\n                )\n                ? elementStylesToCopyFrom.roundness\n                : getDefaultRoundnessTypeForElement(element)\n              : null,\n          });\n\n          if (isTextElement(newElement)) {\n            const fontSize =\n              (elementStylesToCopyFrom as ExcalidrawTextElement).fontSize ||\n              DEFAULT_FONT_SIZE;\n            const fontFamily =\n              (elementStylesToCopyFrom as ExcalidrawTextElement).fontFamily ||\n              DEFAULT_FONT_FAMILY;\n            newElement = newElementWith(newElement, {\n              fontSize,\n              fontFamily,\n              textAlign:\n                (elementStylesToCopyFrom as ExcalidrawTextElement).textAlign ||\n                DEFAULT_TEXT_ALIGN,\n              lineHeight:\n                (elementStylesToCopyFrom as ExcalidrawTextElement).lineHeight ||\n                getLineHeight(fontFamily),\n            });\n            let container = null;\n            if (newElement.containerId) {\n              container =\n                selectedElements.find(\n                  (element) =>\n                    isTextElement(newElement) &&\n                    element.id === newElement.containerId,\n                ) || null;\n            }\n            redrawTextBoundingBox(\n              newElement,\n              container,\n              app.scene.getNonDeletedElementsMap(),\n            );\n          }\n\n          if (\n            newElement.type === \"arrow\" &&\n            isArrowElement(elementStylesToCopyFrom)\n          ) {\n            newElement = newElementWith(newElement, {\n              startArrowhead: elementStylesToCopyFrom.startArrowhead,\n              endArrowhead: elementStylesToCopyFrom.endArrowhead,\n            });\n          }\n\n          if (isFrameLikeElement(element)) {\n            newElement = newElementWith(newElement, {\n              roundness: null,\n              backgroundColor: \"transparent\",\n            });\n          }\n\n          return newElement;\n        }\n        return element;\n      }),\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.V,\n});\n", "import { HamburgerMenuIcon, HelpIconThin, palette } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { showSelectedShapeActions, getNonDeletedElements } from \"../element\";\nimport { register } from \"./register\";\nimport { KEYS } from \"../keys\";\nimport { CaptureUpdateAction } from \"../store\";\n\nexport const actionToggleCanvasMenu = register({\n  name: \"toggleCanvasMenu\",\n  label: \"buttons.menu\",\n  trackEvent: { category: \"menu\" },\n  perform: (_, appState) => ({\n    appState: {\n      ...appState,\n      openMenu: appState.openMenu === \"canvas\" ? null : \"canvas\",\n    },\n    captureUpdate: CaptureUpdateAction.EVENTUALLY,\n  }),\n  PanelComponent: ({ appState, updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={HamburgerMenuIcon}\n      aria-label={t(\"buttons.menu\")}\n      onClick={updateData}\n      selected={appState.openMenu === \"canvas\"}\n    />\n  ),\n});\n\nexport const actionToggleEditMenu = register({\n  name: \"toggleEditMenu\",\n  label: \"buttons.edit\",\n  trackEvent: { category: \"menu\" },\n  perform: (_elements, appState) => ({\n    appState: {\n      ...appState,\n      openMenu: appState.openMenu === \"shape\" ? null : \"shape\",\n    },\n    captureUpdate: CaptureUpdateAction.EVENTUALLY,\n  }),\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      visible={showSelectedShapeActions(\n        appState,\n        getNonDeletedElements(elements),\n      )}\n      type=\"button\"\n      icon={palette}\n      aria-label={t(\"buttons.edit\")}\n      onClick={updateData}\n      selected={appState.openMenu === \"shape\"}\n    />\n  ),\n});\n\nexport const actionShortcuts = register({\n  name: \"toggleShortcuts\",\n  label: \"welcomeScreen.defaults.helpHint\",\n  icon: HelpIconThin,\n  viewMode: true,\n  trackEvent: { category: \"menu\", action: \"toggleHelpDialog\" },\n  perform: (_elements, appState, _, { focusContainer }) => {\n    if (appState.openDialog?.name === \"help\") {\n      focusContainer();\n    }\n    return {\n      appState: {\n        ...appState,\n        openDialog:\n          appState.openDialog?.name === \"help\"\n            ? null\n            : {\n                name: \"help\",\n              },\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  keyTest: (event) => event.key === KEYS.QUESTION_MARK,\n});\n", "import { KEYS } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { arrayToMap, getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nimport { UngroupIcon, GroupIcon } from \"../components/icons\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { isSomeElementSelected } from \"../scene\";\nimport {\n  getSelectedGroupIds,\n  selectGroup,\n  selectGroupsForSelectedElements,\n  getElementsInGroup,\n  addToGroup,\n  removeFromSelectedGroups,\n  isElementInGroup,\n} from \"../groups\";\nimport { getNonDeletedElements } from \"../element\";\nimport { randomId } from \"../random\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport type {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  OrderedExcalidrawElement,\n} from \"../element/types\";\nimport type { AppClassProperties, AppState } from \"../types\";\nimport { isBoundToContainer } from \"../element/typeChecks\";\nimport {\n  frameAndChildrenSelectedTogether,\n  getElementsInResizingFrame,\n  getFrameLikeElements,\n  getRootElements,\n  groupByFrameLikes,\n  removeElementsFromFrame,\n  replaceAllElementsInFrame,\n} from \"../frame\";\nimport { syncMovedIndices } from \"../fractionalIndex\";\nimport { CaptureUpdateAction } from \"../store\";\n\nconst allElementsInSameGroup = (elements: readonly ExcalidrawElement[]) => {\n  if (elements.length >= 2) {\n    const groupIds = elements[0].groupIds;\n    for (const groupId of groupIds) {\n      if (\n        elements.reduce(\n          (acc, element) => acc && isElementInGroup(element, groupId),\n          true,\n        )\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst enableActionGroup = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  app: AppClassProperties,\n) => {\n  const selectedElements = app.scene.getSelectedElements({\n    selectedElementIds: appState.selectedElementIds,\n    includeBoundTextElement: true,\n  });\n\n  return (\n    selectedElements.length >= 2 &&\n    !allElementsInSameGroup(selectedElements) &&\n    !frameAndChildrenSelectedTogether(selectedElements)\n  );\n};\n\nexport const actionGroup = register({\n  name: \"group\",\n  label: \"labels.group\",\n  icon: (appState) => <GroupIcon theme={appState.theme} />,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = getRootElements(\n      app.scene.getSelectedElements({\n        selectedElementIds: appState.selectedElementIds,\n        includeBoundTextElement: true,\n      }),\n    );\n    if (selectedElements.length < 2) {\n      // nothing to group\n      return {\n        appState,\n        elements,\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    }\n    // if everything is already grouped into 1 group, there is nothing to do\n    const selectedGroupIds = getSelectedGroupIds(appState);\n    if (selectedGroupIds.length === 1) {\n      const selectedGroupId = selectedGroupIds[0];\n      const elementIdsInGroup = new Set(\n        getElementsInGroup(elements, selectedGroupId).map(\n          (element) => element.id,\n        ),\n      );\n      const selectedElementIds = new Set(\n        selectedElements.map((element) => element.id),\n      );\n      const combinedSet = new Set([\n        ...Array.from(elementIdsInGroup),\n        ...Array.from(selectedElementIds),\n      ]);\n      if (combinedSet.size === elementIdsInGroup.size) {\n        // no incremental ids in the selected ids\n        return {\n          appState,\n          elements,\n          captureUpdate: CaptureUpdateAction.EVENTUALLY,\n        };\n      }\n    }\n\n    let nextElements = [...elements];\n\n    // this includes the case where we are grouping elements inside a frame\n    // and elements outside that frame\n    const groupingElementsFromDifferentFrames =\n      new Set(selectedElements.map((element) => element.frameId)).size > 1;\n    // when it happens, we want to remove elements that are in the frame\n    // and are going to be grouped from the frame (mouthful, I know)\n    if (groupingElementsFromDifferentFrames) {\n      const frameElementsMap = groupByFrameLikes(selectedElements);\n\n      frameElementsMap.forEach((elementsInFrame, frameId) => {\n        removeElementsFromFrame(\n          elementsInFrame,\n          app.scene.getNonDeletedElementsMap(),\n        );\n      });\n    }\n\n    const newGroupId = randomId();\n    const selectElementIds = arrayToMap(selectedElements);\n\n    nextElements = nextElements.map((element) => {\n      if (!selectElementIds.get(element.id)) {\n        return element;\n      }\n      return newElementWith(element, {\n        groupIds: addToGroup(\n          element.groupIds,\n          newGroupId,\n          appState.editingGroupId,\n        ),\n      });\n    });\n    // keep the z order within the group the same, but move them\n    // to the z order of the highest element in the layer stack\n    const elementsInGroup = getElementsInGroup(nextElements, newGroupId);\n    const lastElementInGroup = elementsInGroup[elementsInGroup.length - 1];\n    const lastGroupElementIndex = nextElements.lastIndexOf(\n      lastElementInGroup as OrderedExcalidrawElement,\n    );\n    const elementsAfterGroup = nextElements.slice(lastGroupElementIndex + 1);\n    const elementsBeforeGroup = nextElements\n      .slice(0, lastGroupElementIndex)\n      .filter(\n        (updatedElement) => !isElementInGroup(updatedElement, newGroupId),\n      );\n    const reorderedElements = syncMovedIndices(\n      [...elementsBeforeGroup, ...elementsInGroup, ...elementsAfterGroup],\n      arrayToMap(elementsInGroup),\n    );\n\n    return {\n      appState: {\n        ...appState,\n        ...selectGroup(\n          newGroupId,\n          { ...appState, selectedGroupIds: {} },\n          getNonDeletedElements(nextElements),\n        ),\n      },\n      elements: reorderedElements,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  predicate: (elements, appState, _, app) =>\n    enableActionGroup(elements, appState, app),\n  keyTest: (event) =>\n    !event.shiftKey && event[KEYS.CTRL_OR_CMD] && event.key === KEYS.G,\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!enableActionGroup(elements, appState, app)}\n      type=\"button\"\n      icon={<GroupIcon theme={appState.theme} />}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.group\")} \u2014 ${getShortcutKey(\"CtrlOrCmd+G\")}`}\n      aria-label={t(\"labels.group\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    ></ToolButton>\n  ),\n});\n\nexport const actionUngroup = register({\n  name: \"ungroup\",\n  label: \"labels.ungroup\",\n  icon: (appState) => <UngroupIcon theme={appState.theme} />,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    const groupIds = getSelectedGroupIds(appState);\n    const elementsMap = arrayToMap(elements);\n\n    if (groupIds.length === 0) {\n      return {\n        appState,\n        elements,\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    }\n\n    let nextElements = [...elements];\n\n    const boundTextElementIds: ExcalidrawTextElement[\"id\"][] = [];\n    nextElements = nextElements.map((element) => {\n      if (isBoundToContainer(element)) {\n        boundTextElementIds.push(element.id);\n      }\n      const nextGroupIds = removeFromSelectedGroups(\n        element.groupIds,\n        appState.selectedGroupIds,\n      );\n      if (nextGroupIds.length === element.groupIds.length) {\n        return element;\n      }\n      return newElementWith(element, {\n        groupIds: nextGroupIds,\n      });\n    });\n\n    const updateAppState = selectGroupsForSelectedElements(\n      appState,\n      getNonDeletedElements(nextElements),\n      appState,\n      null,\n    );\n\n    const selectedElements = app.scene.getSelectedElements(appState);\n\n    const selectedElementFrameIds = new Set(\n      selectedElements\n        .filter((element) => element.frameId)\n        .map((element) => element.frameId!),\n    );\n\n    const targetFrames = getFrameLikeElements(elements).filter((frame) =>\n      selectedElementFrameIds.has(frame.id),\n    );\n\n    targetFrames.forEach((frame) => {\n      if (frame) {\n        nextElements = replaceAllElementsInFrame(\n          nextElements,\n          getElementsInResizingFrame(\n            nextElements,\n            frame,\n            appState,\n            elementsMap,\n          ),\n          frame,\n          app,\n        );\n      }\n    });\n\n    // remove binded text elements from selection\n    updateAppState.selectedElementIds = Object.entries(\n      updateAppState.selectedElementIds,\n    ).reduce(\n      (acc: { [key: ExcalidrawElement[\"id\"]]: true }, [id, selected]) => {\n        if (selected && !boundTextElementIds.includes(id)) {\n          acc[id] = true;\n        }\n        return acc;\n      },\n      {},\n    );\n\n    return {\n      appState: { ...appState, ...updateAppState },\n      elements: nextElements,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    event.shiftKey &&\n    event[KEYS.CTRL_OR_CMD] &&\n    event.key === KEYS.G.toUpperCase(),\n  predicate: (elements, appState) => getSelectedGroupIds(appState).length > 0,\n\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      type=\"button\"\n      hidden={getSelectedGroupIds(appState).length === 0}\n      icon={<UngroupIcon theme={appState.theme} />}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.ungroup\")} \u2014 ${getShortcutKey(\"CtrlOrCmd+Shift+G\")}`}\n      aria-label={t(\"labels.ungroup\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    ></ToolButton>\n  ),\n});\n", "/**\n * https://stackoverflow.com/a/3368118\n * Draws a rounded rectangle using the current state of the canvas.\n * @param {CanvasRenderingContext2D} context\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} radius The corner radius\n */\nexport const roundRect = (\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number,\n  strokeColor?: string,\n) => {\n  context.beginPath();\n  context.moveTo(x + radius, y);\n  context.lineTo(x + width - radius, y);\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\n  context.lineTo(x + width, y + height - radius);\n  context.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius,\n    y + height,\n  );\n  context.lineTo(x + radius, y + height);\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\n  context.lineTo(x, y + radius);\n  context.quadraticCurveTo(x, y, x + radius, y);\n  context.closePath();\n  context.fill();\n  if (strokeColor) {\n    context.strokeStyle = strokeColor;\n  }\n  context.stroke();\n};\n", "import {\n  COLOR_CHARCOAL_BLACK,\n  COLOR_VOICE_CALL,\n  COLOR_WHITE,\n  THEME,\n  UserIdleState,\n} from \"./constants\";\nimport { roundRect } from \"./renderer/roundRect\";\nimport type { InteractiveCanvasRenderConfig } from \"./scene/types\";\nimport type {\n  Collaborator,\n  InteractiveCanvasAppState,\n  SocketId,\n} from \"./types\";\n\nfunction hashToInteger(id: string) {\n  let hash = 0;\n  if (id.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < id.length; i++) {\n    const char = id.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n  }\n  return hash;\n}\n\nexport const getClientColor = (\n  socketId: SocketId,\n  collaborator: Collaborator | undefined,\n) => {\n  // to get more even distribution in case `id` is not uniformly distributed to\n  // begin with, we hash it\n  const hash = Math.abs(hashToInteger(collaborator?.id || socketId));\n  // we want to get a multiple of 10 number in the range of 0-360 (in other\n  // words a hue value of step size 10). There are 37 such values including 0.\n  const hue = (hash % 37) * 10;\n  const saturation = 100;\n  const lightness = 83;\n\n  return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n};\n\n/**\n * returns first char, capitalized\n */\nexport const getNameInitial = (name?: string | null) => {\n  // first char can be a surrogate pair, hence using codePointAt\n  const firstCodePoint = name?.trim()?.codePointAt(0);\n  return (\n    firstCodePoint ? String.fromCodePoint(firstCodePoint) : \"?\"\n  ).toUpperCase();\n};\n\nexport const renderRemoteCursors = ({\n  context,\n  renderConfig,\n  appState,\n  normalizedWidth,\n  normalizedHeight,\n}: {\n  context: CanvasRenderingContext2D;\n  renderConfig: InteractiveCanvasRenderConfig;\n  appState: InteractiveCanvasAppState;\n  normalizedWidth: number;\n  normalizedHeight: number;\n}) => {\n  // Paint remote pointers\n  for (const [socketId, pointer] of renderConfig.remotePointerViewportCoords) {\n    let { x, y } = pointer;\n\n    const collaborator = appState.collaborators.get(socketId);\n\n    x -= appState.offsetLeft;\n    y -= appState.offsetTop;\n\n    const width = 11;\n    const height = 14;\n\n    const isOutOfBounds =\n      x < 0 ||\n      x > normalizedWidth - width ||\n      y < 0 ||\n      y > normalizedHeight - height;\n\n    x = Math.max(x, 0);\n    x = Math.min(x, normalizedWidth - width);\n    y = Math.max(y, 0);\n    y = Math.min(y, normalizedHeight - height);\n\n    const background = getClientColor(socketId, collaborator);\n\n    context.save();\n    context.strokeStyle = background;\n    context.fillStyle = background;\n\n    const userState = renderConfig.remotePointerUserStates.get(socketId);\n    const isInactive =\n      isOutOfBounds ||\n      userState === UserIdleState.IDLE ||\n      userState === UserIdleState.AWAY;\n\n    if (isInactive) {\n      context.globalAlpha = 0.3;\n    }\n\n    if (renderConfig.remotePointerButton.get(socketId) === \"down\") {\n      context.beginPath();\n      context.arc(x, y, 15, 0, 2 * Math.PI, false);\n      context.lineWidth = 3;\n      context.strokeStyle = \"#ffffff88\";\n      context.stroke();\n      context.closePath();\n\n      context.beginPath();\n      context.arc(x, y, 15, 0, 2 * Math.PI, false);\n      context.lineWidth = 1;\n      context.strokeStyle = background;\n      context.stroke();\n      context.closePath();\n    }\n\n    // TODO remove the dark theme color after we stop inverting canvas colors\n    const IS_SPEAKING_COLOR =\n      appState.theme === THEME.DARK ? \"#2f6330\" : COLOR_VOICE_CALL;\n\n    const isSpeaking = collaborator?.isSpeaking;\n\n    if (isSpeaking) {\n      // cursor outline for currently speaking user\n      context.fillStyle = IS_SPEAKING_COLOR;\n      context.strokeStyle = IS_SPEAKING_COLOR;\n      context.lineWidth = 10;\n      context.lineJoin = \"round\";\n      context.beginPath();\n      context.moveTo(x, y);\n      context.lineTo(x + 0, y + 14);\n      context.lineTo(x + 4, y + 9);\n      context.lineTo(x + 11, y + 8);\n      context.closePath();\n      context.stroke();\n      context.fill();\n    }\n\n    // Background (white outline) for arrow\n    context.fillStyle = COLOR_WHITE;\n    context.strokeStyle = COLOR_WHITE;\n    context.lineWidth = 6;\n    context.lineJoin = \"round\";\n    context.beginPath();\n    context.moveTo(x, y);\n    context.lineTo(x + 0, y + 14);\n    context.lineTo(x + 4, y + 9);\n    context.lineTo(x + 11, y + 8);\n    context.closePath();\n    context.stroke();\n    context.fill();\n\n    // Arrow\n    context.fillStyle = background;\n    context.strokeStyle = background;\n    context.lineWidth = 2;\n    context.lineJoin = \"round\";\n    context.beginPath();\n    if (isInactive) {\n      context.moveTo(x - 1, y - 1);\n      context.lineTo(x - 1, y + 15);\n      context.lineTo(x + 5, y + 10);\n      context.lineTo(x + 12, y + 9);\n      context.closePath();\n      context.fill();\n    } else {\n      context.moveTo(x, y);\n      context.lineTo(x + 0, y + 14);\n      context.lineTo(x + 4, y + 9);\n      context.lineTo(x + 11, y + 8);\n      context.closePath();\n      context.fill();\n      context.stroke();\n    }\n\n    const username = renderConfig.remotePointerUsernames.get(socketId) || \"\";\n\n    if (!isOutOfBounds && username) {\n      context.font = \"600 12px sans-serif\"; // font has to be set before context.measureText()\n\n      const offsetX = (isSpeaking ? x + 0 : x) + width / 2;\n      const offsetY = (isSpeaking ? y + 0 : y) + height + 2;\n      const paddingHorizontal = 5;\n      const paddingVertical = 3;\n      const measure = context.measureText(username);\n      const measureHeight =\n        measure.actualBoundingBoxDescent + measure.actualBoundingBoxAscent;\n      const finalHeight = Math.max(measureHeight, 12);\n\n      const boxX = offsetX - 1;\n      const boxY = offsetY - 1;\n      const boxWidth = measure.width + 2 + paddingHorizontal * 2 + 2;\n      const boxHeight = finalHeight + 2 + paddingVertical * 2 + 2;\n      if (context.roundRect) {\n        context.beginPath();\n        context.roundRect(boxX, boxY, boxWidth, boxHeight, 8);\n        context.fillStyle = background;\n        context.fill();\n        context.strokeStyle = COLOR_WHITE;\n        context.stroke();\n\n        if (isSpeaking) {\n          context.beginPath();\n          context.roundRect(boxX - 2, boxY - 2, boxWidth + 4, boxHeight + 4, 8);\n          context.strokeStyle = IS_SPEAKING_COLOR;\n          context.stroke();\n        }\n      } else {\n        roundRect(context, boxX, boxY, boxWidth, boxHeight, 8, COLOR_WHITE);\n      }\n      context.fillStyle = COLOR_CHARCOAL_BLACK;\n\n      context.fillText(\n        username,\n        offsetX + paddingHorizontal + 1,\n        offsetY +\n          paddingVertical +\n          measure.actualBoundingBoxAscent +\n          Math.floor((finalHeight - measureHeight) / 2) +\n          2,\n      );\n\n      // draw three vertical bars signalling someone is speaking\n      if (isSpeaking) {\n        context.fillStyle = IS_SPEAKING_COLOR;\n        const barheight = 8;\n        const margin = 8;\n        const gap = 5;\n        context.fillRect(\n          boxX + boxWidth + margin,\n          boxY + (boxHeight / 2 - barheight / 2),\n          2,\n          barheight,\n        );\n        context.fillRect(\n          boxX + boxWidth + margin + gap,\n          boxY + (boxHeight / 2 - (barheight * 2) / 2),\n          2,\n          barheight * 2,\n        );\n        context.fillRect(\n          boxX + boxWidth + margin + gap * 2,\n          boxY + (boxHeight / 2 - barheight / 2),\n          2,\n          barheight,\n        );\n      }\n    }\n\n    context.restore();\n    context.closePath();\n  }\n};\n", "import \"./Avatar.scss\";\n\nimport React, { useState } from \"react\";\nimport { getNameInitial } from \"../clients\";\nimport clsx from \"clsx\";\n\ntype AvatarProps = {\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  color: string;\n  name: string;\n  src?: string;\n  className?: string;\n};\n\nexport const Avatar = ({\n  color,\n  onClick,\n  name,\n  src,\n  className,\n}: AvatarProps) => {\n  const shortName = getNameInitial(name);\n  const [error, setError] = useState(false);\n  const loadImg = !error && src;\n  const style = loadImg ? undefined : { background: color };\n  return (\n    <div className={clsx(\"Avatar\", className)} style={style} onClick={onClick}>\n      {loadImg ? (\n        <img\n          className=\"Avatar-img\"\n          src={src}\n          alt={shortName}\n          referrerPolicy=\"no-referrer\"\n          onError={() => setError(true)}\n        />\n      ) : (\n        shortName\n      )}\n    </div>\n  );\n};\n", "import { getClientColor } from \"../clients\";\nimport { Avatar } from \"../components/Avatar\";\nimport type { GoToCollaboratorComponentProps } from \"../components/UserList\";\nimport {\n  eyeIcon,\n  microphoneIcon,\n  microphoneMutedIcon,\n} from \"../components/icons\";\nimport { t } from \"../i18n\";\nimport { CaptureUpdateAction } from \"../store\";\nimport type { Collaborator } from \"../types\";\nimport { register } from \"./register\";\nimport clsx from \"clsx\";\n\nexport const actionGoToCollaborator = register({\n  name: \"goToCollaborator\",\n  label: \"Go to a collaborator\",\n  viewMode: true,\n  trackEvent: { category: \"collab\" },\n  perform: (_elements, appState, collaborator: Collaborator) => {\n    if (\n      !collaborator.socketId ||\n      appState.userToFollow?.socketId === collaborator.socketId ||\n      collaborator.isCurrentUser\n    ) {\n      return {\n        appState: {\n          ...appState,\n          userToFollow: null,\n        },\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    }\n\n    return {\n      appState: {\n        ...appState,\n        userToFollow: {\n          socketId: collaborator.socketId,\n          username: collaborator.username || \"\",\n        },\n        // Close mobile menu\n        openMenu: appState.openMenu === \"canvas\" ? null : appState.openMenu,\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  PanelComponent: ({ updateData, data, appState }) => {\n    const { socketId, collaborator, withName, isBeingFollowed } =\n      data as GoToCollaboratorComponentProps;\n\n    const background = getClientColor(socketId, collaborator);\n\n    const statusClassNames = clsx({\n      \"is-followed\": isBeingFollowed,\n      \"is-current-user\": collaborator.isCurrentUser === true,\n      \"is-speaking\": collaborator.isSpeaking,\n      \"is-in-call\": collaborator.isInCall,\n      \"is-muted\": collaborator.isMuted,\n    });\n\n    const statusIconJSX = collaborator.isInCall ? (\n      collaborator.isSpeaking ? (\n        <div\n          className=\"UserList__collaborator-status-icon-speaking-indicator\"\n          title={t(\"userList.hint.isSpeaking\")}\n        >\n          <div />\n          <div />\n          <div />\n        </div>\n      ) : collaborator.isMuted ? (\n        <div\n          className=\"UserList__collaborator-status-icon-microphone-muted\"\n          title={t(\"userList.hint.micMuted\")}\n        >\n          {microphoneMutedIcon}\n        </div>\n      ) : (\n        <div title={t(\"userList.hint.inCall\")}>{microphoneIcon}</div>\n      )\n    ) : null;\n\n    return withName ? (\n      <div\n        className={`dropdown-menu-item dropdown-menu-item-base UserList__collaborator ${statusClassNames}`}\n        style={{ [`--avatar-size` as any]: \"1.5rem\" }}\n        onClick={() => updateData<Collaborator>(collaborator)}\n      >\n        <Avatar\n          color={background}\n          onClick={() => {}}\n          name={collaborator.username || \"\"}\n          src={collaborator.avatarUrl}\n          className={statusClassNames}\n        />\n        <div className=\"UserList__collaborator-name\">\n          {collaborator.username}\n        </div>\n        <div className=\"UserList__collaborator-status-icons\" aria-hidden>\n          {isBeingFollowed && (\n            <div\n              className=\"UserList__collaborator-status-icon-is-followed\"\n              title={t(\"userList.hint.followStatus\")}\n            >\n              {eyeIcon}\n            </div>\n          )}\n          {statusIconJSX}\n        </div>\n      </div>\n    ) : (\n      <div\n        className={`UserList__collaborator UserList__collaborator--avatar-only ${statusClassNames}`}\n      >\n        <Avatar\n          color={background}\n          onClick={() => {\n            updateData(collaborator);\n          }}\n          name={collaborator.username || \"\"}\n          src={collaborator.avatarUrl}\n          className={statusClassNames}\n        />\n        {statusIconJSX && (\n          <div className=\"UserList__collaborator-status-icon\">\n            {statusIconJSX}\n          </div>\n        )}\n      </div>\n    );\n  },\n});\n", "import { register } from \"./register\";\nimport { deepCopyElement } from \"../element/newElement\";\nimport { randomId } from \"../random\";\nimport { t } from \"../i18n\";\nimport { LIBRARY_DISABLED_TYPES } from \"../constants\";\nimport { CaptureUpdateAction } from \"../store\";\n\nexport const actionAddToLibrary = register({\n  name: \"addToLibrary\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n      includeBoundTextElement: true,\n      includeElementsInFrames: true,\n    });\n\n    for (const type of LIBRARY_DISABLED_TYPES) {\n      if (selectedElements.some((element) => element.type === type)) {\n        return {\n          captureUpdate: CaptureUpdateAction.EVENTUALLY,\n          appState: {\n            ...appState,\n            errorMessage: t(`errors.libraryElementTypeError.${type}`),\n          },\n        };\n      }\n    }\n\n    return app.library\n      .getLatestLibrary()\n      .then((items) => {\n        return app.library.setLibrary([\n          {\n            id: randomId(),\n            status: \"unpublished\",\n            elements: selectedElements.map(deepCopyElement),\n            created: Date.now(),\n          },\n          ...items,\n        ]);\n      })\n      .then(() => {\n        return {\n          captureUpdate: CaptureUpdateAction.EVENTUALLY,\n          appState: {\n            ...appState,\n            toast: { message: t(\"toast.addedToLibrary\") },\n          },\n        };\n      })\n      .catch((error) => {\n        return {\n          captureUpdate: CaptureUpdateAction.EVENTUALLY,\n          appState: {\n            ...appState,\n            errorMessage: error.message,\n          },\n        };\n      });\n  },\n  label: \"labels.addToLibrary\",\n});\n", "import type { ElementsMap, ExcalidrawElement } from \"./element/types\";\nimport { mutateElement } from \"./element/mutateElement\";\nimport type { BoundingBox } from \"./element/bounds\";\nimport { getCommonBoundingBox } from \"./element/bounds\";\nimport { getMaximumGroups } from \"./groups\";\nimport { updateBoundElements } from \"./element/binding\";\nimport type Scene from \"./scene/Scene\";\n\nexport interface Alignment {\n  position: \"start\" | \"center\" | \"end\";\n  axis: \"x\" | \"y\";\n}\n\nexport const alignElements = (\n  selectedElements: ExcalidrawElement[],\n  elementsMap: ElementsMap,\n  alignment: Alignment,\n  scene: Scene,\n): ExcalidrawElement[] => {\n  const groups: ExcalidrawElement[][] = getMaximumGroups(\n    selectedElements,\n    elementsMap,\n  );\n  const selectionBoundingBox = getCommonBoundingBox(selectedElements);\n\n  return groups.flatMap((group) => {\n    const translation = calculateTranslation(\n      group,\n      selectionBoundingBox,\n      alignment,\n    );\n    return group.map((element) => {\n      // update element\n      const updatedEle = mutateElement(element, {\n        x: element.x + translation.x,\n        y: element.y + translation.y,\n      });\n      // update bound elements\n      updateBoundElements(element, scene.getNonDeletedElementsMap(), {\n        simultaneouslyUpdated: group,\n      });\n      return updatedEle;\n    });\n  });\n};\n\nconst calculateTranslation = (\n  group: ExcalidrawElement[],\n  selectionBoundingBox: BoundingBox,\n  { axis, position }: Alignment,\n): { x: number; y: number } => {\n  const groupBoundingBox = getCommonBoundingBox(group);\n\n  const [min, max]: [\"minX\" | \"minY\", \"maxX\" | \"maxY\"] =\n    axis === \"x\" ? [\"minX\", \"maxX\"] : [\"minY\", \"maxY\"];\n\n  const noTranslation = { x: 0, y: 0 };\n  if (position === \"start\") {\n    return {\n      ...noTranslation,\n      [axis]: selectionBoundingBox[min] - groupBoundingBox[min],\n    };\n  } else if (position === \"end\") {\n    return {\n      ...noTranslation,\n      [axis]: selectionBoundingBox[max] - groupBoundingBox[max],\n    };\n  } // else if (position === \"center\") {\n  return {\n    ...noTranslation,\n    [axis]:\n      (selectionBoundingBox[min] + selectionBoundingBox[max]) / 2 -\n      (groupBoundingBox[min] + groupBoundingBox[max]) / 2,\n  };\n};\n", "import type { Alignment } from \"../align\";\nimport { alignElements } from \"../align\";\nimport {\n  AlignBottomIcon,\n  AlignLeftIcon,\n  AlignRightIcon,\n  AlignTopIcon,\n  CenterHorizontallyIcon,\n  CenterVerticallyIcon,\n} from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { getNonDeletedElements } from \"../element\";\nimport { isFrameLikeElement } from \"../element/typeChecks\";\nimport type { ExcalidrawElement } from \"../element/types\";\nimport { updateFrameMembershipOfSelectedElements } from \"../frame\";\nimport { t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { isSomeElementSelected } from \"../scene\";\nimport { CaptureUpdateAction } from \"../store\";\nimport type { AppClassProperties, AppState, UIAppState } from \"../types\";\nimport { arrayToMap, getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\n\nexport const alignActionsPredicate = (\n  appState: UIAppState,\n  app: AppClassProperties,\n) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n  return (\n    selectedElements.length > 1 &&\n    // TODO enable aligning frames when implemented properly\n    !selectedElements.some((el) => isFrameLikeElement(el))\n  );\n};\n\nconst alignSelectedElements = (\n  elements: readonly ExcalidrawElement[],\n  appState: Readonly<AppState>,\n  app: AppClassProperties,\n  alignment: Alignment,\n) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n  const elementsMap = arrayToMap(elements);\n\n  const updatedElements = alignElements(\n    selectedElements,\n    elementsMap,\n    alignment,\n    app.scene,\n  );\n\n  const updatedElementsMap = arrayToMap(updatedElements);\n\n  return updateFrameMembershipOfSelectedElements(\n    elements.map((element) => updatedElementsMap.get(element.id) || element),\n    appState,\n    app,\n  );\n};\n\nexport const actionAlignTop = register({\n  name: \"alignTop\",\n  label: \"labels.alignTop\",\n  icon: AlignTopIcon,\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, appProps, app) =>\n    alignActionsPredicate(appState, app),\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, app, {\n        position: \"start\",\n        axis: \"y\",\n      }),\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_UP,\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!alignActionsPredicate(appState, app)}\n      type=\"button\"\n      icon={AlignTopIcon}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.alignTop\")} \u2014 ${getShortcutKey(\n        \"CtrlOrCmd+Shift+Up\",\n      )}`}\n      aria-label={t(\"labels.alignTop\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const actionAlignBottom = register({\n  name: \"alignBottom\",\n  label: \"labels.alignBottom\",\n  icon: AlignBottomIcon,\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, appProps, app) =>\n    alignActionsPredicate(appState, app),\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, app, {\n        position: \"end\",\n        axis: \"y\",\n      }),\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_DOWN,\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!alignActionsPredicate(appState, app)}\n      type=\"button\"\n      icon={AlignBottomIcon}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.alignBottom\")} \u2014 ${getShortcutKey(\n        \"CtrlOrCmd+Shift+Down\",\n      )}`}\n      aria-label={t(\"labels.alignBottom\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const actionAlignLeft = register({\n  name: \"alignLeft\",\n  label: \"labels.alignLeft\",\n  icon: AlignLeftIcon,\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, appProps, app) =>\n    alignActionsPredicate(appState, app),\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, app, {\n        position: \"start\",\n        axis: \"x\",\n      }),\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_LEFT,\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!alignActionsPredicate(appState, app)}\n      type=\"button\"\n      icon={AlignLeftIcon}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.alignLeft\")} \u2014 ${getShortcutKey(\n        \"CtrlOrCmd+Shift+Left\",\n      )}`}\n      aria-label={t(\"labels.alignLeft\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const actionAlignRight = register({\n  name: \"alignRight\",\n  label: \"labels.alignRight\",\n  icon: AlignRightIcon,\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, appProps, app) =>\n    alignActionsPredicate(appState, app),\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, app, {\n        position: \"end\",\n        axis: \"x\",\n      }),\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_RIGHT,\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!alignActionsPredicate(appState, app)}\n      type=\"button\"\n      icon={AlignRightIcon}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.alignRight\")} \u2014 ${getShortcutKey(\n        \"CtrlOrCmd+Shift+Right\",\n      )}`}\n      aria-label={t(\"labels.alignRight\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const actionAlignVerticallyCentered = register({\n  name: \"alignVerticallyCentered\",\n  label: \"labels.centerVertically\",\n  icon: CenterVerticallyIcon,\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, appProps, app) =>\n    alignActionsPredicate(appState, app),\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, app, {\n        position: \"center\",\n        axis: \"y\",\n      }),\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!alignActionsPredicate(appState, app)}\n      type=\"button\"\n      icon={CenterVerticallyIcon}\n      onClick={() => updateData(null)}\n      title={t(\"labels.centerVertically\")}\n      aria-label={t(\"labels.centerVertically\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const actionAlignHorizontallyCentered = register({\n  name: \"alignHorizontallyCentered\",\n  label: \"labels.centerHorizontally\",\n  icon: CenterHorizontallyIcon,\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, appProps, app) =>\n    alignActionsPredicate(appState, app),\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, app, {\n        position: \"center\",\n        axis: \"x\",\n      }),\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!alignActionsPredicate(appState, app)}\n      type=\"button\"\n      icon={CenterHorizontallyIcon}\n      onClick={() => updateData(null)}\n      title={t(\"labels.centerHorizontally\")}\n      aria-label={t(\"labels.centerHorizontally\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n", "import { newElementWith } from \"./element/mutateElement\";\nimport { getMaximumGroups } from \"./groups\";\nimport { getCommonBoundingBox } from \"./element/bounds\";\nimport type { ElementsMap, ExcalidrawElement } from \"./element/types\";\n\nexport interface Distribution {\n  space: \"between\";\n  axis: \"x\" | \"y\";\n}\n\nexport const distributeElements = (\n  selectedElements: ExcalidrawElement[],\n  elementsMap: ElementsMap,\n  distribution: Distribution,\n): ExcalidrawElement[] => {\n  const [start, mid, end, extent] =\n    distribution.axis === \"x\"\n      ? ([\"minX\", \"midX\", \"maxX\", \"width\"] as const)\n      : ([\"minY\", \"midY\", \"maxY\", \"height\"] as const);\n\n  const bounds = getCommonBoundingBox(selectedElements);\n  const groups = getMaximumGroups(selectedElements, elementsMap)\n    .map((group) => [group, getCommonBoundingBox(group)] as const)\n    .sort((a, b) => a[1][mid] - b[1][mid]);\n\n  let span = 0;\n  for (const group of groups) {\n    span += group[1][extent];\n  }\n\n  const step = (bounds[extent] - span) / (groups.length - 1);\n\n  if (step < 0) {\n    // If we have a negative step, we'll need to distribute from centers\n    // rather than from gaps. Buckle up, this is a weird one.\n\n    // Get indices of boxes that define start and end of our bounding box\n    const index0 = groups.findIndex((g) => g[1][start] === bounds[start]);\n    const index1 = groups.findIndex((g) => g[1][end] === bounds[end]);\n\n    // Get our step, based on the distance between the center points of our\n    // start and end boxes\n    const step =\n      (groups[index1][1][mid] - groups[index0][1][mid]) / (groups.length - 1);\n\n    let pos = groups[index0][1][mid];\n\n    return groups.flatMap(([group, box], index) => {\n      const translation = {\n        x: 0,\n        y: 0,\n      };\n\n      // Don't move our start and end boxes\n      if (index !== index0 && index !== index1) {\n        pos += step;\n        translation[distribution.axis] = pos - box[mid];\n      }\n\n      return group.map((element) =>\n        newElementWith(element, {\n          x: element.x + translation.x,\n          y: element.y + translation.y,\n        }),\n      );\n    });\n  }\n\n  // Distribute from gaps\n\n  let pos = bounds[start];\n\n  return groups.flatMap(([group, box]) => {\n    const translation = {\n      x: 0,\n      y: 0,\n    };\n\n    translation[distribution.axis] = pos - box[start];\n\n    pos += step;\n    pos += box[extent];\n\n    return group.map((element) =>\n      newElementWith(element, {\n        x: element.x + translation.x,\n        y: element.y + translation.y,\n      }),\n    );\n  });\n};\n", "import {\n  DistributeHorizontallyIcon,\n  DistributeVerticallyIcon,\n} from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport type { Distribution } from \"../distribute\";\nimport { distributeElements } from \"../distribute\";\nimport { getNonDeletedElements } from \"../element\";\nimport { isFrameLikeElement } from \"../element/typeChecks\";\nimport type { ExcalidrawElement } from \"../element/types\";\nimport { updateFrameMembershipOfSelectedElements } from \"../frame\";\nimport { t } from \"../i18n\";\nimport { CODES, KEYS } from \"../keys\";\nimport { isSomeElementSelected } from \"../scene\";\nimport { CaptureUpdateAction } from \"../store\";\nimport type { AppClassProperties, AppState } from \"../types\";\nimport { arrayToMap, getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\n\nconst enableActionGroup = (appState: AppState, app: AppClassProperties) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n  return (\n    selectedElements.length > 1 &&\n    // TODO enable distributing frames when implemented properly\n    !selectedElements.some((el) => isFrameLikeElement(el))\n  );\n};\n\nconst distributeSelectedElements = (\n  elements: readonly ExcalidrawElement[],\n  appState: Readonly<AppState>,\n  app: AppClassProperties,\n  distribution: Distribution,\n) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n\n  const updatedElements = distributeElements(\n    selectedElements,\n    app.scene.getNonDeletedElementsMap(),\n    distribution,\n  );\n\n  const updatedElementsMap = arrayToMap(updatedElements);\n\n  return updateFrameMembershipOfSelectedElements(\n    elements.map((element) => updatedElementsMap.get(element.id) || element),\n    appState,\n    app,\n  );\n};\n\nexport const distributeHorizontally = register({\n  name: \"distributeHorizontally\",\n  label: \"labels.distributeHorizontally\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: distributeSelectedElements(elements, appState, app, {\n        space: \"between\",\n        axis: \"x\",\n      }),\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.H,\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!enableActionGroup(appState, app)}\n      type=\"button\"\n      icon={DistributeHorizontallyIcon}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.distributeHorizontally\")} \u2014 ${getShortcutKey(\n        \"Alt+H\",\n      )}`}\n      aria-label={t(\"labels.distributeHorizontally\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const distributeVertically = register({\n  name: \"distributeVertically\",\n  label: \"labels.distributeVertically\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: distributeSelectedElements(elements, appState, app, {\n        space: \"between\",\n        axis: \"y\",\n      }),\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.V,\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!enableActionGroup(appState, app)}\n      type=\"button\"\n      icon={DistributeVerticallyIcon}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.distributeVertically\")} \u2014 ${getShortcutKey(\"Alt+V\")}`}\n      aria-label={t(\"labels.distributeVertically\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n", "import { register } from \"./register\";\nimport { getSelectedElements } from \"../scene\";\nimport { getNonDeletedElements } from \"../element\";\nimport type {\n  ExcalidrawArrowElement,\n  ExcalidrawElbowArrowElement,\n  ExcalidrawElement,\n  NonDeleted,\n  NonDeletedSceneElementsMap,\n} from \"../element/types\";\nimport { resizeMultipleElements } from \"../element/resizeElements\";\nimport type { AppClassProperties, AppState } from \"../types\";\nimport { arrayToMap } from \"../utils\";\nimport { CODES, KEYS } from \"../keys\";\nimport {\n  bindOrUnbindLinearElements,\n  isBindingEnabled,\n} from \"../element/binding\";\nimport { updateFrameMembershipOfSelectedElements } from \"../frame\";\nimport { flipHorizontal, flipVertical } from \"../components/icons\";\nimport { CaptureUpdateAction } from \"../store\";\nimport {\n  isArrowElement,\n  isElbowArrow,\n  isLinearElement,\n} from \"../element/typeChecks\";\nimport { mutateElement, newElementWith } from \"../element/mutateElement\";\nimport { deepCopyElement } from \"../element/newElement\";\nimport { getCommonBoundingBox } from \"../element/bounds\";\n\nexport const actionFlipHorizontal = register({\n  name: \"flipHorizontal\",\n  label: \"labels.flipHorizontal\",\n  icon: flipHorizontal,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    return {\n      elements: updateFrameMembershipOfSelectedElements(\n        flipSelectedElements(\n          elements,\n          app.scene.getNonDeletedElementsMap(),\n          appState,\n          \"horizontal\",\n          app,\n        ),\n        appState,\n        app,\n      ),\n      appState,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) => event.shiftKey && event.code === CODES.H,\n});\n\nexport const actionFlipVertical = register({\n  name: \"flipVertical\",\n  label: \"labels.flipVertical\",\n  icon: flipVertical,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    return {\n      elements: updateFrameMembershipOfSelectedElements(\n        flipSelectedElements(\n          elements,\n          app.scene.getNonDeletedElementsMap(),\n          appState,\n          \"vertical\",\n          app,\n        ),\n        appState,\n        app,\n      ),\n      appState,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event) =>\n    event.shiftKey && event.code === CODES.V && !event[KEYS.CTRL_OR_CMD],\n});\n\nconst flipSelectedElements = (\n  elements: readonly ExcalidrawElement[],\n  elementsMap: NonDeletedSceneElementsMap,\n  appState: Readonly<AppState>,\n  flipDirection: \"horizontal\" | \"vertical\",\n  app: AppClassProperties,\n) => {\n  const selectedElements = getSelectedElements(\n    getNonDeletedElements(elements),\n    appState,\n    {\n      includeBoundTextElement: true,\n      includeElementsInFrames: true,\n    },\n  );\n\n  const updatedElements = flipElements(\n    selectedElements,\n    elementsMap,\n    appState,\n    flipDirection,\n    app,\n  );\n\n  const updatedElementsMap = arrayToMap(updatedElements);\n\n  return elements.map(\n    (element) => updatedElementsMap.get(element.id) || element,\n  );\n};\n\nconst flipElements = (\n  selectedElements: NonDeleted<ExcalidrawElement>[],\n  elementsMap: NonDeletedSceneElementsMap,\n  appState: AppState,\n  flipDirection: \"horizontal\" | \"vertical\",\n  app: AppClassProperties,\n): ExcalidrawElement[] => {\n  if (\n    selectedElements.every(\n      (element) =>\n        isArrowElement(element) && (element.startBinding || element.endBinding),\n    )\n  ) {\n    return selectedElements.map((element) => {\n      const _element = element as ExcalidrawArrowElement;\n      return newElementWith(_element, {\n        startArrowhead: _element.endArrowhead,\n        endArrowhead: _element.startArrowhead,\n      });\n    });\n  }\n\n  const { midX, midY } = getCommonBoundingBox(selectedElements);\n\n  resizeMultipleElements(\n    selectedElements,\n    elementsMap,\n    \"nw\",\n    app.scene,\n    new Map(\n      Array.from(elementsMap.values()).map((element) => [\n        element.id,\n        deepCopyElement(element),\n      ]),\n    ),\n    {\n      flipByX: flipDirection === \"horizontal\",\n      flipByY: flipDirection === \"vertical\",\n      shouldResizeFromCenter: true,\n      shouldMaintainAspectRatio: true,\n    },\n  );\n\n  bindOrUnbindLinearElements(\n    selectedElements.filter(isLinearElement),\n    elementsMap,\n    app.scene.getNonDeletedElements(),\n    app.scene,\n    isBindingEnabled(appState),\n    [],\n    appState.zoom,\n  );\n\n  // ---------------------------------------------------------------------------\n  // flipping arrow elements (and potentially other) makes the selection group\n  // \"move\" across the canvas because of how arrows can bump against the \"wall\"\n  // of the selection, so we need to center the group back to the original\n  // position so that repeated flips don't accumulate the offset\n\n  const { elbowArrows, otherElements } = selectedElements.reduce(\n    (\n      acc: {\n        elbowArrows: ExcalidrawElbowArrowElement[];\n        otherElements: ExcalidrawElement[];\n      },\n      element,\n    ) =>\n      isElbowArrow(element)\n        ? { ...acc, elbowArrows: acc.elbowArrows.concat(element) }\n        : { ...acc, otherElements: acc.otherElements.concat(element) },\n    { elbowArrows: [], otherElements: [] },\n  );\n\n  const { midX: newMidX, midY: newMidY } =\n    getCommonBoundingBox(selectedElements);\n  const [diffX, diffY] = [midX - newMidX, midY - newMidY];\n  otherElements.forEach((element) =>\n    mutateElement(element, {\n      x: element.x + diffX,\n      y: element.y + diffY,\n    }),\n  );\n  elbowArrows.forEach((element) =>\n    mutateElement(element, {\n      x: element.x + diffX,\n      y: element.y + diffY,\n    }),\n  );\n  // ---------------------------------------------------------------------------\n\n  return selectedElements;\n};\n", "import { CODES, KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport {\n  copyTextToSystemClipboard,\n  copyToClipboard,\n  createPasteEvent,\n  probablySupportsClipboardBlob,\n  probablySupportsClipboardWriteText,\n  readSystemClipboard,\n} from \"../clipboard\";\nimport { actionDeleteSelected } from \"./actionDeleteSelected\";\nimport { exportCanvas, prepareElementsForExport } from \"../data/index\";\nimport { getTextFromElements, isTextElement } from \"../element\";\nimport { t } from \"../i18n\";\nimport { isFirefox } from \"../constants\";\nimport { DuplicateIcon, cutIcon, pngIcon, svgIcon } from \"../components/icons\";\nimport { CaptureUpdateAction } from \"../store\";\n\nexport const actionCopy = register({\n  name: \"copy\",\n  label: \"labels.copy\",\n  icon: DuplicateIcon,\n  trackEvent: { category: \"element\" },\n  perform: async (elements, appState, event: ClipboardEvent | null, app) => {\n    const elementsToCopy = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n      includeBoundTextElement: true,\n      includeElementsInFrames: true,\n    });\n\n    try {\n      await copyToClipboard(elementsToCopy, app.files, event);\n    } catch (error: any) {\n      return {\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n        appState: {\n          ...appState,\n          errorMessage: error.message,\n        },\n      };\n    }\n\n    return {\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  // don't supply a shortcut since we handle this conditionally via onCopy event\n  keyTest: undefined,\n});\n\nexport const actionPaste = register({\n  name: \"paste\",\n  label: \"labels.paste\",\n  trackEvent: { category: \"element\" },\n  perform: async (elements, appState, data, app) => {\n    let types;\n    try {\n      types = await readSystemClipboard();\n    } catch (error: any) {\n      if (error.name === \"AbortError\" || error.name === \"NotAllowedError\") {\n        // user probably aborted the action. Though not 100% sure, it's best\n        // to not annoy them with an error message.\n        return false;\n      }\n\n      console.error(`actionPaste ${error.name}: ${error.message}`);\n\n      if (isFirefox) {\n        return {\n          captureUpdate: CaptureUpdateAction.EVENTUALLY,\n          appState: {\n            ...appState,\n            errorMessage: t(\"hints.firefox_clipboard_write\"),\n          },\n        };\n      }\n\n      return {\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n        appState: {\n          ...appState,\n          errorMessage: t(\"errors.asyncPasteFailedOnRead\"),\n        },\n      };\n    }\n\n    try {\n      app.pasteFromClipboard(createPasteEvent({ types }));\n    } catch (error: any) {\n      console.error(error);\n      return {\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n        appState: {\n          ...appState,\n          errorMessage: t(\"errors.asyncPasteFailedOnParse\"),\n        },\n      };\n    }\n\n    return {\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  // don't supply a shortcut since we handle this conditionally via onCopy event\n  keyTest: undefined,\n});\n\nexport const actionCut = register({\n  name: \"cut\",\n  label: \"labels.cut\",\n  icon: cutIcon,\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, event: ClipboardEvent | null, app) => {\n    actionCopy.perform(elements, appState, event, app);\n    return actionDeleteSelected.perform(elements, appState, null, app);\n  },\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.X,\n});\n\nexport const actionCopyAsSvg = register({\n  name: \"copyAsSvg\",\n  label: \"labels.copyAsSvg\",\n  icon: svgIcon,\n  trackEvent: { category: \"element\" },\n  perform: async (elements, appState, _data, app) => {\n    if (!app.canvas) {\n      return {\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    }\n\n    const { exportedElements, exportingFrame } = prepareElementsForExport(\n      elements,\n      appState,\n      true,\n    );\n\n    try {\n      await exportCanvas(\n        \"clipboard-svg\",\n        exportedElements,\n        appState,\n        app.files,\n        {\n          ...appState,\n          exportingFrame,\n          name: app.getName(),\n        },\n      );\n\n      const selectedElements = app.scene.getSelectedElements({\n        selectedElementIds: appState.selectedElementIds,\n        includeBoundTextElement: true,\n        includeElementsInFrames: true,\n      });\n\n      return {\n        appState: {\n          toast: {\n            message: t(\"toast.copyToClipboardAsSvg\", {\n              exportSelection: selectedElements.length\n                ? t(\"toast.selection\")\n                : t(\"toast.canvas\"),\n              exportColorScheme: appState.exportWithDarkMode\n                ? t(\"buttons.darkMode\")\n                : t(\"buttons.lightMode\"),\n            }),\n          },\n        },\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    } catch (error: any) {\n      console.error(error);\n      return {\n        appState: {\n          errorMessage: error.message,\n        },\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    }\n  },\n  predicate: (elements) => {\n    return probablySupportsClipboardWriteText && elements.length > 0;\n  },\n  keywords: [\"svg\", \"clipboard\", \"copy\"],\n});\n\nexport const actionCopyAsPng = register({\n  name: \"copyAsPng\",\n  label: \"labels.copyAsPng\",\n  icon: pngIcon,\n  trackEvent: { category: \"element\" },\n  perform: async (elements, appState, _data, app) => {\n    if (!app.canvas) {\n      return {\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    }\n    const selectedElements = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n      includeBoundTextElement: true,\n      includeElementsInFrames: true,\n    });\n\n    const { exportedElements, exportingFrame } = prepareElementsForExport(\n      elements,\n      appState,\n      true,\n    );\n    try {\n      await exportCanvas(\"clipboard\", exportedElements, appState, app.files, {\n        ...appState,\n        exportingFrame,\n        name: app.getName(),\n      });\n      return {\n        appState: {\n          ...appState,\n          toast: {\n            message: t(\"toast.copyToClipboardAsPng\", {\n              exportSelection: selectedElements.length\n                ? t(\"toast.selection\")\n                : t(\"toast.canvas\"),\n              exportColorScheme: appState.exportWithDarkMode\n                ? t(\"buttons.darkMode\")\n                : t(\"buttons.lightMode\"),\n            }),\n          },\n        },\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    } catch (error: any) {\n      console.error(error);\n      return {\n        appState: {\n          ...appState,\n          errorMessage: error.message,\n        },\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    }\n  },\n  predicate: (elements) => {\n    return probablySupportsClipboardBlob && elements.length > 0;\n  },\n  keyTest: (event) => event.code === CODES.C && event.altKey && event.shiftKey,\n  keywords: [\"png\", \"clipboard\", \"copy\"],\n});\n\nexport const copyText = register({\n  name: \"copyText\",\n  label: \"labels.copyText\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n      includeBoundTextElement: true,\n    });\n\n    try {\n      copyTextToSystemClipboard(getTextFromElements(selectedElements));\n    } catch (e) {\n      throw new Error(t(\"errors.copyToSystemClipboardFailed\"));\n    }\n    return {\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  predicate: (elements, appState, _, app) => {\n    return (\n      probablySupportsClipboardWriteText &&\n      app.scene\n        .getSelectedElements({\n          selectedElementIds: appState.selectedElementIds,\n          includeBoundTextElement: true,\n        })\n        .some(isTextElement)\n    );\n  },\n  keywords: [\"text\", \"clipboard\", \"copy\"],\n});\n", "import { CODES, KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport type { AppState } from \"../types\";\nimport { gridIcon } from \"../components/icons\";\nimport { CaptureUpdateAction } from \"../store\";\n\nexport const actionToggleGridMode = register({\n  name: \"gridMode\",\n  icon: gridIcon,\n  keywords: [\"snap\"],\n  label: \"labels.toggleGrid\",\n  viewMode: true,\n  trackEvent: {\n    category: \"canvas\",\n    predicate: (appState) => appState.gridModeEnabled,\n  },\n  perform(elements, appState) {\n    return {\n      appState: {\n        ...appState,\n        gridModeEnabled: !this.checked!(appState),\n        objectsSnapModeEnabled: false,\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  checked: (appState: AppState) => appState.gridModeEnabled,\n  predicate: (element, appState, props) => {\n    return props.gridModeEnabled === undefined;\n  },\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.code === CODES.QUOTE,\n});\n", "import { coffeeIcon } from \"../components/icons\";\nimport { CODES, KEYS } from \"../keys\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { register } from \"./register\";\n\nexport const actionToggleZenMode = register({\n  name: \"zenMode\",\n  label: \"buttons.zenMode\",\n  icon: coffeeIcon,\n  paletteName: \"Toggle zen mode\",\n  viewMode: true,\n  trackEvent: {\n    category: \"canvas\",\n    predicate: (appState) => !appState.zenModeEnabled,\n  },\n  perform(elements, appState) {\n    return {\n      appState: {\n        ...appState,\n        zenModeEnabled: !this.checked!(appState),\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  checked: (appState) => appState.zenModeEnabled,\n  predicate: (elements, appState, appProps) => {\n    return typeof appProps.zenModeEnabled === \"undefined\";\n  },\n  keyTest: (event) =>\n    !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.Z,\n});\n", "import { magnetIcon } from \"../components/icons\";\nimport { CODES, KEYS } from \"../keys\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { register } from \"./register\";\n\nexport const actionToggleObjectsSnapMode = register({\n  name: \"objectsSnapMode\",\n  label: \"buttons.objectsSnapMode\",\n  icon: magnetIcon,\n  viewMode: false,\n  trackEvent: {\n    category: \"canvas\",\n    predicate: (appState) => !appState.objectsSnapModeEnabled,\n  },\n  perform(elements, appState) {\n    return {\n      appState: {\n        ...appState,\n        objectsSnapModeEnabled: !this.checked!(appState),\n        gridModeEnabled: false,\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  checked: (appState) => appState.objectsSnapModeEnabled,\n  predicate: (elements, appState, appProps) => {\n    return typeof appProps.objectsSnapModeEnabled === \"undefined\";\n  },\n  keyTest: (event) =>\n    !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.S,\n});\n", "import { register } from \"./register\";\nimport { CODES, KEYS } from \"../keys\";\nimport { abacusIcon } from \"../components/icons\";\nimport { CaptureUpdateAction } from \"../store\";\n\nexport const actionToggleStats = register({\n  name: \"stats\",\n  label: \"stats.fullTitle\",\n  icon: abacusIcon,\n  paletteName: \"Toggle stats\",\n  viewMode: true,\n  trackEvent: { category: \"menu\" },\n  keywords: [\"edit\", \"attributes\", \"customize\"],\n  perform(elements, appState) {\n    return {\n      appState: {\n        ...appState,\n        stats: { ...appState.stats, open: !this.checked!(appState) },\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  checked: (appState) => appState.stats.open,\n  keyTest: (event) =>\n    !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.SLASH,\n});\n", "import {\n  BOUND_TEXT_PADDING,\n  ROUNDNESS,\n  TEXT_ALIGN,\n  VERTICAL_ALIGN,\n} from \"../constants\";\nimport { isTextElement, newElement } from \"../element\";\nimport { mutateElement } from \"../element/mutateElement\";\nimport {\n  computeBoundTextPosition,\n  computeContainerDimensionForBoundText,\n  getBoundTextElement,\n  redrawTextBoundingBox,\n} from \"../element/textElement\";\nimport {\n  getOriginalContainerHeightFromCache,\n  resetOriginalContainerCache,\n  updateOriginalContainerCache,\n} from \"../element/containerCache\";\nimport {\n  hasBoundTextElement,\n  isTextBindableContainer,\n  isUsingAdaptiveRadius,\n} from \"../element/typeChecks\";\nimport type {\n  ExcalidrawElement,\n  ExcalidrawLinearElement,\n  ExcalidrawTextContainer,\n  ExcalidrawTextElement,\n} from \"../element/types\";\nimport type { AppState } from \"../types\";\nimport type { Mutable } from \"../utility-types\";\nimport { arrayToMap, getFontString } from \"../utils\";\nimport { register } from \"./register\";\nimport { syncMovedIndices } from \"../fractionalIndex\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { measureText } from \"../element/textMeasurements\";\n\nexport const actionUnbindText = register({\n  name: \"unbindText\",\n  label: \"labels.unbindText\",\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n\n    return selectedElements.some((element) => hasBoundTextElement(element));\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    const elementsMap = app.scene.getNonDeletedElementsMap();\n    selectedElements.forEach((element) => {\n      const boundTextElement = getBoundTextElement(element, elementsMap);\n      if (boundTextElement) {\n        const { width, height } = measureText(\n          boundTextElement.originalText,\n          getFontString(boundTextElement),\n          boundTextElement.lineHeight,\n        );\n        const originalContainerHeight = getOriginalContainerHeightFromCache(\n          element.id,\n        );\n        resetOriginalContainerCache(element.id);\n        const { x, y } = computeBoundTextPosition(\n          element,\n          boundTextElement,\n          elementsMap,\n        );\n        mutateElement(boundTextElement as ExcalidrawTextElement, {\n          containerId: null,\n          width,\n          height,\n          text: boundTextElement.originalText,\n          x,\n          y,\n        });\n        mutateElement(element, {\n          boundElements: element.boundElements?.filter(\n            (ele) => ele.id !== boundTextElement.id,\n          ),\n          height: originalContainerHeight\n            ? originalContainerHeight\n            : element.height,\n        });\n      }\n    });\n    return {\n      elements,\n      appState,\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n});\n\nexport const actionBindText = register({\n  name: \"bindText\",\n  label: \"labels.bindText\",\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n\n    if (selectedElements.length === 2) {\n      const textElement =\n        isTextElement(selectedElements[0]) ||\n        isTextElement(selectedElements[1]);\n\n      let bindingContainer;\n      if (isTextBindableContainer(selectedElements[0])) {\n        bindingContainer = selectedElements[0];\n      } else if (isTextBindableContainer(selectedElements[1])) {\n        bindingContainer = selectedElements[1];\n      }\n      if (\n        textElement &&\n        bindingContainer &&\n        getBoundTextElement(\n          bindingContainer,\n          app.scene.getNonDeletedElementsMap(),\n        ) === null\n      ) {\n        return true;\n      }\n    }\n    return false;\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n\n    let textElement: ExcalidrawTextElement;\n    let container: ExcalidrawTextContainer;\n\n    if (\n      isTextElement(selectedElements[0]) &&\n      isTextBindableContainer(selectedElements[1])\n    ) {\n      textElement = selectedElements[0];\n      container = selectedElements[1];\n    } else {\n      textElement = selectedElements[1] as ExcalidrawTextElement;\n      container = selectedElements[0] as ExcalidrawTextContainer;\n    }\n    mutateElement(textElement, {\n      containerId: container.id,\n      verticalAlign: VERTICAL_ALIGN.MIDDLE,\n      textAlign: TEXT_ALIGN.CENTER,\n      autoResize: true,\n    });\n    mutateElement(container, {\n      boundElements: (container.boundElements || []).concat({\n        type: \"text\",\n        id: textElement.id,\n      }),\n    });\n    const originalContainerHeight = container.height;\n    redrawTextBoundingBox(\n      textElement,\n      container,\n      app.scene.getNonDeletedElementsMap(),\n    );\n    // overwritting the cache with original container height so\n    // it can be restored when unbind\n    updateOriginalContainerCache(container.id, originalContainerHeight);\n\n    return {\n      elements: pushTextAboveContainer(elements, container, textElement),\n      appState: { ...appState, selectedElementIds: { [container.id]: true } },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n});\n\nconst pushTextAboveContainer = (\n  elements: readonly ExcalidrawElement[],\n  container: ExcalidrawElement,\n  textElement: ExcalidrawTextElement,\n) => {\n  const updatedElements = elements.slice();\n  const textElementIndex = updatedElements.findIndex(\n    (ele) => ele.id === textElement.id,\n  );\n  updatedElements.splice(textElementIndex, 1);\n\n  const containerIndex = updatedElements.findIndex(\n    (ele) => ele.id === container.id,\n  );\n  updatedElements.splice(containerIndex + 1, 0, textElement);\n  syncMovedIndices(updatedElements, arrayToMap([container, textElement]));\n\n  return updatedElements;\n};\n\nconst pushContainerBelowText = (\n  elements: readonly ExcalidrawElement[],\n  container: ExcalidrawElement,\n  textElement: ExcalidrawTextElement,\n) => {\n  const updatedElements = elements.slice();\n  const containerIndex = updatedElements.findIndex(\n    (ele) => ele.id === container.id,\n  );\n  updatedElements.splice(containerIndex, 1);\n\n  const textElementIndex = updatedElements.findIndex(\n    (ele) => ele.id === textElement.id,\n  );\n  updatedElements.splice(textElementIndex, 0, container);\n  syncMovedIndices(updatedElements, arrayToMap([container, textElement]));\n\n  return updatedElements;\n};\n\nexport const actionWrapTextInContainer = register({\n  name: \"wrapTextInContainer\",\n  label: \"labels.createContainerFromText\",\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    const areTextElements = selectedElements.every((el) => isTextElement(el));\n    return selectedElements.length > 0 && areTextElements;\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    let updatedElements: readonly ExcalidrawElement[] = elements.slice();\n    const containerIds: Mutable<AppState[\"selectedElementIds\"]> = {};\n\n    for (const textElement of selectedElements) {\n      if (isTextElement(textElement)) {\n        const container = newElement({\n          type: \"rectangle\",\n          backgroundColor: appState.currentItemBackgroundColor,\n          boundElements: [\n            ...(textElement.boundElements || []),\n            { id: textElement.id, type: \"text\" },\n          ],\n          angle: textElement.angle,\n          fillStyle: appState.currentItemFillStyle,\n          strokeColor: appState.currentItemStrokeColor,\n          roughness: appState.currentItemRoughness,\n          strokeWidth: appState.currentItemStrokeWidth,\n          strokeStyle: appState.currentItemStrokeStyle,\n          roundness:\n            appState.currentItemRoundness === \"round\"\n              ? {\n                  type: isUsingAdaptiveRadius(\"rectangle\")\n                    ? ROUNDNESS.ADAPTIVE_RADIUS\n                    : ROUNDNESS.PROPORTIONAL_RADIUS,\n                }\n              : null,\n          opacity: 100,\n          locked: false,\n          x: textElement.x - BOUND_TEXT_PADDING,\n          y: textElement.y - BOUND_TEXT_PADDING,\n          width: computeContainerDimensionForBoundText(\n            textElement.width,\n            \"rectangle\",\n          ),\n          height: computeContainerDimensionForBoundText(\n            textElement.height,\n            \"rectangle\",\n          ),\n          groupIds: textElement.groupIds,\n          frameId: textElement.frameId,\n        });\n\n        // update bindings\n        if (textElement.boundElements?.length) {\n          const linearElementIds = textElement.boundElements\n            .filter((ele) => ele.type === \"arrow\")\n            .map((el) => el.id);\n          const linearElements = updatedElements.filter((ele) =>\n            linearElementIds.includes(ele.id),\n          ) as ExcalidrawLinearElement[];\n          linearElements.forEach((ele) => {\n            let startBinding = ele.startBinding;\n            let endBinding = ele.endBinding;\n\n            if (startBinding?.elementId === textElement.id) {\n              startBinding = {\n                ...startBinding,\n                elementId: container.id,\n              };\n            }\n\n            if (endBinding?.elementId === textElement.id) {\n              endBinding = { ...endBinding, elementId: container.id };\n            }\n\n            if (startBinding || endBinding) {\n              mutateElement(ele, { startBinding, endBinding }, false);\n            }\n          });\n        }\n\n        mutateElement(\n          textElement,\n          {\n            containerId: container.id,\n            verticalAlign: VERTICAL_ALIGN.MIDDLE,\n            boundElements: null,\n            textAlign: TEXT_ALIGN.CENTER,\n            autoResize: true,\n          },\n          false,\n        );\n        redrawTextBoundingBox(\n          textElement,\n          container,\n          app.scene.getNonDeletedElementsMap(),\n        );\n\n        updatedElements = pushContainerBelowText(\n          [...updatedElements, container],\n          container,\n          textElement,\n        );\n\n        containerIds[container.id] = true;\n      }\n    }\n\n    return {\n      elements: updatedElements,\n      appState: {\n        ...appState,\n        selectedElementIds: containerIds,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n});\n", "import type { AppState, ExcalidrawProps, UIAppState } from \"../../types\";\nimport {\n  sceneCoordsToViewportCoords,\n  viewportCoordsToSceneCoords,\n  wrapEvent,\n} from \"../../utils\";\nimport { getEmbedLink, embeddableURLValidator } from \"../../element/embeddable\";\nimport { mutateElement } from \"../../element/mutateElement\";\nimport type {\n  ElementsMap,\n  ExcalidrawEmbeddableElement,\n  NonDeletedExcalidrawElement,\n} from \"../../element/types\";\n\nimport { ToolButton } from \"../ToolButton\";\nimport { FreedrawIcon, TrashIcon, elementLinkIcon } from \"../icons\";\nimport { t } from \"../../i18n\";\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport clsx from \"clsx\";\nimport { KEYS } from \"../../keys\";\nimport { EVENT, HYPERLINK_TOOLTIP_DELAY } from \"../../constants\";\nimport { getElementAbsoluteCoords } from \"../../element/bounds\";\nimport { getTooltipDiv, updateTooltipPosition } from \"../../components/Tooltip\";\nimport { getSelectedElements } from \"../../scene\";\nimport { hitElementBoundingBox } from \"../../element/collision\";\nimport { isLocalLink, normalizeLink } from \"../../data/url\";\nimport { trackEvent } from \"../../analytics\";\nimport { useAppProps, useDevice, useExcalidrawAppState } from \"../App\";\nimport { isEmbeddableElement } from \"../../element/typeChecks\";\nimport { getLinkHandleFromCoords } from \"./helpers\";\nimport { pointFrom, type GlobalPoint } from \"@excalidraw/math\";\nimport { isElementLink } from \"../../element/elementLink\";\n\nimport \"./Hyperlink.scss\";\n\nconst POPUP_WIDTH = 380;\nconst POPUP_HEIGHT = 42;\nconst POPUP_PADDING = 5;\nconst SPACE_BOTTOM = 85;\nconst AUTO_HIDE_TIMEOUT = 500;\n\nlet IS_HYPERLINK_TOOLTIP_VISIBLE = false;\n\nconst embeddableLinkCache = new Map<\n  ExcalidrawEmbeddableElement[\"id\"],\n  string\n>();\n\nexport const Hyperlink = ({\n  element,\n  elementsMap,\n  setAppState,\n  onLinkOpen,\n  setToast,\n  updateEmbedValidationStatus,\n}: {\n  element: NonDeletedExcalidrawElement;\n  elementsMap: ElementsMap;\n  setAppState: React.Component<any, AppState>[\"setState\"];\n  onLinkOpen: ExcalidrawProps[\"onLinkOpen\"];\n  setToast: (\n    toast: { message: string; closable?: boolean; duration?: number } | null,\n  ) => void;\n  updateEmbedValidationStatus: (\n    element: ExcalidrawEmbeddableElement,\n    status: boolean,\n  ) => void;\n}) => {\n  const appState = useExcalidrawAppState();\n  const appProps = useAppProps();\n  const device = useDevice();\n\n  const linkVal = element.link || \"\";\n\n  const [inputVal, setInputVal] = useState(linkVal);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isEditing = appState.showHyperlinkPopup === \"editor\";\n\n  const handleSubmit = useCallback(() => {\n    if (!inputRef.current) {\n      return;\n    }\n\n    const link = normalizeLink(inputRef.current.value) || null;\n\n    if (!element.link && link) {\n      trackEvent(\"hyperlink\", \"create\");\n    }\n\n    if (isEmbeddableElement(element)) {\n      if (appState.activeEmbeddable?.element === element) {\n        setAppState({ activeEmbeddable: null });\n      }\n      if (!link) {\n        mutateElement(element, {\n          link: null,\n        });\n        updateEmbedValidationStatus(element, false);\n        return;\n      }\n\n      if (!embeddableURLValidator(link, appProps.validateEmbeddable)) {\n        if (link) {\n          setToast({ message: t(\"toast.unableToEmbed\"), closable: true });\n        }\n        element.link && embeddableLinkCache.set(element.id, element.link);\n        mutateElement(element, {\n          link,\n        });\n        updateEmbedValidationStatus(element, false);\n      } else {\n        const { width, height } = element;\n        const embedLink = getEmbedLink(link);\n        if (embedLink?.error instanceof URIError) {\n          setToast({\n            message: t(\"toast.unrecognizedLinkFormat\"),\n            closable: true,\n          });\n        }\n        const ar = embedLink\n          ? embedLink.intrinsicSize.w / embedLink.intrinsicSize.h\n          : 1;\n        const hasLinkChanged =\n          embeddableLinkCache.get(element.id) !== element.link;\n        mutateElement(element, {\n          ...(hasLinkChanged\n            ? {\n                width:\n                  embedLink?.type === \"video\"\n                    ? width > height\n                      ? width\n                      : height * ar\n                    : width,\n                height:\n                  embedLink?.type === \"video\"\n                    ? width > height\n                      ? width / ar\n                      : height\n                    : height,\n              }\n            : {}),\n          link,\n        });\n        updateEmbedValidationStatus(element, true);\n        if (embeddableLinkCache.has(element.id)) {\n          embeddableLinkCache.delete(element.id);\n        }\n      }\n    } else {\n      mutateElement(element, { link });\n    }\n  }, [\n    element,\n    setToast,\n    appProps.validateEmbeddable,\n    appState.activeEmbeddable,\n    setAppState,\n    updateEmbedValidationStatus,\n  ]);\n\n  useLayoutEffect(() => {\n    return () => {\n      handleSubmit();\n    };\n  }, [handleSubmit]);\n\n  useEffect(() => {\n    if (\n      isEditing &&\n      inputRef?.current &&\n      !(device.viewport.isMobile || device.isTouchScreen)\n    ) {\n      inputRef.current.select();\n    }\n  }, [isEditing, device.viewport.isMobile, device.isTouchScreen]);\n\n  useEffect(() => {\n    let timeoutId: number | null = null;\n\n    const handlePointerMove = (event: PointerEvent) => {\n      if (isEditing) {\n        return;\n      }\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      const shouldHide = shouldHideLinkPopup(\n        element,\n        elementsMap,\n        appState,\n        pointFrom(event.clientX, event.clientY),\n      ) as boolean;\n      if (shouldHide) {\n        timeoutId = window.setTimeout(() => {\n          setAppState({ showHyperlinkPopup: false });\n        }, AUTO_HIDE_TIMEOUT);\n      }\n    };\n    window.addEventListener(EVENT.POINTER_MOVE, handlePointerMove, false);\n    return () => {\n      window.removeEventListener(EVENT.POINTER_MOVE, handlePointerMove, false);\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, [appState, element, isEditing, setAppState, elementsMap]);\n\n  const handleRemove = useCallback(() => {\n    trackEvent(\"hyperlink\", \"delete\");\n    mutateElement(element, { link: null });\n    setAppState({ showHyperlinkPopup: false });\n  }, [setAppState, element]);\n\n  const onEdit = () => {\n    trackEvent(\"hyperlink\", \"edit\", \"popup-ui\");\n    setAppState({ showHyperlinkPopup: \"editor\" });\n  };\n  const { x, y } = getCoordsForPopover(element, appState, elementsMap);\n  if (\n    appState.contextMenu ||\n    appState.selectedElementsAreBeingDragged ||\n    appState.resizingElement ||\n    appState.isRotating ||\n    appState.openMenu ||\n    appState.viewModeEnabled\n  ) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"excalidraw-hyperlinkContainer\"\n      style={{\n        top: `${y}px`,\n        left: `${x}px`,\n        width: POPUP_WIDTH,\n        padding: POPUP_PADDING,\n      }}\n    >\n      {isEditing ? (\n        <input\n          className={clsx(\"excalidraw-hyperlinkContainer-input\")}\n          placeholder={t(\"labels.link.hint\")}\n          ref={inputRef}\n          value={inputVal}\n          onChange={(event) => setInputVal(event.target.value)}\n          autoFocus\n          onKeyDown={(event) => {\n            event.stopPropagation();\n            // prevent cmd/ctrl+k shortcut when editing link\n            if (event[KEYS.CTRL_OR_CMD] && event.key === KEYS.K) {\n              event.preventDefault();\n            }\n            if (event.key === KEYS.ENTER || event.key === KEYS.ESCAPE) {\n              handleSubmit();\n              setAppState({ showHyperlinkPopup: \"info\" });\n            }\n          }}\n        />\n      ) : element.link ? (\n        <a\n          href={normalizeLink(element.link || \"\")}\n          className=\"excalidraw-hyperlinkContainer-link\"\n          target={isLocalLink(element.link) ? \"_self\" : \"_blank\"}\n          onClick={(event) => {\n            if (element.link && onLinkOpen) {\n              const customEvent = wrapEvent(\n                EVENT.EXCALIDRAW_LINK,\n                event.nativeEvent,\n              );\n              onLinkOpen(\n                {\n                  ...element,\n                  link: normalizeLink(element.link),\n                },\n                customEvent,\n              );\n              if (customEvent.defaultPrevented) {\n                event.preventDefault();\n              }\n            }\n          }}\n          rel=\"noopener noreferrer\"\n        >\n          {element.link}\n        </a>\n      ) : (\n        <div className=\"excalidraw-hyperlinkContainer-link\">\n          {t(\"labels.link.empty\")}\n        </div>\n      )}\n      <div className=\"excalidraw-hyperlinkContainer__buttons\">\n        {!isEditing && (\n          <ToolButton\n            type=\"button\"\n            title={t(\"buttons.edit\")}\n            aria-label={t(\"buttons.edit\")}\n            label={t(\"buttons.edit\")}\n            onClick={onEdit}\n            className=\"excalidraw-hyperlinkContainer--edit\"\n            icon={FreedrawIcon}\n          />\n        )}\n        <ToolButton\n          type=\"button\"\n          title={t(\"labels.linkToElement\")}\n          aria-label={t(\"labels.linkToElement\")}\n          label={t(\"labels.linkToElement\")}\n          onClick={() => {\n            setAppState({\n              openDialog: {\n                name: \"elementLinkSelector\",\n                sourceElementId: element.id,\n              },\n            });\n          }}\n          icon={elementLinkIcon}\n        />\n        {linkVal && !isEmbeddableElement(element) && (\n          <ToolButton\n            type=\"button\"\n            title={t(\"buttons.remove\")}\n            aria-label={t(\"buttons.remove\")}\n            label={t(\"buttons.remove\")}\n            onClick={handleRemove}\n            className=\"excalidraw-hyperlinkContainer--remove\"\n            icon={TrashIcon}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getCoordsForPopover = (\n  element: NonDeletedExcalidrawElement,\n  appState: AppState,\n  elementsMap: ElementsMap,\n) => {\n  const [x1, y1] = getElementAbsoluteCoords(element, elementsMap);\n  const { x: viewportX, y: viewportY } = sceneCoordsToViewportCoords(\n    { sceneX: x1 + element.width / 2, sceneY: y1 },\n    appState,\n  );\n  const x = viewportX - appState.offsetLeft - POPUP_WIDTH / 2;\n  const y = viewportY - appState.offsetTop - SPACE_BOTTOM;\n  return { x, y };\n};\n\nexport const getContextMenuLabel = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: UIAppState,\n) => {\n  const selectedElements = getSelectedElements(elements, appState);\n  const label = isEmbeddableElement(selectedElements[0])\n    ? \"labels.link.editEmbed\"\n    : selectedElements[0]?.link\n    ? \"labels.link.edit\"\n    : \"labels.link.create\";\n  return label;\n};\n\nlet HYPERLINK_TOOLTIP_TIMEOUT_ID: number | null = null;\nexport const showHyperlinkTooltip = (\n  element: NonDeletedExcalidrawElement,\n  appState: AppState,\n  elementsMap: ElementsMap,\n) => {\n  if (HYPERLINK_TOOLTIP_TIMEOUT_ID) {\n    clearTimeout(HYPERLINK_TOOLTIP_TIMEOUT_ID);\n  }\n  HYPERLINK_TOOLTIP_TIMEOUT_ID = window.setTimeout(\n    () => renderTooltip(element, appState, elementsMap),\n    HYPERLINK_TOOLTIP_DELAY,\n  );\n};\n\nconst renderTooltip = (\n  element: NonDeletedExcalidrawElement,\n  appState: AppState,\n  elementsMap: ElementsMap,\n) => {\n  if (!element.link) {\n    return;\n  }\n\n  const tooltipDiv = getTooltipDiv();\n\n  tooltipDiv.classList.add(\"excalidraw-tooltip--visible\");\n  tooltipDiv.style.maxWidth = \"20rem\";\n  tooltipDiv.textContent = isElementLink(element.link)\n    ? t(\"labels.link.goToElement\")\n    : element.link;\n\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n\n  const [linkX, linkY, linkWidth, linkHeight] = getLinkHandleFromCoords(\n    [x1, y1, x2, y2],\n    element.angle,\n    appState,\n  );\n\n  const linkViewportCoords = sceneCoordsToViewportCoords(\n    { sceneX: linkX, sceneY: linkY },\n    appState,\n  );\n\n  updateTooltipPosition(\n    tooltipDiv,\n    {\n      left: linkViewportCoords.x,\n      top: linkViewportCoords.y,\n      width: linkWidth,\n      height: linkHeight,\n    },\n    \"top\",\n  );\n  trackEvent(\"hyperlink\", \"tooltip\", \"link-icon\");\n\n  IS_HYPERLINK_TOOLTIP_VISIBLE = true;\n};\nexport const hideHyperlinkToolip = () => {\n  if (HYPERLINK_TOOLTIP_TIMEOUT_ID) {\n    clearTimeout(HYPERLINK_TOOLTIP_TIMEOUT_ID);\n  }\n  if (IS_HYPERLINK_TOOLTIP_VISIBLE) {\n    IS_HYPERLINK_TOOLTIP_VISIBLE = false;\n    getTooltipDiv().classList.remove(\"excalidraw-tooltip--visible\");\n  }\n};\n\nconst shouldHideLinkPopup = (\n  element: NonDeletedExcalidrawElement,\n  elementsMap: ElementsMap,\n  appState: AppState,\n  [clientX, clientY]: GlobalPoint,\n): Boolean => {\n  const { x: sceneX, y: sceneY } = viewportCoordsToSceneCoords(\n    { clientX, clientY },\n    appState,\n  );\n\n  const threshold = 15 / appState.zoom.value;\n  // hitbox to prevent hiding when hovered in element bounding box\n  if (hitElementBoundingBox(sceneX, sceneY, element, elementsMap)) {\n    return false;\n  }\n  const [x1, y1, x2] = getElementAbsoluteCoords(element, elementsMap);\n  // hit box to prevent hiding when hovered in the vertical area between element and popover\n  if (\n    sceneX >= x1 &&\n    sceneX <= x2 &&\n    sceneY >= y1 - SPACE_BOTTOM &&\n    sceneY <= y1\n  ) {\n    return false;\n  }\n  // hit box to prevent hiding when hovered around popover within threshold\n  const { x: popoverX, y: popoverY } = getCoordsForPopover(\n    element,\n    appState,\n    elementsMap,\n  );\n\n  if (\n    clientX >= popoverX - threshold &&\n    clientX <= popoverX + POPUP_WIDTH + POPUP_PADDING * 2 + threshold &&\n    clientY >= popoverY - threshold &&\n    clientY <= popoverY + threshold + POPUP_PADDING * 2 + POPUP_HEIGHT\n  ) {\n    return false;\n  }\n  return true;\n};\n", "import { getContextMenuLabel } from \"../components/hyperlink/Hyperlink\";\nimport { LinkIcon } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { isEmbeddableElement } from \"../element/typeChecks\";\nimport { t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { getSelectedElements } from \"../scene\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\n\nexport const actionLink = register({\n  name: \"hyperlink\",\n  label: (elements, appState) => getContextMenuLabel(elements, appState),\n  icon: LinkIcon,\n  perform: (elements, appState) => {\n    if (appState.showHyperlinkPopup === \"editor\") {\n      return false;\n    }\n\n    return {\n      elements,\n      appState: {\n        ...appState,\n        showHyperlinkPopup: \"editor\",\n        openMenu: null,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  trackEvent: { category: \"hyperlink\", action: \"click\" },\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.K,\n  predicate: (elements, appState) => {\n    const selectedElements = getSelectedElements(elements, appState);\n    return selectedElements.length === 1;\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    const selectedElements = getSelectedElements(elements, appState);\n\n    return (\n      <ToolButton\n        type=\"button\"\n        icon={LinkIcon}\n        aria-label={t(getContextMenuLabel(elements, appState))}\n        title={`${\n          isEmbeddableElement(elements[0])\n            ? t(\"labels.link.labelEmbed\")\n            : t(\"labels.link.label\")\n        } - ${getShortcutKey(\"CtrlOrCmd+K\")}`}\n        onClick={() => updateData(null)}\n        selected={selectedElements.length === 1 && !!selectedElements[0].link}\n      />\n    );\n  },\n});\n", "import { LockedIcon, UnlockedIcon } from \"../components/icons\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { isFrameLikeElement } from \"../element/typeChecks\";\nimport type { ExcalidrawElement } from \"../element/types\";\nimport { KEYS } from \"../keys\";\nimport { getSelectedElements } from \"../scene\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { arrayToMap } from \"../utils\";\nimport { register } from \"./register\";\n\nconst shouldLock = (elements: readonly ExcalidrawElement[]) =>\n  elements.every((el) => !el.locked);\n\nexport const actionToggleElementLock = register({\n  name: \"toggleElementLock\",\n  label: (elements, appState, app) => {\n    const selected = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n      includeBoundTextElement: false,\n    });\n    if (selected.length === 1 && !isFrameLikeElement(selected[0])) {\n      return selected[0].locked\n        ? \"labels.elementLock.unlock\"\n        : \"labels.elementLock.lock\";\n    }\n\n    return shouldLock(selected)\n      ? \"labels.elementLock.lockAll\"\n      : \"labels.elementLock.unlockAll\";\n  },\n  icon: (appState, elements) => {\n    const selectedElements = getSelectedElements(elements, appState);\n    return shouldLock(selectedElements) ? LockedIcon : UnlockedIcon;\n  },\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    return (\n      selectedElements.length > 0 &&\n      !selectedElements.some((element) => element.locked && element.frameId)\n    );\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n      includeBoundTextElement: true,\n      includeElementsInFrames: true,\n    });\n\n    if (!selectedElements.length) {\n      return false;\n    }\n\n    const nextLockState = shouldLock(selectedElements);\n    const selectedElementsMap = arrayToMap(selectedElements);\n    return {\n      elements: elements.map((element) => {\n        if (!selectedElementsMap.has(element.id)) {\n          return element;\n        }\n\n        return newElementWith(element, { locked: nextLockState });\n      }),\n      appState: {\n        ...appState,\n        selectedLinearElement: nextLockState\n          ? null\n          : appState.selectedLinearElement,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  keyTest: (event, appState, elements, app) => {\n    return (\n      event.key.toLocaleLowerCase() === KEYS.L &&\n      event[KEYS.CTRL_OR_CMD] &&\n      event.shiftKey &&\n      app.scene.getSelectedElements({\n        selectedElementIds: appState.selectedElementIds,\n        includeBoundTextElement: false,\n      }).length > 0\n    );\n  },\n});\n\nexport const actionUnlockAllElements = register({\n  name: \"unlockAllElements\",\n  paletteName: \"Unlock all elements\",\n  trackEvent: { category: \"canvas\" },\n  viewMode: false,\n  icon: UnlockedIcon,\n  predicate: (elements, appState) => {\n    const selectedElements = getSelectedElements(elements, appState);\n    return (\n      selectedElements.length === 0 &&\n      elements.some((element) => element.locked)\n    );\n  },\n  perform: (elements, appState) => {\n    const lockedElements = elements.filter((el) => el.locked);\n\n    return {\n      elements: elements.map((element) => {\n        if (element.locked) {\n          return newElementWith(element, { locked: false });\n        }\n        return element;\n      }),\n      appState: {\n        ...appState,\n        selectedElementIds: Object.fromEntries(\n          lockedElements.map((el) => [el.id, true]),\n        ),\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  label: \"labels.elementLock.unlockAll\",\n});\n", "import { useEffect, useRef, useState } from \"react\";\nimport {\n  useApp,\n  useAppProps,\n  useExcalidrawActionManager,\n  useExcalidrawSetAppState,\n} from \"../App\";\nimport { KEYS } from \"../../keys\";\nimport { Dialog } from \"../Dialog\";\nimport { TextField } from \"../TextField\";\nimport clsx from \"clsx\";\nimport { getSelectedElements } from \"../../scene\";\nimport type { Action } from \"../../actions/types\";\nimport type { TranslationKeys } from \"../../i18n\";\nimport { t } from \"../../i18n\";\nimport type { ShortcutName } from \"../../actions/shortcuts\";\nimport { getShortcutFromShortcutName } from \"../../actions/shortcuts\";\nimport { DEFAULT_SIDEBAR, EVENT } from \"../../constants\";\nimport {\n  LockedIcon,\n  UnlockedIcon,\n  clockIcon,\n  searchIcon,\n  boltIcon,\n  bucketFillIcon,\n  ExportImageIcon,\n  mermaidLogoIcon,\n  brainIconThin,\n  LibraryIcon,\n} from \"../icons\";\nimport fuzzy from \"fuzzy\";\nimport { useUIAppState } from \"../../context/ui-appState\";\nimport type { AppProps, AppState, UIAppState } from \"../../types\";\nimport {\n  capitalizeString,\n  getShortcutKey,\n  isWritableElement,\n} from \"../../utils\";\nimport { atom, useAtom, editorJotaiStore } from \"../../editor-jotai\";\nimport { deburr } from \"../../deburr\";\nimport type { MarkRequired } from \"../../utility-types\";\nimport { InlineIcon } from \"../InlineIcon\";\nimport { SHAPES } from \"../../shapes\";\nimport { canChangeBackgroundColor, canChangeStrokeColor } from \"../Actions\";\nimport { useStableCallback } from \"../../hooks/useStableCallback\";\nimport {\n  actionClearCanvas,\n  actionLink,\n  actionToggleSearchMenu,\n} from \"../../actions\";\nimport { activeConfirmDialogAtom } from \"../ActiveConfirmDialog\";\nimport type { CommandPaletteItem } from \"./types\";\nimport * as defaultItems from \"./defaultCommandPaletteItems\";\nimport { trackEvent } from \"../../analytics\";\nimport { useStable } from \"../../hooks/useStable\";\n\nimport \"./CommandPalette.scss\";\nimport {\n  actionCopyElementLink,\n  actionLinkToElement,\n} from \"../../actions/actionElementLink\";\n\nconst lastUsedPaletteItem = atom<CommandPaletteItem | null>(null);\n\nexport const DEFAULT_CATEGORIES = {\n  app: \"App\",\n  export: \"Export\",\n  tools: \"Tools\",\n  editor: \"Editor\",\n  elements: \"Elements\",\n  links: \"Links\",\n};\n\nconst getCategoryOrder = (category: string) => {\n  switch (category) {\n    case DEFAULT_CATEGORIES.app:\n      return 1;\n    case DEFAULT_CATEGORIES.export:\n      return 2;\n    case DEFAULT_CATEGORIES.editor:\n      return 3;\n    case DEFAULT_CATEGORIES.tools:\n      return 4;\n    case DEFAULT_CATEGORIES.elements:\n      return 5;\n    case DEFAULT_CATEGORIES.links:\n      return 6;\n    default:\n      return 10;\n  }\n};\n\nconst CommandShortcutHint = ({\n  shortcut,\n  className,\n  children,\n}: {\n  shortcut: string;\n  className?: string;\n  children?: React.ReactNode;\n}) => {\n  const shortcuts = shortcut.replace(\"++\", \"+$\").split(\"+\");\n\n  return (\n    <div className={clsx(\"shortcut\", className)}>\n      {shortcuts.map((item, idx) => {\n        return (\n          <div className=\"shortcut-wrapper\" key={item}>\n            <div className=\"shortcut-key\">{item === \"$\" ? \"+\" : item}</div>\n          </div>\n        );\n      })}\n      <div className=\"shortcut-desc\">{children}</div>\n    </div>\n  );\n};\n\nconst isCommandPaletteToggleShortcut = (event: KeyboardEvent) => {\n  return (\n    !event.altKey &&\n    event[KEYS.CTRL_OR_CMD] &&\n    ((event.shiftKey && event.key.toLowerCase() === KEYS.P) ||\n      event.key === KEYS.SLASH)\n  );\n};\n\ntype CommandPaletteProps = {\n  customCommandPaletteItems?: CommandPaletteItem[];\n};\n\nexport const CommandPalette = Object.assign(\n  (props: CommandPaletteProps) => {\n    const uiAppState = useUIAppState();\n    const setAppState = useExcalidrawSetAppState();\n\n    useEffect(() => {\n      const commandPaletteShortcut = (event: KeyboardEvent) => {\n        if (isCommandPaletteToggleShortcut(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n          setAppState((appState) => {\n            const nextState =\n              appState.openDialog?.name === \"commandPalette\"\n                ? null\n                : ({ name: \"commandPalette\" } as const);\n\n            if (nextState) {\n              trackEvent(\"command_palette\", \"open\", \"shortcut\");\n            }\n\n            return {\n              openDialog: nextState,\n            };\n          });\n        }\n      };\n      window.addEventListener(EVENT.KEYDOWN, commandPaletteShortcut, {\n        capture: true,\n      });\n      return () =>\n        window.removeEventListener(EVENT.KEYDOWN, commandPaletteShortcut, {\n          capture: true,\n        });\n    }, [setAppState]);\n\n    if (uiAppState.openDialog?.name !== \"commandPalette\") {\n      return null;\n    }\n\n    return <CommandPaletteInner {...props} />;\n  },\n  {\n    defaultItems,\n  },\n);\n\nfunction CommandPaletteInner({\n  customCommandPaletteItems,\n}: CommandPaletteProps) {\n  const app = useApp();\n  const uiAppState = useUIAppState();\n  const setAppState = useExcalidrawSetAppState();\n  const appProps = useAppProps();\n  const actionManager = useExcalidrawActionManager();\n\n  const [lastUsed, setLastUsed] = useAtom(lastUsedPaletteItem);\n  const [allCommands, setAllCommands] = useState<\n    MarkRequired<CommandPaletteItem, \"haystack\" | \"order\">[] | null\n  >(null);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const stableDeps = useStable({\n    uiAppState,\n    customCommandPaletteItems,\n    appProps,\n  });\n\n  useEffect(() => {\n    // these props change often and we don't want them to re-run the effect\n    // which would renew `allCommands`, cascading down and resetting state.\n    //\n    // This means that the commands won't update on appState/appProps changes\n    // while the command palette is open\n    const { uiAppState, customCommandPaletteItems, appProps } = stableDeps;\n\n    const getActionLabel = (action: Action) => {\n      let label = \"\";\n      if (action.label) {\n        if (typeof action.label === \"function\") {\n          label = t(\n            action.label(\n              app.scene.getNonDeletedElements(),\n              uiAppState as AppState,\n              app,\n            ) as unknown as TranslationKeys,\n          );\n        } else {\n          label = t(action.label as unknown as TranslationKeys);\n        }\n      }\n      return label;\n    };\n\n    const getActionIcon = (action: Action) => {\n      if (typeof action.icon === \"function\") {\n        return action.icon(uiAppState, app.scene.getNonDeletedElements());\n      }\n      return action.icon;\n    };\n\n    let commandsFromActions: CommandPaletteItem[] = [];\n\n    const actionToCommand = (\n      action: Action,\n      category: string,\n      transformer?: (\n        command: CommandPaletteItem,\n        action: Action,\n      ) => CommandPaletteItem,\n    ): CommandPaletteItem => {\n      const command: CommandPaletteItem = {\n        label: getActionLabel(action),\n        icon: getActionIcon(action),\n        category,\n        shortcut: getShortcutFromShortcutName(action.name as ShortcutName),\n        keywords: action.keywords,\n        predicate: action.predicate,\n        viewMode: action.viewMode,\n        perform: () => {\n          actionManager.executeAction(action, \"commandPalette\");\n        },\n      };\n\n      return transformer ? transformer(command, action) : command;\n    };\n\n    if (uiAppState && app.scene && actionManager) {\n      const elementsCommands: CommandPaletteItem[] = [\n        actionManager.actions.group,\n        actionManager.actions.ungroup,\n        actionManager.actions.cut,\n        actionManager.actions.copy,\n        actionManager.actions.deleteSelectedElements,\n        actionManager.actions.wrapSelectionInFrame,\n        actionManager.actions.copyStyles,\n        actionManager.actions.pasteStyles,\n        actionManager.actions.bringToFront,\n        actionManager.actions.bringForward,\n        actionManager.actions.sendBackward,\n        actionManager.actions.sendToBack,\n        actionManager.actions.alignTop,\n        actionManager.actions.alignBottom,\n        actionManager.actions.alignLeft,\n        actionManager.actions.alignRight,\n        actionManager.actions.alignVerticallyCentered,\n        actionManager.actions.alignHorizontallyCentered,\n        actionManager.actions.duplicateSelection,\n        actionManager.actions.flipHorizontal,\n        actionManager.actions.flipVertical,\n        actionManager.actions.zoomToFitSelection,\n        actionManager.actions.zoomToFitSelectionInViewport,\n        actionManager.actions.increaseFontSize,\n        actionManager.actions.decreaseFontSize,\n        actionManager.actions.toggleLinearEditor,\n        actionManager.actions.cropEditor,\n        actionLink,\n        actionCopyElementLink,\n        actionLinkToElement,\n      ].map((action: Action) =>\n        actionToCommand(\n          action,\n          DEFAULT_CATEGORIES.elements,\n          (command, action) => ({\n            ...command,\n            predicate: action.predicate\n              ? action.predicate\n              : (elements, appState, appProps, app) => {\n                  const selectedElements = getSelectedElements(\n                    elements,\n                    appState,\n                  );\n                  return selectedElements.length > 0;\n                },\n          }),\n        ),\n      );\n      const toolCommands: CommandPaletteItem[] = [\n        actionManager.actions.toggleHandTool,\n        actionManager.actions.setFrameAsActiveTool,\n      ].map((action) => actionToCommand(action, DEFAULT_CATEGORIES.tools));\n\n      const editorCommands: CommandPaletteItem[] = [\n        actionManager.actions.undo,\n        actionManager.actions.redo,\n        actionManager.actions.zoomIn,\n        actionManager.actions.zoomOut,\n        actionManager.actions.resetZoom,\n        actionManager.actions.zoomToFit,\n        actionManager.actions.zenMode,\n        actionManager.actions.viewMode,\n        actionManager.actions.gridMode,\n        actionManager.actions.objectsSnapMode,\n        actionManager.actions.toggleShortcuts,\n        actionManager.actions.selectAll,\n        actionManager.actions.toggleElementLock,\n        actionManager.actions.unlockAllElements,\n        actionManager.actions.stats,\n      ].map((action) => actionToCommand(action, DEFAULT_CATEGORIES.editor));\n\n      const exportCommands: CommandPaletteItem[] = [\n        actionManager.actions.saveToActiveFile,\n        actionManager.actions.saveFileToDisk,\n        actionManager.actions.copyAsPng,\n        actionManager.actions.copyAsSvg,\n      ].map((action) => actionToCommand(action, DEFAULT_CATEGORIES.export));\n\n      commandsFromActions = [\n        ...elementsCommands,\n        ...editorCommands,\n        {\n          label: getActionLabel(actionClearCanvas),\n          icon: getActionIcon(actionClearCanvas),\n          shortcut: getShortcutFromShortcutName(\n            actionClearCanvas.name as ShortcutName,\n          ),\n          category: DEFAULT_CATEGORIES.editor,\n          keywords: [\"delete\", \"destroy\"],\n          viewMode: false,\n          perform: () => {\n            editorJotaiStore.set(activeConfirmDialogAtom, \"clearCanvas\");\n          },\n        },\n        {\n          label: t(\"buttons.exportImage\"),\n          category: DEFAULT_CATEGORIES.export,\n          icon: ExportImageIcon,\n          shortcut: getShortcutFromShortcutName(\"imageExport\"),\n          keywords: [\n            \"export\",\n            \"image\",\n            \"png\",\n            \"jpeg\",\n            \"svg\",\n            \"clipboard\",\n            \"picture\",\n          ],\n          perform: () => {\n            setAppState({ openDialog: { name: \"imageExport\" } });\n          },\n        },\n        ...exportCommands,\n      ];\n\n      const additionalCommands: CommandPaletteItem[] = [\n        {\n          label: t(\"toolBar.library\"),\n          category: DEFAULT_CATEGORIES.app,\n          icon: LibraryIcon,\n          viewMode: false,\n          perform: () => {\n            if (uiAppState.openSidebar) {\n              setAppState({\n                openSidebar: null,\n              });\n            } else {\n              setAppState({\n                openSidebar: {\n                  name: DEFAULT_SIDEBAR.name,\n                  tab: DEFAULT_SIDEBAR.defaultTab,\n                },\n              });\n            }\n          },\n        },\n        {\n          label: t(\"search.title\"),\n          category: DEFAULT_CATEGORIES.app,\n          icon: searchIcon,\n          viewMode: true,\n          perform: () => {\n            actionManager.executeAction(actionToggleSearchMenu);\n          },\n        },\n        {\n          label: t(\"labels.changeStroke\"),\n          keywords: [\"color\", \"outline\"],\n          category: DEFAULT_CATEGORIES.elements,\n          icon: bucketFillIcon,\n          viewMode: false,\n          predicate: (elements, appState) => {\n            const selectedElements = getSelectedElements(elements, appState);\n            return (\n              selectedElements.length > 0 &&\n              canChangeStrokeColor(appState, selectedElements)\n            );\n          },\n          perform: () => {\n            setAppState((prevState) => ({\n              openMenu: prevState.openMenu === \"shape\" ? null : \"shape\",\n              openPopup: \"elementStroke\",\n            }));\n          },\n        },\n        {\n          label: t(\"labels.changeBackground\"),\n          keywords: [\"color\", \"fill\"],\n          icon: bucketFillIcon,\n          category: DEFAULT_CATEGORIES.elements,\n          viewMode: false,\n          predicate: (elements, appState) => {\n            const selectedElements = getSelectedElements(elements, appState);\n            return (\n              selectedElements.length > 0 &&\n              canChangeBackgroundColor(appState, selectedElements)\n            );\n          },\n          perform: () => {\n            setAppState((prevState) => ({\n              openMenu: prevState.openMenu === \"shape\" ? null : \"shape\",\n              openPopup: \"elementBackground\",\n            }));\n          },\n        },\n        {\n          label: t(\"labels.canvasBackground\"),\n          keywords: [\"color\"],\n          icon: bucketFillIcon,\n          category: DEFAULT_CATEGORIES.editor,\n          viewMode: false,\n          perform: () => {\n            setAppState((prevState) => ({\n              openMenu: prevState.openMenu === \"canvas\" ? null : \"canvas\",\n              openPopup: \"canvasBackground\",\n            }));\n          },\n        },\n        ...SHAPES.reduce((acc: CommandPaletteItem[], shape) => {\n          const { value, icon, key, numericKey } = shape;\n\n          if (\n            appProps.UIOptions.tools?.[\n              value as Extract<\n                typeof value,\n                keyof AppProps[\"UIOptions\"][\"tools\"]\n              >\n            ] === false\n          ) {\n            return acc;\n          }\n\n          const letter =\n            key && capitalizeString(typeof key === \"string\" ? key : key[0]);\n          const shortcut = letter || numericKey;\n\n          const command: CommandPaletteItem = {\n            label: t(`toolBar.${value}`),\n            category: DEFAULT_CATEGORIES.tools,\n            shortcut,\n            icon,\n            keywords: [\"toolbar\"],\n            viewMode: false,\n            perform: ({ event }) => {\n              if (value === \"image\") {\n                app.setActiveTool({\n                  type: value,\n                  insertOnCanvasDirectly: event.type === EVENT.KEYDOWN,\n                });\n              } else {\n                app.setActiveTool({ type: value });\n              }\n            },\n          };\n\n          acc.push(command);\n\n          return acc;\n        }, []),\n        ...toolCommands,\n        {\n          label: t(\"toolBar.lock\"),\n          category: DEFAULT_CATEGORIES.tools,\n          icon: uiAppState.activeTool.locked ? LockedIcon : UnlockedIcon,\n          shortcut: KEYS.Q.toLocaleUpperCase(),\n          viewMode: false,\n          perform: () => {\n            app.toggleLock();\n          },\n        },\n        {\n          label: `${t(\"labels.textToDiagram\")}...`,\n          category: DEFAULT_CATEGORIES.tools,\n          icon: brainIconThin,\n          viewMode: false,\n          predicate: appProps.aiEnabled,\n          perform: () => {\n            setAppState((state) => ({\n              ...state,\n              openDialog: {\n                name: \"ttd\",\n                tab: \"text-to-diagram\",\n              },\n            }));\n          },\n        },\n        {\n          label: `${t(\"toolBar.mermaidToExcalidraw\")}...`,\n          category: DEFAULT_CATEGORIES.tools,\n          icon: mermaidLogoIcon,\n          viewMode: false,\n          predicate: appProps.aiEnabled,\n          perform: () => {\n            setAppState((state) => ({\n              ...state,\n              openDialog: {\n                name: \"ttd\",\n                tab: \"mermaid\",\n              },\n            }));\n          },\n        },\n        // {\n        //   label: `${t(\"toolBar.magicframe\")}...`,\n        //   category: DEFAULT_CATEGORIES.tools,\n        //   icon: MagicIconThin,\n        //   viewMode: false,\n        //   predicate: appProps.aiEnabled,\n        //   perform: () => {\n        //     app.onMagicframeToolSelect();\n        //   },\n        // },\n      ];\n\n      const allCommands = [\n        ...commandsFromActions,\n        ...additionalCommands,\n        ...(customCommandPaletteItems || []),\n      ].map((command) => {\n        return {\n          ...command,\n          icon: command.icon || boltIcon,\n          order: command.order ?? getCategoryOrder(command.category),\n          haystack: `${deburr(command.label.toLocaleLowerCase())} ${\n            command.keywords?.join(\" \") || \"\"\n          }`,\n        };\n      });\n\n      setAllCommands(allCommands);\n      setLastUsed(\n        allCommands.find((command) => command.label === lastUsed?.label) ??\n          null,\n      );\n    }\n  }, [\n    stableDeps,\n    app,\n    actionManager,\n    setAllCommands,\n    lastUsed?.label,\n    setLastUsed,\n    setAppState,\n  ]);\n\n  const [commandSearch, setCommandSearch] = useState(\"\");\n  const [currentCommand, setCurrentCommand] =\n    useState<CommandPaletteItem | null>(null);\n  const [commandsByCategory, setCommandsByCategory] = useState<\n    Record<string, CommandPaletteItem[]>\n  >({});\n\n  const closeCommandPalette = (cb?: () => void) => {\n    setAppState(\n      {\n        openDialog: null,\n      },\n      cb,\n    );\n    setCommandSearch(\"\");\n  };\n\n  const executeCommand = (\n    command: CommandPaletteItem,\n    event: React.MouseEvent | React.KeyboardEvent | KeyboardEvent,\n  ) => {\n    if (uiAppState.openDialog?.name === \"commandPalette\") {\n      event.stopPropagation();\n      event.preventDefault();\n      document.body.classList.add(\"excalidraw-animations-disabled\");\n      closeCommandPalette(() => {\n        command.perform({ actionManager, event });\n        setLastUsed(command);\n\n        requestAnimationFrame(() => {\n          document.body.classList.remove(\"excalidraw-animations-disabled\");\n        });\n      });\n    }\n  };\n\n  const isCommandAvailable = useStableCallback(\n    (command: CommandPaletteItem) => {\n      if (command.viewMode === false && uiAppState.viewModeEnabled) {\n        return false;\n      }\n\n      return typeof command.predicate === \"function\"\n        ? command.predicate(\n            app.scene.getNonDeletedElements(),\n            uiAppState as AppState,\n            appProps,\n            app,\n          )\n        : command.predicate === undefined || command.predicate;\n    },\n  );\n\n  const handleKeyDown = useStableCallback((event: KeyboardEvent) => {\n    const ignoreAlphanumerics =\n      isWritableElement(event.target) ||\n      isCommandPaletteToggleShortcut(event) ||\n      event.key === KEYS.ESCAPE;\n\n    if (\n      ignoreAlphanumerics &&\n      event.key !== KEYS.ARROW_UP &&\n      event.key !== KEYS.ARROW_DOWN &&\n      event.key !== KEYS.ENTER\n    ) {\n      return;\n    }\n\n    const matchingCommands = Object.values(commandsByCategory).flat();\n    const shouldConsiderLastUsed =\n      lastUsed && !commandSearch && isCommandAvailable(lastUsed);\n\n    if (event.key === KEYS.ARROW_UP) {\n      event.preventDefault();\n      const index = matchingCommands.findIndex(\n        (item) => item.label === currentCommand?.label,\n      );\n\n      if (shouldConsiderLastUsed) {\n        if (index === 0) {\n          setCurrentCommand(lastUsed);\n          return;\n        }\n\n        if (currentCommand === lastUsed) {\n          const nextItem = matchingCommands[matchingCommands.length - 1];\n          if (nextItem) {\n            setCurrentCommand(nextItem);\n          }\n          return;\n        }\n      }\n\n      let nextIndex;\n\n      if (index === -1) {\n        nextIndex = matchingCommands.length - 1;\n      } else {\n        nextIndex =\n          index === 0\n            ? matchingCommands.length - 1\n            : (index - 1) % matchingCommands.length;\n      }\n\n      const nextItem = matchingCommands[nextIndex];\n      if (nextItem) {\n        setCurrentCommand(nextItem);\n      }\n\n      return;\n    }\n\n    if (event.key === KEYS.ARROW_DOWN) {\n      event.preventDefault();\n      const index = matchingCommands.findIndex(\n        (item) => item.label === currentCommand?.label,\n      );\n\n      if (shouldConsiderLastUsed) {\n        if (!currentCommand || index === matchingCommands.length - 1) {\n          setCurrentCommand(lastUsed);\n          return;\n        }\n\n        if (currentCommand === lastUsed) {\n          const nextItem = matchingCommands[0];\n          if (nextItem) {\n            setCurrentCommand(nextItem);\n          }\n          return;\n        }\n      }\n\n      const nextIndex = (index + 1) % matchingCommands.length;\n      const nextItem = matchingCommands[nextIndex];\n      if (nextItem) {\n        setCurrentCommand(nextItem);\n      }\n\n      return;\n    }\n\n    if (event.key === KEYS.ENTER) {\n      if (currentCommand) {\n        setTimeout(() => {\n          executeCommand(currentCommand, event);\n        });\n      }\n    }\n\n    if (ignoreAlphanumerics) {\n      return;\n    }\n\n    // prevent regular editor shortcuts\n    event.stopPropagation();\n\n    // if alphanumeric keypress and we're not inside the input, focus it\n    if (/^[a-zA-Z0-9]$/.test(event.key)) {\n      inputRef?.current?.focus();\n      return;\n    }\n\n    event.preventDefault();\n  });\n\n  useEffect(() => {\n    window.addEventListener(EVENT.KEYDOWN, handleKeyDown, {\n      capture: true,\n    });\n    return () =>\n      window.removeEventListener(EVENT.KEYDOWN, handleKeyDown, {\n        capture: true,\n      });\n  }, [handleKeyDown]);\n\n  useEffect(() => {\n    if (!allCommands) {\n      return;\n    }\n\n    const getNextCommandsByCategory = (commands: CommandPaletteItem[]) => {\n      const nextCommandsByCategory: Record<string, CommandPaletteItem[]> = {};\n      for (const command of commands) {\n        if (nextCommandsByCategory[command.category]) {\n          nextCommandsByCategory[command.category].push(command);\n        } else {\n          nextCommandsByCategory[command.category] = [command];\n        }\n      }\n\n      return nextCommandsByCategory;\n    };\n\n    let matchingCommands = allCommands\n      .filter(isCommandAvailable)\n      .sort((a, b) => a.order - b.order);\n\n    const showLastUsed =\n      !commandSearch && lastUsed && isCommandAvailable(lastUsed);\n\n    if (!commandSearch) {\n      setCommandsByCategory(\n        getNextCommandsByCategory(\n          showLastUsed\n            ? matchingCommands.filter(\n                (command) => command.label !== lastUsed?.label,\n              )\n            : matchingCommands,\n        ),\n      );\n      setCurrentCommand(showLastUsed ? lastUsed : matchingCommands[0] || null);\n      return;\n    }\n\n    const _query = deburr(\n      commandSearch.toLocaleLowerCase().replace(/[<>_| -]/g, \"\"),\n    );\n    matchingCommands = fuzzy\n      .filter(_query, matchingCommands, {\n        extract: (command) => command.haystack,\n      })\n      .sort((a, b) => b.score - a.score)\n      .map((item) => item.original);\n\n    setCommandsByCategory(getNextCommandsByCategory(matchingCommands));\n    setCurrentCommand(matchingCommands[0] ?? null);\n  }, [commandSearch, allCommands, isCommandAvailable, lastUsed]);\n\n  return (\n    <Dialog\n      onCloseRequest={() => closeCommandPalette()}\n      closeOnClickOutside\n      title={false}\n      size={720}\n      autofocus\n      className=\"command-palette-dialog\"\n    >\n      <TextField\n        value={commandSearch}\n        placeholder={t(\"commandPalette.search.placeholder\")}\n        onChange={(value) => {\n          setCommandSearch(value);\n        }}\n        selectOnRender\n        ref={inputRef}\n      />\n\n      {!app.device.viewport.isMobile && (\n        <div className=\"shortcuts-wrapper\">\n          <CommandShortcutHint shortcut=\"\u2191\u2193\">\n            {t(\"commandPalette.shortcuts.select\")}\n          </CommandShortcutHint>\n          <CommandShortcutHint shortcut=\"\u21B5\">\n            {t(\"commandPalette.shortcuts.confirm\")}\n          </CommandShortcutHint>\n          <CommandShortcutHint shortcut={getShortcutKey(\"Esc\")}>\n            {t(\"commandPalette.shortcuts.close\")}\n          </CommandShortcutHint>\n        </div>\n      )}\n\n      <div className=\"commands\">\n        {lastUsed && !commandSearch && (\n          <div className=\"command-category\">\n            <div className=\"command-category-title\">\n              {t(\"commandPalette.recents\")}\n              <div\n                className=\"icon\"\n                style={{\n                  marginLeft: \"6px\",\n                }}\n              >\n                {clockIcon}\n              </div>\n            </div>\n            <CommandItem\n              command={lastUsed}\n              isSelected={lastUsed.label === currentCommand?.label}\n              onClick={(event) => executeCommand(lastUsed, event)}\n              disabled={!isCommandAvailable(lastUsed)}\n              onMouseMove={() => setCurrentCommand(lastUsed)}\n              showShortcut={!app.device.viewport.isMobile}\n              appState={uiAppState}\n            />\n          </div>\n        )}\n\n        {Object.keys(commandsByCategory).length > 0 ? (\n          Object.keys(commandsByCategory).map((category, idx) => {\n            return (\n              <div className=\"command-category\" key={category}>\n                <div className=\"command-category-title\">{category}</div>\n                {commandsByCategory[category].map((command) => (\n                  <CommandItem\n                    key={command.label}\n                    command={command}\n                    isSelected={command.label === currentCommand?.label}\n                    onClick={(event) => executeCommand(command, event)}\n                    onMouseMove={() => setCurrentCommand(command)}\n                    showShortcut={!app.device.viewport.isMobile}\n                    appState={uiAppState}\n                  />\n                ))}\n              </div>\n            );\n          })\n        ) : allCommands ? (\n          <div className=\"no-match\">\n            <div className=\"icon\">{searchIcon}</div>{\" \"}\n            {t(\"commandPalette.search.noMatch\")}\n          </div>\n        ) : null}\n      </div>\n    </Dialog>\n  );\n}\n\nconst CommandItem = ({\n  command,\n  isSelected,\n  disabled,\n  onMouseMove,\n  onClick,\n  showShortcut,\n  appState,\n}: {\n  command: CommandPaletteItem;\n  isSelected: boolean;\n  disabled?: boolean;\n  onMouseMove: () => void;\n  onClick: (event: React.MouseEvent) => void;\n  showShortcut: boolean;\n  appState: UIAppState;\n}) => {\n  const noop = () => {};\n\n  return (\n    <div\n      className={clsx(\"command-item\", {\n        \"item-selected\": isSelected,\n        \"item-disabled\": disabled,\n      })}\n      ref={(ref) => {\n        if (isSelected && !disabled) {\n          ref?.scrollIntoView?.({\n            block: \"nearest\",\n          });\n        }\n      }}\n      onClick={disabled ? noop : onClick}\n      onMouseMove={disabled ? noop : onMouseMove}\n      title={disabled ? t(\"commandPalette.itemNotAvailable\") : \"\"}\n    >\n      <div className=\"name\">\n        {command.icon && (\n          <InlineIcon\n            icon={\n              typeof command.icon === \"function\"\n                ? command.icon(appState)\n                : command.icon\n            }\n          />\n        )}\n        {command.label}\n      </div>\n      {showShortcut && command.shortcut && (\n        <CommandShortcutHint shortcut={command.shortcut} />\n      )}\n    </div>\n  );\n};\n", "import clsx from \"clsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useCallbackRefState } from \"../hooks/useCallbackRefState\";\nimport {\n  useExcalidrawContainer,\n  useDevice,\n  useExcalidrawSetAppState,\n} from \"./App\";\nimport { KEYS } from \"../keys\";\nimport \"./Dialog.scss\";\nimport { Island } from \"./Island\";\nimport { Modal } from \"./Modal\";\nimport { queryFocusableElements } from \"../utils\";\nimport { isLibraryMenuOpenAtom } from \"./LibraryMenu\";\nimport { useSetAtom } from \"../editor-jotai\";\nimport { t } from \"../i18n\";\nimport { CloseIcon } from \"./icons\";\n\nexport type DialogSize = number | \"small\" | \"regular\" | \"wide\" | undefined;\n\nexport interface DialogProps {\n  children: React.ReactNode;\n  className?: string;\n  size?: DialogSize;\n  onCloseRequest(): void;\n  title: React.ReactNode | false;\n  autofocus?: boolean;\n  closeOnClickOutside?: boolean;\n}\n\nfunction getDialogSize(size: DialogSize): number {\n  if (size && typeof size === \"number\") {\n    return size;\n  }\n\n  switch (size) {\n    case \"small\":\n      return 550;\n    case \"wide\":\n      return 1024;\n    case \"regular\":\n    default:\n      return 800;\n  }\n}\n\nexport const Dialog = (props: DialogProps) => {\n  const [islandNode, setIslandNode] = useCallbackRefState<HTMLDivElement>();\n  const [lastActiveElement] = useState(document.activeElement);\n  const { id } = useExcalidrawContainer();\n  const isFullscreen = useDevice().viewport.isMobile;\n\n  useEffect(() => {\n    if (!islandNode) {\n      return;\n    }\n\n    const focusableElements = queryFocusableElements(islandNode);\n\n    setTimeout(() => {\n      if (focusableElements.length > 0 && props.autofocus !== false) {\n        // If there's an element other than close, focus it.\n        (focusableElements[1] || focusableElements[0]).focus();\n      }\n    });\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === KEYS.TAB) {\n        const focusableElements = queryFocusableElements(islandNode);\n        const { activeElement } = document;\n        const currentIndex = focusableElements.findIndex(\n          (element) => element === activeElement,\n        );\n\n        if (currentIndex === 0 && event.shiftKey) {\n          focusableElements[focusableElements.length - 1].focus();\n          event.preventDefault();\n        } else if (\n          currentIndex === focusableElements.length - 1 &&\n          !event.shiftKey\n        ) {\n          focusableElements[0].focus();\n          event.preventDefault();\n        }\n      }\n    };\n\n    islandNode.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => islandNode.removeEventListener(\"keydown\", handleKeyDown);\n  }, [islandNode, props.autofocus]);\n\n  const setAppState = useExcalidrawSetAppState();\n  const setIsLibraryMenuOpen = useSetAtom(isLibraryMenuOpenAtom);\n\n  const onClose = () => {\n    setAppState({ openMenu: null });\n    setIsLibraryMenuOpen(false);\n    (lastActiveElement as HTMLElement).focus();\n    props.onCloseRequest();\n  };\n\n  return (\n    <Modal\n      className={clsx(\"Dialog\", props.className, {\n        \"Dialog--fullscreen\": isFullscreen,\n      })}\n      labelledBy=\"dialog-title\"\n      maxWidth={getDialogSize(props.size)}\n      onCloseRequest={onClose}\n      closeOnClickOutside={props.closeOnClickOutside}\n    >\n      <Island ref={setIslandNode}>\n        {props.title && (\n          <h2 id={`${id}-dialog-title`} className=\"Dialog__title\">\n            <span className=\"Dialog__titleContent\">{props.title}</span>\n          </h2>\n        )}\n        {isFullscreen && (\n          <button\n            className=\"Dialog__close\"\n            onClick={onClose}\n            title={t(\"buttons.close\")}\n            aria-label={t(\"buttons.close\")}\n            type=\"button\"\n          >\n            {CloseIcon}\n          </button>\n        )}\n        <div className=\"Dialog__content\">{props.children}</div>\n      </Island>\n    </Modal>\n  );\n};\n", "import { useCallback, useState } from \"react\";\n\nexport const useCallbackRefState = <T>() => {\n  const [refValue, setRefValue] = useState<T | null>(null);\n  const refCallback = useCallback((value: T | null) => setRefValue(value), []);\n  return [refValue, refCallback] as const;\n};\n", "import \"./Modal.scss\";\n\nimport { createPortal } from \"react-dom\";\nimport clsx from \"clsx\";\nimport { KEYS } from \"../keys\";\nimport type { AppState } from \"../types\";\nimport { useCreatePortalContainer } from \"../hooks/useCreatePortalContainer\";\nimport { useRef } from \"react\";\n\nexport const Modal: React.FC<{\n  className?: string;\n  children: React.ReactNode;\n  maxWidth?: number;\n  onCloseRequest(): void;\n  labelledBy: string;\n  theme?: AppState[\"theme\"];\n  closeOnClickOutside?: boolean;\n}> = (props) => {\n  const { closeOnClickOutside = true } = props;\n  const modalRoot = useCreatePortalContainer({\n    className: \"excalidraw-modal-container\",\n  });\n\n  const animationsDisabledRef = useRef(\n    document.body.classList.contains(\"excalidraw-animations-disabled\"),\n  );\n\n  if (!modalRoot) {\n    return null;\n  }\n\n  const handleKeydown = (event: React.KeyboardEvent) => {\n    if (event.key === KEYS.ESCAPE) {\n      event.nativeEvent.stopImmediatePropagation();\n      event.stopPropagation();\n      props.onCloseRequest();\n    }\n  };\n\n  return createPortal(\n    <div\n      className={clsx(\"Modal\", props.className, {\n        \"animations-disabled\": animationsDisabledRef.current,\n      })}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      onKeyDown={handleKeydown}\n      aria-labelledby={props.labelledBy}\n      data-prevent-outside-click\n    >\n      <div\n        className=\"Modal__background\"\n        onClick={closeOnClickOutside ? props.onCloseRequest : undefined}\n      />\n      <div\n        className=\"Modal__content\"\n        style={{ \"--max-width\": `${props.maxWidth}px` }}\n        tabIndex={0}\n      >\n        {props.children}\n      </div>\n    </div>,\n    modalRoot,\n  );\n};\n", "import React, {\n  useState,\n  useCallback,\n  useMemo,\n  useEffect,\n  memo,\n  useRef,\n} from \"react\";\nimport type Library from \"../data/library\";\nimport {\n  distributeLibraryItemsOnSquareGrid,\n  libraryItemsAtom,\n} from \"../data/library\";\nimport { t } from \"../i18n\";\nimport { randomId } from \"../random\";\nimport type {\n  LibraryItems,\n  LibraryItem,\n  ExcalidrawProps,\n  UIAppState,\n  AppClassProperties,\n} from \"../types\";\nimport LibraryMenuItems from \"./LibraryMenuItems\";\nimport { trackEvent } from \"../analytics\";\nimport { atom, useAtom } from \"../editor-jotai\";\nimport Spinner from \"./Spinner\";\nimport {\n  useApp,\n  useAppProps,\n  useExcalidrawElements,\n  useExcalidrawSetAppState,\n} from \"./App\";\nimport { getSelectedElements } from \"../scene\";\nimport { useUIAppState } from \"../context/ui-appState\";\n\nimport \"./LibraryMenu.scss\";\nimport { LibraryMenuControlButtons } from \"./LibraryMenuControlButtons\";\nimport type {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\nimport { LIBRARY_DISABLED_TYPES } from \"../constants\";\nimport { isShallowEqual } from \"../utils\";\n\nexport const isLibraryMenuOpenAtom = atom(false);\n\nconst LibraryMenuWrapper = ({ children }: { children: React.ReactNode }) => {\n  return <div className=\"layer-ui__library\">{children}</div>;\n};\n\nconst LibraryMenuContent = memo(\n  ({\n    onInsertLibraryItems,\n    pendingElements,\n    onAddToLibrary,\n    setAppState,\n    libraryReturnUrl,\n    library,\n    id,\n    theme,\n    selectedItems,\n    onSelectItems,\n  }: {\n    pendingElements: LibraryItem[\"elements\"];\n    onInsertLibraryItems: (libraryItems: LibraryItems) => void;\n    onAddToLibrary: () => void;\n    setAppState: React.Component<any, UIAppState>[\"setState\"];\n    libraryReturnUrl: ExcalidrawProps[\"libraryReturnUrl\"];\n    library: Library;\n    id: string;\n    theme: UIAppState[\"theme\"];\n    selectedItems: LibraryItem[\"id\"][];\n    onSelectItems: (id: LibraryItem[\"id\"][]) => void;\n  }) => {\n    const [libraryItemsData] = useAtom(libraryItemsAtom);\n\n    const _onAddToLibrary = useCallback(\n      (elements: LibraryItem[\"elements\"]) => {\n        const addToLibrary = async (\n          processedElements: LibraryItem[\"elements\"],\n          libraryItems: LibraryItems,\n        ) => {\n          trackEvent(\"element\", \"addToLibrary\", \"ui\");\n          for (const type of LIBRARY_DISABLED_TYPES) {\n            if (processedElements.some((element) => element.type === type)) {\n              return setAppState({\n                errorMessage: t(`errors.libraryElementTypeError.${type}`),\n              });\n            }\n          }\n          const nextItems: LibraryItems = [\n            {\n              status: \"unpublished\",\n              elements: processedElements,\n              id: randomId(),\n              created: Date.now(),\n            },\n            ...libraryItems,\n          ];\n          onAddToLibrary();\n          library.setLibrary(nextItems).catch(() => {\n            setAppState({ errorMessage: t(\"alerts.errorAddingToLibrary\") });\n          });\n        };\n        addToLibrary(elements, libraryItemsData.libraryItems);\n      },\n      [onAddToLibrary, library, setAppState, libraryItemsData.libraryItems],\n    );\n\n    const libraryItems = useMemo(\n      () => libraryItemsData.libraryItems,\n      [libraryItemsData],\n    );\n\n    if (\n      libraryItemsData.status === \"loading\" &&\n      !libraryItemsData.isInitialized\n    ) {\n      return (\n        <LibraryMenuWrapper>\n          <div className=\"layer-ui__library-message\">\n            <div>\n              <Spinner size=\"2em\" />\n              <span>{t(\"labels.libraryLoadingMessage\")}</span>\n            </div>\n          </div>\n        </LibraryMenuWrapper>\n      );\n    }\n\n    const showBtn =\n      libraryItemsData.libraryItems.length > 0 || pendingElements.length > 0;\n\n    return (\n      <LibraryMenuWrapper>\n        <LibraryMenuItems\n          isLoading={libraryItemsData.status === \"loading\"}\n          libraryItems={libraryItems}\n          onAddToLibrary={_onAddToLibrary}\n          onInsertLibraryItems={onInsertLibraryItems}\n          pendingElements={pendingElements}\n          id={id}\n          libraryReturnUrl={libraryReturnUrl}\n          theme={theme}\n          onSelectItems={onSelectItems}\n          selectedItems={selectedItems}\n        />\n        {showBtn && (\n          <LibraryMenuControlButtons\n            className=\"library-menu-control-buttons--at-bottom\"\n            style={{ padding: \"16px 12px 0 12px\" }}\n            id={id}\n            libraryReturnUrl={libraryReturnUrl}\n            theme={theme}\n          />\n        )}\n      </LibraryMenuWrapper>\n    );\n  },\n);\n\nconst getPendingElements = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  selectedElementIds: UIAppState[\"selectedElementIds\"],\n) => ({\n  elements,\n  pending: getSelectedElements(\n    elements,\n    { selectedElementIds },\n    {\n      includeBoundTextElement: true,\n      includeElementsInFrames: true,\n    },\n  ),\n  selectedElementIds,\n});\n\nconst usePendingElementsMemo = (\n  appState: UIAppState,\n  app: AppClassProperties,\n) => {\n  const elements = useExcalidrawElements();\n  const [state, setState] = useState(() =>\n    getPendingElements(elements, appState.selectedElementIds),\n  );\n\n  const selectedElementVersions = useRef(\n    new Map<ExcalidrawElement[\"id\"], ExcalidrawElement[\"version\"]>(),\n  );\n\n  useEffect(() => {\n    for (const element of state.pending) {\n      selectedElementVersions.current.set(element.id, element.version);\n    }\n  }, [state.pending]);\n\n  useEffect(() => {\n    if (\n      // Only update once pointer is released.\n      // Reading directly from app.state to make it clear it's not reactive\n      // (hence, there's potential for stale state)\n      app.state.cursorButton === \"up\" &&\n      app.state.activeTool.type === \"selection\"\n    ) {\n      setState((prev) => {\n        // if selectedElementIds changed, we don't have to compare versions\n        // ---------------------------------------------------------------------\n        if (\n          !isShallowEqual(prev.selectedElementIds, appState.selectedElementIds)\n        ) {\n          selectedElementVersions.current.clear();\n          return getPendingElements(elements, appState.selectedElementIds);\n        }\n        // otherwise we need to check whether selected elements changed\n        // ---------------------------------------------------------------------\n        const elementsMap = app.scene.getNonDeletedElementsMap();\n        for (const id of Object.keys(appState.selectedElementIds)) {\n          const currVersion = elementsMap.get(id)?.version;\n          if (\n            currVersion &&\n            currVersion !== selectedElementVersions.current.get(id)\n          ) {\n            // we can't update the selectedElementVersions in here\n            // because of double render in StrictMode which would overwrite\n            // the state in the second pass with the old `prev` state.\n            // Thus, we update versions in a separate effect. May create\n            // a race condition since current effect is not fully reactive.\n            return getPendingElements(elements, appState.selectedElementIds);\n          }\n        }\n        // nothing changed\n        // ---------------------------------------------------------------------\n        return prev;\n      });\n    }\n  }, [\n    app,\n    app.state.cursorButton,\n    app.state.activeTool.type,\n    appState.selectedElementIds,\n    elements,\n  ]);\n\n  return state.pending;\n};\n\n/**\n * This component is meant to be rendered inside <Sidebar.Tab/> inside our\n * <DefaultSidebar/> or host apps Sidebar components.\n */\nexport const LibraryMenu = memo(() => {\n  const app = useApp();\n  const { onInsertElements } = app;\n  const appProps = useAppProps();\n  const appState = useUIAppState();\n  const setAppState = useExcalidrawSetAppState();\n  const [selectedItems, setSelectedItems] = useState<LibraryItem[\"id\"][]>([]);\n  const memoizedLibrary = useMemo(() => app.library, [app.library]);\n  const pendingElements = usePendingElementsMemo(appState, app);\n\n  const onInsertLibraryItems = useCallback(\n    (libraryItems: LibraryItems) => {\n      onInsertElements(distributeLibraryItemsOnSquareGrid(libraryItems));\n    },\n    [onInsertElements],\n  );\n\n  const deselectItems = useCallback(() => {\n    setAppState({\n      selectedElementIds: {},\n      selectedGroupIds: {},\n      activeEmbeddable: null,\n    });\n  }, [setAppState]);\n\n  return (\n    <LibraryMenuContent\n      pendingElements={pendingElements}\n      onInsertLibraryItems={onInsertLibraryItems}\n      onAddToLibrary={deselectItems}\n      setAppState={setAppState}\n      libraryReturnUrl={appProps.libraryReturnUrl}\n      library={memoizedLibrary}\n      id={app.id}\n      theme={appState.theme}\n      selectedItems={selectedItems}\n      onSelectItems={setSelectedItems}\n    />\n  );\n});\n", "import { loadLibraryFromBlob } from \"./blob\";\nimport type {\n  LibraryItems,\n  LibraryItem,\n  ExcalidrawImperativeAPI,\n  LibraryItemsSource,\n  LibraryItems_anyVersion,\n} from \"../types\";\nimport { restoreLibraryItems } from \"./restore\";\nimport type App from \"../components/App\";\nimport { atom, editorJotaiStore } from \"../editor-jotai\";\nimport type { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBoundingBox } from \"../element/bounds\";\nimport { AbortError } from \"../errors\";\nimport { t } from \"../i18n\";\nimport { useEffect, useRef } from \"react\";\nimport {\n  URL_HASH_KEYS,\n  URL_QUERY_KEYS,\n  APP_NAME,\n  EVENT,\n  DEFAULT_SIDEBAR,\n  LIBRARY_SIDEBAR_TAB,\n} from \"../constants\";\nimport { libraryItemSvgsCache } from \"../hooks/useLibraryItemSvg\";\nimport {\n  arrayToMap,\n  cloneJSON,\n  preventUnload,\n  promiseTry,\n  resolvablePromise,\n} from \"../utils\";\nimport type { MaybePromise } from \"../utility-types\";\nimport { Emitter } from \"../emitter\";\nimport { Queue } from \"../queue\";\nimport { hashElementsVersion, hashString } from \"../element\";\nimport { toValidURL } from \"./url\";\n\n/**\n * format: hostname or hostname/pathname\n *\n * Both hostname and pathname are matched partially,\n * hostname from the end, pathname from the start, with subdomain/path\n * boundaries\n **/\nconst ALLOWED_LIBRARY_URLS = [\n  \"excalidraw.com\",\n  // when installing from github PRs\n  \"raw.githubusercontent.com/excalidraw/excalidraw-libraries\",\n];\n\ntype LibraryUpdate = {\n  /** deleted library items since last onLibraryChange event */\n  deletedItems: Map<LibraryItem[\"id\"], LibraryItem>;\n  /** newly added items in the library */\n  addedItems: Map<LibraryItem[\"id\"], LibraryItem>;\n};\n\n// an object so that we can later add more properties to it without breaking,\n// such as schema version\nexport type LibraryPersistedData = { libraryItems: LibraryItems };\n\nconst onLibraryUpdateEmitter = new Emitter<\n  [update: LibraryUpdate, libraryItems: LibraryItems]\n>();\n\nexport type LibraryAdatapterSource = \"load\" | \"save\";\n\nexport interface LibraryPersistenceAdapter {\n  /**\n   * Should load data that were previously saved into the database using the\n   * `save` method. Should throw if saving fails.\n   *\n   * Will be used internally in multiple places, such as during save to\n   * in order to reconcile changes with latest store data.\n   */\n  load(metadata: {\n    /**\n     * Indicates whether we're loading data for save purposes, or reading\n     * purposes, in which case host app can implement more aggressive caching.\n     */\n    source: LibraryAdatapterSource;\n  }): MaybePromise<{ libraryItems: LibraryItems_anyVersion } | null>;\n  /** Should persist to the database as is (do no change the data structure). */\n  save(libraryData: LibraryPersistedData): MaybePromise<void>;\n}\n\nexport interface LibraryMigrationAdapter {\n  /**\n   * loads data from legacy data source. Returns `null` if no data is\n   * to be migrated.\n   */\n  load(): MaybePromise<{ libraryItems: LibraryItems_anyVersion } | null>;\n\n  /** clears entire storage afterwards */\n  clear(): MaybePromise<void>;\n}\n\nexport const libraryItemsAtom = atom<{\n  status: \"loading\" | \"loaded\";\n  /** indicates whether library is initialized with library items (has gone\n   * through at least one update). Used in UI. Specific to this atom only. */\n  isInitialized: boolean;\n  libraryItems: LibraryItems;\n}>({ status: \"loaded\", isInitialized: false, libraryItems: [] });\n\nconst cloneLibraryItems = (libraryItems: LibraryItems): LibraryItems =>\n  cloneJSON(libraryItems);\n\n/**\n * checks if library item does not exist already in current library\n */\nconst isUniqueItem = (\n  existingLibraryItems: LibraryItems,\n  targetLibraryItem: LibraryItem,\n) => {\n  return !existingLibraryItems.find((libraryItem) => {\n    if (libraryItem.elements.length !== targetLibraryItem.elements.length) {\n      return false;\n    }\n\n    // detect z-index difference by checking the excalidraw elements\n    // are in order\n    return libraryItem.elements.every((libItemExcalidrawItem, idx) => {\n      return (\n        libItemExcalidrawItem.id === targetLibraryItem.elements[idx].id &&\n        libItemExcalidrawItem.versionNonce ===\n          targetLibraryItem.elements[idx].versionNonce\n      );\n    });\n  });\n};\n\n/** Merges otherItems into localItems. Unique items in otherItems array are\n    sorted first. */\nexport const mergeLibraryItems = (\n  localItems: LibraryItems,\n  otherItems: LibraryItems,\n): LibraryItems => {\n  const newItems = [];\n  for (const item of otherItems) {\n    if (isUniqueItem(localItems, item)) {\n      newItems.push(item);\n    }\n  }\n\n  return [...newItems, ...localItems];\n};\n\n/**\n * Returns { deletedItems, addedItems } maps of all added and deleted items\n * since last onLibraryChange event.\n *\n * Host apps are recommended to diff with the latest state they have.\n */\nconst createLibraryUpdate = (\n  prevLibraryItems: LibraryItems,\n  nextLibraryItems: LibraryItems,\n): LibraryUpdate => {\n  const nextItemsMap = arrayToMap(nextLibraryItems);\n\n  const update: LibraryUpdate = {\n    deletedItems: new Map<LibraryItem[\"id\"], LibraryItem>(),\n    addedItems: new Map<LibraryItem[\"id\"], LibraryItem>(),\n  };\n\n  for (const item of prevLibraryItems) {\n    if (!nextItemsMap.has(item.id)) {\n      update.deletedItems.set(item.id, item);\n    }\n  }\n\n  const prevItemsMap = arrayToMap(prevLibraryItems);\n\n  for (const item of nextLibraryItems) {\n    if (!prevItemsMap.has(item.id)) {\n      update.addedItems.set(item.id, item);\n    }\n  }\n\n  return update;\n};\n\nclass Library {\n  /** latest libraryItems */\n  private currLibraryItems: LibraryItems = [];\n  /** snapshot of library items since last onLibraryChange call */\n  private prevLibraryItems = cloneLibraryItems(this.currLibraryItems);\n\n  private app: App;\n\n  constructor(app: App) {\n    this.app = app;\n  }\n\n  private updateQueue: Promise<LibraryItems>[] = [];\n\n  private getLastUpdateTask = (): Promise<LibraryItems> | undefined => {\n    return this.updateQueue[this.updateQueue.length - 1];\n  };\n\n  private notifyListeners = () => {\n    if (this.updateQueue.length > 0) {\n      editorJotaiStore.set(libraryItemsAtom, (s) => ({\n        status: \"loading\",\n        libraryItems: this.currLibraryItems,\n        isInitialized: s.isInitialized,\n      }));\n    } else {\n      editorJotaiStore.set(libraryItemsAtom, {\n        status: \"loaded\",\n        libraryItems: this.currLibraryItems,\n        isInitialized: true,\n      });\n      try {\n        const prevLibraryItems = this.prevLibraryItems;\n        this.prevLibraryItems = cloneLibraryItems(this.currLibraryItems);\n\n        const nextLibraryItems = cloneLibraryItems(this.currLibraryItems);\n\n        this.app.props.onLibraryChange?.(nextLibraryItems);\n\n        // for internal use in `useHandleLibrary` hook\n        onLibraryUpdateEmitter.trigger(\n          createLibraryUpdate(prevLibraryItems, nextLibraryItems),\n          nextLibraryItems,\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  /** call on excalidraw instance unmount */\n  destroy = () => {\n    this.updateQueue = [];\n    this.currLibraryItems = [];\n    editorJotaiStore.set(libraryItemSvgsCache, new Map());\n    // TODO uncomment after/if we make jotai store scoped to each excal instance\n    // jotaiStore.set(libraryItemsAtom, {\n    //   status: \"loading\",\n    //   isInitialized: false,\n    //   libraryItems: [],\n    // });\n  };\n\n  resetLibrary = () => {\n    return this.setLibrary([]);\n  };\n\n  /**\n   * @returns latest cloned libraryItems. Awaits all in-progress updates first.\n   */\n  getLatestLibrary = (): Promise<LibraryItems> => {\n    return new Promise(async (resolve) => {\n      try {\n        const libraryItems = await (this.getLastUpdateTask() ||\n          this.currLibraryItems);\n        if (this.updateQueue.length > 0) {\n          resolve(this.getLatestLibrary());\n        } else {\n          resolve(cloneLibraryItems(libraryItems));\n        }\n      } catch (error) {\n        return resolve(this.currLibraryItems);\n      }\n    });\n  };\n\n  // NOTE this is a high-level public API (exposed on ExcalidrawAPI) with\n  // a slight overhead (always restoring library items). For internal use\n  // where merging isn't needed, use `library.setLibrary()` directly.\n  updateLibrary = async ({\n    libraryItems,\n    prompt = false,\n    merge = false,\n    openLibraryMenu = false,\n    defaultStatus = \"unpublished\",\n  }: {\n    libraryItems: LibraryItemsSource;\n    merge?: boolean;\n    prompt?: boolean;\n    openLibraryMenu?: boolean;\n    defaultStatus?: \"unpublished\" | \"published\";\n  }): Promise<LibraryItems> => {\n    if (openLibraryMenu) {\n      this.app.setState({\n        openSidebar: { name: DEFAULT_SIDEBAR.name, tab: LIBRARY_SIDEBAR_TAB },\n      });\n    }\n\n    return this.setLibrary(() => {\n      return new Promise<LibraryItems>(async (resolve, reject) => {\n        try {\n          const source = await (typeof libraryItems === \"function\" &&\n          !(libraryItems instanceof Blob)\n            ? libraryItems(this.currLibraryItems)\n            : libraryItems);\n\n          let nextItems;\n\n          if (source instanceof Blob) {\n            nextItems = await loadLibraryFromBlob(source, defaultStatus);\n          } else {\n            nextItems = restoreLibraryItems(source, defaultStatus);\n          }\n          if (\n            !prompt ||\n            window.confirm(\n              t(\"alerts.confirmAddLibrary\", {\n                numShapes: nextItems.length,\n              }),\n            )\n          ) {\n            if (prompt) {\n              // focus container if we've prompted. We focus conditionally\n              // lest `props.autoFocus` is disabled (in which case we should\n              // focus only on user action such as prompt confirm)\n              this.app.focusContainer();\n            }\n\n            if (merge) {\n              resolve(mergeLibraryItems(this.currLibraryItems, nextItems));\n            } else {\n              resolve(nextItems);\n            }\n          } else {\n            reject(new AbortError());\n          }\n        } catch (error: any) {\n          reject(error);\n        }\n      });\n    });\n  };\n\n  setLibrary = (\n    /**\n     * LibraryItems that will replace current items. Can be a function which\n     * will be invoked after all previous tasks are resolved\n     * (this is the prefered way to update the library to avoid race conditions,\n     * but you'll want to manually merge the library items in the callback\n     *  - which is what we're doing in Library.importLibrary()).\n     *\n     * If supplied promise is rejected with AbortError, we swallow it and\n     * do not update the library.\n     */\n    libraryItems:\n      | LibraryItems\n      | Promise<LibraryItems>\n      | ((\n          latestLibraryItems: LibraryItems,\n        ) => LibraryItems | Promise<LibraryItems>),\n  ): Promise<LibraryItems> => {\n    const task = new Promise<LibraryItems>(async (resolve, reject) => {\n      try {\n        await this.getLastUpdateTask();\n\n        if (typeof libraryItems === \"function\") {\n          libraryItems = libraryItems(this.currLibraryItems);\n        }\n\n        this.currLibraryItems = cloneLibraryItems(await libraryItems);\n\n        resolve(this.currLibraryItems);\n      } catch (error: any) {\n        reject(error);\n      }\n    })\n      .catch((error) => {\n        if (error.name === \"AbortError\") {\n          console.warn(\"Library update aborted by user\");\n          return this.currLibraryItems;\n        }\n        throw error;\n      })\n      .finally(() => {\n        this.updateQueue = this.updateQueue.filter((_task) => _task !== task);\n        this.notifyListeners();\n      });\n\n    this.updateQueue.push(task);\n    this.notifyListeners();\n\n    return task;\n  };\n}\n\nexport default Library;\n\nexport const distributeLibraryItemsOnSquareGrid = (\n  libraryItems: LibraryItems,\n) => {\n  const PADDING = 50;\n  const ITEMS_PER_ROW = Math.ceil(Math.sqrt(libraryItems.length));\n\n  const resElements: ExcalidrawElement[] = [];\n\n  const getMaxHeightPerRow = (row: number) => {\n    const maxHeight = libraryItems\n      .slice(row * ITEMS_PER_ROW, row * ITEMS_PER_ROW + ITEMS_PER_ROW)\n      .reduce((acc, item) => {\n        const { height } = getCommonBoundingBox(item.elements);\n        return Math.max(acc, height);\n      }, 0);\n    return maxHeight;\n  };\n\n  const getMaxWidthPerCol = (targetCol: number) => {\n    let index = 0;\n    let currCol = 0;\n    let maxWidth = 0;\n    for (const item of libraryItems) {\n      if (index % ITEMS_PER_ROW === 0) {\n        currCol = 0;\n      }\n      if (currCol === targetCol) {\n        const { width } = getCommonBoundingBox(item.elements);\n        maxWidth = Math.max(maxWidth, width);\n      }\n      index++;\n      currCol++;\n    }\n    return maxWidth;\n  };\n\n  let colOffsetX = 0;\n  let rowOffsetY = 0;\n\n  let maxHeightCurrRow = 0;\n  let maxWidthCurrCol = 0;\n\n  let index = 0;\n  let col = 0;\n  let row = 0;\n\n  for (const item of libraryItems) {\n    if (index && index % ITEMS_PER_ROW === 0) {\n      rowOffsetY += maxHeightCurrRow + PADDING;\n      colOffsetX = 0;\n      col = 0;\n      row++;\n    }\n\n    if (col === 0) {\n      maxHeightCurrRow = getMaxHeightPerRow(row);\n    }\n    maxWidthCurrCol = getMaxWidthPerCol(col);\n\n    const { minX, minY, width, height } = getCommonBoundingBox(item.elements);\n    const offsetCenterX = (maxWidthCurrCol - width) / 2;\n    const offsetCenterY = (maxHeightCurrRow - height) / 2;\n    resElements.push(\n      // eslint-disable-next-line no-loop-func\n      ...item.elements.map((element) => ({\n        ...element,\n        x:\n          element.x +\n          // offset for column\n          colOffsetX +\n          // offset to center in given square grid\n          offsetCenterX -\n          // subtract minX so that given item starts at 0 coord\n          minX,\n        y:\n          element.y +\n          // offset for row\n          rowOffsetY +\n          // offset to center in given square grid\n          offsetCenterY -\n          // subtract minY so that given item starts at 0 coord\n          minY,\n      })),\n    );\n    colOffsetX += maxWidthCurrCol + PADDING;\n    index++;\n    col++;\n  }\n\n  return resElements;\n};\n\nexport const validateLibraryUrl = (\n  libraryUrl: string,\n  /**\n   * @returns `true` if the URL is valid, throws otherwise.\n   */\n  validator:\n    | ((libraryUrl: string) => boolean)\n    | string[] = ALLOWED_LIBRARY_URLS,\n): true => {\n  if (\n    typeof validator === \"function\"\n      ? validator(libraryUrl)\n      : validator.some((allowedUrlDef) => {\n          const allowedUrl = new URL(\n            `https://${allowedUrlDef.replace(/^https?:\\/\\//, \"\")}`,\n          );\n\n          const { hostname, pathname } = new URL(libraryUrl);\n\n          return (\n            new RegExp(`(^|\\\\.)${allowedUrl.hostname}$`).test(hostname) &&\n            new RegExp(\n              `^${allowedUrl.pathname.replace(/\\/+$/, \"\")}(/+|$)`,\n            ).test(pathname)\n          );\n        })\n  ) {\n    return true;\n  }\n\n  throw new Error(`Invalid or disallowed library URL: \"${libraryUrl}\"`);\n};\n\nexport const parseLibraryTokensFromUrl = () => {\n  const libraryUrl =\n    // current\n    new URLSearchParams(window.location.hash.slice(1)).get(\n      URL_HASH_KEYS.addLibrary,\n    ) ||\n    // legacy, kept for compat reasons\n    new URLSearchParams(window.location.search).get(URL_QUERY_KEYS.addLibrary);\n  const idToken = libraryUrl\n    ? new URLSearchParams(window.location.hash.slice(1)).get(\"token\")\n    : null;\n\n  return libraryUrl ? { libraryUrl, idToken } : null;\n};\n\nclass AdapterTransaction {\n  static queue = new Queue();\n\n  static async getLibraryItems(\n    adapter: LibraryPersistenceAdapter,\n    source: LibraryAdatapterSource,\n    _queue = true,\n  ): Promise<LibraryItems> {\n    const task = () =>\n      new Promise<LibraryItems>(async (resolve, reject) => {\n        try {\n          const data = await adapter.load({ source });\n          resolve(restoreLibraryItems(data?.libraryItems || [], \"published\"));\n        } catch (error: any) {\n          reject(error);\n        }\n      });\n\n    if (_queue) {\n      return AdapterTransaction.queue.push(task);\n    }\n\n    return task();\n  }\n\n  static run = async <T>(\n    adapter: LibraryPersistenceAdapter,\n    fn: (transaction: AdapterTransaction) => Promise<T>,\n  ) => {\n    const transaction = new AdapterTransaction(adapter);\n    return AdapterTransaction.queue.push(() => fn(transaction));\n  };\n\n  // ------------------\n\n  private adapter: LibraryPersistenceAdapter;\n\n  constructor(adapter: LibraryPersistenceAdapter) {\n    this.adapter = adapter;\n  }\n\n  getLibraryItems(source: LibraryAdatapterSource) {\n    return AdapterTransaction.getLibraryItems(this.adapter, source, false);\n  }\n}\n\nlet lastSavedLibraryItemsHash = 0;\nlet librarySaveCounter = 0;\n\nexport const getLibraryItemsHash = (items: LibraryItems) => {\n  return hashString(\n    items\n      .map((item) => {\n        return `${item.id}:${hashElementsVersion(item.elements)}`;\n      })\n      .sort()\n      .join(),\n  );\n};\n\nconst persistLibraryUpdate = async (\n  adapter: LibraryPersistenceAdapter,\n  update: LibraryUpdate,\n): Promise<LibraryItems> => {\n  try {\n    librarySaveCounter++;\n\n    return await AdapterTransaction.run(adapter, async (transaction) => {\n      const nextLibraryItemsMap = arrayToMap(\n        await transaction.getLibraryItems(\"save\"),\n      );\n\n      for (const [id] of update.deletedItems) {\n        nextLibraryItemsMap.delete(id);\n      }\n\n      const addedItems: LibraryItem[] = [];\n\n      // we want to merge current library items with the ones stored in the\n      // DB so that we don't lose any elements that for some reason aren't\n      // in the current editor library, which could happen when:\n      //\n      // 1. we haven't received an update deleting some elements\n      //    (in which case it's still better to keep them in the DB lest\n      //     it was due to a different reason)\n      // 2. we keep a single DB for all active editors, but the editors'\n      //    libraries aren't synced or there's a race conditions during\n      //    syncing\n      // 3. some other race condition, e.g. during init where emit updates\n      //    for partial updates (e.g. you install a 3rd party library and\n      //    init from DB only after \u2014 we emit events for both updates)\n      for (const [id, item] of update.addedItems) {\n        if (nextLibraryItemsMap.has(id)) {\n          // replace item with latest version\n          // TODO we could prefer the newer item instead\n          nextLibraryItemsMap.set(id, item);\n        } else {\n          // we want to prepend the new items with the ones that are already\n          // in DB to preserve the ordering we do in editor (newly added\n          // items are added to the beginning)\n          addedItems.push(item);\n        }\n      }\n\n      const nextLibraryItems = addedItems.concat(\n        Array.from(nextLibraryItemsMap.values()),\n      );\n\n      const version = getLibraryItemsHash(nextLibraryItems);\n\n      if (version !== lastSavedLibraryItemsHash) {\n        await adapter.save({ libraryItems: nextLibraryItems });\n      }\n\n      lastSavedLibraryItemsHash = version;\n\n      return nextLibraryItems;\n    });\n  } finally {\n    librarySaveCounter--;\n  }\n};\n\nexport const useHandleLibrary = (\n  opts: {\n    excalidrawAPI: ExcalidrawImperativeAPI | null;\n    /**\n     * Return `true` if the library install url should be allowed.\n     * If not supplied, only the excalidraw.com base domain is allowed.\n     */\n    validateLibraryUrl?: (libraryUrl: string) => boolean;\n  } & (\n    | {\n        /** @deprecated we recommend using `opts.adapter` instead */\n        getInitialLibraryItems?: () => MaybePromise<LibraryItemsSource>;\n      }\n    | {\n        adapter: LibraryPersistenceAdapter;\n        /**\n         * Adapter that takes care of loading data from legacy data store.\n         * Supply this if you want to migrate data on initial load from legacy\n         * data store.\n         *\n         * Can be a different LibraryPersistenceAdapter.\n         */\n        migrationAdapter?: LibraryMigrationAdapter;\n      }\n  ),\n) => {\n  const { excalidrawAPI } = opts;\n\n  const optsRef = useRef(opts);\n  optsRef.current = opts;\n\n  const isLibraryLoadedRef = useRef(false);\n\n  useEffect(() => {\n    if (!excalidrawAPI) {\n      return;\n    }\n\n    // reset on editor remount (excalidrawAPI changed)\n    isLibraryLoadedRef.current = false;\n\n    const importLibraryFromURL = async ({\n      libraryUrl,\n      idToken,\n    }: {\n      libraryUrl: string;\n      idToken: string | null;\n    }) => {\n      const libraryPromise = new Promise<Blob>(async (resolve, reject) => {\n        try {\n          libraryUrl = decodeURIComponent(libraryUrl);\n\n          libraryUrl = toValidURL(libraryUrl);\n\n          validateLibraryUrl(libraryUrl, optsRef.current.validateLibraryUrl);\n\n          const request = await fetch(libraryUrl);\n          const blob = await request.blob();\n          resolve(blob);\n        } catch (error: any) {\n          reject(error);\n        }\n      });\n\n      const shouldPrompt = idToken !== excalidrawAPI.id;\n\n      // wait for the tab to be focused before continuing in case we'll prompt\n      // for confirmation\n      await (shouldPrompt && document.hidden\n        ? new Promise<void>((resolve) => {\n            window.addEventListener(\"focus\", () => resolve(), {\n              once: true,\n            });\n          })\n        : null);\n\n      try {\n        await excalidrawAPI.updateLibrary({\n          libraryItems: libraryPromise,\n          prompt: shouldPrompt,\n          merge: true,\n          defaultStatus: \"published\",\n          openLibraryMenu: true,\n        });\n      } catch (error: any) {\n        excalidrawAPI.updateScene({\n          appState: {\n            errorMessage: error.message,\n          },\n        });\n        throw error;\n      } finally {\n        if (window.location.hash.includes(URL_HASH_KEYS.addLibrary)) {\n          const hash = new URLSearchParams(window.location.hash.slice(1));\n          hash.delete(URL_HASH_KEYS.addLibrary);\n          window.history.replaceState({}, APP_NAME, `#${hash.toString()}`);\n        } else if (window.location.search.includes(URL_QUERY_KEYS.addLibrary)) {\n          const query = new URLSearchParams(window.location.search);\n          query.delete(URL_QUERY_KEYS.addLibrary);\n          window.history.replaceState({}, APP_NAME, `?${query.toString()}`);\n        }\n      }\n    };\n    const onHashChange = (event: HashChangeEvent) => {\n      event.preventDefault();\n      const libraryUrlTokens = parseLibraryTokensFromUrl();\n      if (libraryUrlTokens) {\n        event.stopImmediatePropagation();\n        // If hash changed and it contains library url, import it and replace\n        // the url to its previous state (important in case of collaboration\n        // and similar).\n        // Using history API won't trigger another hashchange.\n        window.history.replaceState({}, \"\", event.oldURL);\n\n        importLibraryFromURL(libraryUrlTokens);\n      }\n    };\n\n    // -------------------------------------------------------------------------\n    // ---------------------------------- init ---------------------------------\n    // -------------------------------------------------------------------------\n\n    const libraryUrlTokens = parseLibraryTokensFromUrl();\n\n    if (libraryUrlTokens) {\n      importLibraryFromURL(libraryUrlTokens);\n    }\n\n    // ------ (A) init load (legacy) -------------------------------------------\n    if (\n      \"getInitialLibraryItems\" in optsRef.current &&\n      optsRef.current.getInitialLibraryItems\n    ) {\n      console.warn(\n        \"useHandleLibrar `opts.getInitialLibraryItems` is deprecated. Use `opts.adapter` instead.\",\n      );\n\n      Promise.resolve(optsRef.current.getInitialLibraryItems())\n        .then((libraryItems) => {\n          excalidrawAPI.updateLibrary({\n            libraryItems,\n            // merge with current library items because we may have already\n            // populated it (e.g. by installing 3rd party library which can\n            // happen before the DB data is loaded)\n            merge: true,\n          });\n        })\n        .catch((error: any) => {\n          console.error(\n            `UseHandeLibrary getInitialLibraryItems failed: ${error?.message}`,\n          );\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // --------------------------------------------------------- init load -----\n    // -------------------------------------------------------------------------\n\n    // ------ (B) data source adapter ------------------------------------------\n\n    if (\"adapter\" in optsRef.current && optsRef.current.adapter) {\n      const adapter = optsRef.current.adapter;\n      const migrationAdapter = optsRef.current.migrationAdapter;\n\n      const initDataPromise = resolvablePromise<LibraryItems | null>();\n\n      // migrate from old data source if needed\n      // (note, if `migrate` function is defined, we always migrate even\n      //  if the data has already been migrated. In that case it'll be a no-op,\n      //  though with several unnecessary steps \u2014 we will still load latest\n      //  DB data during the `persistLibraryChange()` step)\n      // -----------------------------------------------------------------------\n      if (migrationAdapter) {\n        initDataPromise.resolve(\n          promiseTry(migrationAdapter.load)\n            .then(async (libraryData) => {\n              let restoredData: LibraryItems | null = null;\n              try {\n                // if no library data to migrate, assume no migration needed\n                // and skip persisting to new data store, as well as well\n                // clearing the old store via `migrationAdapter.clear()`\n                if (!libraryData) {\n                  return AdapterTransaction.getLibraryItems(adapter, \"load\");\n                }\n\n                restoredData = restoreLibraryItems(\n                  libraryData.libraryItems || [],\n                  \"published\",\n                );\n\n                // we don't queue this operation because it's running inside\n                // a promise that's running inside Library update queue itself\n                const nextItems = await persistLibraryUpdate(\n                  adapter,\n                  createLibraryUpdate([], restoredData),\n                );\n                try {\n                  await migrationAdapter.clear();\n                } catch (error: any) {\n                  console.error(\n                    `couldn't delete legacy library data: ${error.message}`,\n                  );\n                }\n                // migration suceeded, load migrated data\n                return nextItems;\n              } catch (error: any) {\n                console.error(\n                  `couldn't migrate legacy library data: ${error.message}`,\n                );\n                // migration failed, load data from previous store, if any\n                return restoredData;\n              }\n            })\n            // errors caught during `migrationAdapter.load()`\n            .catch((error: any) => {\n              console.error(`error during library migration: ${error.message}`);\n              // as a default, load latest library from current data source\n              return AdapterTransaction.getLibraryItems(adapter, \"load\");\n            }),\n        );\n      } else {\n        initDataPromise.resolve(\n          promiseTry(AdapterTransaction.getLibraryItems, adapter, \"load\"),\n        );\n      }\n\n      // load initial (or migrated) library\n      excalidrawAPI\n        .updateLibrary({\n          libraryItems: initDataPromise.then((libraryItems) => {\n            const _libraryItems = libraryItems || [];\n            lastSavedLibraryItemsHash = getLibraryItemsHash(_libraryItems);\n            return _libraryItems;\n          }),\n          // merge with current library items because we may have already\n          // populated it (e.g. by installing 3rd party library which can\n          // happen before the DB data is loaded)\n          merge: true,\n        })\n        .finally(() => {\n          isLibraryLoadedRef.current = true;\n        });\n    }\n    // ---------------------------------------------- data source datapter -----\n\n    window.addEventListener(EVENT.HASHCHANGE, onHashChange);\n    return () => {\n      window.removeEventListener(EVENT.HASHCHANGE, onHashChange);\n    };\n  }, [\n    // important this useEffect only depends on excalidrawAPI so it only reruns\n    // on editor remounts (the excalidrawAPI changes)\n    excalidrawAPI,\n  ]);\n\n  // This effect is run without excalidrawAPI dependency so that host apps\n  // can run this hook outside of an active editor instance and the library\n  // update queue/loop survives editor remounts\n  //\n  // This effect is still only meant to be run if host apps supply an persitence\n  // adapter. If we don't have access to it, it the update listener doesn't\n  // do anything.\n  useEffect(\n    () => {\n      // on update, merge with current library items and persist\n      // -----------------------------------------------------------------------\n      const unsubOnLibraryUpdate = onLibraryUpdateEmitter.on(\n        async (update, nextLibraryItems) => {\n          const isLoaded = isLibraryLoadedRef.current;\n          // we want to operate with the latest adapter, but we don't want this\n          // effect to rerun on every adapter change in case host apps' adapter\n          // isn't stable\n          const adapter =\n            (\"adapter\" in optsRef.current && optsRef.current.adapter) || null;\n          try {\n            if (adapter) {\n              if (\n                // if nextLibraryItems hash identical to previously saved hash,\n                // exit early, even if actual upstream state ends up being\n                // different (e.g. has more data than we have locally), as it'd\n                // be low-impact scenario.\n                lastSavedLibraryItemsHash !==\n                getLibraryItemsHash(nextLibraryItems)\n              ) {\n                await persistLibraryUpdate(adapter, update);\n              }\n            }\n          } catch (error: any) {\n            console.error(\n              `couldn't persist library update: ${error.message}`,\n              update,\n            );\n\n            // currently we only show error if an editor is loaded\n            if (isLoaded && optsRef.current.excalidrawAPI) {\n              optsRef.current.excalidrawAPI.updateScene({\n                appState: {\n                  errorMessage: t(\"errors.saveLibraryError\"),\n                },\n              });\n            }\n          }\n        },\n      );\n\n      const onUnload = (event: Event) => {\n        if (librarySaveCounter) {\n          preventUnload(event);\n        }\n      };\n\n      window.addEventListener(EVENT.BEFORE_UNLOAD, onUnload);\n\n      return () => {\n        window.removeEventListener(EVENT.BEFORE_UNLOAD, onUnload);\n        unsubOnLibraryUpdate();\n        lastSavedLibraryItemsHash = 0;\n        librarySaveCounter = 0;\n      };\n    },\n    [\n      // this effect must not have any deps so it doesn't rerun\n    ],\n  );\n};\n", "import { useEffect, useState } from \"react\";\nimport { COLOR_PALETTE } from \"../colors\";\nimport { atom, useAtom } from \"../editor-jotai\";\nimport { exportToSvg } from \"@excalidraw/utils/export\";\nimport type { LibraryItem } from \"../types\";\n\nexport type SvgCache = Map<LibraryItem[\"id\"], SVGSVGElement>;\n\nexport const libraryItemSvgsCache = atom<SvgCache>(new Map());\n\nconst exportLibraryItemToSvg = async (elements: LibraryItem[\"elements\"]) => {\n  return await exportToSvg({\n    elements,\n    appState: {\n      exportBackground: false,\n      viewBackgroundColor: COLOR_PALETTE.white,\n    },\n    files: null,\n    renderEmbeddables: false,\n    skipInliningFonts: true,\n  });\n};\n\nexport const useLibraryItemSvg = (\n  id: LibraryItem[\"id\"] | null,\n  elements: LibraryItem[\"elements\"] | undefined,\n  svgCache: SvgCache,\n): SVGSVGElement | undefined => {\n  const [svg, setSvg] = useState<SVGSVGElement>();\n\n  useEffect(() => {\n    if (elements) {\n      if (id) {\n        // Try to load cached svg\n        const cachedSvg = svgCache.get(id);\n\n        if (cachedSvg) {\n          setSvg(cachedSvg);\n        } else {\n          // When there is no svg in cache export it and save to cache\n          (async () => {\n            const exportedSvg = await exportLibraryItemToSvg(elements);\n            // TODO: should likely be removed for custom fonts\n            exportedSvg.querySelector(\".style-fonts\")?.remove();\n\n            if (exportedSvg) {\n              svgCache.set(id, exportedSvg);\n              setSvg(exportedSvg);\n            }\n          })();\n        }\n      } else {\n        // When we have no id (usualy selected items from canvas) just export the svg\n        (async () => {\n          const exportedSvg = await exportLibraryItemToSvg(elements);\n          setSvg(exportedSvg);\n        })();\n      }\n    }\n  }, [id, elements, svgCache, setSvg]);\n\n  return svg;\n};\n\nexport const useLibraryCache = () => {\n  const [svgCache] = useAtom(libraryItemSvgsCache);\n\n  const clearLibraryCache = () => svgCache.clear();\n\n  const deleteItemsFromLibraryCache = (items: LibraryItem[\"id\"][]) => {\n    items.forEach((item) => svgCache.delete(item));\n  };\n\n  return {\n    clearLibraryCache,\n    deleteItemsFromLibraryCache,\n    svgCache,\n  };\n};\n", "import type { MaybePromise } from \"./utility-types\";\nimport type { ResolvablePromise } from \"./utils\";\nimport { promiseTry, resolvablePromise } from \"./utils\";\n\ntype Job<T, TArgs extends unknown[]> = (...args: TArgs) => MaybePromise<T>;\n\ntype QueueJob<T, TArgs extends unknown[]> = {\n  jobFactory: Job<T, TArgs>;\n  promise: ResolvablePromise<T>;\n  args: TArgs;\n};\n\nexport class Queue {\n  private jobs: QueueJob<any, any[]>[] = [];\n  private running = false;\n\n  private tick() {\n    if (this.running) {\n      return;\n    }\n    const job = this.jobs.shift();\n    if (job) {\n      this.running = true;\n      job.promise.resolve(\n        promiseTry(job.jobFactory, ...job.args).finally(() => {\n          this.running = false;\n          this.tick();\n        }),\n      );\n    } else {\n      this.running = false;\n    }\n  }\n\n  push<TValue, TArgs extends unknown[]>(\n    jobFactory: Job<TValue, TArgs>,\n    ...args: TArgs\n  ): Promise<TValue> {\n    const promise = resolvablePromise<TValue>();\n    this.jobs.push({ jobFactory, promise, args });\n\n    this.tick();\n\n    return promise;\n  }\n}\n", "import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { serializeLibraryAsJSON } from \"../data/json\";\nimport { t } from \"../i18n\";\nimport type {\n  ExcalidrawProps,\n  LibraryItem,\n  LibraryItems,\n  UIAppState,\n} from \"../types\";\nimport { arrayToMap } from \"../utils\";\nimport Stack from \"./Stack\";\nimport { MIME_TYPES } from \"../constants\";\nimport Spinner from \"./Spinner\";\nimport { duplicateElements } from \"../element/newElement\";\nimport { LibraryMenuControlButtons } from \"./LibraryMenuControlButtons\";\nimport { LibraryDropdownMenu } from \"./LibraryMenuHeaderContent\";\nimport {\n  LibraryMenuSection,\n  LibraryMenuSectionGrid,\n} from \"./LibraryMenuSection\";\nimport { useScrollPosition } from \"../hooks/useScrollPosition\";\nimport { useLibraryCache } from \"../hooks/useLibraryItemSvg\";\n\nimport \"./LibraryMenuItems.scss\";\n\n// using an odd number of items per batch so the rendering creates an irregular\n// pattern which looks more organic\nconst ITEMS_RENDERED_PER_BATCH = 17;\n// when render outputs cached we can render many more items per batch to\n// speed it up\nconst CACHED_ITEMS_RENDERED_PER_BATCH = 64;\n\nexport default function LibraryMenuItems({\n  isLoading,\n  libraryItems,\n  onAddToLibrary,\n  onInsertLibraryItems,\n  pendingElements,\n  theme,\n  id,\n  libraryReturnUrl,\n  onSelectItems,\n  selectedItems,\n}: {\n  isLoading: boolean;\n  libraryItems: LibraryItems;\n  pendingElements: LibraryItem[\"elements\"];\n  onInsertLibraryItems: (libraryItems: LibraryItems) => void;\n  onAddToLibrary: (elements: LibraryItem[\"elements\"]) => void;\n  libraryReturnUrl: ExcalidrawProps[\"libraryReturnUrl\"];\n  theme: UIAppState[\"theme\"];\n  id: string;\n  selectedItems: LibraryItem[\"id\"][];\n  onSelectItems: (id: LibraryItem[\"id\"][]) => void;\n}) {\n  const libraryContainerRef = useRef<HTMLDivElement>(null);\n  const scrollPosition = useScrollPosition<HTMLDivElement>(libraryContainerRef);\n\n  // This effect has to be called only on first render, therefore  `scrollPosition` isn't in the dependency array\n  useEffect(() => {\n    if (scrollPosition > 0) {\n      libraryContainerRef.current?.scrollTo(0, scrollPosition);\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const { svgCache } = useLibraryCache();\n  const unpublishedItems = useMemo(\n    () => libraryItems.filter((item) => item.status !== \"published\"),\n    [libraryItems],\n  );\n\n  const publishedItems = useMemo(\n    () => libraryItems.filter((item) => item.status === \"published\"),\n    [libraryItems],\n  );\n\n  const showBtn = !libraryItems.length && !pendingElements.length;\n\n  const isLibraryEmpty =\n    !pendingElements.length &&\n    !unpublishedItems.length &&\n    !publishedItems.length;\n\n  const [lastSelectedItem, setLastSelectedItem] = useState<\n    LibraryItem[\"id\"] | null\n  >(null);\n\n  const onItemSelectToggle = useCallback(\n    (id: LibraryItem[\"id\"], event: React.MouseEvent) => {\n      const shouldSelect = !selectedItems.includes(id);\n\n      const orderedItems = [...unpublishedItems, ...publishedItems];\n\n      if (shouldSelect) {\n        if (event.shiftKey && lastSelectedItem) {\n          const rangeStart = orderedItems.findIndex(\n            (item) => item.id === lastSelectedItem,\n          );\n          const rangeEnd = orderedItems.findIndex((item) => item.id === id);\n\n          if (rangeStart === -1 || rangeEnd === -1) {\n            onSelectItems([...selectedItems, id]);\n            return;\n          }\n\n          const selectedItemsMap = arrayToMap(selectedItems);\n          const nextSelectedIds = orderedItems.reduce(\n            (acc: LibraryItem[\"id\"][], item, idx) => {\n              if (\n                (idx >= rangeStart && idx <= rangeEnd) ||\n                selectedItemsMap.has(item.id)\n              ) {\n                acc.push(item.id);\n              }\n              return acc;\n            },\n            [],\n          );\n\n          onSelectItems(nextSelectedIds);\n        } else {\n          onSelectItems([...selectedItems, id]);\n        }\n        setLastSelectedItem(id);\n      } else {\n        setLastSelectedItem(null);\n        onSelectItems(selectedItems.filter((_id) => _id !== id));\n      }\n    },\n    [\n      lastSelectedItem,\n      onSelectItems,\n      publishedItems,\n      selectedItems,\n      unpublishedItems,\n    ],\n  );\n\n  const getInsertedElements = useCallback(\n    (id: string) => {\n      let targetElements;\n      if (selectedItems.includes(id)) {\n        targetElements = libraryItems.filter((item) =>\n          selectedItems.includes(item.id),\n        );\n      } else {\n        targetElements = libraryItems.filter((item) => item.id === id);\n      }\n      return targetElements.map((item) => {\n        return {\n          ...item,\n          // duplicate each library item before inserting on canvas to confine\n          // ids and bindings to each library item. See #6465\n          elements: duplicateElements(item.elements, { randomizeSeed: true }),\n        };\n      });\n    },\n    [libraryItems, selectedItems],\n  );\n\n  const onItemDrag = useCallback(\n    (id: LibraryItem[\"id\"], event: React.DragEvent) => {\n      event.dataTransfer.setData(\n        MIME_TYPES.excalidrawlib,\n        serializeLibraryAsJSON(getInsertedElements(id)),\n      );\n    },\n    [getInsertedElements],\n  );\n\n  const isItemSelected = useCallback(\n    (id: LibraryItem[\"id\"] | null) => {\n      if (!id) {\n        return false;\n      }\n\n      return selectedItems.includes(id);\n    },\n    [selectedItems],\n  );\n\n  const onAddToLibraryClick = useCallback(() => {\n    onAddToLibrary(pendingElements);\n  }, [pendingElements, onAddToLibrary]);\n\n  const onItemClick = useCallback(\n    (id: LibraryItem[\"id\"] | null) => {\n      if (id) {\n        onInsertLibraryItems(getInsertedElements(id));\n      }\n    },\n    [getInsertedElements, onInsertLibraryItems],\n  );\n\n  const itemsRenderedPerBatch =\n    svgCache.size >= libraryItems.length\n      ? CACHED_ITEMS_RENDERED_PER_BATCH\n      : ITEMS_RENDERED_PER_BATCH;\n\n  return (\n    <div\n      className=\"library-menu-items-container\"\n      style={\n        pendingElements.length ||\n        unpublishedItems.length ||\n        publishedItems.length\n          ? { justifyContent: \"flex-start\" }\n          : { borderBottom: 0 }\n      }\n    >\n      {!isLibraryEmpty && (\n        <LibraryDropdownMenu\n          selectedItems={selectedItems}\n          onSelectItems={onSelectItems}\n          className=\"library-menu-dropdown-container--in-heading\"\n        />\n      )}\n      <Stack.Col\n        className=\"library-menu-items-container__items\"\n        align=\"start\"\n        gap={1}\n        style={{\n          flex: publishedItems.length > 0 ? 1 : \"0 1 auto\",\n          marginBottom: 0,\n        }}\n        ref={libraryContainerRef}\n      >\n        <>\n          {!isLibraryEmpty && (\n            <div className=\"library-menu-items-container__header\">\n              {t(\"labels.personalLib\")}\n            </div>\n          )}\n          {isLoading && (\n            <div\n              style={{\n                position: \"absolute\",\n                top: \"var(--container-padding-y)\",\n                right: \"var(--container-padding-x)\",\n                transform: \"translateY(50%)\",\n              }}\n            >\n              <Spinner />\n            </div>\n          )}\n          {!pendingElements.length && !unpublishedItems.length ? (\n            <div className=\"library-menu-items__no-items\">\n              <div className=\"library-menu-items__no-items__label\">\n                {t(\"library.noItems\")}\n              </div>\n              <div className=\"library-menu-items__no-items__hint\">\n                {publishedItems.length > 0\n                  ? t(\"library.hint_emptyPrivateLibrary\")\n                  : t(\"library.hint_emptyLibrary\")}\n              </div>\n            </div>\n          ) : (\n            <LibraryMenuSectionGrid>\n              {pendingElements.length > 0 && (\n                <LibraryMenuSection\n                  itemsRenderedPerBatch={itemsRenderedPerBatch}\n                  items={[{ id: null, elements: pendingElements }]}\n                  onItemSelectToggle={onItemSelectToggle}\n                  onItemDrag={onItemDrag}\n                  onClick={onAddToLibraryClick}\n                  isItemSelected={isItemSelected}\n                  svgCache={svgCache}\n                />\n              )}\n              <LibraryMenuSection\n                itemsRenderedPerBatch={itemsRenderedPerBatch}\n                items={unpublishedItems}\n                onItemSelectToggle={onItemSelectToggle}\n                onItemDrag={onItemDrag}\n                onClick={onItemClick}\n                isItemSelected={isItemSelected}\n                svgCache={svgCache}\n              />\n            </LibraryMenuSectionGrid>\n          )}\n        </>\n\n        <>\n          {(publishedItems.length > 0 ||\n            pendingElements.length > 0 ||\n            unpublishedItems.length > 0) && (\n            <div className=\"library-menu-items-container__header library-menu-items-container__header--excal\">\n              {t(\"labels.excalidrawLib\")}\n            </div>\n          )}\n          {publishedItems.length > 0 ? (\n            <LibraryMenuSectionGrid>\n              <LibraryMenuSection\n                itemsRenderedPerBatch={itemsRenderedPerBatch}\n                items={publishedItems}\n                onItemSelectToggle={onItemSelectToggle}\n                onItemDrag={onItemDrag}\n                onClick={onItemClick}\n                isItemSelected={isItemSelected}\n                svgCache={svgCache}\n              />\n            </LibraryMenuSectionGrid>\n          ) : unpublishedItems.length > 0 ? (\n            <div\n              style={{\n                margin: \"1rem 0\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                width: \"100%\",\n                fontSize: \".9rem\",\n              }}\n            >\n              {t(\"library.noItems\")}\n            </div>\n          ) : null}\n        </>\n\n        {showBtn && (\n          <LibraryMenuControlButtons\n            style={{ padding: \"16px 0\", width: \"100%\" }}\n            id={id}\n            libraryReturnUrl={libraryReturnUrl}\n            theme={theme}\n          >\n            <LibraryDropdownMenu\n              selectedItems={selectedItems}\n              onSelectItems={onSelectItems}\n            />\n          </LibraryMenuControlButtons>\n        )}\n      </Stack.Col>\n    </div>\n  );\n}\n", "import \"./Stack.scss\";\n\nimport React, { forwardRef } from \"react\";\nimport clsx from \"clsx\";\n\ntype StackProps = {\n  children: React.ReactNode;\n  gap?: number;\n  align?: \"start\" | \"center\" | \"end\" | \"baseline\";\n  justifyContent?: \"center\" | \"space-around\" | \"space-between\";\n  className?: string | boolean;\n  style?: React.CSSProperties;\n};\n\nconst RowStack = forwardRef(\n  (\n    { children, gap, align, justifyContent, className, style }: StackProps,\n    ref: React.ForwardedRef<HTMLDivElement>,\n  ) => {\n    return (\n      <div\n        className={clsx(\"Stack Stack_horizontal\", className)}\n        style={{\n          \"--gap\": gap,\n          alignItems: align,\n          justifyContent,\n          ...style,\n        }}\n        ref={ref}\n      >\n        {children}\n      </div>\n    );\n  },\n);\n\nconst ColStack = forwardRef(\n  (\n    { children, gap, align, justifyContent, className, style }: StackProps,\n    ref: React.ForwardedRef<HTMLDivElement>,\n  ) => {\n    return (\n      <div\n        className={clsx(\"Stack Stack_vertical\", className)}\n        style={{\n          \"--gap\": gap,\n          justifyItems: align,\n          justifyContent,\n          ...style,\n        }}\n        ref={ref}\n      >\n        {children}\n      </div>\n    );\n  },\n);\n\nexport default {\n  Row: RowStack,\n  Col: ColStack,\n};\n", "import { VERSIONS } from \"../constants\";\nimport { t } from \"../i18n\";\nimport type { ExcalidrawProps, UIAppState } from \"../types\";\n\nconst LibraryMenuBrowseButton = ({\n  theme,\n  id,\n  libraryReturnUrl,\n}: {\n  libraryReturnUrl: ExcalidrawProps[\"libraryReturnUrl\"];\n  theme: UIAppState[\"theme\"];\n  id: string;\n}) => {\n  const referrer =\n    libraryReturnUrl || window.location.origin + window.location.pathname;\n  return (\n    <a\n      className=\"library-menu-browse-button\"\n      href={`${import.meta.env.VITE_APP_LIBRARY_URL}?target=${\n        window.name || \"_blank\"\n      }&referrer=${referrer}&useHash=true&token=${id}&theme=${theme}&version=${\n        VERSIONS.excalidrawLibrary\n      }`}\n      target=\"_excalidraw_libraries\"\n    >\n      {t(\"labels.libraries\")}\n    </a>\n  );\n};\n\nexport default LibraryMenuBrowseButton;\n", "import type { ExcalidrawProps, UIAppState } from \"../types\";\nimport LibraryMenuBrowseButton from \"./LibraryMenuBrowseButton\";\nimport clsx from \"clsx\";\n\nexport const LibraryMenuControlButtons = ({\n  libraryReturnUrl,\n  theme,\n  id,\n  style,\n  children,\n  className,\n}: {\n  libraryReturnUrl: ExcalidrawProps[\"libraryReturnUrl\"];\n  theme: UIAppState[\"theme\"];\n  id: string;\n  style: React.CSSProperties;\n  children?: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div\n      className={clsx(\"library-menu-control-buttons\", className)}\n      style={style}\n    >\n      <LibraryMenuBrowseButton\n        id={id}\n        libraryReturnUrl={libraryReturnUrl}\n        theme={theme}\n      />\n      {children}\n    </div>\n  );\n};\n", "import { useCallback, useState } from \"react\";\nimport { t } from \"../i18n\";\nimport Trans from \"./Trans\";\nimport { useAtom } from \"../editor-jotai\";\nimport type { LibraryItem, LibraryItems, UIAppState } from \"../types\";\nimport { useApp, useExcalidrawSetAppState } from \"./App\";\nimport { saveLibraryAsJSON } from \"../data/json\";\nimport type Library from \"../data/library\";\nimport { libraryItemsAtom } from \"../data/library\";\nimport {\n  DotsIcon,\n  ExportIcon,\n  LoadIcon,\n  publishIcon,\n  TrashIcon,\n} from \"./icons\";\nimport { ToolButton } from \"./ToolButton\";\nimport { fileOpen } from \"../data/filesystem\";\nimport { muteFSAbortError } from \"../utils\";\nimport ConfirmDialog from \"./ConfirmDialog\";\nimport PublishLibrary from \"./PublishLibrary\";\nimport { Dialog } from \"./Dialog\";\nimport DropdownMenu from \"./dropdownMenu/DropdownMenu\";\nimport { isLibraryMenuOpenAtom } from \"./LibraryMenu\";\nimport { useUIAppState } from \"../context/ui-appState\";\nimport clsx from \"clsx\";\nimport { useLibraryCache } from \"../hooks/useLibraryItemSvg\";\n\nconst getSelectedItems = (\n  libraryItems: LibraryItems,\n  selectedItems: LibraryItem[\"id\"][],\n) => libraryItems.filter((item) => selectedItems.includes(item.id));\n\nexport const LibraryDropdownMenuButton: React.FC<{\n  setAppState: React.Component<any, UIAppState>[\"setState\"];\n  selectedItems: LibraryItem[\"id\"][];\n  library: Library;\n  onRemoveFromLibrary: () => void;\n  resetLibrary: () => void;\n  onSelectItems: (items: LibraryItem[\"id\"][]) => void;\n  appState: UIAppState;\n  className?: string;\n}> = ({\n  setAppState,\n  selectedItems,\n  library,\n  onRemoveFromLibrary,\n  resetLibrary,\n  onSelectItems,\n  appState,\n  className,\n}) => {\n  const [libraryItemsData] = useAtom(libraryItemsAtom);\n  const [isLibraryMenuOpen, setIsLibraryMenuOpen] = useAtom(\n    isLibraryMenuOpenAtom,\n  );\n\n  const renderRemoveLibAlert = () => {\n    const content = selectedItems.length\n      ? t(\"alerts.removeItemsFromsLibrary\", { count: selectedItems.length })\n      : t(\"alerts.resetLibrary\");\n    const title = selectedItems.length\n      ? t(\"confirmDialog.removeItemsFromLib\")\n      : t(\"confirmDialog.resetLibrary\");\n    return (\n      <ConfirmDialog\n        onConfirm={() => {\n          if (selectedItems.length) {\n            onRemoveFromLibrary();\n          } else {\n            resetLibrary();\n          }\n          setShowRemoveLibAlert(false);\n        }}\n        onCancel={() => {\n          setShowRemoveLibAlert(false);\n        }}\n        title={title}\n      >\n        <p>{content}</p>\n      </ConfirmDialog>\n    );\n  };\n\n  const [showRemoveLibAlert, setShowRemoveLibAlert] = useState(false);\n\n  const itemsSelected = !!selectedItems.length;\n  const items = itemsSelected\n    ? libraryItemsData.libraryItems.filter((item) =>\n        selectedItems.includes(item.id),\n      )\n    : libraryItemsData.libraryItems;\n  const resetLabel = itemsSelected\n    ? t(\"buttons.remove\")\n    : t(\"buttons.resetLibrary\");\n\n  const [showPublishLibraryDialog, setShowPublishLibraryDialog] =\n    useState(false);\n  const [publishLibSuccess, setPublishLibSuccess] = useState<null | {\n    url: string;\n    authorName: string;\n  }>(null);\n  const renderPublishSuccess = useCallback(() => {\n    return (\n      <Dialog\n        onCloseRequest={() => setPublishLibSuccess(null)}\n        title={t(\"publishSuccessDialog.title\")}\n        className=\"publish-library-success\"\n        size=\"small\"\n      >\n        <p>\n          <Trans\n            i18nKey=\"publishSuccessDialog.content\"\n            authorName={publishLibSuccess!.authorName}\n            link={(el) => (\n              <a\n                href={publishLibSuccess?.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {el}\n              </a>\n            )}\n          />\n        </p>\n        <ToolButton\n          type=\"button\"\n          title={t(\"buttons.close\")}\n          aria-label={t(\"buttons.close\")}\n          label={t(\"buttons.close\")}\n          onClick={() => setPublishLibSuccess(null)}\n          data-testid=\"publish-library-success-close\"\n          className=\"publish-library-success-close\"\n        />\n      </Dialog>\n    );\n  }, [setPublishLibSuccess, publishLibSuccess]);\n\n  const onPublishLibSuccess = (\n    data: { url: string; authorName: string },\n    libraryItems: LibraryItems,\n  ) => {\n    setShowPublishLibraryDialog(false);\n    setPublishLibSuccess({ url: data.url, authorName: data.authorName });\n    const nextLibItems = libraryItems.slice();\n    nextLibItems.forEach((libItem) => {\n      if (selectedItems.includes(libItem.id)) {\n        libItem.status = \"published\";\n      }\n    });\n    library.setLibrary(nextLibItems);\n  };\n\n  const onLibraryImport = async () => {\n    try {\n      await library.updateLibrary({\n        libraryItems: fileOpen({\n          description: \"Excalidraw library files\",\n          // ToDo: Be over-permissive until https://bugs.webkit.org/show_bug.cgi?id=34442\n          // gets resolved. Else, iOS users cannot open `.excalidraw` files.\n          /*\n            extensions: [\".json\", \".excalidrawlib\"],\n            */\n        }),\n        merge: true,\n        openLibraryMenu: true,\n      });\n    } catch (error: any) {\n      if (error?.name === \"AbortError\") {\n        console.warn(error);\n        return;\n      }\n      setAppState({ errorMessage: t(\"errors.importLibraryError\") });\n    }\n  };\n\n  const onLibraryExport = async () => {\n    const libraryItems = itemsSelected\n      ? items\n      : await library.getLatestLibrary();\n    saveLibraryAsJSON(libraryItems)\n      .catch(muteFSAbortError)\n      .catch((error) => {\n        setAppState({ errorMessage: error.message });\n      });\n  };\n\n  const renderLibraryMenu = () => {\n    return (\n      <DropdownMenu open={isLibraryMenuOpen}>\n        <DropdownMenu.Trigger\n          onToggle={() => setIsLibraryMenuOpen(!isLibraryMenuOpen)}\n        >\n          {DotsIcon}\n        </DropdownMenu.Trigger>\n        <DropdownMenu.Content\n          onClickOutside={() => setIsLibraryMenuOpen(false)}\n          onSelect={() => setIsLibraryMenuOpen(false)}\n          className=\"library-menu\"\n        >\n          {!itemsSelected && (\n            <DropdownMenu.Item\n              onSelect={onLibraryImport}\n              icon={LoadIcon}\n              data-testid=\"lib-dropdown--load\"\n            >\n              {t(\"buttons.load\")}\n            </DropdownMenu.Item>\n          )}\n          {!!items.length && (\n            <DropdownMenu.Item\n              onSelect={onLibraryExport}\n              icon={ExportIcon}\n              data-testid=\"lib-dropdown--export\"\n            >\n              {t(\"buttons.export\")}\n            </DropdownMenu.Item>\n          )}\n          {!!items.length && (\n            <DropdownMenu.Item\n              onSelect={() => setShowRemoveLibAlert(true)}\n              icon={TrashIcon}\n            >\n              {resetLabel}\n            </DropdownMenu.Item>\n          )}\n          {itemsSelected && (\n            <DropdownMenu.Item\n              icon={publishIcon}\n              onSelect={() => setShowPublishLibraryDialog(true)}\n              data-testid=\"lib-dropdown--remove\"\n            >\n              {t(\"buttons.publishLibrary\")}\n            </DropdownMenu.Item>\n          )}\n        </DropdownMenu.Content>\n      </DropdownMenu>\n    );\n  };\n\n  return (\n    <div className={clsx(\"library-menu-dropdown-container\", className)}>\n      {renderLibraryMenu()}\n      {selectedItems.length > 0 && (\n        <div className=\"library-actions-counter\">{selectedItems.length}</div>\n      )}\n      {showRemoveLibAlert && renderRemoveLibAlert()}\n      {showPublishLibraryDialog && (\n        <PublishLibrary\n          onClose={() => setShowPublishLibraryDialog(false)}\n          libraryItems={getSelectedItems(\n            libraryItemsData.libraryItems,\n            selectedItems,\n          )}\n          appState={appState}\n          onSuccess={(data) =>\n            onPublishLibSuccess(data, libraryItemsData.libraryItems)\n          }\n          onError={(error) => window.alert(error)}\n          updateItemsInStorage={() =>\n            library.setLibrary(libraryItemsData.libraryItems)\n          }\n          onRemove={(id: string) =>\n            onSelectItems(selectedItems.filter((_id) => _id !== id))\n          }\n        />\n      )}\n      {publishLibSuccess && renderPublishSuccess()}\n    </div>\n  );\n};\n\nexport const LibraryDropdownMenu = ({\n  selectedItems,\n  onSelectItems,\n  className,\n}: {\n  selectedItems: LibraryItem[\"id\"][];\n  onSelectItems: (id: LibraryItem[\"id\"][]) => void;\n  className?: string;\n}) => {\n  const { library } = useApp();\n  const { clearLibraryCache, deleteItemsFromLibraryCache } = useLibraryCache();\n  const appState = useUIAppState();\n  const setAppState = useExcalidrawSetAppState();\n\n  const [libraryItemsData] = useAtom(libraryItemsAtom);\n\n  const removeFromLibrary = async (libraryItems: LibraryItems) => {\n    const nextItems = libraryItems.filter(\n      (item) => !selectedItems.includes(item.id),\n    );\n    library.setLibrary(nextItems).catch(() => {\n      setAppState({ errorMessage: t(\"alerts.errorRemovingFromLibrary\") });\n    });\n\n    deleteItemsFromLibraryCache(selectedItems);\n\n    onSelectItems([]);\n  };\n\n  const resetLibrary = () => {\n    library.resetLibrary();\n    clearLibraryCache();\n  };\n\n  return (\n    <LibraryDropdownMenuButton\n      appState={appState}\n      setAppState={setAppState}\n      selectedItems={selectedItems}\n      onSelectItems={onSelectItems}\n      library={library}\n      onRemoveFromLibrary={() =>\n        removeFromLibrary(libraryItemsData.libraryItems)\n      }\n      resetLibrary={resetLibrary}\n      className={className}\n    />\n  );\n};\n", "import React from \"react\";\n\nimport type { TranslationKeys } from \"../i18n\";\nimport { useI18n } from \"../i18n\";\n\n// Used for splitting i18nKey into tokens in Trans component\n// Example:\n// \"Please <link>click {{location}}</link> to continue.\".split(SPLIT_REGEX).filter(Boolean)\n// produces\n// [\"Please \", \"<link>\", \"click \", \"{{location}}\", \"</link>\", \" to continue.\"]\nconst SPLIT_REGEX = /({{[\\w-]+}})|(<[\\w-]+>)|(<\\/[\\w-]+>)/g;\n// Used for extracting \"location\" from \"{{location}}\"\nconst KEY_REGEXP = /{{([\\w-]+)}}/;\n// Used for extracting \"link\" from \"<link>\"\nconst TAG_START_REGEXP = /<([\\w-]+)>/;\n// Used for extracting \"link\" from \"</link>\"\nconst TAG_END_REGEXP = /<\\/([\\w-]+)>/;\n\nconst getTransChildren = (\n  format: string,\n  props: {\n    [key: string]: React.ReactNode | ((el: React.ReactNode) => React.ReactNode);\n  },\n): React.ReactNode[] => {\n  const stack: { name: string; children: React.ReactNode[] }[] = [\n    {\n      name: \"\",\n      children: [],\n    },\n  ];\n\n  format\n    .split(SPLIT_REGEX)\n    .filter(Boolean)\n    .forEach((match) => {\n      const tagStartMatch = match.match(TAG_START_REGEXP);\n      const tagEndMatch = match.match(TAG_END_REGEXP);\n      const keyMatch = match.match(KEY_REGEXP);\n\n      if (tagStartMatch !== null) {\n        // The match is <tag>. Set the tag name as the name if it's one of the\n        // props, e.g. for \"Please <link>click the button</link> to continue\"\n        // tagStartMatch[1] = \"link\" and props contain \"link\" then it will be\n        // pushed to stack.\n        const name = tagStartMatch[1];\n        if (props.hasOwnProperty(name)) {\n          stack.push({\n            name,\n            children: [],\n          });\n        } else {\n          console.warn(\n            `Trans: missed to pass in prop ${name} for interpolating ${format}`,\n          );\n        }\n      } else if (tagEndMatch !== null) {\n        // If tag end match is found, this means we need to replace the content with\n        // its actual value in prop e.g. format = \"Please <link>click the\n        // button</link> to continue\", tagEndMatch is for \"</link>\", stack last item name =\n        // \"link\" and props.link = (el) => <a\n        // href=\"https://example.com\">{el}</a> then its prop value will be\n        // pushed to \"link\"'s children so on DOM when rendering it's rendered as\n        // <a href=\"https://example.com\">click the button</a>\n        const name = tagEndMatch[1];\n        if (name === stack[stack.length - 1].name) {\n          const item = stack.pop()!;\n          const itemChildren = React.createElement(\n            React.Fragment,\n            {},\n            ...item.children,\n          );\n          const fn = props[item.name];\n          if (typeof fn === \"function\") {\n            stack[stack.length - 1].children.push(fn(itemChildren));\n          }\n        } else {\n          console.warn(\n            `Trans: unexpected end tag ${match} for interpolating ${format}`,\n          );\n        }\n      } else if (keyMatch !== null) {\n        // The match is for {{key}}. Check if the key is present in props and set\n        // the prop value as children of last stack item e.g. format = \"Hello\n        // {{name}}\", key = \"name\" and props.name = \"Excalidraw\" then its prop\n        // value will be pushed to \"name\"'s children so it's rendered on DOM as\n        // \"Hello Excalidraw\"\n        const name = keyMatch[1];\n        if (props.hasOwnProperty(name)) {\n          stack[stack.length - 1].children.push(props[name] as React.ReactNode);\n        } else {\n          console.warn(\n            `Trans: key ${name} not in props for interpolating ${format}`,\n          );\n        }\n      } else {\n        // If none of cases match means we just need to push the string\n        // to stack eg - \"Hello {{name}} Whats up?\" \"Hello\", \"Whats up\" will be pushed\n        stack[stack.length - 1].children.push(match);\n      }\n    });\n\n  if (stack.length !== 1) {\n    console.warn(`Trans: stack not empty for interpolating ${format}`);\n  }\n\n  return stack[0].children;\n};\n\n/*\nTrans component is used for translating JSX.\n\n```json\n{\n  \"example1\": \"Hello {{audience}}\",\n  \"example2\": \"Please <link>click the button</link> to continue.\",\n  \"example3\": \"Please <link>click {{location}}</link> to continue.\",\n  \"example4\": \"Please <link>click <bold>{{location}}</bold></link> to continue.\",\n}\n```\n\n```jsx\n<Trans i18nKey=\"example1\" audience=\"world\" />\n\n<Trans\n  i18nKey=\"example2\"\n  connectLink={(el) => <a href=\"https://example.com\">{el}</a>}\n/>\n\n<Trans\n  i18nKey=\"example3\"\n  connectLink={(el) => <a href=\"https://example.com\">{el}</a>}\n  location=\"the button\"\n/>\n\n<Trans\n  i18nKey=\"example4\"\n  connectLink={(el) => <a href=\"https://example.com\">{el}</a>}\n  location=\"the button\"\n  bold={(el) => <strong>{el}</strong>}\n/>\n```\n\nOutput:\n\n```html\nHello world\nPlease <a href=\"https://example.com\">click the button</a> to continue.\nPlease <a href=\"https://example.com\">click the button</a> to continue.\nPlease <a href=\"https://example.com\">click <strong>the button</strong></a> to continue.\n```\n*/\nconst Trans = ({\n  i18nKey,\n  children,\n  ...props\n}: {\n  i18nKey: TranslationKeys;\n  [key: string]: React.ReactNode | ((el: React.ReactNode) => React.ReactNode);\n}) => {\n  const { t } = useI18n();\n\n  // This is needed to avoid unique key error in list which gets rendered from getTransChildren\n  return React.createElement(\n    React.Fragment,\n    {},\n    ...getTransChildren(t(i18nKey), props),\n  );\n};\n\nexport default Trans;\n", "import { flushSync } from \"react-dom\";\nimport { t } from \"../i18n\";\nimport type { DialogProps } from \"./Dialog\";\nimport { Dialog } from \"./Dialog\";\n\nimport \"./ConfirmDialog.scss\";\nimport DialogActionButton from \"./DialogActionButton\";\nimport { isLibraryMenuOpenAtom } from \"./LibraryMenu\";\nimport { useExcalidrawContainer, useExcalidrawSetAppState } from \"./App\";\nimport { useSetAtom } from \"../editor-jotai\";\n\ninterface Props extends Omit<DialogProps, \"onCloseRequest\"> {\n  onConfirm: () => void;\n  onCancel: () => void;\n  confirmText?: string;\n  cancelText?: string;\n}\nconst ConfirmDialog = (props: Props) => {\n  const {\n    onConfirm,\n    onCancel,\n    children,\n    confirmText = t(\"buttons.confirm\"),\n    cancelText = t(\"buttons.cancel\"),\n    className = \"\",\n    ...rest\n  } = props;\n  const setAppState = useExcalidrawSetAppState();\n  const setIsLibraryMenuOpen = useSetAtom(isLibraryMenuOpenAtom);\n  const { container } = useExcalidrawContainer();\n\n  return (\n    <Dialog\n      onCloseRequest={onCancel}\n      size=\"small\"\n      {...rest}\n      className={`confirm-dialog ${className}`}\n    >\n      {children}\n      <div className=\"confirm-dialog-buttons\">\n        <DialogActionButton\n          label={cancelText}\n          onClick={() => {\n            setAppState({ openMenu: null });\n            setIsLibraryMenuOpen(false);\n            // flush any pending updates synchronously,\n            // otherwise it could lead to crash in some chromium versions (131.0.6778.86),\n            // when `.focus` is invoked with container in some intermediate state\n            // (container seems mounted in DOM, but focus still causes a crash)\n            flushSync(() => {\n              onCancel();\n            });\n\n            container?.focus();\n          }}\n        />\n        <DialogActionButton\n          label={confirmText}\n          onClick={() => {\n            setAppState({ openMenu: null });\n            setIsLibraryMenuOpen(false);\n            // flush any pending updates synchronously,\n            // otherwise it leads to crash in some chromium versions (131.0.6778.86),\n            // when `.focus` is invoked with container in some intermediate state\n            // (container seems mounted in DOM, but focus still causes a crash)\n            flushSync(() => {\n              onConfirm();\n            });\n\n            container?.focus();\n          }}\n          actionType=\"danger\"\n        />\n      </div>\n    </Dialog>\n  );\n};\nexport default ConfirmDialog;\n", "import clsx from \"clsx\";\nimport type { ReactNode } from \"react\";\nimport \"./DialogActionButton.scss\";\nimport Spinner from \"./Spinner\";\n\ninterface DialogActionButtonProps {\n  label: string;\n  children?: ReactNode;\n  actionType?: \"primary\" | \"danger\";\n  isLoading?: boolean;\n}\n\nconst DialogActionButton = ({\n  label,\n  onClick,\n  className,\n  children,\n  actionType,\n  type = \"button\",\n  isLoading,\n  ...rest\n}: DialogActionButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>) => {\n  const cs = actionType ? `Dialog__action-button--${actionType}` : \"\";\n\n  return (\n    <button\n      className={clsx(\"Dialog__action-button\", cs, className)}\n      type={type}\n      aria-label={label}\n      onClick={onClick}\n      {...rest}\n    >\n      {children && (\n        <div style={isLoading ? { visibility: \"hidden\" } : {}}>{children}</div>\n      )}\n      <div style={isLoading ? { visibility: \"hidden\" } : {}}>{label}</div>\n      {isLoading && (\n        <div style={{ position: \"absolute\", inset: 0 }}>\n          <Spinner />\n        </div>\n      )}\n    </button>\n  );\n};\n\nexport default DialogActionButton;\n", "import type { ReactNode } from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport OpenColor from \"open-color\";\n\nimport { Dialog } from \"./Dialog\";\nimport { t } from \"../i18n\";\nimport Trans from \"./Trans\";\n\nimport type { LibraryItems, LibraryItem, UIAppState } from \"../types\";\nimport { exportToCanvas, exportToSvg } from \"@excalidraw/utils/export\";\nimport {\n  EDITOR_LS_KEYS,\n  EXPORT_DATA_TYPES,\n  EXPORT_SOURCE,\n  MIME_TYPES,\n  VERSIONS,\n} from \"../constants\";\nimport type { ExportedLibraryData } from \"../data/types\";\nimport { canvasToBlob, resizeImageFile } from \"../data/blob\";\nimport { chunk } from \"../utils\";\nimport DialogActionButton from \"./DialogActionButton\";\nimport { CloseIcon } from \"./icons\";\nimport { ToolButton } from \"./ToolButton\";\nimport { EditorLocalStorage } from \"../data/EditorLocalStorage\";\n\nimport \"./PublishLibrary.scss\";\n\ninterface PublishLibraryDataParams {\n  authorName: string;\n  githubHandle: string;\n  name: string;\n  description: string;\n  twitterHandle: string;\n  website: string;\n}\n\nconst generatePreviewImage = async (libraryItems: LibraryItems) => {\n  const MAX_ITEMS_PER_ROW = 6;\n  const BOX_SIZE = 128;\n  const BOX_PADDING = Math.round(BOX_SIZE / 16);\n  const BORDER_WIDTH = Math.max(Math.round(BOX_SIZE / 64), 2);\n\n  const rows = chunk(libraryItems, MAX_ITEMS_PER_ROW);\n\n  const canvas = document.createElement(\"canvas\");\n\n  canvas.width =\n    rows[0].length * BOX_SIZE +\n    (rows[0].length + 1) * (BOX_PADDING * 2) -\n    BOX_PADDING * 2;\n  canvas.height =\n    rows.length * BOX_SIZE +\n    (rows.length + 1) * (BOX_PADDING * 2) -\n    BOX_PADDING * 2;\n\n  const ctx = canvas.getContext(\"2d\")!;\n\n  ctx.fillStyle = OpenColor.white;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  // draw items\n  // ---------------------------------------------------------------------------\n  for (const [index, item] of libraryItems.entries()) {\n    const itemCanvas = await exportToCanvas({\n      elements: item.elements,\n      files: null,\n      maxWidthOrHeight: BOX_SIZE,\n    });\n\n    const { width, height } = itemCanvas;\n\n    // draw item\n    // -------------------------------------------------------------------------\n    const rowOffset =\n      Math.floor(index / MAX_ITEMS_PER_ROW) * (BOX_SIZE + BOX_PADDING * 2);\n    const colOffset =\n      (index % MAX_ITEMS_PER_ROW) * (BOX_SIZE + BOX_PADDING * 2);\n\n    ctx.drawImage(\n      itemCanvas,\n      colOffset + (BOX_SIZE - width) / 2 + BOX_PADDING,\n      rowOffset + (BOX_SIZE - height) / 2 + BOX_PADDING,\n    );\n\n    // draw item border\n    // -------------------------------------------------------------------------\n    ctx.lineWidth = BORDER_WIDTH;\n    ctx.strokeStyle = OpenColor.gray[4];\n    ctx.strokeRect(\n      colOffset + BOX_PADDING / 2,\n      rowOffset + BOX_PADDING / 2,\n      BOX_SIZE + BOX_PADDING,\n      BOX_SIZE + BOX_PADDING,\n    );\n  }\n\n  return await resizeImageFile(\n    new File([await canvasToBlob(canvas)], \"preview\", { type: MIME_TYPES.png }),\n    {\n      outputType: MIME_TYPES.jpg,\n      maxWidthOrHeight: 5000,\n    },\n  );\n};\n\nconst SingleLibraryItem = ({\n  libItem,\n  appState,\n  index,\n  onChange,\n  onRemove,\n}: {\n  libItem: LibraryItem;\n  appState: UIAppState;\n  index: number;\n  onChange: (val: string, index: number) => void;\n  onRemove: (id: string) => void;\n}) => {\n  const svgRef = useRef<HTMLDivElement | null>(null);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    const node = svgRef.current;\n    if (!node) {\n      return;\n    }\n    (async () => {\n      const svg = await exportToSvg({\n        elements: libItem.elements,\n        appState: {\n          ...appState,\n          viewBackgroundColor: OpenColor.white,\n          exportBackground: true,\n        },\n        files: null,\n        skipInliningFonts: true,\n      });\n      node.innerHTML = svg.outerHTML;\n    })();\n  }, [libItem.elements, appState]);\n\n  return (\n    <div className=\"single-library-item\">\n      {libItem.status === \"published\" && (\n        <span className=\"single-library-item-status\">\n          {t(\"labels.statusPublished\")}\n        </span>\n      )}\n      <div ref={svgRef} className=\"single-library-item__svg\" />\n      <ToolButton\n        aria-label={t(\"buttons.remove\")}\n        type=\"button\"\n        icon={CloseIcon}\n        className=\"single-library-item--remove\"\n        onClick={onRemove.bind(null, libItem.id)}\n        title={t(\"buttons.remove\")}\n      />\n      <div\n        style={{\n          display: \"flex\",\n          margin: \"0.8rem 0\",\n          width: \"100%\",\n          fontSize: \"14px\",\n          fontWeight: 500,\n          flexDirection: \"column\",\n        }}\n      >\n        <label\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexDirection: \"column\",\n          }}\n        >\n          <div style={{ padding: \"0.5em 0\" }}>\n            <span style={{ fontWeight: 500, color: OpenColor.gray[6] }}>\n              {t(\"publishDialog.itemName\")}\n            </span>\n            <span aria-hidden=\"true\" className=\"required\">\n              *\n            </span>\n          </div>\n          <input\n            type=\"text\"\n            ref={inputRef}\n            style={{ width: \"80%\", padding: \"0.2rem\" }}\n            defaultValue={libItem.name}\n            placeholder=\"Item name\"\n            onChange={(event) => {\n              onChange(event.target.value, index);\n            }}\n          />\n        </label>\n        <span className=\"error\">{libItem.error}</span>\n      </div>\n    </div>\n  );\n};\n\nconst PublishLibrary = ({\n  onClose,\n  libraryItems,\n  appState,\n  onSuccess,\n  onError,\n  updateItemsInStorage,\n  onRemove,\n}: {\n  onClose: () => void;\n  libraryItems: LibraryItems;\n  appState: UIAppState;\n  onSuccess: (data: {\n    url: string;\n    authorName: string;\n    items: LibraryItems;\n  }) => void;\n\n  onError: (error: Error) => void;\n  updateItemsInStorage: (items: LibraryItems) => void;\n  onRemove: (id: string) => void;\n}) => {\n  const [libraryData, setLibraryData] = useState<PublishLibraryDataParams>({\n    authorName: \"\",\n    githubHandle: \"\",\n    name: \"\",\n    description: \"\",\n    twitterHandle: \"\",\n    website: \"\",\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    const data = EditorLocalStorage.get<PublishLibraryDataParams>(\n      EDITOR_LS_KEYS.PUBLISH_LIBRARY,\n    );\n    if (data) {\n      setLibraryData(data);\n    }\n  }, []);\n\n  const [clonedLibItems, setClonedLibItems] = useState<LibraryItems>(\n    libraryItems.slice(),\n  );\n\n  useEffect(() => {\n    setClonedLibItems(libraryItems.slice());\n  }, [libraryItems]);\n\n  const onInputChange = (event: any) => {\n    setLibraryData({\n      ...libraryData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    const erroredLibItems: LibraryItem[] = [];\n    let isError = false;\n    clonedLibItems.forEach((libItem) => {\n      let error = \"\";\n      if (!libItem.name) {\n        error = t(\"publishDialog.errors.required\");\n        isError = true;\n      }\n      erroredLibItems.push({ ...libItem, error });\n    });\n\n    if (isError) {\n      setClonedLibItems(erroredLibItems);\n      setIsSubmitting(false);\n      return;\n    }\n\n    const previewImage = await generatePreviewImage(clonedLibItems);\n\n    const libContent: ExportedLibraryData = {\n      type: EXPORT_DATA_TYPES.excalidrawLibrary,\n      version: VERSIONS.excalidrawLibrary,\n      source: EXPORT_SOURCE,\n      libraryItems: clonedLibItems,\n    };\n    const content = JSON.stringify(libContent, null, 2);\n    const lib = new Blob([content], { type: \"application/json\" });\n\n    const formData = new FormData();\n    formData.append(\"excalidrawLib\", lib);\n    formData.append(\"previewImage\", previewImage);\n    formData.append(\"previewImageType\", previewImage.type);\n    formData.append(\"title\", libraryData.name);\n    formData.append(\"authorName\", libraryData.authorName);\n    formData.append(\"githubHandle\", libraryData.githubHandle);\n    formData.append(\"name\", libraryData.name);\n    formData.append(\"description\", libraryData.description);\n    formData.append(\"twitterHandle\", libraryData.twitterHandle);\n    formData.append(\"website\", libraryData.website);\n\n    fetch(`${import.meta.env.VITE_APP_LIBRARY_BACKEND}/submit`, {\n      method: \"post\",\n      body: formData,\n    })\n      .then(\n        (response) => {\n          if (response.ok) {\n            return response.json().then(({ url }) => {\n              // flush data from local storage\n              EditorLocalStorage.delete(EDITOR_LS_KEYS.PUBLISH_LIBRARY);\n              onSuccess({\n                url,\n                authorName: libraryData.authorName,\n                items: clonedLibItems,\n              });\n            });\n          }\n          return response\n            .json()\n            .catch(() => {\n              throw new Error(response.statusText || \"something went wrong\");\n            })\n            .then((error) => {\n              throw new Error(\n                error.message || response.statusText || \"something went wrong\",\n              );\n            });\n        },\n        (err) => {\n          console.error(err);\n          onError(err);\n          setIsSubmitting(false);\n        },\n      )\n      .catch((err) => {\n        console.error(err);\n        onError(err);\n        setIsSubmitting(false);\n      });\n  };\n\n  const renderLibraryItems = () => {\n    const items: ReactNode[] = [];\n    clonedLibItems.forEach((libItem, index) => {\n      items.push(\n        <div className=\"single-library-item-wrapper\" key={index}>\n          <SingleLibraryItem\n            libItem={libItem}\n            appState={appState}\n            index={index}\n            onChange={(val, index) => {\n              const items = clonedLibItems.slice();\n              items[index].name = val;\n              setClonedLibItems(items);\n            }}\n            onRemove={onRemove}\n          />\n        </div>,\n      );\n    });\n    return <div className=\"selected-library-items\">{items}</div>;\n  };\n\n  const onDialogClose = useCallback(() => {\n    updateItemsInStorage(clonedLibItems);\n    EditorLocalStorage.set(EDITOR_LS_KEYS.PUBLISH_LIBRARY, libraryData);\n    onClose();\n  }, [clonedLibItems, onClose, updateItemsInStorage, libraryData]);\n\n  const shouldRenderForm = !!libraryItems.length;\n\n  const containsPublishedItems = libraryItems.some(\n    (item) => item.status === \"published\",\n  );\n\n  return (\n    <Dialog\n      onCloseRequest={onDialogClose}\n      title={t(\"publishDialog.title\")}\n      className=\"publish-library\"\n    >\n      {shouldRenderForm ? (\n        <form onSubmit={onSubmit}>\n          <div className=\"publish-library-note\">\n            <Trans\n              i18nKey=\"publishDialog.noteDescription\"\n              link={(el) => (\n                <a\n                  href=\"https://libraries.excalidraw.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {el}\n                </a>\n              )}\n            />\n          </div>\n          <span className=\"publish-library-note\">\n            <Trans\n              i18nKey=\"publishDialog.noteGuidelines\"\n              link={(el) => (\n                <a\n                  href=\"https://github.com/excalidraw/excalidraw-libraries#guidelines\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {el}\n                </a>\n              )}\n            />\n          </span>\n\n          <div className=\"publish-library-note\">\n            {t(\"publishDialog.noteItems\")}\n          </div>\n          {containsPublishedItems && (\n            <span className=\"publish-library-note publish-library-warning\">\n              {t(\"publishDialog.republishWarning\")}\n            </span>\n          )}\n          {renderLibraryItems()}\n          <div className=\"publish-library__fields\">\n            <label>\n              <div>\n                <span>{t(\"publishDialog.libraryName\")}</span>\n                <span aria-hidden=\"true\" className=\"required\">\n                  *\n                </span>\n              </div>\n              <input\n                type=\"text\"\n                name=\"name\"\n                required\n                value={libraryData.name}\n                onChange={onInputChange}\n                placeholder={t(\"publishDialog.placeholder.libraryName\")}\n              />\n            </label>\n            <label style={{ alignItems: \"flex-start\" }}>\n              <div>\n                <span>{t(\"publishDialog.libraryDesc\")}</span>\n                <span aria-hidden=\"true\" className=\"required\">\n                  *\n                </span>\n              </div>\n              <textarea\n                name=\"description\"\n                rows={4}\n                required\n                value={libraryData.description}\n                onChange={onInputChange}\n                placeholder={t(\"publishDialog.placeholder.libraryDesc\")}\n              />\n            </label>\n            <label>\n              <div>\n                <span>{t(\"publishDialog.authorName\")}</span>\n                <span aria-hidden=\"true\" className=\"required\">\n                  *\n                </span>\n              </div>\n              <input\n                type=\"text\"\n                name=\"authorName\"\n                required\n                value={libraryData.authorName}\n                onChange={onInputChange}\n                placeholder={t(\"publishDialog.placeholder.authorName\")}\n              />\n            </label>\n            <label>\n              <span>{t(\"publishDialog.githubUsername\")}</span>\n              <input\n                type=\"text\"\n                name=\"githubHandle\"\n                value={libraryData.githubHandle}\n                onChange={onInputChange}\n                placeholder={t(\"publishDialog.placeholder.githubHandle\")}\n              />\n            </label>\n            <label>\n              <span>{t(\"publishDialog.twitterUsername\")}</span>\n              <input\n                type=\"text\"\n                name=\"twitterHandle\"\n                value={libraryData.twitterHandle}\n                onChange={onInputChange}\n                placeholder={t(\"publishDialog.placeholder.twitterHandle\")}\n              />\n            </label>\n            <label>\n              <span>{t(\"publishDialog.website\")}</span>\n              <input\n                type=\"text\"\n                name=\"website\"\n                pattern=\"https?://.+\"\n                title={t(\"publishDialog.errors.website\")}\n                value={libraryData.website}\n                onChange={onInputChange}\n                placeholder={t(\"publishDialog.placeholder.website\")}\n              />\n            </label>\n            <span className=\"publish-library-note\">\n              <Trans\n                i18nKey=\"publishDialog.noteLicense\"\n                link={(el) => (\n                  <a\n                    href=\"https://github.com/excalidraw/excalidraw-libraries/blob/main/LICENSE\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {el}\n                  </a>\n                )}\n              />\n            </span>\n          </div>\n          <div className=\"publish-library__buttons\">\n            <DialogActionButton\n              label={t(\"buttons.cancel\")}\n              onClick={onDialogClose}\n              data-testid=\"cancel-clear-canvas-button\"\n            />\n            <DialogActionButton\n              type=\"submit\"\n              label={t(\"buttons.submit\")}\n              actionType=\"primary\"\n              isLoading={isSubmitting}\n            />\n          </div>\n        </form>\n      ) : (\n        <p style={{ padding: \"1em\", textAlign: \"center\", fontWeight: 500 }}>\n          {t(\"publishDialog.atleastOneLibItem\")}\n        </p>\n      )}\n    </Dialog>\n  );\n};\n\nexport default PublishLibrary;\n", "import type { EDITOR_LS_KEYS } from \"../constants\";\nimport type { JSONValue } from \"../types\";\n\nexport class EditorLocalStorage {\n  static has(key: typeof EDITOR_LS_KEYS[keyof typeof EDITOR_LS_KEYS]) {\n    try {\n      return !!window.localStorage.getItem(key);\n    } catch (error: any) {\n      console.warn(`localStorage.getItem error: ${error.message}`);\n      return false;\n    }\n  }\n\n  static get<T extends JSONValue>(\n    key: typeof EDITOR_LS_KEYS[keyof typeof EDITOR_LS_KEYS],\n  ) {\n    try {\n      const value = window.localStorage.getItem(key);\n      if (value) {\n        return JSON.parse(value) as T;\n      }\n      return null;\n    } catch (error: any) {\n      console.warn(`localStorage.getItem error: ${error.message}`);\n      return null;\n    }\n  }\n\n  static set = (\n    key: typeof EDITOR_LS_KEYS[keyof typeof EDITOR_LS_KEYS],\n    value: JSONValue,\n  ) => {\n    try {\n      window.localStorage.setItem(key, JSON.stringify(value));\n      return true;\n    } catch (error: any) {\n      console.warn(`localStorage.setItem error: ${error.message}`);\n      return false;\n    }\n  };\n\n  static delete = (\n    name: typeof EDITOR_LS_KEYS[keyof typeof EDITOR_LS_KEYS],\n  ) => {\n    try {\n      window.localStorage.removeItem(name);\n    } catch (error: any) {\n      console.warn(`localStorage.removeItem error: ${error.message}`);\n    }\n  };\n}\n", "import clsx from \"clsx\";\nimport { useDevice } from \"../App\";\n\nconst MenuTrigger = ({\n  className = \"\",\n  children,\n  onToggle,\n  title,\n  ...rest\n}: {\n  className?: string;\n  children: React.ReactNode;\n  onToggle: () => void;\n  title?: string;\n} & Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, \"onSelect\">) => {\n  const device = useDevice();\n  const classNames = clsx(\n    `dropdown-menu-button ${className}`,\n    \"zen-mode-transition\",\n    {\n      \"dropdown-menu-button--mobile\": device.editor.isMobile,\n    },\n  ).trim();\n  return (\n    <button\n      data-prevent-outside-click\n      className={classNames}\n      onClick={onToggle}\n      type=\"button\"\n      data-testid=\"dropdown-menu-button\"\n      title={title}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default MenuTrigger;\nMenuTrigger.displayName = \"DropdownMenuTrigger\";\n", "import React from \"react\";\n\nconst MenuSeparator = () => (\n  <div\n    style={{\n      height: \"1px\",\n      backgroundColor: \"var(--default-border-color)\",\n      margin: \".5rem 0\",\n    }}\n  />\n);\n\nexport default MenuSeparator;\nMenuSeparator.displayName = \"DropdownMenuSeparator\";\n", "import { Island } from \"../Island\";\nimport { useDevice } from \"../App\";\nimport clsx from \"clsx\";\nimport Stack from \"../Stack\";\nimport React, { useEffect, useRef } from \"react\";\nimport { DropdownMenuContentPropsContext } from \"./common\";\nimport { useOutsideClick } from \"../../hooks/useOutsideClick\";\nimport { KEYS } from \"../../keys\";\nimport { EVENT } from \"../../constants\";\nimport { useStable } from \"../../hooks/useStable\";\n\nconst MenuContent = ({\n  children,\n  onClickOutside,\n  className = \"\",\n  onSelect,\n  style,\n}: {\n  children?: React.ReactNode;\n  onClickOutside?: () => void;\n  className?: string;\n  /**\n   * Called when any menu item is selected (clicked on).\n   */\n  onSelect?: (event: Event) => void;\n  style?: React.CSSProperties;\n}) => {\n  const device = useDevice();\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const callbacksRef = useStable({ onClickOutside });\n\n  useOutsideClick(menuRef, () => {\n    callbacksRef.onClickOutside?.();\n  });\n\n  useEffect(() => {\n    const onKeyDown = (event: KeyboardEvent) => {\n      if (event.key === KEYS.ESCAPE) {\n        event.stopImmediatePropagation();\n        callbacksRef.onClickOutside?.();\n      }\n    };\n\n    const option = {\n      // so that we can stop propagation of the event before it reaches\n      // event handlers that were bound before this one\n      capture: true,\n    };\n\n    document.addEventListener(EVENT.KEYDOWN, onKeyDown, option);\n    return () => {\n      document.removeEventListener(EVENT.KEYDOWN, onKeyDown, option);\n    };\n  }, [callbacksRef]);\n\n  const classNames = clsx(`dropdown-menu ${className}`, {\n    \"dropdown-menu--mobile\": device.editor.isMobile,\n  }).trim();\n\n  return (\n    <DropdownMenuContentPropsContext.Provider value={{ onSelect }}>\n      <div\n        ref={menuRef}\n        className={classNames}\n        style={style}\n        data-testid=\"dropdown-menu\"\n      >\n        {/* the zIndex ensures this menu has higher stacking order,\n    see https://github.com/excalidraw/excalidraw/pull/1445 */}\n        {device.editor.isMobile ? (\n          <Stack.Col className=\"dropdown-menu-container\">{children}</Stack.Col>\n        ) : (\n          <Island\n            className=\"dropdown-menu-container\"\n            padding={2}\n            style={{ zIndex: 2 }}\n          >\n            {children}\n          </Island>\n        )}\n      </div>\n    </DropdownMenuContentPropsContext.Provider>\n  );\n};\nMenuContent.displayName = \"DropdownMenuContent\";\n\nexport default MenuContent;\n", "import MenuItemContent from \"./DropdownMenuItemContent\";\nimport type { JSX } from \"react\";\nimport React from \"react\";\nimport {\n  getDropdownMenuItemClassName,\n  useHandleDropdownMenuItemClick,\n} from \"./common\";\n\nconst DropdownMenuItemLink = ({\n  icon,\n  shortcut,\n  href,\n  children,\n  onSelect,\n  className = \"\",\n  selected,\n  rel = \"noreferrer\",\n  ...rest\n}: {\n  href: string;\n  icon?: JSX.Element;\n  children: React.ReactNode;\n  shortcut?: string;\n  className?: string;\n  selected?: boolean;\n  onSelect?: (event: Event) => void;\n  rel?: string;\n} & React.AnchorHTMLAttributes<HTMLAnchorElement>) => {\n  const handleClick = useHandleDropdownMenuItemClick(rest.onClick, onSelect);\n\n  return (\n    <a\n      {...rest}\n      href={href}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className={getDropdownMenuItemClassName(className, selected)}\n      title={rest.title ?? rest[\"aria-label\"]}\n      onClick={handleClick}\n    >\n      <MenuItemContent icon={icon} shortcut={shortcut}>\n        {children}\n      </MenuItemContent>\n    </a>\n  );\n};\n\nexport default DropdownMenuItemLink;\nDropdownMenuItemLink.displayName = \"DropdownMenuItemLink\";\n", "import React from \"react\";\n\nconst DropdownMenuItemCustom = ({\n  children,\n  className = \"\",\n  selected,\n  ...rest\n}: {\n  children: React.ReactNode;\n  className?: string;\n  selected?: boolean;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      {...rest}\n      className={`dropdown-menu-item-base dropdown-menu-item-custom ${className} ${\n        selected ? `dropdown-menu-item--selected` : ``\n      }`.trim()}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default DropdownMenuItemCustom;\n", "import React from \"react\";\n\nexport const getMenuTriggerComponent = (children: React.ReactNode) => {\n  const comp = React.Children.toArray(children).find(\n    (child) =>\n      React.isValidElement(child) &&\n      typeof child.type !== \"string\" &&\n      //@ts-ignore\n      child?.type.displayName &&\n      //@ts-ignore\n      child.type.displayName === \"DropdownMenuTrigger\",\n  );\n  if (!comp) {\n    return null;\n  }\n  //@ts-ignore\n  return comp;\n};\n\nexport const getMenuContentComponent = (children: React.ReactNode) => {\n  const comp = React.Children.toArray(children).find(\n    (child) =>\n      React.isValidElement(child) &&\n      typeof child.type !== \"string\" &&\n      //@ts-ignore\n      child?.type.displayName &&\n      //@ts-ignore\n      child.type.displayName === \"DropdownMenuContent\",\n  );\n  if (!comp) {\n    return null;\n  }\n  //@ts-ignore\n  return comp;\n};\n", "import React from \"react\";\nimport DropdownMenuTrigger from \"./DropdownMenuTrigger\";\nimport DropdownMenuItem from \"./DropdownMenuItem\";\nimport MenuSeparator from \"./DropdownMenuSeparator\";\nimport DropdownMenuGroup from \"./DropdownMenuGroup\";\nimport DropdownMenuContent from \"./DropdownMenuContent\";\nimport DropdownMenuItemLink from \"./DropdownMenuItemLink\";\nimport DropdownMenuItemCustom from \"./DropdownMenuItemCustom\";\nimport {\n  getMenuContentComponent,\n  getMenuTriggerComponent,\n} from \"./dropdownMenuUtils\";\n\nimport \"./DropdownMenu.scss\";\n\nconst DropdownMenu = ({\n  children,\n  open,\n}: {\n  children?: React.ReactNode;\n  open: boolean;\n}) => {\n  const MenuTriggerComp = getMenuTriggerComponent(children);\n  const MenuContentComp = getMenuContentComponent(children);\n  return (\n    <>\n      {MenuTriggerComp}\n      {open && MenuContentComp}\n    </>\n  );\n};\n\nDropdownMenu.Trigger = DropdownMenuTrigger;\nDropdownMenu.Content = DropdownMenuContent;\nDropdownMenu.Item = DropdownMenuItem;\nDropdownMenu.ItemLink = DropdownMenuItemLink;\nDropdownMenu.ItemCustom = DropdownMenuItemCustom;\nDropdownMenu.Group = DropdownMenuGroup;\nDropdownMenu.Separator = MenuSeparator;\n\nexport default DropdownMenu;\n\nDropdownMenu.displayName = \"DropdownMenu\";\n", "import type { ReactNode } from \"react\";\nimport React, { memo, useEffect, useState } from \"react\";\nimport { EmptyLibraryUnit, LibraryUnit } from \"./LibraryUnit\";\nimport type { LibraryItem } from \"../types\";\nimport type { ExcalidrawElement, NonDeleted } from \"../element/types\";\nimport type { SvgCache } from \"../hooks/useLibraryItemSvg\";\nimport { useTransition } from \"../hooks/useTransition\";\n\ntype LibraryOrPendingItem = (\n  | LibraryItem\n  | /* pending library item */ {\n      id: null;\n      elements: readonly NonDeleted<ExcalidrawElement>[];\n    }\n)[];\n\ninterface Props {\n  items: LibraryOrPendingItem;\n  onClick: (id: LibraryItem[\"id\"] | null) => void;\n  onItemSelectToggle: (id: LibraryItem[\"id\"], event: React.MouseEvent) => void;\n  onItemDrag: (id: LibraryItem[\"id\"], event: React.DragEvent) => void;\n  isItemSelected: (id: LibraryItem[\"id\"] | null) => boolean;\n  svgCache: SvgCache;\n  itemsRenderedPerBatch: number;\n}\n\nexport const LibraryMenuSectionGrid = ({\n  children,\n}: {\n  children: ReactNode;\n}) => {\n  return <div className=\"library-menu-items-container__grid\">{children}</div>;\n};\n\nexport const LibraryMenuSection = memo(\n  ({\n    items,\n    onItemSelectToggle,\n    onItemDrag,\n    isItemSelected,\n    onClick,\n    svgCache,\n    itemsRenderedPerBatch,\n  }: Props) => {\n    const [, startTransition] = useTransition();\n    const [index, setIndex] = useState(0);\n\n    useEffect(() => {\n      if (index < items.length) {\n        startTransition(() => {\n          setIndex(index + itemsRenderedPerBatch);\n        });\n      }\n    }, [index, items.length, startTransition, itemsRenderedPerBatch]);\n\n    return (\n      <>\n        {items.map((item, i) => {\n          return i < index ? (\n            <LibraryUnit\n              elements={item?.elements}\n              isPending={!item?.id && !!item?.elements}\n              onClick={onClick}\n              svgCache={svgCache}\n              id={item?.id}\n              selected={isItemSelected(item.id)}\n              onToggle={onItemSelectToggle}\n              onDrag={onItemDrag}\n              key={item?.id ?? i}\n            />\n          ) : (\n            <EmptyLibraryUnit key={i} />\n          );\n        })}\n      </>\n    );\n  },\n);\n", "import clsx from \"clsx\";\nimport { memo, useEffect, useRef, useState } from \"react\";\nimport { useDevice } from \"./App\";\nimport type { LibraryItem } from \"../types\";\nimport \"./LibraryUnit.scss\";\nimport { CheckboxItem } from \"./CheckboxItem\";\nimport { PlusIcon } from \"./icons\";\nimport type { SvgCache } from \"../hooks/useLibraryItemSvg\";\nimport { useLibraryItemSvg } from \"../hooks/useLibraryItemSvg\";\n\nexport const LibraryUnit = memo(\n  ({\n    id,\n    elements,\n    isPending,\n    onClick,\n    selected,\n    onToggle,\n    onDrag,\n    svgCache,\n  }: {\n    id: LibraryItem[\"id\"] | /** for pending item */ null;\n    elements?: LibraryItem[\"elements\"];\n    isPending?: boolean;\n    onClick: (id: LibraryItem[\"id\"] | null) => void;\n    selected: boolean;\n    onToggle: (id: string, event: React.MouseEvent) => void;\n    onDrag: (id: string, event: React.DragEvent) => void;\n    svgCache: SvgCache;\n  }) => {\n    const ref = useRef<HTMLDivElement | null>(null);\n    const svg = useLibraryItemSvg(id, elements, svgCache);\n\n    useEffect(() => {\n      const node = ref.current;\n\n      if (!node) {\n        return;\n      }\n\n      if (svg) {\n        node.innerHTML = svg.outerHTML;\n      }\n\n      return () => {\n        node.innerHTML = \"\";\n      };\n    }, [svg]);\n\n    const [isHovered, setIsHovered] = useState(false);\n    const isMobile = useDevice().editor.isMobile;\n    const adder = isPending && (\n      <div className=\"library-unit__adder\">{PlusIcon}</div>\n    );\n\n    return (\n      <div\n        className={clsx(\"library-unit\", {\n          \"library-unit__active\": elements,\n          \"library-unit--hover\": elements && isHovered,\n          \"library-unit--selected\": selected,\n          \"library-unit--skeleton\": !svg,\n        })}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        <div\n          className={clsx(\"library-unit__dragger\", {\n            \"library-unit__pulse\": !!isPending,\n          })}\n          ref={ref}\n          draggable={!!elements}\n          onClick={\n            !!elements || !!isPending\n              ? (event) => {\n                  if (id && event.shiftKey) {\n                    onToggle(id, event);\n                  } else {\n                    onClick(id);\n                  }\n                }\n              : undefined\n          }\n          onDragStart={(event) => {\n            if (!id) {\n              event.preventDefault();\n              return;\n            }\n            setIsHovered(false);\n            onDrag(id, event);\n          }}\n        />\n        {adder}\n        {id && elements && (isHovered || isMobile || selected) && (\n          <CheckboxItem\n            checked={selected}\n            onChange={(checked, event) => onToggle(id, event)}\n            className=\"library-unit__checkbox\"\n          />\n        )}\n      </div>\n    );\n  },\n);\n\nexport const EmptyLibraryUnit = () => (\n  <div className=\"library-unit library-unit--skeleton\" />\n);\n", "import React, { useCallback } from \"react\";\n\n/** noop polyfill for v17. Subset of API available */\nfunction useTransitionPolyfill() {\n  const startTransition = useCallback((callback: () => void) => callback(), []);\n  return [false, startTransition] as const;\n}\n\nexport const useTransition = React.useTransition || useTransitionPolyfill;\n", "import { useEffect } from \"react\";\nimport { atom, useAtom } from \"../editor-jotai\";\nimport throttle from \"lodash.throttle\";\n\nconst scrollPositionAtom = atom<number>(0);\n\nexport const useScrollPosition = <T extends HTMLElement>(\n  elementRef: React.RefObject<T | null>,\n) => {\n  const [scrollPosition, setScrollPosition] = useAtom(scrollPositionAtom);\n\n  useEffect(() => {\n    const { current: element } = elementRef;\n    if (!element) {\n      return;\n    }\n\n    const handleScroll = throttle(() => {\n      const { scrollTop } = element;\n      setScrollPosition(scrollTop);\n    }, 200);\n\n    element.addEventListener(\"scroll\", handleScroll);\n\n    return () => {\n      handleScroll.cancel();\n      element.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [elementRef, setScrollPosition]);\n\n  return scrollPosition;\n};\n", "import type { KeyboardEvent } from \"react\";\nimport {\n  forwardRef,\n  useRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useState,\n} from \"react\";\nimport clsx from \"clsx\";\n\nimport \"./TextField.scss\";\nimport { Button } from \"./Button\";\nimport { eyeIcon, eyeClosedIcon } from \"./icons\";\n\ntype TextFieldProps = {\n  onChange?: (value: string) => void;\n  onClick?: () => void;\n  onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void;\n\n  readonly?: boolean;\n  fullWidth?: boolean;\n  selectOnRender?: boolean;\n\n  icon?: React.ReactNode;\n  label?: string;\n  className?: string;\n  placeholder?: string;\n  isRedacted?: boolean;\n} & ({ value: string } | { defaultValue: string });\n\nexport const TextField = forwardRef<HTMLInputElement, TextFieldProps>(\n  (\n    {\n      onChange,\n      label,\n      fullWidth,\n      placeholder,\n      readonly,\n      selectOnRender,\n      onKeyDown,\n      isRedacted = false,\n      icon,\n      className,\n      ...rest\n    },\n    ref,\n  ) => {\n    const innerRef = useRef<HTMLInputElement | null>(null);\n\n    useImperativeHandle(ref, () => innerRef.current!);\n\n    useLayoutEffect(() => {\n      if (selectOnRender) {\n        // focusing first is needed because vitest/jsdom\n        innerRef.current?.focus();\n        innerRef.current?.select();\n      }\n    }, [selectOnRender]);\n\n    const [isTemporarilyUnredacted, setIsTemporarilyUnredacted] =\n      useState<boolean>(false);\n\n    return (\n      <div\n        className={clsx(\"ExcTextField\", className, {\n          \"ExcTextField--fullWidth\": fullWidth,\n          \"ExcTextField--hasIcon\": !!icon,\n        })}\n        onClick={() => {\n          innerRef.current?.focus();\n        }}\n      >\n        {icon}\n        {label && <div className=\"ExcTextField__label\">{label}</div>}\n        <div\n          className={clsx(\"ExcTextField__input\", {\n            \"ExcTextField__input--readonly\": readonly,\n          })}\n        >\n          <input\n            className={clsx({\n              \"is-redacted\":\n                \"value\" in rest &&\n                rest.value &&\n                isRedacted &&\n                !isTemporarilyUnredacted,\n            })}\n            readOnly={readonly}\n            value={\"value\" in rest ? rest.value : undefined}\n            defaultValue={\n              \"defaultValue\" in rest ? rest.defaultValue : undefined\n            }\n            placeholder={placeholder}\n            ref={innerRef}\n            onChange={(event) => onChange?.(event.target.value)}\n            onKeyDown={onKeyDown}\n          />\n          {isRedacted && (\n            <Button\n              onSelect={() =>\n                setIsTemporarilyUnredacted(!isTemporarilyUnredacted)\n              }\n              style={{ border: 0, userSelect: \"none\" }}\n            >\n              {isTemporarilyUnredacted ? eyeClosedIcon : eyeIcon}\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n", "import clsx from \"clsx\";\nimport React from \"react\";\nimport { composeEventHandlers } from \"../utils\";\nimport \"./Button.scss\";\n\ninterface ButtonProps\n  extends React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > {\n  type?: \"button\" | \"submit\" | \"reset\";\n  onSelect: () => any;\n  /** whether button is in active state */\n  selected?: boolean;\n  children: React.ReactNode;\n  className?: string;\n}\n\n/**\n * A generic button component that follows Excalidraw's design system.\n * Style can be customised using `className` or `style` prop.\n * Accepts all props that a regular `button` element accepts.\n */\nexport const Button = ({\n  type = \"button\",\n  onSelect,\n  selected,\n  children,\n  className = \"\",\n  ...rest\n}: ButtonProps) => {\n  return (\n    <button\n      onClick={composeEventHandlers(rest.onClick, (event) => {\n        onSelect();\n      })}\n      type={type}\n      className={clsx(\"excalidraw-button\", className, { selected })}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n", "import { isDarwin } from \"../constants\";\nimport { t } from \"../i18n\";\nimport type { SubtypeOf } from \"../utility-types\";\nimport { getShortcutKey } from \"../utils\";\nimport type { ActionName } from \"./types\";\n\nexport type ShortcutName =\n  | SubtypeOf<\n      ActionName,\n      | \"toggleTheme\"\n      | \"loadScene\"\n      | \"clearCanvas\"\n      | \"cut\"\n      | \"copy\"\n      | \"paste\"\n      | \"copyStyles\"\n      | \"pasteStyles\"\n      | \"selectAll\"\n      | \"deleteSelectedElements\"\n      | \"duplicateSelection\"\n      | \"sendBackward\"\n      | \"bringForward\"\n      | \"sendToBack\"\n      | \"bringToFront\"\n      | \"copyAsPng\"\n      | \"group\"\n      | \"ungroup\"\n      | \"gridMode\"\n      | \"zenMode\"\n      | \"objectsSnapMode\"\n      | \"stats\"\n      | \"addToLibrary\"\n      | \"viewMode\"\n      | \"flipHorizontal\"\n      | \"flipVertical\"\n      | \"hyperlink\"\n      | \"toggleElementLock\"\n      | \"resetZoom\"\n      | \"zoomOut\"\n      | \"zoomIn\"\n      | \"zoomToFit\"\n      | \"zoomToFitSelectionInViewport\"\n      | \"zoomToFitSelection\"\n      | \"toggleEraserTool\"\n      | \"toggleHandTool\"\n      | \"setFrameAsActiveTool\"\n      | \"saveFileToDisk\"\n      | \"saveToActiveFile\"\n      | \"toggleShortcuts\"\n      | \"wrapSelectionInFrame\"\n    >\n  | \"saveScene\"\n  | \"imageExport\"\n  | \"commandPalette\"\n  | \"searchMenu\";\n\nconst shortcutMap: Record<ShortcutName, string[]> = {\n  toggleTheme: [getShortcutKey(\"Shift+Alt+D\")],\n  saveScene: [getShortcutKey(\"CtrlOrCmd+S\")],\n  loadScene: [getShortcutKey(\"CtrlOrCmd+O\")],\n  clearCanvas: [getShortcutKey(\"CtrlOrCmd+Delete\")],\n  imageExport: [getShortcutKey(\"CtrlOrCmd+Shift+E\")],\n  commandPalette: [\n    getShortcutKey(\"CtrlOrCmd+/\"),\n    getShortcutKey(\"CtrlOrCmd+Shift+P\"),\n  ],\n  cut: [getShortcutKey(\"CtrlOrCmd+X\")],\n  copy: [getShortcutKey(\"CtrlOrCmd+C\")],\n  paste: [getShortcutKey(\"CtrlOrCmd+V\")],\n  copyStyles: [getShortcutKey(\"CtrlOrCmd+Alt+C\")],\n  pasteStyles: [getShortcutKey(\"CtrlOrCmd+Alt+V\")],\n  selectAll: [getShortcutKey(\"CtrlOrCmd+A\")],\n  deleteSelectedElements: [getShortcutKey(\"Delete\")],\n  duplicateSelection: [\n    getShortcutKey(\"CtrlOrCmd+D\"),\n    getShortcutKey(`Alt+${t(\"helpDialog.drag\")}`),\n  ],\n  sendBackward: [getShortcutKey(\"CtrlOrCmd+[\")],\n  bringForward: [getShortcutKey(\"CtrlOrCmd+]\")],\n  sendToBack: [\n    isDarwin\n      ? getShortcutKey(\"CtrlOrCmd+Alt+[\")\n      : getShortcutKey(\"CtrlOrCmd+Shift+[\"),\n  ],\n  bringToFront: [\n    isDarwin\n      ? getShortcutKey(\"CtrlOrCmd+Alt+]\")\n      : getShortcutKey(\"CtrlOrCmd+Shift+]\"),\n  ],\n  copyAsPng: [getShortcutKey(\"Shift+Alt+C\")],\n  group: [getShortcutKey(\"CtrlOrCmd+G\")],\n  ungroup: [getShortcutKey(\"CtrlOrCmd+Shift+G\")],\n  gridMode: [getShortcutKey(\"CtrlOrCmd+'\")],\n  zenMode: [getShortcutKey(\"Alt+Z\")],\n  objectsSnapMode: [getShortcutKey(\"Alt+S\")],\n  stats: [getShortcutKey(\"Alt+/\")],\n  addToLibrary: [],\n  flipHorizontal: [getShortcutKey(\"Shift+H\")],\n  flipVertical: [getShortcutKey(\"Shift+V\")],\n  viewMode: [getShortcutKey(\"Alt+R\")],\n  hyperlink: [getShortcutKey(\"CtrlOrCmd+K\")],\n  toggleElementLock: [getShortcutKey(\"CtrlOrCmd+Shift+L\")],\n  resetZoom: [getShortcutKey(\"CtrlOrCmd+0\")],\n  zoomOut: [getShortcutKey(\"CtrlOrCmd+-\")],\n  zoomIn: [getShortcutKey(\"CtrlOrCmd++\")],\n  zoomToFitSelection: [getShortcutKey(\"Shift+3\")],\n  zoomToFit: [getShortcutKey(\"Shift+1\")],\n  zoomToFitSelectionInViewport: [getShortcutKey(\"Shift+2\")],\n  toggleEraserTool: [getShortcutKey(\"E\")],\n  toggleHandTool: [getShortcutKey(\"H\")],\n  setFrameAsActiveTool: [getShortcutKey(\"F\")],\n  saveFileToDisk: [getShortcutKey(\"CtrlOrCmd+S\")],\n  saveToActiveFile: [getShortcutKey(\"CtrlOrCmd+S\")],\n  toggleShortcuts: [getShortcutKey(\"?\")],\n  searchMenu: [getShortcutKey(\"CtrlOrCmd+F\")],\n  wrapSelectionInFrame: [],\n};\n\nexport const getShortcutFromShortcutName = (name: ShortcutName, idx = 0) => {\n  const shortcuts = shortcutMap[name];\n  // if multiple shortcuts available, take the first one\n  return shortcuts && shortcuts.length > 0\n    ? shortcuts[idx] || shortcuts[0]\n    : \"\";\n};\n", "// taken from lodash (MIT)\n// https://github.com/lodash/lodash/blob/67389a8c78975d97505fa15aa79bec6397749807/lodash.js#L14180\n\nconst rsComboMarksRange = \"\\\\u0300-\\\\u036f\";\nconst reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\";\nconst rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\";\nconst rsComboRange =\n  rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\nconst rsCombo = `[${rsComboRange}]`;\n\nconst reComboMark = RegExp(rsCombo, \"g\");\n\nconst reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n// NOTE below letter replacements are modified from lodash to always convert\n// to single-letter form by phonetic similarity to keep indexing identical.\n// Doing this is only useful for search highlighting, and only insofar\n// we use a library that can highlight the original source string using\n// the matching indices. As such, we'll likely need to write our own highlighter\n// anyway. Ultimately, we'll want to write our own matcher altogether\n// so we don't have to do any deburring, which will be the most correct\n// solution.\n//\n// prettier-ignore\nconst deburredLetters = {\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    // normaly Ae/ae\n    '\\xc6': 'E', '\\xe6': 'e',\n    // normally Th/th\n    '\\xde': 'T', '\\xfe': 't',\n    // normally ss\n    '\\xdf': 's',\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    // normally IJ/ij\n    '\\u0132': 'I', '\\u0133': 'i',\n    // normally OE/oe\n    '\\u0152': 'E', '\\u0153': 'e',\n    // normally \"'n\"\n    '\\u0149': \"n\",\n    '\\u017f': 's'\n  };\n\nexport const deburr = (str: string) => {\n  return str\n    .replace(reLatin, (key: string) => {\n      return deburredLetters[key as keyof typeof deburredLetters] || key;\n    })\n    .replace(reComboMark, \"\");\n};\n", "import { useState } from \"react\";\nimport type { ActionManager } from \"../actions/manager\";\nimport type {\n  ExcalidrawElement,\n  ExcalidrawElementType,\n  NonDeletedElementsMap,\n  NonDeletedSceneElementsMap,\n} from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { useDevice } from \"./App\";\nimport {\n  canChangeRoundness,\n  canHaveArrowheads,\n  getTargetElements,\n  hasBackground,\n  hasStrokeStyle,\n  hasStrokeWidth,\n} from \"../scene\";\nimport { SHAPES } from \"../shapes\";\nimport type { AppClassProperties, AppProps, UIAppState, Zoom } from \"../types\";\nimport { capitalizeString, isTransparent } from \"../utils\";\nimport Stack from \"./Stack\";\nimport { ToolButton } from \"./ToolButton\";\nimport { hasStrokeColor, toolIsArrow } from \"../scene/comparisons\";\nimport { trackEvent } from \"../analytics\";\nimport {\n  hasBoundTextElement,\n  isElbowArrow,\n  isImageElement,\n  isLinearElement,\n  isTextElement,\n} from \"../element/typeChecks\";\nimport clsx from \"clsx\";\nimport { actionToggleZenMode } from \"../actions\";\nimport { Tooltip } from \"./Tooltip\";\nimport {\n  shouldAllowVerticalAlign,\n  suppportsHorizontalAlign,\n} from \"../element/textElement\";\n\nimport \"./Actions.scss\";\nimport DropdownMenu from \"./dropdownMenu/DropdownMenu\";\nimport {\n  EmbedIcon,\n  extraToolsIcon,\n  frameToolIcon,\n  mermaidLogoIcon,\n  laserPointerToolIcon,\n  MagicIcon,\n} from \"./icons\";\nimport { KEYS } from \"../keys\";\nimport { useTunnels } from \"../context/tunnels\";\nimport { CLASSES } from \"../constants\";\nimport { alignActionsPredicate } from \"../actions/actionAlign\";\n\nexport const canChangeStrokeColor = (\n  appState: UIAppState,\n  targetElements: ExcalidrawElement[],\n) => {\n  let commonSelectedType: ExcalidrawElementType | null =\n    targetElements[0]?.type || null;\n\n  for (const element of targetElements) {\n    if (element.type !== commonSelectedType) {\n      commonSelectedType = null;\n      break;\n    }\n  }\n\n  return (\n    (hasStrokeColor(appState.activeTool.type) &&\n      appState.activeTool.type !== \"image\" &&\n      commonSelectedType !== \"image\" &&\n      commonSelectedType !== \"frame\" &&\n      commonSelectedType !== \"magicframe\") ||\n    targetElements.some((element) => hasStrokeColor(element.type))\n  );\n};\n\nexport const canChangeBackgroundColor = (\n  appState: UIAppState,\n  targetElements: ExcalidrawElement[],\n) => {\n  return (\n    hasBackground(appState.activeTool.type) ||\n    targetElements.some((element) => hasBackground(element.type))\n  );\n};\n\nexport const SelectedShapeActions = ({\n  appState,\n  elementsMap,\n  renderAction,\n  app,\n}: {\n  appState: UIAppState;\n  elementsMap: NonDeletedElementsMap | NonDeletedSceneElementsMap;\n  renderAction: ActionManager[\"renderAction\"];\n  app: AppClassProperties;\n}) => {\n  const targetElements = getTargetElements(elementsMap, appState);\n\n  let isSingleElementBoundContainer = false;\n  if (\n    targetElements.length === 2 &&\n    (hasBoundTextElement(targetElements[0]) ||\n      hasBoundTextElement(targetElements[1]))\n  ) {\n    isSingleElementBoundContainer = true;\n  }\n  const isEditingTextOrNewElement = Boolean(\n    appState.editingTextElement || appState.newElement,\n  );\n  const device = useDevice();\n  const isRTL = document.documentElement.getAttribute(\"dir\") === \"rtl\";\n\n  const showFillIcons =\n    (hasBackground(appState.activeTool.type) &&\n      !isTransparent(appState.currentItemBackgroundColor)) ||\n    targetElements.some(\n      (element) =>\n        hasBackground(element.type) && !isTransparent(element.backgroundColor),\n    );\n\n  const showLinkIcon =\n    targetElements.length === 1 || isSingleElementBoundContainer;\n\n  const showLineEditorAction =\n    !appState.editingLinearElement &&\n    targetElements.length === 1 &&\n    isLinearElement(targetElements[0]) &&\n    !isElbowArrow(targetElements[0]);\n\n  const showCropEditorAction =\n    !appState.croppingElementId &&\n    targetElements.length === 1 &&\n    isImageElement(targetElements[0]);\n\n  const showAlignActions =\n    !isSingleElementBoundContainer && alignActionsPredicate(appState, app);\n\n  return (\n    <div className=\"panelColumn\">\n      <div>\n        {canChangeStrokeColor(appState, targetElements) &&\n          renderAction(\"changeStrokeColor\")}\n      </div>\n      {canChangeBackgroundColor(appState, targetElements) && (\n        <div>{renderAction(\"changeBackgroundColor\")}</div>\n      )}\n      {showFillIcons && renderAction(\"changeFillStyle\")}\n\n      {(hasStrokeWidth(appState.activeTool.type) ||\n        targetElements.some((element) => hasStrokeWidth(element.type))) &&\n        renderAction(\"changeStrokeWidth\")}\n\n      {(appState.activeTool.type === \"freedraw\" ||\n        targetElements.some((element) => element.type === \"freedraw\")) &&\n        renderAction(\"changeStrokeShape\")}\n\n      {(hasStrokeStyle(appState.activeTool.type) ||\n        targetElements.some((element) => hasStrokeStyle(element.type))) && (\n        <>\n          {renderAction(\"changeStrokeStyle\")}\n          {renderAction(\"changeSloppiness\")}\n        </>\n      )}\n\n      {(canChangeRoundness(appState.activeTool.type) ||\n        targetElements.some((element) => canChangeRoundness(element.type))) && (\n        <>{renderAction(\"changeRoundness\")}</>\n      )}\n\n      {(toolIsArrow(appState.activeTool.type) ||\n        targetElements.some((element) => toolIsArrow(element.type))) && (\n        <>{renderAction(\"changeArrowType\")}</>\n      )}\n\n      {(appState.activeTool.type === \"text\" ||\n        targetElements.some(isTextElement)) && (\n        <>\n          {renderAction(\"changeFontFamily\")}\n          {renderAction(\"changeFontSize\")}\n          {(appState.activeTool.type === \"text\" ||\n            suppportsHorizontalAlign(targetElements, elementsMap)) &&\n            renderAction(\"changeTextAlign\")}\n        </>\n      )}\n\n      {shouldAllowVerticalAlign(targetElements, elementsMap) &&\n        renderAction(\"changeVerticalAlign\")}\n      {(canHaveArrowheads(appState.activeTool.type) ||\n        targetElements.some((element) => canHaveArrowheads(element.type))) && (\n        <>{renderAction(\"changeArrowhead\")}</>\n      )}\n\n      {renderAction(\"changeOpacity\")}\n\n      <fieldset>\n        <legend>{t(\"labels.layers\")}</legend>\n        <div className=\"buttonList\">\n          {renderAction(\"sendToBack\")}\n          {renderAction(\"sendBackward\")}\n          {renderAction(\"bringForward\")}\n          {renderAction(\"bringToFront\")}\n        </div>\n      </fieldset>\n\n      {showAlignActions && !isSingleElementBoundContainer && (\n        <fieldset>\n          <legend>{t(\"labels.align\")}</legend>\n          <div className=\"buttonList\">\n            {\n              // swap this order for RTL so the button positions always match their action\n              // (i.e. the leftmost button aligns left)\n            }\n            {isRTL ? (\n              <>\n                {renderAction(\"alignRight\")}\n                {renderAction(\"alignHorizontallyCentered\")}\n                {renderAction(\"alignLeft\")}\n              </>\n            ) : (\n              <>\n                {renderAction(\"alignLeft\")}\n                {renderAction(\"alignHorizontallyCentered\")}\n                {renderAction(\"alignRight\")}\n              </>\n            )}\n            {targetElements.length > 2 &&\n              renderAction(\"distributeHorizontally\")}\n            {/* breaks the row \u02C7\u02C7 */}\n            <div style={{ flexBasis: \"100%\", height: 0 }} />\n            <div\n              style={{\n                display: \"flex\",\n                flexWrap: \"wrap\",\n                gap: \".5rem\",\n                marginTop: \"-0.5rem\",\n              }}\n            >\n              {renderAction(\"alignTop\")}\n              {renderAction(\"alignVerticallyCentered\")}\n              {renderAction(\"alignBottom\")}\n              {targetElements.length > 2 &&\n                renderAction(\"distributeVertically\")}\n            </div>\n          </div>\n        </fieldset>\n      )}\n      {!isEditingTextOrNewElement && targetElements.length > 0 && (\n        <fieldset>\n          <legend>{t(\"labels.actions\")}</legend>\n          <div className=\"buttonList\">\n            {!device.editor.isMobile && renderAction(\"duplicateSelection\")}\n            {!device.editor.isMobile && renderAction(\"deleteSelectedElements\")}\n            {renderAction(\"group\")}\n            {renderAction(\"ungroup\")}\n            {showLinkIcon && renderAction(\"hyperlink\")}\n            {showCropEditorAction && renderAction(\"cropEditor\")}\n            {showLineEditorAction && renderAction(\"toggleLinearEditor\")}\n          </div>\n        </fieldset>\n      )}\n    </div>\n  );\n};\n\nexport const ShapesSwitcher = ({\n  activeTool,\n  appState,\n  app,\n  UIOptions,\n}: {\n  activeTool: UIAppState[\"activeTool\"];\n  appState: UIAppState;\n  app: AppClassProperties;\n  UIOptions: AppProps[\"UIOptions\"];\n}) => {\n  const [isExtraToolsMenuOpen, setIsExtraToolsMenuOpen] = useState(false);\n\n  const frameToolSelected = activeTool.type === \"frame\";\n  const laserToolSelected = activeTool.type === \"laser\";\n  const embeddableToolSelected = activeTool.type === \"embeddable\";\n\n  const { TTDDialogTriggerTunnel } = useTunnels();\n\n  return (\n    <>\n      {SHAPES.map(({ value, icon, key, numericKey, fillable }, index) => {\n        if (\n          UIOptions.tools?.[\n            value as Extract<typeof value, keyof AppProps[\"UIOptions\"][\"tools\"]>\n          ] === false\n        ) {\n          return null;\n        }\n\n        const label = t(`toolBar.${value}`);\n        const letter =\n          key && capitalizeString(typeof key === \"string\" ? key : key[0]);\n        const shortcut = letter\n          ? `${letter} ${t(\"helpDialog.or\")} ${numericKey}`\n          : `${numericKey}`;\n        return (\n          <ToolButton\n            className={clsx(\"Shape\", { fillable })}\n            key={value}\n            type=\"radio\"\n            icon={icon}\n            checked={activeTool.type === value}\n            name=\"editor-current-shape\"\n            title={`${capitalizeString(label)} \u2014 ${shortcut}`}\n            keyBindingLabel={numericKey || letter}\n            aria-label={capitalizeString(label)}\n            aria-keyshortcuts={shortcut}\n            data-testid={`toolbar-${value}`}\n            onPointerDown={({ pointerType }) => {\n              if (!appState.penDetected && pointerType === \"pen\") {\n                app.togglePenMode(true);\n              }\n            }}\n            onChange={({ pointerType }) => {\n              if (appState.activeTool.type !== value) {\n                trackEvent(\"toolbar\", value, \"ui\");\n              }\n              if (value === \"image\") {\n                app.setActiveTool({\n                  type: value,\n                  insertOnCanvasDirectly: pointerType !== \"mouse\",\n                });\n              } else {\n                app.setActiveTool({ type: value });\n              }\n            }}\n          />\n        );\n      })}\n      <div className=\"App-toolbar__divider\" />\n\n      <DropdownMenu open={isExtraToolsMenuOpen}>\n        <DropdownMenu.Trigger\n          className={clsx(\"App-toolbar__extra-tools-trigger\", {\n            \"App-toolbar__extra-tools-trigger--selected\":\n              frameToolSelected ||\n              embeddableToolSelected ||\n              // in collab we're already highlighting the laser button\n              // outside toolbar, so let's not highlight extra-tools button\n              // on top of it\n              (laserToolSelected && !app.props.isCollaborating),\n          })}\n          onToggle={() => setIsExtraToolsMenuOpen(!isExtraToolsMenuOpen)}\n          title={t(\"toolBar.extraTools\")}\n        >\n          {extraToolsIcon}\n        </DropdownMenu.Trigger>\n        <DropdownMenu.Content\n          onClickOutside={() => setIsExtraToolsMenuOpen(false)}\n          onSelect={() => setIsExtraToolsMenuOpen(false)}\n          className=\"App-toolbar__extra-tools-dropdown\"\n        >\n          <DropdownMenu.Item\n            onSelect={() => app.setActiveTool({ type: \"frame\" })}\n            icon={frameToolIcon}\n            shortcut={KEYS.F.toLocaleUpperCase()}\n            data-testid=\"toolbar-frame\"\n            selected={frameToolSelected}\n          >\n            {t(\"toolBar.frame\")}\n          </DropdownMenu.Item>\n          <DropdownMenu.Item\n            onSelect={() => app.setActiveTool({ type: \"embeddable\" })}\n            icon={EmbedIcon}\n            data-testid=\"toolbar-embeddable\"\n            selected={embeddableToolSelected}\n          >\n            {t(\"toolBar.embeddable\")}\n          </DropdownMenu.Item>\n          <DropdownMenu.Item\n            onSelect={() => app.setActiveTool({ type: \"laser\" })}\n            icon={laserPointerToolIcon}\n            data-testid=\"toolbar-laser\"\n            selected={laserToolSelected}\n            shortcut={KEYS.K.toLocaleUpperCase()}\n          >\n            {t(\"toolBar.laser\")}\n          </DropdownMenu.Item>\n          <div style={{ margin: \"6px 0\", fontSize: 14, fontWeight: 600 }}>\n            Generate\n          </div>\n          {app.props.aiEnabled !== false && <TTDDialogTriggerTunnel.Out />}\n          <DropdownMenu.Item\n            onSelect={() => app.setOpenDialog({ name: \"ttd\", tab: \"mermaid\" })}\n            icon={mermaidLogoIcon}\n            data-testid=\"toolbar-embeddable\"\n          >\n            {t(\"toolBar.mermaidToExcalidraw\")}\n          </DropdownMenu.Item>\n          {app.props.aiEnabled !== false && app.plugins.diagramToCode && (\n            <>\n              <DropdownMenu.Item\n                onSelect={() => app.onMagicframeToolSelect()}\n                icon={MagicIcon}\n                data-testid=\"toolbar-magicframe\"\n              >\n                {t(\"toolBar.magicframe\")}\n                <DropdownMenu.Item.Badge>AI</DropdownMenu.Item.Badge>\n              </DropdownMenu.Item>\n            </>\n          )}\n        </DropdownMenu.Content>\n      </DropdownMenu>\n    </>\n  );\n};\n\nexport const ZoomActions = ({\n  renderAction,\n  zoom,\n}: {\n  renderAction: ActionManager[\"renderAction\"];\n  zoom: Zoom;\n}) => (\n  <Stack.Col gap={1} className={CLASSES.ZOOM_ACTIONS}>\n    <Stack.Row align=\"center\">\n      {renderAction(\"zoomOut\")}\n      {renderAction(\"resetZoom\")}\n      {renderAction(\"zoomIn\")}\n    </Stack.Row>\n  </Stack.Col>\n);\n\nexport const UndoRedoActions = ({\n  renderAction,\n  className,\n}: {\n  renderAction: ActionManager[\"renderAction\"];\n  className?: string;\n}) => (\n  <div className={`undo-redo-buttons ${className}`}>\n    <div className=\"undo-button-container\">\n      <Tooltip label={t(\"buttons.undo\")}>{renderAction(\"undo\")}</Tooltip>\n    </div>\n    <div className=\"redo-button-container\">\n      <Tooltip label={t(\"buttons.redo\")}> {renderAction(\"redo\")}</Tooltip>\n    </div>\n  </div>\n);\n\nexport const ExitZenModeAction = ({\n  actionManager,\n  showExitZenModeBtn,\n}: {\n  actionManager: ActionManager;\n  showExitZenModeBtn: boolean;\n}) => (\n  <button\n    type=\"button\"\n    className={clsx(\"disable-zen-mode\", {\n      \"disable-zen-mode--visible\": showExitZenModeBtn,\n    })}\n    onClick={() => actionManager.executeAction(actionToggleZenMode)}\n  >\n    {t(\"buttons.exitZenMode\")}\n  </button>\n);\n\nexport const FinalizeAction = ({\n  renderAction,\n  className,\n}: {\n  renderAction: ActionManager[\"renderAction\"];\n  className?: string;\n}) => (\n  <div className={`finalize-button ${className}`}>\n    {renderAction(\"finalize\", { size: \"small\" })}\n  </div>\n);\n", "import React from \"react\";\nimport tunnel from \"tunnel-rat\";\nimport { createIsolation } from \"jotai-scope\";\n\nexport type Tunnel = ReturnType<typeof tunnel>;\n\ntype TunnelsContextValue = {\n  MainMenuTunnel: Tunnel;\n  WelcomeScreenMenuHintTunnel: Tunnel;\n  WelcomeScreenToolbarHintTunnel: Tunnel;\n  WelcomeScreenHelpHintTunnel: Tunnel;\n  WelcomeScreenCenterTunnel: Tunnel;\n  FooterCenterTunnel: Tunnel;\n  DefaultSidebarTriggerTunnel: Tunnel;\n  DefaultSidebarTabTriggersTunnel: Tunnel;\n  OverwriteConfirmDialogTunnel: Tunnel;\n  TTDDialogTriggerTunnel: Tunnel;\n  // this can be removed once we create jotai stores per each editor\n  // instance\n  tunnelsJotai: ReturnType<typeof createIsolation>;\n};\n\nexport const TunnelsContext = React.createContext<TunnelsContextValue>(null!);\n\nexport const useTunnels = () => React.useContext(TunnelsContext);\n\nconst tunnelsJotai = createIsolation();\n\nexport const useInitializeTunnels = () => {\n  return React.useMemo((): TunnelsContextValue => {\n    return {\n      MainMenuTunnel: tunnel(),\n      WelcomeScreenMenuHintTunnel: tunnel(),\n      WelcomeScreenToolbarHintTunnel: tunnel(),\n      WelcomeScreenHelpHintTunnel: tunnel(),\n      WelcomeScreenCenterTunnel: tunnel(),\n      FooterCenterTunnel: tunnel(),\n      DefaultSidebarTriggerTunnel: tunnel(),\n      DefaultSidebarTabTriggersTunnel: tunnel(),\n      OverwriteConfirmDialogTunnel: tunnel(),\n      TTDDialogTriggerTunnel: tunnel(),\n      tunnelsJotai,\n    };\n  }, []);\n};\n", "import { useRef } from \"react\";\n\n/**\n * Returns a stable function of the same type.\n */\nexport const useStableCallback = <T extends (...args: any[]) => any>(\n  userFn: T,\n) => {\n  const stableRef = useRef<{ userFn: T; stableFn?: T }>({ userFn });\n  stableRef.current.userFn = userFn;\n\n  if (!stableRef.current.stableFn) {\n    stableRef.current.stableFn = ((...args: any[]) =>\n      stableRef.current.userFn(...args)) as T;\n  }\n\n  return stableRef.current.stableFn as T;\n};\n", "import { actionClearCanvas } from \"../actions\";\nimport { t } from \"../i18n\";\nimport { atom, useAtom } from \"../editor-jotai\";\nimport { useExcalidrawActionManager } from \"./App\";\nimport ConfirmDialog from \"./ConfirmDialog\";\n\nexport const activeConfirmDialogAtom = atom<\"clearCanvas\" | null>(null);\n\nexport const ActiveConfirmDialog = () => {\n  const [activeConfirmDialog, setActiveConfirmDialog] = useAtom(\n    activeConfirmDialogAtom,\n  );\n  const actionManager = useExcalidrawActionManager();\n\n  if (!activeConfirmDialog) {\n    return null;\n  }\n\n  if (activeConfirmDialog === \"clearCanvas\") {\n    return (\n      <ConfirmDialog\n        onConfirm={() => {\n          actionManager.executeAction(actionClearCanvas);\n          setActiveConfirmDialog(null);\n        }}\n        onCancel={() => setActiveConfirmDialog(null)}\n        title={t(\"clearCanvasDialog.title\")}\n      >\n        <p className=\"clear-canvas__content\"> {t(\"alerts.clearReset\")}</p>\n      </ConfirmDialog>\n    );\n  }\n\n  return null;\n};\n", "import { actionToggleTheme } from \"../../actions\";\nimport type { CommandPaletteItem } from \"./types\";\n\nexport const toggleTheme: CommandPaletteItem = {\n  ...actionToggleTheme,\n  category: \"App\",\n  label: \"Toggle theme\",\n  perform: ({ actionManager }) => {\n    actionManager.executeAction(actionToggleTheme, \"commandPalette\");\n  },\n};\n", "import { copyTextToSystemClipboard } from \"../clipboard\";\nimport { copyIcon, elementLinkIcon } from \"../components/icons\";\nimport {\n  canCreateLinkFromElements,\n  defaultGetElementLinkFromSelection,\n  getLinkIdAndTypeFromSelection,\n} from \"../element/elementLink\";\nimport { t } from \"../i18n\";\nimport { getSelectedElements } from \"../scene\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { register } from \"./register\";\n\nexport const actionCopyElementLink = register({\n  name: \"copyElementLink\",\n  label: \"labels.copyElementLink\",\n  icon: copyIcon,\n  trackEvent: { category: \"element\" },\n  perform: async (elements, appState, _, app) => {\n    const selectedElements = getSelectedElements(elements, appState);\n\n    try {\n      if (window.location) {\n        const idAndType = getLinkIdAndTypeFromSelection(\n          selectedElements,\n          appState,\n        );\n\n        if (idAndType) {\n          await copyTextToSystemClipboard(\n            app.props.generateLinkForSelection\n              ? app.props.generateLinkForSelection(idAndType.id, idAndType.type)\n              : defaultGetElementLinkFromSelection(\n                  idAndType.id,\n                  idAndType.type,\n                ),\n          );\n\n          return {\n            appState: {\n              toast: {\n                message: t(\"toast.elementLinkCopied\"),\n                closable: true,\n              },\n            },\n            captureUpdate: CaptureUpdateAction.EVENTUALLY,\n          };\n        }\n        return {\n          appState,\n          elements,\n          app,\n          captureUpdate: CaptureUpdateAction.EVENTUALLY,\n        };\n      }\n    } catch (error: any) {\n      console.error(error);\n    }\n\n    return {\n      appState,\n      elements,\n      app,\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  predicate: (elements, appState) =>\n    canCreateLinkFromElements(getSelectedElements(elements, appState)),\n});\n\nexport const actionLinkToElement = register({\n  name: \"linkToElement\",\n  label: \"labels.linkToElement\",\n  icon: elementLinkIcon,\n  perform: (elements, appState, _, app) => {\n    const selectedElements = getSelectedElements(elements, appState);\n\n    if (\n      selectedElements.length !== 1 ||\n      !canCreateLinkFromElements(selectedElements)\n    ) {\n      return {\n        elements,\n        appState,\n        app,\n        captureUpdate: CaptureUpdateAction.EVENTUALLY,\n      };\n    }\n\n    return {\n      appState: {\n        ...appState,\n        openDialog: {\n          name: \"elementLinkSelector\",\n          sourceElementId: getSelectedElements(elements, appState)[0].id,\n        },\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  predicate: (elements, appState, appProps, app) => {\n    const selectedElements = getSelectedElements(elements, appState);\n\n    return (\n      appState.openDialog?.name !== \"elementLinkSelector\" &&\n      selectedElements.length === 1 &&\n      canCreateLinkFromElements(selectedElements)\n    );\n  },\n  trackEvent: false,\n});\n", "import { DEFAULT_CATEGORIES } from \"../components/CommandPalette/CommandPalette\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport { isElbowArrow, isLinearElement } from \"../element/typeChecks\";\nimport type { ExcalidrawLinearElement } from \"../element/types\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { register } from \"./register\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { lineEditorIcon } from \"../components/icons\";\n\nexport const actionToggleLinearEditor = register({\n  name: \"toggleLinearEditor\",\n  category: DEFAULT_CATEGORIES.elements,\n  label: (elements, appState, app) => {\n    const selectedElement = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n    })[0] as ExcalidrawLinearElement | undefined;\n\n    return selectedElement?.type === \"arrow\"\n      ? \"labels.lineEditor.editArrow\"\n      : \"labels.lineEditor.edit\";\n  },\n  keywords: [\"line\"],\n  trackEvent: {\n    category: \"element\",\n  },\n  predicate: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    if (\n      !appState.editingLinearElement &&\n      selectedElements.length === 1 &&\n      isLinearElement(selectedElements[0]) &&\n      !isElbowArrow(selectedElements[0])\n    ) {\n      return true;\n    }\n    return false;\n  },\n  perform(elements, appState, _, app) {\n    const selectedElement = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n      includeBoundTextElement: true,\n    })[0] as ExcalidrawLinearElement;\n\n    const editingLinearElement =\n      appState.editingLinearElement?.elementId === selectedElement.id\n        ? null\n        : new LinearElementEditor(selectedElement);\n    return {\n      appState: {\n        ...appState,\n        editingLinearElement,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  PanelComponent: ({ appState, updateData, app }) => {\n    const selectedElement = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n    })[0] as ExcalidrawLinearElement;\n\n    const label = t(\n      selectedElement.type === \"arrow\"\n        ? \"labels.lineEditor.editArrow\"\n        : \"labels.lineEditor.edit\",\n    );\n    return (\n      <ToolButton\n        type=\"button\"\n        icon={lineEditorIcon}\n        title={label}\n        aria-label={label}\n        onClick={() => updateData(null)}\n      />\n    );\n  },\n});\n", "import { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport type { AppState } from \"../types\";\nimport { searchIcon } from \"../components/icons\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { CANVAS_SEARCH_TAB, CLASSES, DEFAULT_SIDEBAR } from \"../constants\";\n\nexport const actionToggleSearchMenu = register({\n  name: \"searchMenu\",\n  icon: searchIcon,\n  keywords: [\"search\", \"find\"],\n  label: \"search.title\",\n  viewMode: true,\n  trackEvent: {\n    category: \"search_menu\",\n    action: \"toggle\",\n    predicate: (appState) => appState.gridModeEnabled,\n  },\n  perform(elements, appState, _, app) {\n    if (\n      appState.openSidebar?.name === DEFAULT_SIDEBAR.name &&\n      appState.openSidebar.tab === CANVAS_SEARCH_TAB\n    ) {\n      const searchInput =\n        app.excalidrawContainerValue.container?.querySelector<HTMLInputElement>(\n          `.${CLASSES.SEARCH_MENU_INPUT_WRAPPER} input`,\n        );\n\n      if (searchInput?.matches(\":focus\")) {\n        return {\n          appState: { ...appState, openSidebar: null },\n          captureUpdate: CaptureUpdateAction.EVENTUALLY,\n        };\n      }\n\n      searchInput?.focus();\n      searchInput?.select();\n      return false;\n    }\n\n    return {\n      appState: {\n        ...appState,\n        openSidebar: { name: DEFAULT_SIDEBAR.name, tab: CANVAS_SEARCH_TAB },\n        openDialog: null,\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  checked: (appState: AppState) => appState.gridModeEnabled,\n  predicate: (element, appState, props) => {\n    return props.gridModeEnabled === undefined;\n  },\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.F,\n});\n", "import { register } from \"./register\";\nimport { cropIcon } from \"../components/icons\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { isImageElement } from \"../element/typeChecks\";\nimport type { ExcalidrawImageElement } from \"../element/types\";\n\nexport const actionToggleCropEditor = register({\n  name: \"cropEditor\",\n  label: \"helpDialog.cropStart\",\n  icon: cropIcon,\n  viewMode: true,\n  trackEvent: { category: \"menu\" },\n  keywords: [\"image\", \"crop\"],\n  perform(elements, appState, _, app) {\n    const selectedElement = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n      includeBoundTextElement: true,\n    })[0] as ExcalidrawImageElement;\n\n    return {\n      appState: {\n        ...appState,\n        isCropping: false,\n        croppingElementId: selectedElement.id,\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n  predicate: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    if (\n      !appState.croppingElementId &&\n      selectedElements.length === 1 &&\n      isImageElement(selectedElements[0])\n    ) {\n      return true;\n    }\n    return false;\n  },\n  PanelComponent: ({ appState, updateData, app }) => {\n    const label = t(\"helpDialog.cropStart\");\n\n    return (\n      <ToolButton\n        type=\"button\"\n        icon={cropIcon}\n        title={label}\n        aria-label={label}\n        onClick={() => updateData(null)}\n      />\n    );\n  },\n});\n", "import type { AppStateChange, ElementsChange } from \"./change\";\nimport type { SceneElementsMap } from \"./element/types\";\nimport { Emitter } from \"./emitter\";\nimport type { Snapshot } from \"./store\";\nimport type { AppState } from \"./types\";\n\ntype HistoryStack = HistoryEntry[];\n\nexport class HistoryChangedEvent {\n  constructor(\n    public readonly isUndoStackEmpty: boolean = true,\n    public readonly isRedoStackEmpty: boolean = true,\n  ) {}\n}\n\nexport class History {\n  public readonly onHistoryChangedEmitter = new Emitter<\n    [HistoryChangedEvent]\n  >();\n\n  private readonly undoStack: HistoryStack = [];\n  private readonly redoStack: HistoryStack = [];\n\n  public get isUndoStackEmpty() {\n    return this.undoStack.length === 0;\n  }\n\n  public get isRedoStackEmpty() {\n    return this.redoStack.length === 0;\n  }\n\n  public clear() {\n    this.undoStack.length = 0;\n    this.redoStack.length = 0;\n  }\n\n  /**\n   * Record a local change which will go into the history\n   */\n  public record(\n    elementsChange: ElementsChange,\n    appStateChange: AppStateChange,\n  ) {\n    const entry = HistoryEntry.create(appStateChange, elementsChange);\n\n    if (!entry.isEmpty()) {\n      // we have the latest changes, no need to `applyLatest`, which is done within `History.push`\n      this.undoStack.push(entry.inverse());\n\n      if (!entry.elementsChange.isEmpty()) {\n        // don't reset redo stack on local appState changes,\n        // as a simple click (unselect) could lead to losing all the redo entries\n        // only reset on non empty elements changes!\n        this.redoStack.length = 0;\n      }\n\n      this.onHistoryChangedEmitter.trigger(\n        new HistoryChangedEvent(this.isUndoStackEmpty, this.isRedoStackEmpty),\n      );\n    }\n  }\n\n  public undo(\n    elements: SceneElementsMap,\n    appState: AppState,\n    snapshot: Readonly<Snapshot>,\n  ) {\n    return this.perform(\n      elements,\n      appState,\n      snapshot,\n      () => History.pop(this.undoStack),\n      (entry: HistoryEntry) => History.push(this.redoStack, entry, elements),\n    );\n  }\n\n  public redo(\n    elements: SceneElementsMap,\n    appState: AppState,\n    snapshot: Readonly<Snapshot>,\n  ) {\n    return this.perform(\n      elements,\n      appState,\n      snapshot,\n      () => History.pop(this.redoStack),\n      (entry: HistoryEntry) => History.push(this.undoStack, entry, elements),\n    );\n  }\n\n  private perform(\n    elements: SceneElementsMap,\n    appState: AppState,\n    snapshot: Readonly<Snapshot>,\n    pop: () => HistoryEntry | null,\n    push: (entry: HistoryEntry) => void,\n  ): [SceneElementsMap, AppState] | void {\n    try {\n      let historyEntry = pop();\n\n      if (historyEntry === null) {\n        return;\n      }\n\n      let nextElements = elements;\n      let nextAppState = appState;\n      let containsVisibleChange = false;\n\n      // iterate through the history entries in case they result in no visible changes\n      while (historyEntry) {\n        try {\n          [nextElements, nextAppState, containsVisibleChange] =\n            historyEntry.applyTo(nextElements, nextAppState, snapshot);\n        } finally {\n          // make sure to always push / pop, even if the increment is corrupted\n          push(historyEntry);\n        }\n\n        if (containsVisibleChange) {\n          break;\n        }\n\n        historyEntry = pop();\n      }\n\n      return [nextElements, nextAppState];\n    } finally {\n      // trigger the history change event before returning completely\n      // also trigger it just once, no need doing so on each entry\n      this.onHistoryChangedEmitter.trigger(\n        new HistoryChangedEvent(this.isUndoStackEmpty, this.isRedoStackEmpty),\n      );\n    }\n  }\n\n  private static pop(stack: HistoryStack): HistoryEntry | null {\n    if (!stack.length) {\n      return null;\n    }\n\n    const entry = stack.pop();\n\n    if (entry !== undefined) {\n      return entry;\n    }\n\n    return null;\n  }\n\n  private static push(\n    stack: HistoryStack,\n    entry: HistoryEntry,\n    prevElements: SceneElementsMap,\n  ) {\n    const updatedEntry = entry.inverse().applyLatestChanges(prevElements);\n    return stack.push(updatedEntry);\n  }\n}\n\nexport class HistoryEntry {\n  private constructor(\n    public readonly appStateChange: AppStateChange,\n    public readonly elementsChange: ElementsChange,\n  ) {}\n\n  public static create(\n    appStateChange: AppStateChange,\n    elementsChange: ElementsChange,\n  ) {\n    return new HistoryEntry(appStateChange, elementsChange);\n  }\n\n  public inverse(): HistoryEntry {\n    return new HistoryEntry(\n      this.appStateChange.inverse(),\n      this.elementsChange.inverse(),\n    );\n  }\n\n  public applyTo(\n    elements: SceneElementsMap,\n    appState: AppState,\n    snapshot: Readonly<Snapshot>,\n  ): [SceneElementsMap, AppState, boolean] {\n    const [nextElements, elementsContainVisibleChange] =\n      this.elementsChange.applyTo(elements, snapshot.elements);\n\n    const [nextAppState, appStateContainsVisibleChange] =\n      this.appStateChange.applyTo(appState, nextElements);\n\n    const appliedVisibleChanges =\n      elementsContainVisibleChange || appStateContainsVisibleChange;\n\n    return [nextElements, nextAppState, appliedVisibleChanges];\n  }\n\n  /**\n   * Apply latest (remote) changes to the history entry, creates new instance of `HistoryEntry`.\n   */\n  public applyLatestChanges(elements: SceneElementsMap): HistoryEntry {\n    const updatedElementsChange =\n      this.elementsChange.applyLatestChanges(elements);\n\n    return HistoryEntry.create(this.appStateChange, updatedElementsChange);\n  }\n\n  public isEmpty(): boolean {\n    return this.appStateChange.isEmpty() && this.elementsChange.isEmpty();\n  }\n}\n", "import { useEffect, useState } from \"react\";\nimport type { Emitter } from \"../emitter\";\n\nexport const useEmitter = <TEvent extends unknown>(\n  emitter: Emitter<[TEvent]>,\n  initialState: TEvent,\n) => {\n  const [event, setEvent] = useState<TEvent>(initialState);\n\n  useEffect(() => {\n    const unsubscribe = emitter.on((event) => {\n      setEvent(event);\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [emitter]);\n\n  return event;\n};\n", "import type { Action, ActionResult } from \"./types\";\nimport { UndoIcon, RedoIcon } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport type { History } from \"../history\";\nimport { HistoryChangedEvent } from \"../history\";\nimport type { AppClassProperties, AppState } from \"../types\";\nimport { KEYS, matchKey } from \"../keys\";\nimport { arrayToMap } from \"../utils\";\nimport { isWindows } from \"../constants\";\nimport type { SceneElementsMap } from \"../element/types\";\nimport type { Store } from \"../store\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { useEmitter } from \"../hooks/useEmitter\";\n\nconst executeHistoryAction = (\n  app: AppClassProperties,\n  appState: Readonly<AppState>,\n  updater: () => [SceneElementsMap, AppState] | void,\n): ActionResult => {\n  if (\n    !appState.multiElement &&\n    !appState.resizingElement &&\n    !appState.editingTextElement &&\n    !appState.newElement &&\n    !appState.selectedElementsAreBeingDragged &&\n    !appState.selectionElement &&\n    !app.flowChartCreator.isCreatingChart\n  ) {\n    const result = updater();\n\n    if (!result) {\n      return { captureUpdate: CaptureUpdateAction.EVENTUALLY };\n    }\n\n    const [nextElementsMap, nextAppState] = result;\n    const nextElements = Array.from(nextElementsMap.values());\n\n    return {\n      appState: nextAppState,\n      elements: nextElements,\n      captureUpdate: CaptureUpdateAction.NEVER,\n    };\n  }\n\n  return { captureUpdate: CaptureUpdateAction.EVENTUALLY };\n};\n\ntype ActionCreator = (history: History, store: Store) => Action;\n\nexport const createUndoAction: ActionCreator = (history, store) => ({\n  name: \"undo\",\n  label: \"buttons.undo\",\n  icon: UndoIcon,\n  trackEvent: { category: \"history\" },\n  viewMode: false,\n  perform: (elements, appState, value, app) =>\n    executeHistoryAction(app, appState, () =>\n      history.undo(\n        arrayToMap(elements) as SceneElementsMap, // TODO: #7348 refactor action manager to already include `SceneElementsMap`\n        appState,\n        store.snapshot,\n      ),\n    ),\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && matchKey(event, KEYS.Z) && !event.shiftKey,\n  PanelComponent: ({ updateData, data }) => {\n    const { isUndoStackEmpty } = useEmitter<HistoryChangedEvent>(\n      history.onHistoryChangedEmitter,\n      new HistoryChangedEvent(\n        history.isUndoStackEmpty,\n        history.isRedoStackEmpty,\n      ),\n    );\n\n    return (\n      <ToolButton\n        type=\"button\"\n        icon={UndoIcon}\n        aria-label={t(\"buttons.undo\")}\n        onClick={updateData}\n        size={data?.size || \"medium\"}\n        disabled={isUndoStackEmpty}\n        data-testid=\"button-undo\"\n      />\n    );\n  },\n});\n\nexport const createRedoAction: ActionCreator = (history, store) => ({\n  name: \"redo\",\n  label: \"buttons.redo\",\n  icon: RedoIcon,\n  trackEvent: { category: \"history\" },\n  viewMode: false,\n  perform: (elements, appState, _, app) =>\n    executeHistoryAction(app, appState, () =>\n      history.redo(\n        arrayToMap(elements) as SceneElementsMap, // TODO: #7348 refactor action manager to already include `SceneElementsMap`\n        appState,\n        store.snapshot,\n      ),\n    ),\n  keyTest: (event) =>\n    (event[KEYS.CTRL_OR_CMD] && event.shiftKey && matchKey(event, KEYS.Z)) ||\n    (isWindows && event.ctrlKey && !event.shiftKey && matchKey(event, KEYS.Y)),\n  PanelComponent: ({ updateData, data }) => {\n    const { isRedoStackEmpty } = useEmitter(\n      history.onHistoryChangedEmitter,\n      new HistoryChangedEvent(\n        history.isUndoStackEmpty,\n        history.isRedoStackEmpty,\n      ),\n    );\n\n    return (\n      <ToolButton\n        type=\"button\"\n        icon={RedoIcon}\n        aria-label={t(\"buttons.redo\")}\n        onClick={updateData}\n        size={data?.size || \"medium\"}\n        disabled={isRedoStackEmpty}\n        data-testid=\"button-redo\"\n      />\n    );\n  },\n});\n", "import React from \"react\";\nimport type {\n  Action,\n  UpdaterFn,\n  ActionName,\n  ActionResult,\n  PanelComponentProps,\n  ActionSource,\n} from \"./types\";\nimport type {\n  ExcalidrawElement,\n  OrderedExcalidrawElement,\n} from \"../element/types\";\nimport type { AppClassProperties, AppState } from \"../types\";\nimport { trackEvent } from \"../analytics\";\nimport { isPromiseLike } from \"../utils\";\n\nconst trackAction = (\n  action: Action,\n  source: ActionSource,\n  appState: Readonly<AppState>,\n  elements: readonly ExcalidrawElement[],\n  app: AppClassProperties,\n  value: any,\n) => {\n  if (action.trackEvent) {\n    try {\n      if (typeof action.trackEvent === \"object\") {\n        const shouldTrack = action.trackEvent.predicate\n          ? action.trackEvent.predicate(appState, elements, value)\n          : true;\n        if (shouldTrack) {\n          trackEvent(\n            action.trackEvent.category,\n            action.trackEvent.action || action.name,\n            `${source} (${app.device.editor.isMobile ? \"mobile\" : \"desktop\"})`,\n          );\n        }\n      }\n    } catch (error) {\n      console.error(\"error while logging action:\", error);\n    }\n  }\n};\n\nexport class ActionManager {\n  actions = {} as Record<ActionName, Action>;\n\n  updater: (actionResult: ActionResult | Promise<ActionResult>) => void;\n\n  getAppState: () => Readonly<AppState>;\n  getElementsIncludingDeleted: () => readonly OrderedExcalidrawElement[];\n  app: AppClassProperties;\n\n  constructor(\n    updater: UpdaterFn,\n    getAppState: () => AppState,\n    getElementsIncludingDeleted: () => readonly OrderedExcalidrawElement[],\n    app: AppClassProperties,\n  ) {\n    this.updater = (actionResult) => {\n      if (isPromiseLike(actionResult)) {\n        actionResult.then((actionResult) => {\n          return updater(actionResult);\n        });\n      } else {\n        return updater(actionResult);\n      }\n    };\n    this.getAppState = getAppState;\n    this.getElementsIncludingDeleted = getElementsIncludingDeleted;\n    this.app = app;\n  }\n\n  registerAction(action: Action) {\n    this.actions[action.name] = action;\n  }\n\n  registerAll(actions: readonly Action[]) {\n    actions.forEach((action) => this.registerAction(action));\n  }\n\n  handleKeyDown(event: React.KeyboardEvent | KeyboardEvent) {\n    const canvasActions = this.app.props.UIOptions.canvasActions;\n    const data = Object.values(this.actions)\n      .sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0))\n      .filter(\n        (action) =>\n          (action.name in canvasActions\n            ? canvasActions[action.name as keyof typeof canvasActions]\n            : true) &&\n          action.keyTest &&\n          action.keyTest(\n            event,\n            this.getAppState(),\n            this.getElementsIncludingDeleted(),\n            this.app,\n          ),\n      );\n\n    if (data.length !== 1) {\n      if (data.length > 1) {\n        console.warn(\"Canceling as multiple actions match this shortcut\", data);\n      }\n      return false;\n    }\n\n    const action = data[0];\n\n    if (this.getAppState().viewModeEnabled && action.viewMode !== true) {\n      return false;\n    }\n\n    const elements = this.getElementsIncludingDeleted();\n    const appState = this.getAppState();\n    const value = null;\n\n    trackAction(action, \"keyboard\", appState, elements, this.app, null);\n\n    event.preventDefault();\n    event.stopPropagation();\n    this.updater(data[0].perform(elements, appState, value, this.app));\n    return true;\n  }\n\n  executeAction<T extends Action>(\n    action: T,\n    source: ActionSource = \"api\",\n    value: Parameters<T[\"perform\"]>[2] = null,\n  ) {\n    const elements = this.getElementsIncludingDeleted();\n    const appState = this.getAppState();\n\n    trackAction(action, source, appState, elements, this.app, value);\n\n    this.updater(action.perform(elements, appState, value, this.app));\n  }\n\n  /**\n   * @param data additional data sent to the PanelComponent\n   */\n  renderAction = (name: ActionName, data?: PanelComponentProps[\"data\"]) => {\n    const canvasActions = this.app.props.UIOptions.canvasActions;\n\n    if (\n      this.actions[name] &&\n      \"PanelComponent\" in this.actions[name] &&\n      (name in canvasActions\n        ? canvasActions[name as keyof typeof canvasActions]\n        : true)\n    ) {\n      const action = this.actions[name];\n      const PanelComponent = action.PanelComponent!;\n      PanelComponent.displayName = \"PanelComponent\";\n      const elements = this.getElementsIncludingDeleted();\n      const appState = this.getAppState();\n      const updateData = (formState?: any) => {\n        trackAction(action, \"ui\", appState, elements, this.app, formState);\n\n        this.updater(\n          action.perform(\n            this.getElementsIncludingDeleted(),\n            this.getAppState(),\n            formState,\n            this.app,\n          ),\n        );\n      };\n\n      return (\n        <PanelComponent\n          elements={this.getElementsIncludingDeleted()}\n          appState={this.getAppState()}\n          updateData={updateData}\n          appProps={this.app.props}\n          app={this.app}\n          data={data}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  isActionEnabled = (action: Action) => {\n    const elements = this.getElementsIncludingDeleted();\n    const appState = this.getAppState();\n\n    return (\n      !action.predicate ||\n      action.predicate(elements, appState, this.app.props, this.app)\n    );\n  };\n}\n", "import type { PointerCoords } from \"./types\";\n\nexport const getCenter = (pointers: Map<number, PointerCoords>) => {\n  const allCoords = Array.from(pointers.values());\n  return {\n    x: sum(allCoords, (coords) => coords.x) / allCoords.length,\n    y: sum(allCoords, (coords) => coords.y) / allCoords.length,\n  };\n};\n\nexport const getDistance = ([a, b]: readonly PointerCoords[]) =>\n  Math.hypot(a.x - b.x, a.y - b.y);\n\nconst sum = <T>(array: readonly T[], mapper: (item: T) => number): number =>\n  array.reduce((acc, item) => acc + mapper(item), 0);\n", "import clsx from \"clsx\";\nimport { Popover } from \"./Popover\";\nimport type { TranslationKeys } from \"../i18n\";\nimport { t } from \"../i18n\";\n\nimport \"./ContextMenu.scss\";\nimport type { ShortcutName } from \"../actions/shortcuts\";\nimport { getShortcutFromShortcutName } from \"../actions/shortcuts\";\nimport type { Action } from \"../actions/types\";\nimport type { ActionManager } from \"../actions/manager\";\nimport { useExcalidrawAppState, useExcalidrawElements } from \"./App\";\nimport React from \"react\";\n\nexport type ContextMenuItem = typeof CONTEXT_MENU_SEPARATOR | Action;\n\nexport type ContextMenuItems = (ContextMenuItem | false | null | undefined)[];\n\ntype ContextMenuProps = {\n  actionManager: ActionManager;\n  items: ContextMenuItems;\n  top: number;\n  left: number;\n  onClose: (callback?: () => void) => void;\n};\n\nexport const CONTEXT_MENU_SEPARATOR = \"separator\";\n\nexport const ContextMenu = React.memo(\n  ({ actionManager, items, top, left, onClose }: ContextMenuProps) => {\n    const appState = useExcalidrawAppState();\n    const elements = useExcalidrawElements();\n\n    const filteredItems = items.reduce((acc: ContextMenuItem[], item) => {\n      if (\n        item &&\n        (item === CONTEXT_MENU_SEPARATOR ||\n          !item.predicate ||\n          item.predicate(\n            elements,\n            appState,\n            actionManager.app.props,\n            actionManager.app,\n          ))\n      ) {\n        acc.push(item);\n      }\n      return acc;\n    }, []);\n\n    return (\n      <Popover\n        onCloseRequest={() => {\n          onClose();\n        }}\n        top={top}\n        left={left}\n        fitInViewport={true}\n        offsetLeft={appState.offsetLeft}\n        offsetTop={appState.offsetTop}\n        viewportWidth={appState.width}\n        viewportHeight={appState.height}\n      >\n        <ul\n          className=\"context-menu\"\n          onContextMenu={(event) => event.preventDefault()}\n        >\n          {filteredItems.map((item, idx) => {\n            if (item === CONTEXT_MENU_SEPARATOR) {\n              if (\n                !filteredItems[idx - 1] ||\n                filteredItems[idx - 1] === CONTEXT_MENU_SEPARATOR\n              ) {\n                return null;\n              }\n              return <hr key={idx} className=\"context-menu-item-separator\" />;\n            }\n\n            const actionName = item.name;\n            let label = \"\";\n            if (item.label) {\n              if (typeof item.label === \"function\") {\n                label = t(\n                  item.label(\n                    elements,\n                    appState,\n                    actionManager.app,\n                  ) as unknown as TranslationKeys,\n                );\n              } else {\n                label = t(item.label as unknown as TranslationKeys);\n              }\n            }\n\n            return (\n              <li\n                key={idx}\n                data-testid={actionName}\n                onClick={() => {\n                  // we need update state before executing the action in case\n                  // the action uses the appState it's being passed (that still\n                  // contains a defined contextMenu) to return the next state.\n                  onClose(() => {\n                    actionManager.executeAction(item, \"contextMenu\");\n                  });\n                }}\n              >\n                <button\n                  type=\"button\"\n                  className={clsx(\"context-menu-item\", {\n                    dangerous: actionName === \"deleteSelectedElements\",\n                    checkmark: item.checked?.(appState),\n                  })}\n                >\n                  <div className=\"context-menu-item__label\">{label}</div>\n                  <kbd className=\"context-menu-item__shortcut\">\n                    {actionName\n                      ? getShortcutFromShortcutName(actionName as ShortcutName)\n                      : \"\"}\n                  </kbd>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </Popover>\n    );\n  },\n);\n", "import React, { useLayoutEffect, useRef, useEffect } from \"react\";\nimport \"./Popover.scss\";\nimport { unstable_batchedUpdates } from \"react-dom\";\nimport { queryFocusableElements } from \"../utils\";\nimport { KEYS } from \"../keys\";\n\ntype Props = {\n  top?: number;\n  left?: number;\n  children?: React.ReactNode;\n  onCloseRequest?(event: PointerEvent): void;\n  fitInViewport?: boolean;\n  offsetLeft?: number;\n  offsetTop?: number;\n  viewportWidth?: number;\n  viewportHeight?: number;\n};\n\nexport const Popover = ({\n  children,\n  left,\n  top,\n  onCloseRequest,\n  fitInViewport = false,\n  offsetLeft = 0,\n  offsetTop = 0,\n  viewportWidth = window.innerWidth,\n  viewportHeight = window.innerHeight,\n}: Props) => {\n  const popoverRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const container = popoverRef.current;\n\n    if (!container) {\n      return;\n    }\n\n    // focus popover only if the caller didn't focus on something else nested\n    // within the popover, which should take precedence. Fixes cases\n    // like color picker listening to keydown events on containers nested\n    // in the popover.\n    if (!container.contains(document.activeElement)) {\n      container.focus();\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === KEYS.TAB) {\n        const focusableElements = queryFocusableElements(container);\n        const { activeElement } = document;\n        const currentIndex = focusableElements.findIndex(\n          (element) => element === activeElement,\n        );\n\n        if (activeElement === container) {\n          if (event.shiftKey) {\n            focusableElements[focusableElements.length - 1]?.focus();\n          } else {\n            focusableElements[0].focus();\n          }\n          event.preventDefault();\n          event.stopImmediatePropagation();\n        } else if (currentIndex === 0 && event.shiftKey) {\n          focusableElements[focusableElements.length - 1]?.focus();\n          event.preventDefault();\n          event.stopImmediatePropagation();\n        } else if (\n          currentIndex === focusableElements.length - 1 &&\n          !event.shiftKey\n        ) {\n          focusableElements[0]?.focus();\n          event.preventDefault();\n          event.stopImmediatePropagation();\n        }\n      }\n    };\n\n    container.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => container.removeEventListener(\"keydown\", handleKeyDown);\n  }, []);\n\n  const lastInitializedPosRef = useRef<{ top: number; left: number } | null>(\n    null,\n  );\n\n  // ensure the popover doesn't overflow the viewport\n  useLayoutEffect(() => {\n    if (fitInViewport && popoverRef.current && top != null && left != null) {\n      const container = popoverRef.current;\n      const { width, height } = container.getBoundingClientRect();\n\n      // hack for StrictMode so this effect only runs once for\n      // the same top/left position, otherwise\n      // we'd potentically reposition twice (once for viewport overflow)\n      // and once for top/left position afterwards\n      if (\n        lastInitializedPosRef.current?.top === top &&\n        lastInitializedPosRef.current?.left === left\n      ) {\n        return;\n      }\n      lastInitializedPosRef.current = { top, left };\n\n      if (width >= viewportWidth) {\n        container.style.width = `${viewportWidth}px`;\n        container.style.left = \"0px\";\n        container.style.overflowX = \"scroll\";\n      } else if (left + width - offsetLeft > viewportWidth) {\n        container.style.left = `${viewportWidth - width - 10}px`;\n      } else {\n        container.style.left = `${left}px`;\n      }\n\n      if (height >= viewportHeight) {\n        container.style.height = `${viewportHeight - 20}px`;\n        container.style.top = \"10px\";\n        container.style.overflowY = \"scroll\";\n      } else if (top + height - offsetTop > viewportHeight) {\n        container.style.top = `${viewportHeight - height}px`;\n      } else {\n        container.style.top = `${top}px`;\n      }\n    }\n  }, [\n    top,\n    left,\n    fitInViewport,\n    viewportWidth,\n    viewportHeight,\n    offsetLeft,\n    offsetTop,\n  ]);\n\n  useEffect(() => {\n    if (onCloseRequest) {\n      const handler = (event: PointerEvent) => {\n        if (!popoverRef.current?.contains(event.target as Node)) {\n          unstable_batchedUpdates(() => onCloseRequest(event));\n        }\n      };\n      document.addEventListener(\"pointerdown\", handler, false);\n      return () => document.removeEventListener(\"pointerdown\", handler, false);\n    }\n  }, [onCloseRequest]);\n\n  return (\n    <div className=\"popover\" ref={popoverRef} tabIndex={-1}>\n      {children}\n    </div>\n  );\n};\n", "import clsx from \"clsx\";\nimport React from \"react\";\nimport type { ActionManager } from \"../actions/manager\";\nimport { CLASSES, DEFAULT_SIDEBAR, TOOL_TYPE } from \"../constants\";\nimport { showSelectedShapeActions } from \"../element\";\nimport type { NonDeletedExcalidrawElement } from \"../element/types\";\nimport type { Language } from \"../i18n\";\nimport { t } from \"../i18n\";\nimport { calculateScrollCenter } from \"../scene\";\nimport type {\n  AppProps,\n  AppState,\n  ExcalidrawProps,\n  BinaryFiles,\n  UIAppState,\n  AppClassProperties,\n} from \"../types\";\nimport { capitalizeString, isShallowEqual } from \"../utils\";\nimport { SelectedShapeActions, ShapesSwitcher } from \"./Actions\";\nimport { ErrorDialog } from \"./ErrorDialog\";\nimport { ImageExportDialog } from \"./ImageExportDialog\";\nimport { FixedSideContainer } from \"./FixedSideContainer\";\nimport { HintViewer } from \"./HintViewer\";\nimport { Island } from \"./Island\";\nimport { LoadingMessage } from \"./LoadingMessage\";\nimport { LockButton } from \"./LockButton\";\nimport { MobileMenu } from \"./MobileMenu\";\nimport { PasteChartDialog } from \"./PasteChartDialog\";\nimport { Section } from \"./Section\";\nimport { HelpDialog } from \"./HelpDialog\";\nimport Stack from \"./Stack\";\nimport { UserList } from \"./UserList\";\nimport { JSONExportDialog } from \"./JSONExportDialog\";\nimport { PenModeButton } from \"./PenModeButton\";\nimport { trackEvent } from \"../analytics\";\nimport { useDevice } from \"./App\";\nimport Footer from \"./footer/Footer\";\nimport { isSidebarDockedAtom } from \"./Sidebar/Sidebar\";\nimport { useAtom, useAtomValue } from \"../editor-jotai\";\nimport MainMenu from \"./main-menu/MainMenu\";\nimport { ActiveConfirmDialog } from \"./ActiveConfirmDialog\";\nimport { OverwriteConfirmDialog } from \"./OverwriteConfirm/OverwriteConfirm\";\nimport { HandButton } from \"./HandButton\";\nimport { isHandToolActive } from \"../appState\";\nimport { TunnelsContext, useInitializeTunnels } from \"../context/tunnels\";\nimport { LibraryIcon } from \"./icons\";\nimport { UIAppStateContext } from \"../context/ui-appState\";\nimport { DefaultSidebar } from \"./DefaultSidebar\";\nimport { EyeDropper, activeEyeDropperAtom } from \"./EyeDropper\";\nimport { mutateElement } from \"../element/mutateElement\";\nimport { ShapeCache } from \"../scene/ShapeCache\";\nimport Scene from \"../scene/Scene\";\nimport { LaserPointerButton } from \"./LaserPointerButton\";\nimport { TTDDialog } from \"./TTDDialog/TTDDialog\";\nimport { Stats } from \"./Stats\";\nimport { actionToggleStats } from \"../actions\";\nimport ElementLinkDialog from \"./ElementLinkDialog\";\n\nimport \"./LayerUI.scss\";\nimport \"./Toolbar.scss\";\n\ninterface LayerUIProps {\n  actionManager: ActionManager;\n  appState: UIAppState;\n  files: BinaryFiles;\n  canvas: HTMLCanvasElement;\n  setAppState: React.Component<any, AppState>[\"setState\"];\n  elements: readonly NonDeletedExcalidrawElement[];\n  onLockToggle: () => void;\n  onHandToolToggle: () => void;\n  onPenModeToggle: AppClassProperties[\"togglePenMode\"];\n  showExitZenModeBtn: boolean;\n  langCode: Language[\"code\"];\n  renderTopRightUI?: ExcalidrawProps[\"renderTopRightUI\"];\n  renderCustomStats?: ExcalidrawProps[\"renderCustomStats\"];\n  UIOptions: AppProps[\"UIOptions\"];\n  onExportImage: AppClassProperties[\"onExportImage\"];\n  renderWelcomeScreen: boolean;\n  children?: React.ReactNode;\n  app: AppClassProperties;\n  isCollaborating: boolean;\n  generateLinkForSelection?: AppProps[\"generateLinkForSelection\"];\n}\n\nconst DefaultMainMenu: React.FC<{\n  UIOptions: AppProps[\"UIOptions\"];\n}> = ({ UIOptions }) => {\n  return (\n    <MainMenu __fallback>\n      <MainMenu.DefaultItems.LoadScene />\n      <MainMenu.DefaultItems.SaveToActiveFile />\n      {/* FIXME we should to test for this inside the item itself */}\n      {UIOptions.canvasActions.export && <MainMenu.DefaultItems.Export />}\n      {/* FIXME we should to test for this inside the item itself */}\n      {UIOptions.canvasActions.saveAsImage && (\n        <MainMenu.DefaultItems.SaveAsImage />\n      )}\n      <MainMenu.DefaultItems.SearchMenu />\n      <MainMenu.DefaultItems.Help />\n      <MainMenu.DefaultItems.ClearCanvas />\n      <MainMenu.Separator />\n      <MainMenu.Group title=\"Excalidraw links\">\n        <MainMenu.DefaultItems.Socials />\n      </MainMenu.Group>\n      <MainMenu.Separator />\n      <MainMenu.DefaultItems.ToggleTheme />\n      <MainMenu.DefaultItems.ChangeCanvasBackground />\n    </MainMenu>\n  );\n};\n\nconst DefaultOverwriteConfirmDialog = () => {\n  return (\n    <OverwriteConfirmDialog __fallback>\n      <OverwriteConfirmDialog.Actions.SaveToDisk />\n      <OverwriteConfirmDialog.Actions.ExportToImage />\n    </OverwriteConfirmDialog>\n  );\n};\n\nconst LayerUI = ({\n  actionManager,\n  appState,\n  files,\n  setAppState,\n  elements,\n  canvas,\n  onLockToggle,\n  onHandToolToggle,\n  onPenModeToggle,\n  showExitZenModeBtn,\n  renderTopRightUI,\n  renderCustomStats,\n  UIOptions,\n  onExportImage,\n  renderWelcomeScreen,\n  children,\n  app,\n  isCollaborating,\n  generateLinkForSelection,\n}: LayerUIProps) => {\n  const device = useDevice();\n  const tunnels = useInitializeTunnels();\n\n  const TunnelsJotaiProvider = tunnels.tunnelsJotai.Provider;\n\n  const [eyeDropperState, setEyeDropperState] = useAtom(activeEyeDropperAtom);\n\n  const renderJSONExportDialog = () => {\n    if (!UIOptions.canvasActions.export) {\n      return null;\n    }\n\n    return (\n      <JSONExportDialog\n        elements={elements}\n        appState={appState}\n        files={files}\n        actionManager={actionManager}\n        exportOpts={UIOptions.canvasActions.export}\n        canvas={canvas}\n        setAppState={setAppState}\n      />\n    );\n  };\n\n  const renderImageExportDialog = () => {\n    if (\n      !UIOptions.canvasActions.saveAsImage ||\n      appState.openDialog?.name !== \"imageExport\"\n    ) {\n      return null;\n    }\n\n    return (\n      <ImageExportDialog\n        elements={elements}\n        appState={appState}\n        files={files}\n        actionManager={actionManager}\n        onExportImage={onExportImage}\n        onCloseRequest={() => setAppState({ openDialog: null })}\n        name={app.getName()}\n      />\n    );\n  };\n\n  const renderCanvasActions = () => (\n    <div style={{ position: \"relative\" }}>\n      {/* wrapping to Fragment stops React from occasionally complaining\n                about identical Keys */}\n      <tunnels.MainMenuTunnel.Out />\n      {renderWelcomeScreen && <tunnels.WelcomeScreenMenuHintTunnel.Out />}\n    </div>\n  );\n\n  const renderSelectedShapeActions = () => (\n    <Section\n      heading=\"selectedShapeActions\"\n      className={clsx(\"selected-shape-actions zen-mode-transition\", {\n        \"transition-left\": appState.zenModeEnabled,\n      })}\n    >\n      <Island\n        className={CLASSES.SHAPE_ACTIONS_MENU}\n        padding={2}\n        style={{\n          // we want to make sure this doesn't overflow so subtracting the\n          // approximate height of hamburgerMenu + footer\n          maxHeight: `${appState.height - 166}px`,\n        }}\n      >\n        <SelectedShapeActions\n          appState={appState}\n          elementsMap={app.scene.getNonDeletedElementsMap()}\n          renderAction={actionManager.renderAction}\n          app={app}\n        />\n      </Island>\n    </Section>\n  );\n\n  const renderFixedSideContainer = () => {\n    const shouldRenderSelectedShapeActions = showSelectedShapeActions(\n      appState,\n      elements,\n    );\n\n    const shouldShowStats =\n      appState.stats.open &&\n      !appState.zenModeEnabled &&\n      !appState.viewModeEnabled &&\n      appState.openDialog?.name !== \"elementLinkSelector\";\n\n    return (\n      <FixedSideContainer side=\"top\">\n        <div className=\"App-menu App-menu_top\">\n          <Stack.Col gap={6} className={clsx(\"App-menu_top__left\")}>\n            {renderCanvasActions()}\n            {shouldRenderSelectedShapeActions && renderSelectedShapeActions()}\n          </Stack.Col>\n          {!appState.viewModeEnabled &&\n            appState.openDialog?.name !== \"elementLinkSelector\" && (\n              <Section heading=\"shapes\" className=\"shapes-section\">\n                {(heading: React.ReactNode) => (\n                  <div style={{ position: \"relative\" }}>\n                    {renderWelcomeScreen && (\n                      <tunnels.WelcomeScreenToolbarHintTunnel.Out />\n                    )}\n                    <Stack.Col gap={4} align=\"start\">\n                      <Stack.Row\n                        gap={1}\n                        className={clsx(\"App-toolbar-container\", {\n                          \"zen-mode\": appState.zenModeEnabled,\n                        })}\n                      >\n                        <Island\n                          padding={1}\n                          className={clsx(\"App-toolbar\", {\n                            \"zen-mode\": appState.zenModeEnabled,\n                          })}\n                        >\n                          <HintViewer\n                            appState={appState}\n                            isMobile={device.editor.isMobile}\n                            device={device}\n                            app={app}\n                          />\n                          {heading}\n                          <Stack.Row gap={1}>\n                            <PenModeButton\n                              zenModeEnabled={appState.zenModeEnabled}\n                              checked={appState.penMode}\n                              onChange={() => onPenModeToggle(null)}\n                              title={t(\"toolBar.penMode\")}\n                              penDetected={appState.penDetected}\n                            />\n                            <LockButton\n                              checked={appState.activeTool.locked}\n                              onChange={onLockToggle}\n                              title={t(\"toolBar.lock\")}\n                            />\n\n                            <div className=\"App-toolbar__divider\" />\n\n                            <HandButton\n                              checked={isHandToolActive(appState)}\n                              onChange={() => onHandToolToggle()}\n                              title={t(\"toolBar.hand\")}\n                              isMobile\n                            />\n\n                            <ShapesSwitcher\n                              appState={appState}\n                              activeTool={appState.activeTool}\n                              UIOptions={UIOptions}\n                              app={app}\n                            />\n                          </Stack.Row>\n                        </Island>\n                        {isCollaborating && (\n                          <Island\n                            style={{\n                              marginLeft: 8,\n                              alignSelf: \"center\",\n                              height: \"fit-content\",\n                            }}\n                          >\n                            <LaserPointerButton\n                              title={t(\"toolBar.laser\")}\n                              checked={\n                                appState.activeTool.type === TOOL_TYPE.laser\n                              }\n                              onChange={() =>\n                                app.setActiveTool({ type: TOOL_TYPE.laser })\n                              }\n                              isMobile\n                            />\n                          </Island>\n                        )}\n                      </Stack.Row>\n                    </Stack.Col>\n                  </div>\n                )}\n              </Section>\n            )}\n          <div\n            className={clsx(\n              \"layer-ui__wrapper__top-right zen-mode-transition\",\n              {\n                \"transition-right\": appState.zenModeEnabled,\n              },\n            )}\n          >\n            {appState.collaborators.size > 0 && (\n              <UserList\n                collaborators={appState.collaborators}\n                userToFollow={appState.userToFollow?.socketId || null}\n              />\n            )}\n            {renderTopRightUI?.(device.editor.isMobile, appState)}\n            {!appState.viewModeEnabled &&\n              appState.openDialog?.name !== \"elementLinkSelector\" &&\n              // hide button when sidebar docked\n              (!isSidebarDocked ||\n                appState.openSidebar?.name !== DEFAULT_SIDEBAR.name) && (\n                <tunnels.DefaultSidebarTriggerTunnel.Out />\n              )}\n            {shouldShowStats && (\n              <Stats\n                app={app}\n                onClose={() => {\n                  actionManager.executeAction(actionToggleStats);\n                }}\n                renderCustomStats={renderCustomStats}\n              />\n            )}\n          </div>\n        </div>\n      </FixedSideContainer>\n    );\n  };\n\n  const renderSidebars = () => {\n    return (\n      <DefaultSidebar\n        __fallback\n        onDock={(docked) => {\n          trackEvent(\n            \"sidebar\",\n            `toggleDock (${docked ? \"dock\" : \"undock\"})`,\n            `(${device.editor.isMobile ? \"mobile\" : \"desktop\"})`,\n          );\n        }}\n      />\n    );\n  };\n\n  const isSidebarDocked = useAtomValue(isSidebarDockedAtom);\n\n  const layerUIJSX = (\n    <>\n      {/* ------------------------- tunneled UI ---------------------------- */}\n      {/* make sure we render host app components first so that we can detect\n          them first on initial render to optimize layout shift */}\n      {children}\n      {/* render component fallbacks. Can be rendered anywhere as they'll be\n          tunneled away. We only render tunneled components that actually\n        have defaults when host do not render anything. */}\n      <DefaultMainMenu UIOptions={UIOptions} />\n      <DefaultSidebar.Trigger\n        __fallback\n        icon={LibraryIcon}\n        title={capitalizeString(t(\"toolBar.library\"))}\n        onToggle={(open) => {\n          if (open) {\n            trackEvent(\n              \"sidebar\",\n              `${DEFAULT_SIDEBAR.name} (open)`,\n              `button (${device.editor.isMobile ? \"mobile\" : \"desktop\"})`,\n            );\n          }\n        }}\n        tab={DEFAULT_SIDEBAR.defaultTab}\n      >\n        {t(\"toolBar.library\")}\n      </DefaultSidebar.Trigger>\n      <DefaultOverwriteConfirmDialog />\n      {appState.openDialog?.name === \"ttd\" && <TTDDialog __fallback />}\n      {/* ------------------------------------------------------------------ */}\n\n      {appState.isLoading && <LoadingMessage delay={250} />}\n      {appState.errorMessage && (\n        <ErrorDialog onClose={() => setAppState({ errorMessage: null })}>\n          {appState.errorMessage}\n        </ErrorDialog>\n      )}\n      {eyeDropperState && !device.editor.isMobile && (\n        <EyeDropper\n          colorPickerType={eyeDropperState.colorPickerType}\n          onCancel={() => {\n            setEyeDropperState(null);\n          }}\n          onChange={(colorPickerType, color, selectedElements, { altKey }) => {\n            if (\n              colorPickerType !== \"elementBackground\" &&\n              colorPickerType !== \"elementStroke\"\n            ) {\n              return;\n            }\n\n            if (selectedElements.length) {\n              for (const element of selectedElements) {\n                mutateElement(\n                  element,\n                  {\n                    [altKey && eyeDropperState.swapPreviewOnAlt\n                      ? colorPickerType === \"elementBackground\"\n                        ? \"strokeColor\"\n                        : \"backgroundColor\"\n                      : colorPickerType === \"elementBackground\"\n                      ? \"backgroundColor\"\n                      : \"strokeColor\"]: color,\n                  },\n                  false,\n                );\n                ShapeCache.delete(element);\n              }\n              Scene.getScene(selectedElements[0])?.triggerUpdate();\n            } else if (colorPickerType === \"elementBackground\") {\n              setAppState({\n                currentItemBackgroundColor: color,\n              });\n            } else {\n              setAppState({ currentItemStrokeColor: color });\n            }\n          }}\n          onSelect={(color, event) => {\n            setEyeDropperState((state) => {\n              return state?.keepOpenOnAlt && event.altKey ? state : null;\n            });\n            eyeDropperState?.onSelect?.(color, event);\n          }}\n        />\n      )}\n      {appState.openDialog?.name === \"help\" && (\n        <HelpDialog\n          onClose={() => {\n            setAppState({ openDialog: null });\n          }}\n        />\n      )}\n      <ActiveConfirmDialog />\n      {appState.openDialog?.name === \"elementLinkSelector\" && (\n        <ElementLinkDialog\n          sourceElementId={appState.openDialog.sourceElementId}\n          onClose={() => {\n            setAppState({\n              openDialog: null,\n            });\n          }}\n          elementsMap={app.scene.getNonDeletedElementsMap()}\n          appState={appState}\n          generateLinkForSelection={generateLinkForSelection}\n        />\n      )}\n      <tunnels.OverwriteConfirmDialogTunnel.Out />\n      {renderImageExportDialog()}\n      {renderJSONExportDialog()}\n      {appState.pasteDialog.shown && (\n        <PasteChartDialog\n          setAppState={setAppState}\n          appState={appState}\n          onClose={() =>\n            setAppState({\n              pasteDialog: { shown: false, data: null },\n            })\n          }\n        />\n      )}\n      {device.editor.isMobile && (\n        <MobileMenu\n          app={app}\n          appState={appState}\n          elements={elements}\n          actionManager={actionManager}\n          renderJSONExportDialog={renderJSONExportDialog}\n          renderImageExportDialog={renderImageExportDialog}\n          setAppState={setAppState}\n          onLockToggle={onLockToggle}\n          onHandToolToggle={onHandToolToggle}\n          onPenModeToggle={onPenModeToggle}\n          renderTopRightUI={renderTopRightUI}\n          renderCustomStats={renderCustomStats}\n          renderSidebars={renderSidebars}\n          device={device}\n          renderWelcomeScreen={renderWelcomeScreen}\n          UIOptions={UIOptions}\n        />\n      )}\n      {!device.editor.isMobile && (\n        <>\n          <div\n            className=\"layer-ui__wrapper\"\n            style={\n              appState.openSidebar &&\n              isSidebarDocked &&\n              device.editor.canFitSidebar\n                ? { width: `calc(100% - var(--right-sidebar-width))` }\n                : {}\n            }\n          >\n            {renderWelcomeScreen && <tunnels.WelcomeScreenCenterTunnel.Out />}\n            {renderFixedSideContainer()}\n            <Footer\n              appState={appState}\n              actionManager={actionManager}\n              showExitZenModeBtn={showExitZenModeBtn}\n              renderWelcomeScreen={renderWelcomeScreen}\n            />\n            {appState.scrolledOutside && (\n              <button\n                type=\"button\"\n                className=\"scroll-back-to-content\"\n                onClick={() => {\n                  setAppState((appState) => ({\n                    ...calculateScrollCenter(elements, appState),\n                  }));\n                }}\n              >\n                {t(\"buttons.scrollBackToContent\")}\n              </button>\n            )}\n          </div>\n          {renderSidebars()}\n        </>\n      )}\n    </>\n  );\n\n  return (\n    <UIAppStateContext.Provider value={appState}>\n      <TunnelsJotaiProvider>\n        <TunnelsContext.Provider value={tunnels}>\n          {layerUIJSX}\n        </TunnelsContext.Provider>\n      </TunnelsJotaiProvider>\n    </UIAppStateContext.Provider>\n  );\n};\n\nconst stripIrrelevantAppStateProps = (appState: AppState): UIAppState => {\n  const {\n    suggestedBindings,\n    startBoundElement,\n    cursorButton,\n    scrollX,\n    scrollY,\n    ...ret\n  } = appState;\n  return ret;\n};\n\nconst areEqual = (prevProps: LayerUIProps, nextProps: LayerUIProps) => {\n  // short-circuit early\n  if (prevProps.children !== nextProps.children) {\n    return false;\n  }\n\n  const { canvas: _pC, appState: prevAppState, ...prev } = prevProps;\n  const { canvas: _nC, appState: nextAppState, ...next } = nextProps;\n\n  return (\n    isShallowEqual(\n      // asserting AppState because we're being passed the whole AppState\n      // but resolve to only the UI-relevant props\n      stripIrrelevantAppStateProps(prevAppState as AppState),\n      stripIrrelevantAppStateProps(nextAppState as AppState),\n      {\n        selectedElementIds: isShallowEqual,\n        selectedGroupIds: isShallowEqual,\n      },\n    ) && isShallowEqual(prev, next)\n  );\n};\n\nexport default React.memo(LayerUI, areEqual);\n", "import React, { useState } from \"react\";\nimport { t } from \"../i18n\";\n\nimport { Dialog } from \"./Dialog\";\nimport { useExcalidrawContainer } from \"./App\";\n\nexport const ErrorDialog = ({\n  children,\n  onClose,\n}: {\n  children?: React.ReactNode;\n  onClose?: () => void;\n}) => {\n  const [modalIsShown, setModalIsShown] = useState(!!children);\n  const { container: excalidrawContainer } = useExcalidrawContainer();\n\n  const handleClose = React.useCallback(() => {\n    setModalIsShown(false);\n\n    if (onClose) {\n      onClose();\n    }\n    // TODO: Fix the A11y issues so this is never needed since we should always focus on last active element\n    excalidrawContainer?.focus();\n  }, [onClose, excalidrawContainer]);\n\n  return (\n    <>\n      {modalIsShown && (\n        <Dialog\n          size=\"small\"\n          onCloseRequest={handleClose}\n          title={t(\"errorDialog.title\")}\n        >\n          <div style={{ whiteSpace: \"pre-wrap\" }}>{children}</div>\n        </Dialog>\n      )}\n    </>\n  );\n};\n", "import React, { useEffect, useRef, useState } from \"react\";\n\nimport type { ActionManager } from \"../actions/manager\";\nimport type { AppClassProperties, BinaryFiles, UIAppState } from \"../types\";\n\nimport {\n  actionExportWithDarkMode,\n  actionChangeExportBackground,\n  actionChangeExportEmbedScene,\n  actionChangeExportScale,\n  actionChangeProjectName,\n} from \"../actions/actionExport\";\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\nimport {\n  DEFAULT_EXPORT_PADDING,\n  EXPORT_IMAGE_TYPES,\n  isFirefox,\n  EXPORT_SCALES,\n} from \"../constants\";\n\nimport { canvasToBlob } from \"../data/blob\";\nimport { nativeFileSystemSupported } from \"../data/filesystem\";\nimport type { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { isSomeElementSelected } from \"../scene\";\nimport { exportToCanvas } from \"@excalidraw/utils/export\";\n\nimport { copyIcon, downloadIcon, helpIcon } from \"./icons\";\nimport { Dialog } from \"./Dialog\";\nimport { RadioGroup } from \"./RadioGroup\";\nimport { Switch } from \"./Switch\";\nimport { Tooltip } from \"./Tooltip\";\n\nimport \"./ImageExportDialog.scss\";\nimport { FilledButton } from \"./FilledButton\";\nimport { cloneJSON } from \"../utils\";\nimport { prepareElementsForExport } from \"../data\";\nimport { useCopyStatus } from \"../hooks/useCopiedIndicator\";\n\nconst supportsContextFilters =\n  \"filter\" in document.createElement(\"canvas\").getContext(\"2d\")!;\n\nexport const ErrorCanvasPreview = () => {\n  return (\n    <div>\n      <h3>{t(\"canvasError.cannotShowPreview\")}</h3>\n      <p>\n        <span>{t(\"canvasError.canvasTooBig\")}</span>\n      </p>\n      <em>({t(\"canvasError.canvasTooBigTip\")})</em>\n    </div>\n  );\n};\n\ntype ImageExportModalProps = {\n  appStateSnapshot: Readonly<UIAppState>;\n  elementsSnapshot: readonly NonDeletedExcalidrawElement[];\n  files: BinaryFiles;\n  actionManager: ActionManager;\n  onExportImage: AppClassProperties[\"onExportImage\"];\n  name: string;\n};\n\nconst ImageExportModal = ({\n  appStateSnapshot,\n  elementsSnapshot,\n  files,\n  actionManager,\n  onExportImage,\n  name,\n}: ImageExportModalProps) => {\n  const hasSelection = isSomeElementSelected(\n    elementsSnapshot,\n    appStateSnapshot,\n  );\n\n  const [projectName, setProjectName] = useState(name);\n  const [exportSelectionOnly, setExportSelectionOnly] = useState(hasSelection);\n  const [exportWithBackground, setExportWithBackground] = useState(\n    appStateSnapshot.exportBackground,\n  );\n  const [exportDarkMode, setExportDarkMode] = useState(\n    appStateSnapshot.exportWithDarkMode,\n  );\n  const [embedScene, setEmbedScene] = useState(\n    appStateSnapshot.exportEmbedScene,\n  );\n  const [exportScale, setExportScale] = useState(appStateSnapshot.exportScale);\n\n  const previewRef = useRef<HTMLDivElement>(null);\n  const [renderError, setRenderError] = useState<Error | null>(null);\n\n  const { onCopy, copyStatus, resetCopyStatus } = useCopyStatus();\n\n  useEffect(() => {\n    // if user changes setting right after export to clipboard, reset the status\n    // so they don't have to wait for the timeout to click the button again\n    resetCopyStatus();\n  }, [\n    projectName,\n    exportWithBackground,\n    exportDarkMode,\n    exportScale,\n    embedScene,\n    resetCopyStatus,\n  ]);\n\n  const { exportedElements, exportingFrame } = prepareElementsForExport(\n    elementsSnapshot,\n    appStateSnapshot,\n    exportSelectionOnly,\n  );\n\n  useEffect(() => {\n    const previewNode = previewRef.current;\n    if (!previewNode) {\n      return;\n    }\n    const maxWidth = previewNode.offsetWidth;\n    const maxHeight = previewNode.offsetHeight;\n    if (!maxWidth) {\n      return;\n    }\n\n    exportToCanvas({\n      elements: exportedElements,\n      appState: {\n        ...appStateSnapshot,\n        name: projectName,\n        exportBackground: exportWithBackground,\n        exportWithDarkMode: exportDarkMode,\n        exportScale,\n        exportEmbedScene: embedScene,\n      },\n      files,\n      exportPadding: DEFAULT_EXPORT_PADDING,\n      maxWidthOrHeight: Math.max(maxWidth, maxHeight),\n      exportingFrame,\n    })\n      .then((canvas) => {\n        setRenderError(null);\n        // if converting to blob fails, there's some problem that will\n        // likely prevent preview and export (e.g. canvas too big)\n        return canvasToBlob(canvas)\n          .then(() => {\n            previewNode.replaceChildren(canvas);\n          })\n          .catch((e) => {\n            if (e.name === \"CANVAS_POSSIBLY_TOO_BIG\") {\n              throw new Error(t(\"canvasError.canvasTooBig\"));\n            }\n            throw e;\n          });\n      })\n      .catch((error) => {\n        console.error(error);\n        setRenderError(error);\n      });\n  }, [\n    appStateSnapshot,\n    files,\n    exportedElements,\n    exportingFrame,\n    projectName,\n    exportWithBackground,\n    exportDarkMode,\n    exportScale,\n    embedScene,\n  ]);\n\n  return (\n    <div className=\"ImageExportModal\">\n      <h3>{t(\"imageExportDialog.header\")}</h3>\n      <div className=\"ImageExportModal__preview\">\n        <div className=\"ImageExportModal__preview__canvas\" ref={previewRef}>\n          {renderError && <ErrorCanvasPreview />}\n        </div>\n        <div className=\"ImageExportModal__preview__filename\">\n          {!nativeFileSystemSupported && (\n            <input\n              type=\"text\"\n              className=\"TextInput\"\n              value={projectName}\n              style={{ width: \"30ch\" }}\n              onChange={(event) => {\n                setProjectName(event.target.value);\n                actionManager.executeAction(\n                  actionChangeProjectName,\n                  \"ui\",\n                  event.target.value,\n                );\n              }}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"ImageExportModal__settings\">\n        <h3>{t(\"imageExportDialog.header\")}</h3>\n        {hasSelection && (\n          <ExportSetting\n            label={t(\"imageExportDialog.label.onlySelected\")}\n            name=\"exportOnlySelected\"\n          >\n            <Switch\n              name=\"exportOnlySelected\"\n              checked={exportSelectionOnly}\n              onChange={(checked) => {\n                setExportSelectionOnly(checked);\n              }}\n            />\n          </ExportSetting>\n        )}\n        <ExportSetting\n          label={t(\"imageExportDialog.label.withBackground\")}\n          name=\"exportBackgroundSwitch\"\n        >\n          <Switch\n            name=\"exportBackgroundSwitch\"\n            checked={exportWithBackground}\n            onChange={(checked) => {\n              setExportWithBackground(checked);\n              actionManager.executeAction(\n                actionChangeExportBackground,\n                \"ui\",\n                checked,\n              );\n            }}\n          />\n        </ExportSetting>\n        {supportsContextFilters && (\n          <ExportSetting\n            label={t(\"imageExportDialog.label.darkMode\")}\n            name=\"exportDarkModeSwitch\"\n          >\n            <Switch\n              name=\"exportDarkModeSwitch\"\n              checked={exportDarkMode}\n              onChange={(checked) => {\n                setExportDarkMode(checked);\n                actionManager.executeAction(\n                  actionExportWithDarkMode,\n                  \"ui\",\n                  checked,\n                );\n              }}\n            />\n          </ExportSetting>\n        )}\n        <ExportSetting\n          label={t(\"imageExportDialog.label.embedScene\")}\n          tooltip={t(\"imageExportDialog.tooltip.embedScene\")}\n          name=\"exportEmbedSwitch\"\n        >\n          <Switch\n            name=\"exportEmbedSwitch\"\n            checked={embedScene}\n            onChange={(checked) => {\n              setEmbedScene(checked);\n              actionManager.executeAction(\n                actionChangeExportEmbedScene,\n                \"ui\",\n                checked,\n              );\n            }}\n          />\n        </ExportSetting>\n        <ExportSetting\n          label={t(\"imageExportDialog.label.scale\")}\n          name=\"exportScale\"\n        >\n          <RadioGroup\n            name=\"exportScale\"\n            value={exportScale}\n            onChange={(scale) => {\n              setExportScale(scale);\n              actionManager.executeAction(actionChangeExportScale, \"ui\", scale);\n            }}\n            choices={EXPORT_SCALES.map((scale) => ({\n              value: scale,\n              label: `${scale}\\u00d7`,\n            }))}\n          />\n        </ExportSetting>\n\n        <div className=\"ImageExportModal__settings__buttons\">\n          <FilledButton\n            className=\"ImageExportModal__settings__buttons__button\"\n            label={t(\"imageExportDialog.title.exportToPng\")}\n            onClick={() =>\n              onExportImage(EXPORT_IMAGE_TYPES.png, exportedElements, {\n                exportingFrame,\n              })\n            }\n            icon={downloadIcon}\n          >\n            {t(\"imageExportDialog.button.exportToPng\")}\n          </FilledButton>\n          <FilledButton\n            className=\"ImageExportModal__settings__buttons__button\"\n            label={t(\"imageExportDialog.title.exportToSvg\")}\n            onClick={() =>\n              onExportImage(EXPORT_IMAGE_TYPES.svg, exportedElements, {\n                exportingFrame,\n              })\n            }\n            icon={downloadIcon}\n          >\n            {t(\"imageExportDialog.button.exportToSvg\")}\n          </FilledButton>\n          {(probablySupportsClipboardBlob || isFirefox) && (\n            <FilledButton\n              className=\"ImageExportModal__settings__buttons__button\"\n              label={t(\"imageExportDialog.title.copyPngToClipboard\")}\n              status={copyStatus}\n              onClick={async () => {\n                await onExportImage(\n                  EXPORT_IMAGE_TYPES.clipboard,\n                  exportedElements,\n                  {\n                    exportingFrame,\n                  },\n                );\n                onCopy();\n              }}\n              icon={copyIcon}\n            >\n              {t(\"imageExportDialog.button.copyPngToClipboard\")}\n            </FilledButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\ntype ExportSettingProps = {\n  label: string;\n  children: React.ReactNode;\n  tooltip?: string;\n  name?: string;\n};\n\nconst ExportSetting = ({\n  label,\n  children,\n  tooltip,\n  name,\n}: ExportSettingProps) => {\n  return (\n    <div className=\"ImageExportModal__settings__setting\" title={label}>\n      <label\n        htmlFor={name}\n        className=\"ImageExportModal__settings__setting__label\"\n      >\n        {label}\n        {tooltip && (\n          <Tooltip label={tooltip} long={true}>\n            {helpIcon}\n          </Tooltip>\n        )}\n      </label>\n      <div className=\"ImageExportModal__settings__setting__content\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport const ImageExportDialog = ({\n  elements,\n  appState,\n  files,\n  actionManager,\n  onExportImage,\n  onCloseRequest,\n  name,\n}: {\n  appState: UIAppState;\n  elements: readonly NonDeletedExcalidrawElement[];\n  files: BinaryFiles;\n  actionManager: ActionManager;\n  onExportImage: AppClassProperties[\"onExportImage\"];\n  onCloseRequest: () => void;\n  name: string;\n}) => {\n  // we need to take a snapshot so that the exported state can't be modified\n  // while the dialog is open\n  const [{ appStateSnapshot, elementsSnapshot }] = useState(() => {\n    return {\n      appStateSnapshot: cloneJSON(appState),\n      elementsSnapshot: cloneJSON(elements),\n    };\n  });\n\n  return (\n    <Dialog onCloseRequest={onCloseRequest} size=\"wide\" title={false}>\n      <ImageExportModal\n        elementsSnapshot={elementsSnapshot}\n        appStateSnapshot={appStateSnapshot}\n        files={files}\n        actionManager={actionManager}\n        onExportImage={onExportImage}\n        name={name}\n      />\n    </Dialog>\n  );\n};\n", "import clsx from \"clsx\";\nimport \"./RadioGroup.scss\";\n\nexport type RadioGroupChoice<T> = {\n  value: T;\n  label: React.ReactNode;\n  ariaLabel?: string;\n};\n\nexport type RadioGroupProps<T> = {\n  choices: RadioGroupChoice<T>[];\n  value: T;\n  onChange: (value: T) => void;\n  name: string;\n};\n\nexport const RadioGroup = function <T>({\n  onChange,\n  value,\n  choices,\n  name,\n}: RadioGroupProps<T>) {\n  return (\n    <div className=\"RadioGroup\">\n      {choices.map((choice) => (\n        <div\n          className={clsx(\"RadioGroup__choice\", {\n            active: choice.value === value,\n          })}\n          key={String(choice.value)}\n          title={choice.ariaLabel}\n        >\n          <input\n            name={name}\n            type=\"radio\"\n            checked={choice.value === value}\n            onChange={() => onChange(choice.value)}\n            aria-label={choice.ariaLabel}\n          />\n          {choice.label}\n        </div>\n      ))}\n    </div>\n  );\n};\n", "import clsx from \"clsx\";\n\nimport \"./Switch.scss\";\n\nexport type SwitchProps = {\n  name: string;\n  checked: boolean;\n  title?: string;\n  onChange: (value: boolean) => void;\n  disabled?: boolean;\n};\n\nexport const Switch = ({\n  title,\n  name,\n  checked,\n  onChange,\n  disabled = false,\n}: SwitchProps) => {\n  return (\n    <div className={clsx(\"Switch\", { toggled: checked, disabled })}>\n      <input\n        name={name}\n        id={name}\n        title={title}\n        type=\"checkbox\"\n        checked={checked}\n        disabled={disabled}\n        onChange={() => onChange(!checked)}\n        onKeyDown={(event) => {\n          if (event.key === \" \") {\n            onChange(!checked);\n          }\n        }}\n      />\n    </div>\n  );\n};\n", "import React, { forwardRef, useState } from \"react\";\nimport clsx from \"clsx\";\n\nimport \"./FilledButton.scss\";\nimport { AbortError } from \"../errors\";\nimport Spinner from \"./Spinner\";\nimport { isPromiseLike } from \"../utils\";\nimport { tablerCheckIcon } from \"./icons\";\n\nexport type ButtonVariant = \"filled\" | \"outlined\" | \"icon\";\nexport type ButtonColor =\n  | \"primary\"\n  | \"danger\"\n  | \"warning\"\n  | \"muted\"\n  | \"success\";\nexport type ButtonSize = \"medium\" | \"large\";\n\nexport type FilledButtonProps = {\n  label: string;\n\n  children?: React.ReactNode;\n  onClick?: (event: React.MouseEvent) => void;\n  status?: null | \"loading\" | \"success\";\n\n  variant?: ButtonVariant;\n  color?: ButtonColor;\n  size?: ButtonSize;\n  className?: string;\n  fullWidth?: boolean;\n\n  icon?: React.ReactNode;\n};\n\nexport const FilledButton = forwardRef<HTMLButtonElement, FilledButtonProps>(\n  (\n    {\n      children,\n      icon,\n      onClick,\n      label,\n      variant = \"filled\",\n      color = \"primary\",\n      size = \"medium\",\n      fullWidth,\n      className,\n      status,\n    },\n    ref,\n  ) => {\n    const [isLoading, setIsLoading] = useState(false);\n\n    const _onClick = async (event: React.MouseEvent) => {\n      const ret = onClick?.(event);\n\n      if (isPromiseLike(ret)) {\n        // delay loading state to prevent flicker in case of quick response\n        const timer = window.setTimeout(() => {\n          setIsLoading(true);\n        }, 50);\n        try {\n          await ret;\n        } catch (error: any) {\n          if (!(error instanceof AbortError)) {\n            throw error;\n          } else {\n            console.warn(error);\n          }\n        } finally {\n          clearTimeout(timer);\n          setIsLoading(false);\n        }\n      }\n    };\n\n    const _status = isLoading ? \"loading\" : status;\n    color = _status === \"success\" ? \"success\" : color;\n\n    return (\n      <button\n        className={clsx(\n          \"ExcButton\",\n          `ExcButton--color-${color}`,\n          `ExcButton--variant-${variant}`,\n          `ExcButton--size-${size}`,\n          `ExcButton--status-${_status}`,\n          { \"ExcButton--fullWidth\": fullWidth },\n          className,\n        )}\n        onClick={_onClick}\n        type=\"button\"\n        aria-label={label}\n        ref={ref}\n        disabled={_status === \"loading\" || _status === \"success\"}\n      >\n        <div className=\"ExcButton__contents\">\n          {_status === \"loading\" ? (\n            <Spinner className=\"ExcButton__statusIcon\" />\n          ) : (\n            _status === \"success\" && (\n              <div className=\"ExcButton__statusIcon\">{tablerCheckIcon}</div>\n            )\n          )}\n          {icon && (\n            <div className=\"ExcButton__icon\" aria-hidden>\n              {icon}\n            </div>\n          )}\n          {variant !== \"icon\" && (children ?? label)}\n        </div>\n      </button>\n    );\n  },\n);\n", "import { useCallback, useRef, useState } from \"react\";\n\nconst TIMEOUT = 2000;\n\nexport const useCopyStatus = () => {\n  const [copyStatus, setCopyStatus] = useState<\"success\" | null>(null);\n  const timeoutRef = useRef<number>(0);\n\n  const onCopy = () => {\n    clearTimeout(timeoutRef.current);\n    setCopyStatus(\"success\");\n\n    timeoutRef.current = window.setTimeout(() => {\n      setCopyStatus(null);\n    }, TIMEOUT);\n  };\n\n  const resetCopyStatus = useCallback(() => {\n    setCopyStatus(null);\n  }, []);\n\n  return {\n    copyStatus,\n    resetCopyStatus,\n    onCopy,\n  };\n};\n", "import \"./FixedSideContainer.scss\";\n\nimport React from \"react\";\nimport clsx from \"clsx\";\n\ntype FixedSideContainerProps = {\n  children: React.ReactNode;\n  side: \"top\" | \"left\" | \"right\";\n  className?: string;\n};\n\nexport const FixedSideContainer = ({\n  children,\n  side,\n  className,\n}: FixedSideContainerProps) => (\n  <div\n    className={clsx(\n      \"FixedSideContainer\",\n      `FixedSideContainer_side_${side}`,\n      className,\n    )}\n  >\n    {children}\n  </div>\n);\n", "import {\n  HEADING_DOWN,\n  HEADING_LEFT,\n  HEADING_RIGHT,\n  HEADING_UP,\n  compareHeading,\n  headingForPointFromElement,\n  type Heading,\n} from \"./heading\";\nimport { bindLinearElement } from \"./binding\";\nimport { LinearElementEditor } from \"./linearElementEditor\";\nimport { newArrowElement, newElement } from \"./newElement\";\nimport {\n  type ElementsMap,\n  type ExcalidrawBindableElement,\n  type ExcalidrawElement,\n  type ExcalidrawFlowchartNodeElement,\n  type NonDeletedSceneElementsMap,\n  type Ordered,\n  type OrderedExcalidrawElement,\n} from \"./types\";\nimport { KEYS } from \"../keys\";\nimport type { AppState, PendingExcalidrawElements } from \"../types\";\nimport { mutateElement } from \"./mutateElement\";\nimport { elementOverlapsWithFrame, elementsAreInFrameBounds } from \"../frame\";\nimport {\n  isBindableElement,\n  isElbowArrow,\n  isFrameElement,\n  isFlowchartNodeElement,\n} from \"./typeChecks\";\nimport { invariant, toBrandedType } from \"../utils\";\nimport { pointFrom, type LocalPoint } from \"@excalidraw/math\";\nimport { aabbForElement } from \"../shapes\";\nimport { updateElbowArrowPoints } from \"./elbowArrow\";\n\ntype LinkDirection = \"up\" | \"right\" | \"down\" | \"left\";\n\nconst VERTICAL_OFFSET = 100;\nconst HORIZONTAL_OFFSET = 100;\n\nexport const getLinkDirectionFromKey = (key: string): LinkDirection => {\n  switch (key) {\n    case KEYS.ARROW_UP:\n      return \"up\";\n    case KEYS.ARROW_DOWN:\n      return \"down\";\n    case KEYS.ARROW_RIGHT:\n      return \"right\";\n    case KEYS.ARROW_LEFT:\n      return \"left\";\n    default:\n      return \"right\";\n  }\n};\n\nconst getNodeRelatives = (\n  type: \"predecessors\" | \"successors\",\n  node: ExcalidrawBindableElement,\n  elementsMap: ElementsMap,\n  direction: LinkDirection,\n) => {\n  const items = [...elementsMap.values()].reduce(\n    (acc: { relative: ExcalidrawBindableElement; heading: Heading }[], el) => {\n      let oppositeBinding;\n      if (\n        isElbowArrow(el) &&\n        // we want check existence of the opposite binding, in the direction\n        // we're interested in\n        (oppositeBinding =\n          el[type === \"predecessors\" ? \"startBinding\" : \"endBinding\"]) &&\n        // similarly, we need to filter only arrows bound to target node\n        el[type === \"predecessors\" ? \"endBinding\" : \"startBinding\"]\n          ?.elementId === node.id\n      ) {\n        const relative = elementsMap.get(oppositeBinding.elementId);\n\n        if (!relative) {\n          return acc;\n        }\n\n        invariant(\n          isBindableElement(relative),\n          \"not an ExcalidrawBindableElement\",\n        );\n\n        const edgePoint = (\n          type === \"predecessors\" ? el.points[el.points.length - 1] : [0, 0]\n        ) as Readonly<LocalPoint>;\n\n        const heading = headingForPointFromElement(node, aabbForElement(node), [\n          edgePoint[0] + el.x,\n          edgePoint[1] + el.y,\n        ] as Readonly<LocalPoint>);\n\n        acc.push({\n          relative,\n          heading,\n        });\n      }\n      return acc;\n    },\n    [],\n  );\n\n  switch (direction) {\n    case \"up\":\n      return items\n        .filter((item) => compareHeading(item.heading, HEADING_UP))\n        .map((item) => item.relative);\n    case \"down\":\n      return items\n        .filter((item) => compareHeading(item.heading, HEADING_DOWN))\n        .map((item) => item.relative);\n    case \"right\":\n      return items\n        .filter((item) => compareHeading(item.heading, HEADING_RIGHT))\n        .map((item) => item.relative);\n    case \"left\":\n      return items\n        .filter((item) => compareHeading(item.heading, HEADING_LEFT))\n        .map((item) => item.relative);\n  }\n};\n\nconst getSuccessors = (\n  node: ExcalidrawBindableElement,\n  elementsMap: ElementsMap,\n  direction: LinkDirection,\n) => {\n  return getNodeRelatives(\"successors\", node, elementsMap, direction);\n};\n\nexport const getPredecessors = (\n  node: ExcalidrawBindableElement,\n  elementsMap: ElementsMap,\n  direction: LinkDirection,\n) => {\n  return getNodeRelatives(\"predecessors\", node, elementsMap, direction);\n};\n\nconst getOffsets = (\n  element: ExcalidrawFlowchartNodeElement,\n  linkedNodes: ExcalidrawElement[],\n  direction: LinkDirection,\n) => {\n  const _HORIZONTAL_OFFSET = HORIZONTAL_OFFSET + element.width;\n\n  // check if vertical space or horizontal space is available first\n  if (direction === \"up\" || direction === \"down\") {\n    const _VERTICAL_OFFSET = VERTICAL_OFFSET + element.height;\n    // check vertical space\n    const minX = element.x;\n    const maxX = element.x + element.width;\n\n    // vertical space is available\n    if (\n      linkedNodes.every(\n        (linkedNode) =>\n          linkedNode.x + linkedNode.width < minX || linkedNode.x > maxX,\n      )\n    ) {\n      return {\n        x: 0,\n        y: _VERTICAL_OFFSET * (direction === \"up\" ? -1 : 1),\n      };\n    }\n  } else if (direction === \"right\" || direction === \"left\") {\n    const minY = element.y;\n    const maxY = element.y + element.height;\n\n    if (\n      linkedNodes.every(\n        (linkedNode) =>\n          linkedNode.y + linkedNode.height < minY || linkedNode.y > maxY,\n      )\n    ) {\n      return {\n        x:\n          (HORIZONTAL_OFFSET + element.width) * (direction === \"left\" ? -1 : 1),\n        y: 0,\n      };\n    }\n  }\n\n  if (direction === \"up\" || direction === \"down\") {\n    const _VERTICAL_OFFSET = VERTICAL_OFFSET + element.height;\n    const y = linkedNodes.length === 0 ? _VERTICAL_OFFSET : _VERTICAL_OFFSET;\n    const x =\n      linkedNodes.length === 0\n        ? 0\n        : (linkedNodes.length + 1) % 2 === 0\n        ? ((linkedNodes.length + 1) / 2) * _HORIZONTAL_OFFSET\n        : (linkedNodes.length / 2) * _HORIZONTAL_OFFSET * -1;\n\n    if (direction === \"up\") {\n      return {\n        x,\n        y: y * -1,\n      };\n    }\n\n    return {\n      x,\n      y,\n    };\n  }\n\n  const _VERTICAL_OFFSET = VERTICAL_OFFSET + element.height;\n  const x =\n    (linkedNodes.length === 0 ? HORIZONTAL_OFFSET : HORIZONTAL_OFFSET) +\n    element.width;\n  const y =\n    linkedNodes.length === 0\n      ? 0\n      : (linkedNodes.length + 1) % 2 === 0\n      ? ((linkedNodes.length + 1) / 2) * _VERTICAL_OFFSET\n      : (linkedNodes.length / 2) * _VERTICAL_OFFSET * -1;\n\n  if (direction === \"left\") {\n    return {\n      x: x * -1,\n      y,\n    };\n  }\n  return {\n    x,\n    y,\n  };\n};\n\nconst addNewNode = (\n  element: ExcalidrawFlowchartNodeElement,\n  elementsMap: ElementsMap,\n  appState: AppState,\n  direction: LinkDirection,\n) => {\n  const successors = getSuccessors(element, elementsMap, direction);\n  const predeccessors = getPredecessors(element, elementsMap, direction);\n\n  const offsets = getOffsets(\n    element,\n    [...successors, ...predeccessors],\n    direction,\n  );\n\n  const nextNode = newElement({\n    type: element.type,\n    x: element.x + offsets.x,\n    y: element.y + offsets.y,\n    // TODO: extract this to a util\n    width: element.width,\n    height: element.height,\n    roundness: element.roundness,\n    roughness: element.roughness,\n    backgroundColor: element.backgroundColor,\n    strokeColor: element.strokeColor,\n    strokeWidth: element.strokeWidth,\n    opacity: element.opacity,\n    fillStyle: element.fillStyle,\n    strokeStyle: element.strokeStyle,\n  });\n\n  invariant(\n    isFlowchartNodeElement(nextNode),\n    \"not an ExcalidrawFlowchartNodeElement\",\n  );\n\n  const bindingArrow = createBindingArrow(\n    element,\n    nextNode,\n    elementsMap,\n    direction,\n    appState,\n  );\n\n  return {\n    nextNode,\n    bindingArrow,\n  };\n};\n\nexport const addNewNodes = (\n  startNode: ExcalidrawFlowchartNodeElement,\n  elementsMap: ElementsMap,\n  appState: AppState,\n  direction: LinkDirection,\n  numberOfNodes: number,\n) => {\n  // always start from 0 and distribute evenly\n  const newNodes: ExcalidrawElement[] = [];\n\n  for (let i = 0; i < numberOfNodes; i++) {\n    let nextX: number;\n    let nextY: number;\n    if (direction === \"left\" || direction === \"right\") {\n      const totalHeight =\n        VERTICAL_OFFSET * (numberOfNodes - 1) +\n        numberOfNodes * startNode.height;\n\n      const startY = startNode.y + startNode.height / 2 - totalHeight / 2;\n\n      let offsetX = HORIZONTAL_OFFSET + startNode.width;\n      if (direction === \"left\") {\n        offsetX *= -1;\n      }\n      nextX = startNode.x + offsetX;\n      const offsetY = (VERTICAL_OFFSET + startNode.height) * i;\n      nextY = startY + offsetY;\n    } else {\n      const totalWidth =\n        HORIZONTAL_OFFSET * (numberOfNodes - 1) +\n        numberOfNodes * startNode.width;\n      const startX = startNode.x + startNode.width / 2 - totalWidth / 2;\n      let offsetY = VERTICAL_OFFSET + startNode.height;\n\n      if (direction === \"up\") {\n        offsetY *= -1;\n      }\n      nextY = startNode.y + offsetY;\n      const offsetX = (HORIZONTAL_OFFSET + startNode.width) * i;\n      nextX = startX + offsetX;\n    }\n\n    const nextNode = newElement({\n      type: startNode.type,\n      x: nextX,\n      y: nextY,\n      // TODO: extract this to a util\n      width: startNode.width,\n      height: startNode.height,\n      roundness: startNode.roundness,\n      roughness: startNode.roughness,\n      backgroundColor: startNode.backgroundColor,\n      strokeColor: startNode.strokeColor,\n      strokeWidth: startNode.strokeWidth,\n      opacity: startNode.opacity,\n      fillStyle: startNode.fillStyle,\n      strokeStyle: startNode.strokeStyle,\n    });\n\n    invariant(\n      isFlowchartNodeElement(nextNode),\n      \"not an ExcalidrawFlowchartNodeElement\",\n    );\n\n    const bindingArrow = createBindingArrow(\n      startNode,\n      nextNode,\n      elementsMap,\n      direction,\n      appState,\n    );\n\n    newNodes.push(nextNode);\n    newNodes.push(bindingArrow);\n  }\n\n  return newNodes;\n};\n\nconst createBindingArrow = (\n  startBindingElement: ExcalidrawFlowchartNodeElement,\n  endBindingElement: ExcalidrawFlowchartNodeElement,\n  elementsMap: ElementsMap,\n  direction: LinkDirection,\n  appState: AppState,\n) => {\n  let startX: number;\n  let startY: number;\n\n  const PADDING = 6;\n\n  switch (direction) {\n    case \"up\": {\n      startX = startBindingElement.x + startBindingElement.width / 2;\n      startY = startBindingElement.y - PADDING;\n      break;\n    }\n    case \"down\": {\n      startX = startBindingElement.x + startBindingElement.width / 2;\n      startY = startBindingElement.y + startBindingElement.height + PADDING;\n      break;\n    }\n    case \"right\": {\n      startX = startBindingElement.x + startBindingElement.width + PADDING;\n      startY = startBindingElement.y + startBindingElement.height / 2;\n      break;\n    }\n    case \"left\": {\n      startX = startBindingElement.x - PADDING;\n      startY = startBindingElement.y + startBindingElement.height / 2;\n      break;\n    }\n  }\n\n  let endX: number;\n  let endY: number;\n\n  switch (direction) {\n    case \"up\": {\n      endX = endBindingElement.x + endBindingElement.width / 2 - startX;\n      endY = endBindingElement.y + endBindingElement.height - startY + PADDING;\n      break;\n    }\n    case \"down\": {\n      endX = endBindingElement.x + endBindingElement.width / 2 - startX;\n      endY = endBindingElement.y - startY - PADDING;\n      break;\n    }\n    case \"right\": {\n      endX = endBindingElement.x - startX - PADDING;\n      endY = endBindingElement.y - startY + endBindingElement.height / 2;\n      break;\n    }\n    case \"left\": {\n      endX = endBindingElement.x + endBindingElement.width - startX + PADDING;\n      endY = endBindingElement.y - startY + endBindingElement.height / 2;\n      break;\n    }\n  }\n\n  const bindingArrow = newArrowElement({\n    type: \"arrow\",\n    x: startX,\n    y: startY,\n    startArrowhead: null,\n    endArrowhead: appState.currentItemEndArrowhead,\n    strokeColor: startBindingElement.strokeColor,\n    strokeStyle: startBindingElement.strokeStyle,\n    strokeWidth: startBindingElement.strokeWidth,\n    opacity: startBindingElement.opacity,\n    roughness: startBindingElement.roughness,\n    points: [pointFrom(0, 0), pointFrom(endX, endY)],\n    elbowed: true,\n  });\n\n  bindLinearElement(\n    bindingArrow,\n    startBindingElement,\n    \"start\",\n    elementsMap as NonDeletedSceneElementsMap,\n  );\n  bindLinearElement(\n    bindingArrow,\n    endBindingElement,\n    \"end\",\n    elementsMap as NonDeletedSceneElementsMap,\n  );\n\n  const changedElements = new Map<string, OrderedExcalidrawElement>();\n  changedElements.set(\n    startBindingElement.id,\n    startBindingElement as OrderedExcalidrawElement,\n  );\n  changedElements.set(\n    endBindingElement.id,\n    endBindingElement as OrderedExcalidrawElement,\n  );\n  changedElements.set(\n    bindingArrow.id,\n    bindingArrow as OrderedExcalidrawElement,\n  );\n\n  LinearElementEditor.movePoints(bindingArrow, [\n    {\n      index: 1,\n      point: bindingArrow.points[1],\n    },\n  ]);\n\n  const update = updateElbowArrowPoints(\n    bindingArrow,\n    toBrandedType<NonDeletedSceneElementsMap>(\n      new Map([\n        ...elementsMap.entries(),\n        [startBindingElement.id, startBindingElement],\n        [endBindingElement.id, endBindingElement],\n        [bindingArrow.id, bindingArrow],\n      ] as [string, Ordered<ExcalidrawElement>][]),\n    ),\n    { points: bindingArrow.points },\n  );\n\n  return {\n    ...bindingArrow,\n    ...update,\n  };\n};\n\nexport class FlowChartNavigator {\n  isExploring: boolean = false;\n  // nodes that are ONE link away (successor and predecessor both included)\n  private sameLevelNodes: ExcalidrawElement[] = [];\n  private sameLevelIndex: number = 0;\n  // set it to the opposite of the defalut creation direction\n  private direction: LinkDirection | null = null;\n  // for speedier navigation\n  private visitedNodes: Set<ExcalidrawElement[\"id\"]> = new Set();\n\n  clear() {\n    this.isExploring = false;\n    this.sameLevelNodes = [];\n    this.sameLevelIndex = 0;\n    this.direction = null;\n    this.visitedNodes.clear();\n  }\n\n  exploreByDirection(\n    element: ExcalidrawElement,\n    elementsMap: ElementsMap,\n    direction: LinkDirection,\n  ): ExcalidrawElement[\"id\"] | null {\n    if (!isBindableElement(element)) {\n      return null;\n    }\n\n    // clear if going at a different direction\n    if (direction !== this.direction) {\n      this.clear();\n    }\n\n    // add the current node to the visited\n    if (!this.visitedNodes.has(element.id)) {\n      this.visitedNodes.add(element.id);\n    }\n\n    /**\n     * CASE:\n     * - already started exploring, AND\n     * - there are multiple nodes at the same level, AND\n     * - still going at the same direction, AND\n     *\n     * RESULT:\n     * - loop through nodes at the same level\n     *\n     * WHY:\n     * - provides user the capability to loop through nodes at the same level\n     */\n    if (\n      this.isExploring &&\n      direction === this.direction &&\n      this.sameLevelNodes.length > 1\n    ) {\n      this.sameLevelIndex =\n        (this.sameLevelIndex + 1) % this.sameLevelNodes.length;\n\n      return this.sameLevelNodes[this.sameLevelIndex].id;\n    }\n\n    const nodes = [\n      ...getSuccessors(element, elementsMap, direction),\n      ...getPredecessors(element, elementsMap, direction),\n    ];\n\n    /**\n     * CASE:\n     * - just started exploring at the given direction\n     *\n     * RESULT:\n     * - go to the first node in the given direction\n     */\n    if (nodes.length > 0) {\n      this.sameLevelIndex = 0;\n      this.isExploring = true;\n      this.sameLevelNodes = nodes;\n      this.direction = direction;\n      this.visitedNodes.add(nodes[0].id);\n\n      return nodes[0].id;\n    }\n\n    /**\n     * CASE:\n     * - (just started exploring or still going at the same direction) OR\n     * - there're no nodes at the given direction\n     *\n     * RESULT:\n     * - go to some other unvisited linked node\n     *\n     * WHY:\n     * - provide a speedier navigation from a given node to some predecessor\n     *   without the user having to change arrow key\n     */\n    if (direction === this.direction || !this.isExploring) {\n      if (!this.isExploring) {\n        // just started and no other nodes at the given direction\n        // so the current node is technically the first visited node\n        // (this is needed so that we don't get stuck between looping through )\n        this.visitedNodes.add(element.id);\n      }\n\n      const otherDirections: LinkDirection[] = [\n        \"up\",\n        \"right\",\n        \"down\",\n        \"left\",\n      ].filter((dir): dir is LinkDirection => dir !== direction);\n\n      const otherLinkedNodes = otherDirections\n        .map((dir) => [\n          ...getSuccessors(element, elementsMap, dir),\n          ...getPredecessors(element, elementsMap, dir),\n        ])\n        .flat()\n        .filter((linkedNode) => !this.visitedNodes.has(linkedNode.id));\n\n      for (const linkedNode of otherLinkedNodes) {\n        if (!this.visitedNodes.has(linkedNode.id)) {\n          this.visitedNodes.add(linkedNode.id);\n          this.isExploring = true;\n          this.direction = direction;\n          return linkedNode.id;\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\nexport class FlowChartCreator {\n  isCreatingChart: boolean = false;\n  private numberOfNodes: number = 0;\n  private direction: LinkDirection | null = \"right\";\n  pendingNodes: PendingExcalidrawElements | null = null;\n\n  createNodes(\n    startNode: ExcalidrawFlowchartNodeElement,\n    elementsMap: ElementsMap,\n    appState: AppState,\n    direction: LinkDirection,\n  ) {\n    if (direction !== this.direction) {\n      const { nextNode, bindingArrow } = addNewNode(\n        startNode,\n        elementsMap,\n        appState,\n        direction,\n      );\n\n      this.numberOfNodes = 1;\n      this.isCreatingChart = true;\n      this.direction = direction;\n      this.pendingNodes = [nextNode, bindingArrow];\n    } else {\n      this.numberOfNodes += 1;\n      const newNodes = addNewNodes(\n        startNode,\n        elementsMap,\n        appState,\n        direction,\n        this.numberOfNodes,\n      );\n\n      this.isCreatingChart = true;\n      this.direction = direction;\n      this.pendingNodes = newNodes;\n    }\n\n    // add pending nodes to the same frame as the start node\n    // if every pending node is at least intersecting with the frame\n    if (startNode.frameId) {\n      const frame = elementsMap.get(startNode.frameId);\n\n      invariant(\n        frame && isFrameElement(frame),\n        \"not an ExcalidrawFrameElement\",\n      );\n\n      if (\n        frame &&\n        this.pendingNodes.every(\n          (node) =>\n            elementsAreInFrameBounds([node], frame, elementsMap) ||\n            elementOverlapsWithFrame(node, frame, elementsMap),\n        )\n      ) {\n        this.pendingNodes = this.pendingNodes.map((node) =>\n          mutateElement(\n            node,\n            {\n              frameId: startNode.frameId,\n            },\n            false,\n          ),\n        );\n      }\n    }\n  }\n\n  clear() {\n    this.isCreatingChart = false;\n    this.pendingNodes = null;\n    this.direction = null;\n    this.numberOfNodes = 0;\n  }\n}\n\nexport const isNodeInFlowchart = (\n  element: ExcalidrawFlowchartNodeElement,\n  elementsMap: ElementsMap,\n) => {\n  for (const [, el] of elementsMap) {\n    if (\n      el.type === \"arrow\" &&\n      (el.startBinding?.elementId === element.id ||\n        el.endBinding?.elementId === element.id)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n};\n", "import { t } from \"../i18n\";\nimport type { AppClassProperties, Device, UIAppState } from \"../types\";\nimport {\n  isFlowchartNodeElement,\n  isImageElement,\n  isLinearElement,\n  isTextBindableContainer,\n  isTextElement,\n} from \"../element/typeChecks\";\nimport { getShortcutKey } from \"../utils\";\nimport { isEraserActive } from \"../appState\";\n\nimport \"./HintViewer.scss\";\nimport { isNodeInFlowchart } from \"../element/flowchart\";\nimport { isGridModeEnabled } from \"../snapping\";\nimport { CANVAS_SEARCH_TAB, DEFAULT_SIDEBAR } from \"../constants\";\n\ninterface HintViewerProps {\n  appState: UIAppState;\n  isMobile: boolean;\n  device: Device;\n  app: AppClassProperties;\n}\n\nconst getHints = ({\n  appState,\n  isMobile,\n  device,\n  app,\n}: HintViewerProps): null | string | string[] => {\n  const { activeTool, isResizing, isRotating, lastPointerDownWith } = appState;\n  const multiMode = appState.multiElement !== null;\n\n  if (\n    appState.openSidebar?.name === DEFAULT_SIDEBAR.name &&\n    appState.openSidebar.tab === CANVAS_SEARCH_TAB &&\n    appState.searchMatches?.length\n  ) {\n    return t(\"hints.dismissSearch\");\n  }\n\n  if (appState.openSidebar && !device.editor.canFitSidebar) {\n    return null;\n  }\n\n  if (isEraserActive(appState)) {\n    return t(\"hints.eraserRevert\");\n  }\n  if (activeTool.type === \"arrow\" || activeTool.type === \"line\") {\n    if (multiMode) {\n      return t(\"hints.linearElementMulti\");\n    }\n    if (activeTool.type === \"arrow\") {\n      return t(\"hints.arrowTool\", { arrowShortcut: getShortcutKey(\"A\") });\n    }\n    return t(\"hints.linearElement\");\n  }\n\n  if (activeTool.type === \"freedraw\") {\n    return t(\"hints.freeDraw\");\n  }\n\n  if (activeTool.type === \"text\") {\n    return t(\"hints.text\");\n  }\n\n  if (activeTool.type === \"embeddable\") {\n    return t(\"hints.embeddable\");\n  }\n\n  if (appState.activeTool.type === \"image\" && appState.pendingImageElementId) {\n    return t(\"hints.placeImage\");\n  }\n\n  const selectedElements = app.scene.getSelectedElements(appState);\n\n  if (\n    isResizing &&\n    lastPointerDownWith === \"mouse\" &&\n    selectedElements.length === 1\n  ) {\n    const targetElement = selectedElements[0];\n    if (isLinearElement(targetElement) && targetElement.points.length === 2) {\n      return t(\"hints.lockAngle\");\n    }\n    return isImageElement(targetElement)\n      ? t(\"hints.resizeImage\")\n      : t(\"hints.resize\");\n  }\n\n  if (isRotating && lastPointerDownWith === \"mouse\") {\n    return t(\"hints.rotate\");\n  }\n\n  if (selectedElements.length === 1 && isTextElement(selectedElements[0])) {\n    return t(\"hints.text_selected\");\n  }\n\n  if (appState.editingTextElement) {\n    return t(\"hints.text_editing\");\n  }\n\n  if (appState.croppingElementId) {\n    return t(\"hints.leaveCropEditor\");\n  }\n\n  if (selectedElements.length === 1 && isImageElement(selectedElements[0])) {\n    return t(\"hints.enterCropEditor\");\n  }\n\n  if (activeTool.type === \"selection\") {\n    if (\n      appState.selectionElement &&\n      !selectedElements.length &&\n      !appState.editingTextElement &&\n      !appState.editingLinearElement\n    ) {\n      return t(\"hints.deepBoxSelect\");\n    }\n\n    if (isGridModeEnabled(app) && appState.selectedElementsAreBeingDragged) {\n      return t(\"hints.disableSnapping\");\n    }\n\n    if (!selectedElements.length && !isMobile) {\n      return t(\"hints.canvasPanning\");\n    }\n\n    if (selectedElements.length === 1) {\n      if (isLinearElement(selectedElements[0])) {\n        if (appState.editingLinearElement) {\n          return appState.editingLinearElement.selectedPointsIndices\n            ? t(\"hints.lineEditor_pointSelected\")\n            : t(\"hints.lineEditor_nothingSelected\");\n        }\n        return t(\"hints.lineEditor_info\");\n      }\n      if (\n        !appState.newElement &&\n        !appState.selectedElementsAreBeingDragged &&\n        isTextBindableContainer(selectedElements[0])\n      ) {\n        if (isFlowchartNodeElement(selectedElements[0])) {\n          if (\n            isNodeInFlowchart(\n              selectedElements[0],\n              app.scene.getNonDeletedElementsMap(),\n            )\n          ) {\n            return [t(\"hints.bindTextToElement\"), t(\"hints.createFlowchart\")];\n          }\n\n          return [t(\"hints.bindTextToElement\"), t(\"hints.createFlowchart\")];\n        }\n\n        return t(\"hints.bindTextToElement\");\n      }\n    }\n  }\n\n  return null;\n};\n\nexport const HintViewer = ({\n  appState,\n  isMobile,\n  device,\n  app,\n}: HintViewerProps) => {\n  const hints = getHints({\n    appState,\n    isMobile,\n    device,\n    app,\n  });\n\n  if (!hints) {\n    return null;\n  }\n\n  const hint = Array.isArray(hints)\n    ? hints\n        .map((hint) => {\n          return getShortcutKey(hint).replace(/\\. ?$/, \"\");\n        })\n        .join(\". \")\n    : getShortcutKey(hints);\n\n  return (\n    <div className=\"HintViewer\">\n      <span>{hint}</span>\n    </div>\n  );\n};\n", "import \"./ToolIcon.scss\";\n\nimport clsx from \"clsx\";\nimport type { ToolButtonSize } from \"./ToolButton\";\nimport { LockedIcon, UnlockedIcon } from \"./icons\";\n\ntype LockIconProps = {\n  title?: string;\n  name?: string;\n  checked: boolean;\n  onChange?(): void;\n  isMobile?: boolean;\n};\n\nconst DEFAULT_SIZE: ToolButtonSize = \"medium\";\n\nconst ICONS = {\n  CHECKED: LockedIcon,\n  UNCHECKED: UnlockedIcon,\n};\n\nexport const LockButton = (props: LockIconProps) => {\n  return (\n    <label\n      className={clsx(\n        \"ToolIcon ToolIcon__lock\",\n        `ToolIcon_size_${DEFAULT_SIZE}`,\n        {\n          \"is-mobile\": props.isMobile,\n        },\n      )}\n      title={`${props.title} \u2014 Q`}\n    >\n      <input\n        className=\"ToolIcon_type_checkbox\"\n        type=\"checkbox\"\n        name={props.name}\n        onChange={props.onChange}\n        checked={props.checked}\n        aria-label={props.title}\n        data-testid=\"toolbar-lock\"\n      />\n      <div className=\"ToolIcon__icon\">\n        {props.checked ? ICONS.CHECKED : ICONS.UNCHECKED}\n      </div>\n    </label>\n  );\n};\n", "import React from \"react\";\nimport { t } from \"../i18n\";\nimport { useExcalidrawContainer } from \"./App\";\n\nexport const Section: React.FC<{\n  heading: \"canvasActions\" | \"selectedShapeActions\" | \"shapes\";\n  children?: React.ReactNode | ((heading: React.ReactNode) => React.ReactNode);\n  className?: string;\n}> = ({ heading, children, ...props }) => {\n  const { id } = useExcalidrawContainer();\n  const header = (\n    <h2 className=\"visually-hidden\" id={`${id}-${heading}-title`}>\n      {t(`headings.${heading}`)}\n    </h2>\n  );\n  return (\n    <section {...props} aria-labelledby={`${id}-${heading}-title`}>\n      {typeof children === \"function\" ? (\n        children(header)\n      ) : (\n        <>\n          {header}\n          {children}\n        </>\n      )}\n    </section>\n  );\n};\n", "import { getCommonBounds } from \"../element\";\nimport type { InteractiveCanvasAppState } from \"../types\";\nimport type { ScrollBars } from \"./types\";\nimport { getGlobalCSSVariable } from \"../utils\";\nimport { getLanguage } from \"../i18n\";\nimport type { ExcalidrawElement } from \"../element/types\";\n\nexport const SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport const getScrollBars = (\n  elements: readonly ExcalidrawElement[],\n  viewportWidth: number,\n  viewportHeight: number,\n  appState: InteractiveCanvasAppState,\n): ScrollBars => {\n  if (!elements.length) {\n    return {\n      horizontal: null,\n      vertical: null,\n    };\n  }\n  // This is the bounding box of all the elements\n  const [elementsMinX, elementsMinY, elementsMaxX, elementsMaxY] =\n    getCommonBounds(elements);\n\n  // Apply zoom\n  const viewportWidthWithZoom = viewportWidth / appState.zoom.value;\n  const viewportHeightWithZoom = viewportHeight / appState.zoom.value;\n\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n\n  const safeArea = {\n    top: parseInt(getGlobalCSSVariable(\"sat\")) || 0,\n    bottom: parseInt(getGlobalCSSVariable(\"sab\")) || 0,\n    left: parseInt(getGlobalCSSVariable(\"sal\")) || 0,\n    right: parseInt(getGlobalCSSVariable(\"sar\")) || 0,\n  };\n\n  const isRTL = getLanguage().rtl;\n\n  // The viewport is the rectangle currently visible for the user\n  const viewportMinX =\n    -appState.scrollX + viewportWidthDiff / 2 + safeArea.left;\n  const viewportMinY =\n    -appState.scrollY + viewportHeightDiff / 2 + safeArea.top;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom;\n\n  // The scene is the bounding box of both the elements and viewport\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);\n\n  // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal:\n      viewportMinX === sceneMinX && viewportMaxX === sceneMaxX\n        ? null\n        : {\n            x:\n              Math.max(safeArea.left, SCROLLBAR_MARGIN) +\n              ((viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth,\n            y:\n              viewportHeight -\n              SCROLLBAR_WIDTH -\n              Math.max(SCROLLBAR_MARGIN, safeArea.bottom),\n            width:\n              ((viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),\n            height: SCROLLBAR_WIDTH,\n          },\n    vertical:\n      viewportMinY === sceneMinY && viewportMaxY === sceneMaxY\n        ? null\n        : {\n            x: isRTL\n              ? Math.max(safeArea.left, SCROLLBAR_MARGIN)\n              : viewportWidth -\n                SCROLLBAR_WIDTH -\n                Math.max(safeArea.right, SCROLLBAR_MARGIN),\n            y:\n              ((viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight +\n              Math.max(safeArea.top, SCROLLBAR_MARGIN),\n            width: SCROLLBAR_WIDTH,\n            height:\n              ((viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom),\n          },\n  };\n};\n\nexport const isOverScrollBars = (\n  scrollBars: ScrollBars,\n  x: number,\n  y: number,\n): {\n  isOverEither: boolean;\n  isOverHorizontal: boolean;\n  isOverVertical: boolean;\n} => {\n  const [isOverHorizontal, isOverVertical] = [\n    scrollBars.horizontal,\n    scrollBars.vertical,\n  ].map((scrollBar) => {\n    return (\n      scrollBar != null &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n    );\n  });\n  const isOverEither = isOverHorizontal || isOverVertical;\n  return { isOverEither, isOverHorizontal, isOverVertical };\n};\n", "import \"./ToolIcon.scss\";\n\nimport clsx from \"clsx\";\nimport type { ToolButtonSize } from \"./ToolButton\";\nimport { PenModeIcon } from \"./icons\";\n\ntype PenModeIconProps = {\n  title?: string;\n  name?: string;\n  checked: boolean;\n  onChange?(): void;\n  zenModeEnabled?: boolean;\n  isMobile?: boolean;\n  penDetected: boolean;\n};\n\nconst DEFAULT_SIZE: ToolButtonSize = \"medium\";\n\nexport const PenModeButton = (props: PenModeIconProps) => {\n  if (!props.penDetected) {\n    return null;\n  }\n\n  return (\n    <label\n      className={clsx(\n        \"ToolIcon ToolIcon__penMode\",\n        `ToolIcon_size_${DEFAULT_SIZE}`,\n        {\n          \"is-mobile\": props.isMobile,\n        },\n      )}\n      title={`${props.title}`}\n    >\n      <input\n        className=\"ToolIcon_type_checkbox\"\n        type=\"checkbox\"\n        name={props.name}\n        onChange={props.onChange}\n        checked={props.checked}\n        aria-label={props.title}\n      />\n      <div className=\"ToolIcon__icon\">{PenModeIcon}</div>\n    </label>\n  );\n};\n", "import \"./ToolIcon.scss\";\n\nimport clsx from \"clsx\";\nimport { ToolButton } from \"./ToolButton\";\nimport { handIcon } from \"./icons\";\nimport { KEYS } from \"../keys\";\n\ntype LockIconProps = {\n  title?: string;\n  name?: string;\n  checked: boolean;\n  onChange?(): void;\n  isMobile?: boolean;\n};\n\nexport const HandButton = (props: LockIconProps) => {\n  return (\n    <ToolButton\n      className={clsx(\"Shape\", { fillable: false })}\n      type=\"radio\"\n      icon={handIcon}\n      name=\"editor-current-shape\"\n      checked={props.checked}\n      title={`${props.title} \u2014 H`}\n      keyBindingLabel={!props.isMobile ? KEYS.H.toLocaleUpperCase() : undefined}\n      aria-label={`${props.title} \u2014 H`}\n      aria-keyshortcuts={KEYS.H}\n      data-testid={`toolbar-hand`}\n      onChange={() => props.onChange?.()}\n    />\n  );\n};\n", "import type { JSX } from \"react\";\nimport React from \"react\";\nimport type {\n  AppClassProperties,\n  AppProps,\n  AppState,\n  Device,\n  ExcalidrawProps,\n  UIAppState,\n} from \"../types\";\nimport type { ActionManager } from \"../actions/manager\";\nimport { t } from \"../i18n\";\nimport Stack from \"./Stack\";\nimport { showSelectedShapeActions } from \"../element\";\nimport type { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { FixedSideContainer } from \"./FixedSideContainer\";\nimport { Island } from \"./Island\";\nimport { HintViewer } from \"./HintViewer\";\nimport { calculateScrollCenter } from \"../scene\";\nimport { SelectedShapeActions, ShapesSwitcher } from \"./Actions\";\nimport { Section } from \"./Section\";\nimport { SCROLLBAR_WIDTH, SCROLLBAR_MARGIN } from \"../scene/scrollbars\";\nimport { LockButton } from \"./LockButton\";\nimport { PenModeButton } from \"./PenModeButton\";\nimport { HandButton } from \"./HandButton\";\nimport { isHandToolActive } from \"../appState\";\nimport { useTunnels } from \"../context/tunnels\";\n\ntype MobileMenuProps = {\n  appState: UIAppState;\n  actionManager: ActionManager;\n  renderJSONExportDialog: () => React.ReactNode;\n  renderImageExportDialog: () => React.ReactNode;\n  setAppState: React.Component<any, AppState>[\"setState\"];\n  elements: readonly NonDeletedExcalidrawElement[];\n  onLockToggle: () => void;\n  onHandToolToggle: () => void;\n  onPenModeToggle: AppClassProperties[\"togglePenMode\"];\n\n  renderTopRightUI?: (\n    isMobile: boolean,\n    appState: UIAppState,\n  ) => JSX.Element | null;\n  renderCustomStats?: ExcalidrawProps[\"renderCustomStats\"];\n  renderSidebars: () => JSX.Element | null;\n  device: Device;\n  renderWelcomeScreen: boolean;\n  UIOptions: AppProps[\"UIOptions\"];\n  app: AppClassProperties;\n};\n\nexport const MobileMenu = ({\n  appState,\n  elements,\n  actionManager,\n  setAppState,\n  onLockToggle,\n  onHandToolToggle,\n  onPenModeToggle,\n\n  renderTopRightUI,\n  renderCustomStats,\n  renderSidebars,\n  device,\n  renderWelcomeScreen,\n  UIOptions,\n  app,\n}: MobileMenuProps) => {\n  const {\n    WelcomeScreenCenterTunnel,\n    MainMenuTunnel,\n    DefaultSidebarTriggerTunnel,\n  } = useTunnels();\n  const renderToolbar = () => {\n    return (\n      <FixedSideContainer side=\"top\" className=\"App-top-bar\">\n        {renderWelcomeScreen && <WelcomeScreenCenterTunnel.Out />}\n        <Section heading=\"shapes\">\n          {(heading: React.ReactNode) => (\n            <Stack.Col gap={4} align=\"center\">\n              <Stack.Row gap={1} className=\"App-toolbar-container\">\n                <Island padding={1} className=\"App-toolbar App-toolbar--mobile\">\n                  {heading}\n                  <Stack.Row gap={1}>\n                    <ShapesSwitcher\n                      appState={appState}\n                      activeTool={appState.activeTool}\n                      UIOptions={UIOptions}\n                      app={app}\n                    />\n                  </Stack.Row>\n                </Island>\n                {renderTopRightUI && renderTopRightUI(true, appState)}\n                <div className=\"mobile-misc-tools-container\">\n                  {!appState.viewModeEnabled &&\n                    appState.openDialog?.name !== \"elementLinkSelector\" && (\n                      <DefaultSidebarTriggerTunnel.Out />\n                    )}\n                  <PenModeButton\n                    checked={appState.penMode}\n                    onChange={() => onPenModeToggle(null)}\n                    title={t(\"toolBar.penMode\")}\n                    isMobile\n                    penDetected={appState.penDetected}\n                  />\n                  <LockButton\n                    checked={appState.activeTool.locked}\n                    onChange={onLockToggle}\n                    title={t(\"toolBar.lock\")}\n                    isMobile\n                  />\n                  <HandButton\n                    checked={isHandToolActive(appState)}\n                    onChange={() => onHandToolToggle()}\n                    title={t(\"toolBar.hand\")}\n                    isMobile\n                  />\n                </div>\n              </Stack.Row>\n            </Stack.Col>\n          )}\n        </Section>\n        <HintViewer\n          appState={appState}\n          isMobile={true}\n          device={device}\n          app={app}\n        />\n      </FixedSideContainer>\n    );\n  };\n\n  const renderAppToolbar = () => {\n    if (\n      appState.viewModeEnabled ||\n      appState.openDialog?.name === \"elementLinkSelector\"\n    ) {\n      return (\n        <div className=\"App-toolbar-content\">\n          <MainMenuTunnel.Out />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App-toolbar-content\">\n        <MainMenuTunnel.Out />\n        {actionManager.renderAction(\"toggleEditMenu\")}\n        {actionManager.renderAction(\n          appState.multiElement ? \"finalize\" : \"duplicateSelection\",\n        )}\n        {actionManager.renderAction(\"deleteSelectedElements\")}\n        <div>\n          {actionManager.renderAction(\"undo\")}\n          {actionManager.renderAction(\"redo\")}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {renderSidebars()}\n      {!appState.viewModeEnabled &&\n        appState.openDialog?.name !== \"elementLinkSelector\" &&\n        renderToolbar()}\n      <div\n        className=\"App-bottom-bar\"\n        style={{\n          marginBottom: SCROLLBAR_WIDTH + SCROLLBAR_MARGIN * 2,\n          marginLeft: SCROLLBAR_WIDTH + SCROLLBAR_MARGIN * 2,\n          marginRight: SCROLLBAR_WIDTH + SCROLLBAR_MARGIN * 2,\n        }}\n      >\n        <Island padding={0}>\n          {appState.openMenu === \"shape\" &&\n          !appState.viewModeEnabled &&\n          appState.openDialog?.name !== \"elementLinkSelector\" &&\n          showSelectedShapeActions(appState, elements) ? (\n            <Section className=\"App-mobile-menu\" heading=\"selectedShapeActions\">\n              <SelectedShapeActions\n                appState={appState}\n                elementsMap={app.scene.getNonDeletedElementsMap()}\n                renderAction={actionManager.renderAction}\n                app={app}\n              />\n            </Section>\n          ) : null}\n          <footer className=\"App-toolbar\">\n            {renderAppToolbar()}\n            {appState.scrolledOutside &&\n              !appState.openMenu &&\n              !appState.openSidebar && (\n                <button\n                  type=\"button\"\n                  className=\"scroll-back-to-content\"\n                  onClick={() => {\n                    setAppState((appState) => ({\n                      ...calculateScrollCenter(elements, appState),\n                    }));\n                  }}\n                >\n                  {t(\"buttons.scrollBackToContent\")}\n                </button>\n              )}\n          </footer>\n        </Island>\n      </div>\n    </>\n  );\n};\n", "import oc from \"open-color\";\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport type { ChartElements, Spreadsheet } from \"../charts\";\nimport { renderSpreadsheet } from \"../charts\";\nimport type { ChartType } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { exportToSvg } from \"../scene/export\";\nimport type { UIAppState } from \"../types\";\nimport { useApp } from \"./App\";\nimport { Dialog } from \"./Dialog\";\n\nimport \"./PasteChartDialog.scss\";\n\ntype OnInsertChart = (chartType: ChartType, elements: ChartElements) => void;\n\nconst ChartPreviewBtn = (props: {\n  spreadsheet: Spreadsheet | null;\n  chartType: ChartType;\n  selected: boolean;\n  onClick: OnInsertChart;\n}) => {\n  const previewRef = useRef<HTMLDivElement | null>(null);\n  const [chartElements, setChartElements] = useState<ChartElements | null>(\n    null,\n  );\n\n  useLayoutEffect(() => {\n    if (!props.spreadsheet) {\n      return;\n    }\n\n    const elements = renderSpreadsheet(\n      props.chartType,\n      props.spreadsheet,\n      0,\n      0,\n    );\n    setChartElements(elements);\n    let svg: SVGSVGElement;\n    const previewNode = previewRef.current!;\n\n    (async () => {\n      svg = await exportToSvg(\n        elements,\n        {\n          exportBackground: false,\n          viewBackgroundColor: oc.white,\n        },\n        null, // files\n        {\n          skipInliningFonts: true,\n        },\n      );\n      svg.querySelector(\".style-fonts\")?.remove();\n      previewNode.replaceChildren();\n      previewNode.appendChild(svg);\n\n      if (props.selected) {\n        (previewNode.parentNode as HTMLDivElement).focus();\n      }\n    })();\n\n    return () => {\n      previewNode.replaceChildren();\n    };\n  }, [props.spreadsheet, props.chartType, props.selected]);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"ChartPreview\"\n      onClick={() => {\n        if (chartElements) {\n          props.onClick(props.chartType, chartElements);\n        }\n      }}\n    >\n      <div ref={previewRef} />\n    </button>\n  );\n};\n\nexport const PasteChartDialog = ({\n  setAppState,\n  appState,\n  onClose,\n}: {\n  appState: UIAppState;\n  onClose: () => void;\n  setAppState: React.Component<any, UIAppState>[\"setState\"];\n}) => {\n  const { onInsertElements } = useApp();\n  const handleClose = React.useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n\n  const handleChartClick = (chartType: ChartType, elements: ChartElements) => {\n    onInsertElements(elements);\n    trackEvent(\"paste\", \"chart\", chartType);\n    setAppState({\n      currentChartType: chartType,\n      pasteDialog: {\n        shown: false,\n        data: null,\n      },\n    });\n  };\n\n  return (\n    <Dialog\n      size=\"small\"\n      onCloseRequest={handleClose}\n      title={t(\"labels.pasteCharts\")}\n      className={\"PasteChartDialog\"}\n      autofocus={false}\n    >\n      <div className={\"container\"}>\n        <ChartPreviewBtn\n          chartType=\"bar\"\n          spreadsheet={appState.pasteDialog.data}\n          selected={appState.currentChartType === \"bar\"}\n          onClick={handleChartClick}\n        />\n        <ChartPreviewBtn\n          chartType=\"line\"\n          spreadsheet={appState.pasteDialog.data}\n          selected={appState.currentChartType === \"line\"}\n          onClick={handleChartClick}\n        />\n      </div>\n    </Dialog>\n  );\n};\n", "import type { JSX } from \"react\";\nimport React from \"react\";\nimport { t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { Dialog } from \"./Dialog\";\nimport { getShortcutKey } from \"../utils\";\nimport \"./HelpDialog.scss\";\nimport { ExternalLinkIcon, GithubIcon, youtubeIcon } from \"./icons\";\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\nimport { isDarwin, isFirefox, isWindows } from \"../constants\";\nimport { getShortcutFromShortcutName } from \"../actions/shortcuts\";\n\nconst Header = () => (\n  <div className=\"HelpDialog__header\">\n    <a\n      className=\"HelpDialog__btn\"\n      href=\"https://docs.excalidraw.com\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <div className=\"HelpDialog__link-icon\">{ExternalLinkIcon}</div>\n      {t(\"helpDialog.documentation\")}\n    </a>\n    <a\n      className=\"HelpDialog__btn\"\n      href=\"https://plus.excalidraw.com/blog\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <div className=\"HelpDialog__link-icon\">{ExternalLinkIcon}</div>\n      {t(\"helpDialog.blog\")}\n    </a>\n    <a\n      className=\"HelpDialog__btn\"\n      href=\"https://github.com/excalidraw/excalidraw/issues\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <div className=\"HelpDialog__link-icon\">{GithubIcon}</div>\n      {t(\"helpDialog.github\")}\n    </a>\n    <a\n      className=\"HelpDialog__btn\"\n      href=\"https://youtube.com/@excalidraw\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <div className=\"HelpDialog__link-icon\">{youtubeIcon}</div>\n      YouTube\n    </a>\n  </div>\n);\n\nconst Section = (props: { title: string; children: React.ReactNode }) => (\n  <>\n    <h3>{props.title}</h3>\n    <div className=\"HelpDialog__islands-container\">{props.children}</div>\n  </>\n);\n\nconst ShortcutIsland = (props: {\n  caption: string;\n  children: React.ReactNode;\n  className?: string;\n}) => (\n  <div className={`HelpDialog__island ${props.className}`}>\n    <h4 className=\"HelpDialog__island-title\">{props.caption}</h4>\n    <div className=\"HelpDialog__island-content\">{props.children}</div>\n  </div>\n);\n\nfunction* intersperse(as: JSX.Element[][], delim: string | null) {\n  let first = true;\n  for (const x of as) {\n    if (!first) {\n      yield delim;\n    }\n    first = false;\n    yield x;\n  }\n}\n\nconst upperCaseSingleChars = (str: string) => {\n  return str.replace(/\\b[a-z]\\b/, (c) => c.toUpperCase());\n};\n\nconst Shortcut = ({\n  label,\n  shortcuts,\n  isOr = true,\n}: {\n  label: string;\n  shortcuts: string[];\n  isOr?: boolean;\n}) => {\n  const splitShortcutKeys = shortcuts.map((shortcut) => {\n    const keys = shortcut.endsWith(\"++\")\n      ? [...shortcut.slice(0, -2).split(\"+\"), \"+\"]\n      : shortcut.split(\"+\");\n\n    return keys.map((key) => (\n      <ShortcutKey key={key}>{upperCaseSingleChars(key)}</ShortcutKey>\n    ));\n  });\n\n  return (\n    <div className=\"HelpDialog__shortcut\">\n      <div>{label}</div>\n      <div className=\"HelpDialog__key-container\">\n        {[...intersperse(splitShortcutKeys, isOr ? t(\"helpDialog.or\") : null)]}\n      </div>\n    </div>\n  );\n};\n\nconst ShortcutKey = (props: { children: React.ReactNode }) => (\n  <kbd className=\"HelpDialog__key\" {...props} />\n);\n\nexport const HelpDialog = ({ onClose }: { onClose?: () => void }) => {\n  const handleClose = React.useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n\n  return (\n    <>\n      <Dialog\n        onCloseRequest={handleClose}\n        title={t(\"helpDialog.title\")}\n        className={\"HelpDialog\"}\n      >\n        <Header />\n        <Section title={t(\"helpDialog.shortcuts\")}>\n          <ShortcutIsland\n            className=\"HelpDialog__island--tools\"\n            caption={t(\"helpDialog.tools\")}\n          >\n            <Shortcut label={t(\"toolBar.hand\")} shortcuts={[KEYS.H]} />\n            <Shortcut\n              label={t(\"toolBar.selection\")}\n              shortcuts={[KEYS.V, KEYS[\"1\"]]}\n            />\n            <Shortcut\n              label={t(\"toolBar.rectangle\")}\n              shortcuts={[KEYS.R, KEYS[\"2\"]]}\n            />\n            <Shortcut\n              label={t(\"toolBar.diamond\")}\n              shortcuts={[KEYS.D, KEYS[\"3\"]]}\n            />\n            <Shortcut\n              label={t(\"toolBar.ellipse\")}\n              shortcuts={[KEYS.O, KEYS[\"4\"]]}\n            />\n            <Shortcut\n              label={t(\"toolBar.arrow\")}\n              shortcuts={[KEYS.A, KEYS[\"5\"]]}\n            />\n            <Shortcut\n              label={t(\"toolBar.line\")}\n              shortcuts={[KEYS.L, KEYS[\"6\"]]}\n            />\n            <Shortcut\n              label={t(\"toolBar.freedraw\")}\n              shortcuts={[KEYS.P, KEYS[\"7\"]]}\n            />\n            <Shortcut\n              label={t(\"toolBar.text\")}\n              shortcuts={[KEYS.T, KEYS[\"8\"]]}\n            />\n            <Shortcut label={t(\"toolBar.image\")} shortcuts={[KEYS[\"9\"]]} />\n            <Shortcut\n              label={t(\"toolBar.eraser\")}\n              shortcuts={[KEYS.E, KEYS[\"0\"]]}\n            />\n            <Shortcut label={t(\"toolBar.frame\")} shortcuts={[KEYS.F]} />\n            <Shortcut label={t(\"toolBar.laser\")} shortcuts={[KEYS.K]} />\n            <Shortcut\n              label={t(\"labels.eyeDropper\")}\n              shortcuts={[KEYS.I, \"Shift+S\", \"Shift+G\"]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.editLineArrowPoints\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Enter\")]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.editText\")}\n              shortcuts={[getShortcutKey(\"Enter\")]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.textNewLine\")}\n              shortcuts={[\n                getShortcutKey(\"Enter\"),\n                getShortcutKey(\"Shift+Enter\"),\n              ]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.textFinish\")}\n              shortcuts={[\n                getShortcutKey(\"Esc\"),\n                getShortcutKey(\"CtrlOrCmd+Enter\"),\n              ]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.curvedArrow\")}\n              shortcuts={[\n                \"A\",\n                t(\"helpDialog.click\"),\n                t(\"helpDialog.click\"),\n                t(\"helpDialog.click\"),\n              ]}\n              isOr={false}\n            />\n            <Shortcut\n              label={t(\"helpDialog.curvedLine\")}\n              shortcuts={[\n                \"L\",\n                t(\"helpDialog.click\"),\n                t(\"helpDialog.click\"),\n                t(\"helpDialog.click\"),\n              ]}\n              isOr={false}\n            />\n            <Shortcut\n              label={t(\"helpDialog.cropStart\")}\n              shortcuts={[t(\"helpDialog.doubleClick\"), getShortcutKey(\"Enter\")]}\n              isOr={true}\n            />\n            <Shortcut\n              label={t(\"helpDialog.cropFinish\")}\n              shortcuts={[getShortcutKey(\"Enter\"), getShortcutKey(\"Escape\")]}\n              isOr={true}\n            />\n            <Shortcut label={t(\"toolBar.lock\")} shortcuts={[KEYS.Q]} />\n            <Shortcut\n              label={t(\"helpDialog.preventBinding\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd\")]}\n            />\n            <Shortcut\n              label={t(\"toolBar.link\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+K\")]}\n            />\n          </ShortcutIsland>\n          <ShortcutIsland\n            className=\"HelpDialog__island--view\"\n            caption={t(\"helpDialog.view\")}\n          >\n            <Shortcut\n              label={t(\"buttons.zoomIn\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd++\")]}\n            />\n            <Shortcut\n              label={t(\"buttons.zoomOut\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+-\")]}\n            />\n            <Shortcut\n              label={t(\"buttons.resetZoom\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+0\")]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.zoomToFit\")}\n              shortcuts={[\"Shift+1\"]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.zoomToSelection\")}\n              shortcuts={[\"Shift+2\"]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.movePageUpDown\")}\n              shortcuts={[\"PgUp/PgDn\"]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.movePageLeftRight\")}\n              shortcuts={[\"Shift+PgUp/PgDn\"]}\n            />\n            <Shortcut\n              label={t(\"buttons.zenMode\")}\n              shortcuts={[getShortcutKey(\"Alt+Z\")]}\n            />\n            <Shortcut\n              label={t(\"buttons.objectsSnapMode\")}\n              shortcuts={[getShortcutKey(\"Alt+S\")]}\n            />\n            <Shortcut\n              label={t(\"labels.toggleGrid\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+'\")]}\n            />\n            <Shortcut\n              label={t(\"labels.viewMode\")}\n              shortcuts={[getShortcutKey(\"Alt+R\")]}\n            />\n            <Shortcut\n              label={t(\"labels.toggleTheme\")}\n              shortcuts={[getShortcutKey(\"Alt+Shift+D\")]}\n            />\n            <Shortcut\n              label={t(\"stats.fullTitle\")}\n              shortcuts={[getShortcutKey(\"Alt+/\")]}\n            />\n            <Shortcut\n              label={t(\"search.title\")}\n              shortcuts={[getShortcutFromShortcutName(\"searchMenu\")]}\n            />\n            <Shortcut\n              label={t(\"commandPalette.title\")}\n              shortcuts={\n                isFirefox\n                  ? [getShortcutFromShortcutName(\"commandPalette\")]\n                  : [\n                      getShortcutFromShortcutName(\"commandPalette\"),\n                      getShortcutFromShortcutName(\"commandPalette\", 1),\n                    ]\n              }\n            />\n          </ShortcutIsland>\n          <ShortcutIsland\n            className=\"HelpDialog__island--editor\"\n            caption={t(\"helpDialog.editor\")}\n          >\n            <Shortcut\n              label={t(\"helpDialog.createFlowchart\")}\n              shortcuts={[getShortcutKey(`CtrlOrCmd+Arrow Key`)]}\n              isOr={true}\n            />\n            <Shortcut\n              label={t(\"helpDialog.navigateFlowchart\")}\n              shortcuts={[getShortcutKey(`Alt+Arrow Key`)]}\n              isOr={true}\n            />\n            <Shortcut\n              label={t(\"labels.moveCanvas\")}\n              shortcuts={[\n                getShortcutKey(`Space+${t(\"helpDialog.drag\")}`),\n                getShortcutKey(`Wheel+${t(\"helpDialog.drag\")}`),\n              ]}\n              isOr={true}\n            />\n            <Shortcut\n              label={t(\"buttons.clearReset\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Delete\")]}\n            />\n            <Shortcut\n              label={t(\"labels.delete\")}\n              shortcuts={[getShortcutKey(\"Delete\")]}\n            />\n            <Shortcut\n              label={t(\"labels.cut\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+X\")]}\n            />\n            <Shortcut\n              label={t(\"labels.copy\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+C\")]}\n            />\n            <Shortcut\n              label={t(\"labels.paste\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+V\")]}\n            />\n            <Shortcut\n              label={t(\"labels.pasteAsPlaintext\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Shift+V\")]}\n            />\n            <Shortcut\n              label={t(\"labels.selectAll\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+A\")]}\n            />\n            <Shortcut\n              label={t(\"labels.multiSelect\")}\n              shortcuts={[getShortcutKey(`Shift+${t(\"helpDialog.click\")}`)]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.deepSelect\")}\n              shortcuts={[getShortcutKey(`CtrlOrCmd+${t(\"helpDialog.click\")}`)]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.deepBoxSelect\")}\n              shortcuts={[getShortcutKey(`CtrlOrCmd+${t(\"helpDialog.drag\")}`)]}\n            />\n            {/* firefox supports clipboard API under a flag, so we'll\n                show users what they can do in the error message */}\n            {(probablySupportsClipboardBlob || isFirefox) && (\n              <Shortcut\n                label={t(\"labels.copyAsPng\")}\n                shortcuts={[getShortcutKey(\"Shift+Alt+C\")]}\n              />\n            )}\n            <Shortcut\n              label={t(\"labels.copyStyles\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Alt+C\")]}\n            />\n            <Shortcut\n              label={t(\"labels.pasteStyles\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Alt+V\")]}\n            />\n            <Shortcut\n              label={t(\"labels.sendToBack\")}\n              shortcuts={[\n                isDarwin\n                  ? getShortcutKey(\"CtrlOrCmd+Alt+[\")\n                  : getShortcutKey(\"CtrlOrCmd+Shift+[\"),\n              ]}\n            />\n            <Shortcut\n              label={t(\"labels.bringToFront\")}\n              shortcuts={[\n                isDarwin\n                  ? getShortcutKey(\"CtrlOrCmd+Alt+]\")\n                  : getShortcutKey(\"CtrlOrCmd+Shift+]\"),\n              ]}\n            />\n            <Shortcut\n              label={t(\"labels.sendBackward\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+[\")]}\n            />\n            <Shortcut\n              label={t(\"labels.bringForward\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+]\")]}\n            />\n            <Shortcut\n              label={t(\"labels.alignTop\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Shift+Up\")]}\n            />\n            <Shortcut\n              label={t(\"labels.alignBottom\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Shift+Down\")]}\n            />\n            <Shortcut\n              label={t(\"labels.alignLeft\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Shift+Left\")]}\n            />\n            <Shortcut\n              label={t(\"labels.alignRight\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Shift+Right\")]}\n            />\n            <Shortcut\n              label={t(\"labels.duplicateSelection\")}\n              shortcuts={[\n                getShortcutKey(\"CtrlOrCmd+D\"),\n                getShortcutKey(`Alt+${t(\"helpDialog.drag\")}`),\n              ]}\n            />\n            <Shortcut\n              label={t(\"helpDialog.toggleElementLock\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Shift+L\")]}\n            />\n            <Shortcut\n              label={t(\"buttons.undo\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Z\")]}\n            />\n            <Shortcut\n              label={t(\"buttons.redo\")}\n              shortcuts={\n                isWindows\n                  ? [\n                      getShortcutKey(\"CtrlOrCmd+Y\"),\n                      getShortcutKey(\"CtrlOrCmd+Shift+Z\"),\n                    ]\n                  : [getShortcutKey(\"CtrlOrCmd+Shift+Z\")]\n              }\n            />\n            <Shortcut\n              label={t(\"labels.group\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+G\")]}\n            />\n            <Shortcut\n              label={t(\"labels.ungroup\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Shift+G\")]}\n            />\n            <Shortcut\n              label={t(\"labels.flipHorizontal\")}\n              shortcuts={[getShortcutKey(\"Shift+H\")]}\n            />\n            <Shortcut\n              label={t(\"labels.flipVertical\")}\n              shortcuts={[getShortcutKey(\"Shift+V\")]}\n            />\n            <Shortcut\n              label={t(\"labels.showStroke\")}\n              shortcuts={[getShortcutKey(\"S\")]}\n            />\n            <Shortcut\n              label={t(\"labels.showBackground\")}\n              shortcuts={[getShortcutKey(\"G\")]}\n            />\n            <Shortcut\n              label={t(\"labels.showFonts\")}\n              shortcuts={[getShortcutKey(\"Shift+F\")]}\n            />\n            <Shortcut\n              label={t(\"labels.decreaseFontSize\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Shift+<\")]}\n            />\n            <Shortcut\n              label={t(\"labels.increaseFontSize\")}\n              shortcuts={[getShortcutKey(\"CtrlOrCmd+Shift+>\")]}\n            />\n          </ShortcutIsland>\n        </Section>\n      </Dialog>\n    </>\n  );\n};\n", "import \"./UserList.scss\";\n\nimport React, { useLayoutEffect } from \"react\";\nimport clsx from \"clsx\";\nimport type { Collaborator, SocketId } from \"../types\";\nimport { Tooltip } from \"./Tooltip\";\nimport { useExcalidrawActionManager } from \"./App\";\nimport type { ActionManager } from \"../actions/manager\";\n\nimport * as Popover from \"@radix-ui/react-popover\";\nimport { Island } from \"./Island\";\nimport { QuickSearch } from \"./QuickSearch\";\nimport { t } from \"../i18n\";\nimport { isShallowEqual } from \"../utils\";\nimport { supportsResizeObserver } from \"../constants\";\nimport type { MarkRequired } from \"../utility-types\";\nimport { ScrollableList } from \"./ScrollableList\";\n\nexport type GoToCollaboratorComponentProps = {\n  socketId: SocketId;\n  collaborator: Collaborator;\n  withName: boolean;\n  isBeingFollowed: boolean;\n};\n\n/** collaborator user id or socket id (fallback) */\ntype ClientId = string & { _brand: \"UserId\" };\n\nconst DEFAULT_MAX_AVATARS = 4;\nconst SHOW_COLLABORATORS_FILTER_AT = 8;\n\nconst ConditionalTooltipWrapper = ({\n  shouldWrap,\n  children,\n  username,\n}: {\n  shouldWrap: boolean;\n  children: React.ReactNode;\n  username?: string | null;\n}) =>\n  shouldWrap ? (\n    <Tooltip label={username || \"Unknown user\"}>{children}</Tooltip>\n  ) : (\n    <>{children}</>\n  );\n\nconst renderCollaborator = ({\n  actionManager,\n  collaborator,\n  socketId,\n  withName = false,\n  shouldWrapWithTooltip = false,\n  isBeingFollowed,\n}: {\n  actionManager: ActionManager;\n  collaborator: Collaborator;\n  socketId: SocketId;\n  withName?: boolean;\n  shouldWrapWithTooltip?: boolean;\n  isBeingFollowed: boolean;\n}) => {\n  const data: GoToCollaboratorComponentProps = {\n    socketId,\n    collaborator,\n    withName,\n    isBeingFollowed,\n  };\n  const avatarJSX = actionManager.renderAction(\"goToCollaborator\", data);\n\n  return (\n    <ConditionalTooltipWrapper\n      key={socketId}\n      username={collaborator.username}\n      shouldWrap={shouldWrapWithTooltip}\n    >\n      {avatarJSX}\n    </ConditionalTooltipWrapper>\n  );\n};\n\ntype UserListUserObject = Pick<\n  Collaborator,\n  | \"avatarUrl\"\n  | \"id\"\n  | \"socketId\"\n  | \"username\"\n  | \"isInCall\"\n  | \"isSpeaking\"\n  | \"isMuted\"\n>;\n\ntype UserListProps = {\n  className?: string;\n  mobile?: boolean;\n  collaborators: Map<SocketId, UserListUserObject>;\n  userToFollow: SocketId | null;\n};\n\nconst collaboratorComparatorKeys = [\n  \"avatarUrl\",\n  \"id\",\n  \"socketId\",\n  \"username\",\n  \"isInCall\",\n  \"isSpeaking\",\n  \"isMuted\",\n] as const;\n\nexport const UserList = React.memo(\n  ({ className, mobile, collaborators, userToFollow }: UserListProps) => {\n    const actionManager = useExcalidrawActionManager();\n\n    const uniqueCollaboratorsMap = new Map<\n      ClientId,\n      MarkRequired<Collaborator, \"socketId\">\n    >();\n\n    collaborators.forEach((collaborator, socketId) => {\n      const userId = (collaborator.id || socketId) as ClientId;\n      uniqueCollaboratorsMap.set(\n        // filter on user id, else fall back on unique socketId\n        userId,\n        { ...collaborator, socketId },\n      );\n    });\n\n    const uniqueCollaboratorsArray = Array.from(\n      uniqueCollaboratorsMap.values(),\n    ).filter((collaborator) => collaborator.username?.trim());\n\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\n    const filteredCollaborators = uniqueCollaboratorsArray.filter(\n      (collaborator) =>\n        collaborator.username?.toLowerCase().includes(searchTerm),\n    );\n\n    const userListWrapper = React.useRef<HTMLDivElement | null>(null);\n\n    useLayoutEffect(() => {\n      if (userListWrapper.current) {\n        const updateMaxAvatars = (width: number) => {\n          const maxAvatars = Math.max(1, Math.min(8, Math.floor(width / 38)));\n          setMaxAvatars(maxAvatars);\n        };\n\n        updateMaxAvatars(userListWrapper.current.clientWidth);\n\n        if (!supportsResizeObserver) {\n          return;\n        }\n\n        const resizeObserver = new ResizeObserver((entries) => {\n          for (const entry of entries) {\n            const { width } = entry.contentRect;\n            updateMaxAvatars(width);\n          }\n        });\n\n        resizeObserver.observe(userListWrapper.current);\n\n        return () => {\n          resizeObserver.disconnect();\n        };\n      }\n    }, []);\n\n    const [maxAvatars, setMaxAvatars] = React.useState(DEFAULT_MAX_AVATARS);\n\n    const firstNCollaborators = uniqueCollaboratorsArray.slice(\n      0,\n      maxAvatars - 1,\n    );\n\n    const firstNAvatarsJSX = firstNCollaborators.map((collaborator) =>\n      renderCollaborator({\n        actionManager,\n        collaborator,\n        socketId: collaborator.socketId,\n        shouldWrapWithTooltip: true,\n        isBeingFollowed: collaborator.socketId === userToFollow,\n      }),\n    );\n\n    return mobile ? (\n      <div className={clsx(\"UserList UserList_mobile\", className)}>\n        {uniqueCollaboratorsArray.map((collaborator) =>\n          renderCollaborator({\n            actionManager,\n            collaborator,\n            socketId: collaborator.socketId,\n            shouldWrapWithTooltip: true,\n            isBeingFollowed: collaborator.socketId === userToFollow,\n          }),\n        )}\n      </div>\n    ) : (\n      <div className=\"UserList__wrapper\" ref={userListWrapper}>\n        <div\n          className={clsx(\"UserList\", className)}\n          style={{ [`--max-avatars` as any]: maxAvatars }}\n        >\n          {firstNAvatarsJSX}\n\n          {uniqueCollaboratorsArray.length > maxAvatars - 1 && (\n            <Popover.Root>\n              <Popover.Trigger className=\"UserList__more\">\n                +{uniqueCollaboratorsArray.length - maxAvatars + 1}\n              </Popover.Trigger>\n              <Popover.Content\n                style={{\n                  zIndex: 2,\n                  width: \"15rem\",\n                  textAlign: \"left\",\n                }}\n                align=\"end\"\n                sideOffset={10}\n              >\n                <Island padding={2}>\n                  {uniqueCollaboratorsArray.length >=\n                    SHOW_COLLABORATORS_FILTER_AT && (\n                    <QuickSearch\n                      placeholder={t(\"quickSearch.placeholder\")}\n                      onChange={setSearchTerm}\n                    />\n                  )}\n                  <ScrollableList\n                    className={\"dropdown-menu UserList__collaborators\"}\n                    placeholder={t(\"userList.empty\")}\n                  >\n                    {/* The list checks for `Children.count()`, hence defensively returning empty list */}\n                    {filteredCollaborators.length > 0\n                      ? [\n                          <div className=\"hint\">{t(\"userList.hint.text\")}</div>,\n                          filteredCollaborators.map((collaborator) =>\n                            renderCollaborator({\n                              actionManager,\n                              collaborator,\n                              socketId: collaborator.socketId,\n                              withName: true,\n                              isBeingFollowed:\n                                collaborator.socketId === userToFollow,\n                            }),\n                          ),\n                        ]\n                      : []}\n                  </ScrollableList>\n                  <Popover.Arrow\n                    width={20}\n                    height={10}\n                    style={{\n                      fill: \"var(--popup-bg-color)\",\n                      filter: \"drop-shadow(rgba(0, 0, 0, 0.05) 0px 3px 2px)\",\n                    }}\n                  />\n                </Island>\n              </Popover.Content>\n            </Popover.Root>\n          )}\n        </div>\n      </div>\n    );\n  },\n  (prev, next) => {\n    if (\n      prev.collaborators.size !== next.collaborators.size ||\n      prev.mobile !== next.mobile ||\n      prev.className !== next.className ||\n      prev.userToFollow !== next.userToFollow\n    ) {\n      return false;\n    }\n\n    const nextCollaboratorSocketIds = next.collaborators.keys();\n\n    for (const [socketId, collaborator] of prev.collaborators) {\n      const nextCollaborator = next.collaborators.get(socketId);\n      if (\n        !nextCollaborator ||\n        // this checks order of collaborators in the map is the same\n        // as previous render\n        socketId !== nextCollaboratorSocketIds.next().value ||\n        !isShallowEqual(\n          collaborator,\n          nextCollaborator,\n          collaboratorComparatorKeys,\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  },\n);\n", "import React from \"react\";\nimport type { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { t } from \"../i18n\";\n\nimport type { ExportOpts, BinaryFiles, UIAppState } from \"../types\";\nimport { Dialog } from \"./Dialog\";\nimport { exportToFileIcon, LinkIcon } from \"./icons\";\nimport { ToolButton } from \"./ToolButton\";\nimport { actionSaveFileToDisk } from \"../actions/actionExport\";\nimport { Card } from \"./Card\";\n\nimport \"./ExportDialog.scss\";\nimport { nativeFileSystemSupported } from \"../data/filesystem\";\nimport { trackEvent } from \"../analytics\";\nimport type { ActionManager } from \"../actions/manager\";\nimport { getFrame } from \"../utils\";\n\nexport type ExportCB = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  scale?: number,\n) => void;\n\nconst JSONExportModal = ({\n  elements,\n  appState,\n  setAppState,\n  files,\n  actionManager,\n  exportOpts,\n  canvas,\n  onCloseRequest,\n}: {\n  appState: UIAppState;\n  setAppState: React.Component<any, UIAppState>[\"setState\"];\n  files: BinaryFiles;\n  elements: readonly NonDeletedExcalidrawElement[];\n  actionManager: ActionManager;\n  onCloseRequest: () => void;\n  exportOpts: ExportOpts;\n  canvas: HTMLCanvasElement;\n}) => {\n  const { onExportToBackend } = exportOpts;\n  return (\n    <div className=\"ExportDialog ExportDialog--json\">\n      <div className=\"ExportDialog-cards\">\n        {exportOpts.saveFileToDisk && (\n          <Card color=\"lime\">\n            <div className=\"Card-icon\">{exportToFileIcon}</div>\n            <h2>{t(\"exportDialog.disk_title\")}</h2>\n            <div className=\"Card-details\">\n              {t(\"exportDialog.disk_details\")}\n              {!nativeFileSystemSupported &&\n                actionManager.renderAction(\"changeProjectName\")}\n            </div>\n            <ToolButton\n              className=\"Card-button\"\n              type=\"button\"\n              title={t(\"exportDialog.disk_button\")}\n              aria-label={t(\"exportDialog.disk_button\")}\n              showAriaLabel={true}\n              onClick={() => {\n                actionManager.executeAction(actionSaveFileToDisk, \"ui\");\n              }}\n            />\n          </Card>\n        )}\n        {onExportToBackend && (\n          <Card color=\"pink\">\n            <div className=\"Card-icon\">{LinkIcon}</div>\n            <h2>{t(\"exportDialog.link_title\")}</h2>\n            <div className=\"Card-details\">{t(\"exportDialog.link_details\")}</div>\n            <ToolButton\n              className=\"Card-button\"\n              type=\"button\"\n              title={t(\"exportDialog.link_button\")}\n              aria-label={t(\"exportDialog.link_button\")}\n              showAriaLabel={true}\n              onClick={async () => {\n                try {\n                  trackEvent(\"export\", \"link\", `ui (${getFrame()})`);\n                  await onExportToBackend(elements, appState, files);\n                  onCloseRequest();\n                } catch (error: any) {\n                  setAppState({ errorMessage: error.message });\n                }\n              }}\n            />\n          </Card>\n        )}\n        {exportOpts.renderCustomUI &&\n          exportOpts.renderCustomUI(elements, appState, files, canvas)}\n      </div>\n    </div>\n  );\n};\n\nexport const JSONExportDialog = ({\n  elements,\n  appState,\n  files,\n  actionManager,\n  exportOpts,\n  canvas,\n  setAppState,\n}: {\n  elements: readonly NonDeletedExcalidrawElement[];\n  appState: UIAppState;\n  files: BinaryFiles;\n  actionManager: ActionManager;\n  exportOpts: ExportOpts;\n  canvas: HTMLCanvasElement;\n  setAppState: React.Component<any, UIAppState>[\"setState\"];\n}) => {\n  const handleClose = React.useCallback(() => {\n    setAppState({ openDialog: null });\n  }, [setAppState]);\n\n  return (\n    <>\n      {appState.openDialog?.name === \"jsonExport\" && (\n        <Dialog onCloseRequest={handleClose} title={t(\"buttons.export\")}>\n          <JSONExportModal\n            elements={elements}\n            appState={appState}\n            setAppState={setAppState}\n            files={files}\n            actionManager={actionManager}\n            onCloseRequest={handleClose}\n            exportOpts={exportOpts}\n            canvas={canvas}\n          />\n        </Dialog>\n      )}\n    </>\n  );\n};\n", "import OpenColor from \"open-color\";\n\nimport \"./Card.scss\";\n\nexport const Card: React.FC<{\n  color: keyof OpenColor | \"primary\";\n  children?: React.ReactNode;\n}> = ({ children, color }) => {\n  return (\n    <div\n      className=\"Card\"\n      style={{\n        [\"--card-color\" as any]:\n          color === \"primary\" ? \"var(--color-primary)\" : OpenColor[color][7],\n        [\"--card-color-darker\" as any]:\n          color === \"primary\"\n            ? \"var(--color-primary-darker)\"\n            : OpenColor[color][8],\n        [\"--card-color-darkest\" as any]:\n          color === \"primary\"\n            ? \"var(--color-primary-darkest)\"\n            : OpenColor[color][9],\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n", "import clsx from \"clsx\";\nimport { actionShortcuts } from \"../../actions\";\nimport type { ActionManager } from \"../../actions/manager\";\nimport {\n  ExitZenModeAction,\n  FinalizeAction,\n  UndoRedoActions,\n  ZoomActions,\n} from \"../Actions\";\nimport { useDevice } from \"../App\";\nimport { useTunnels } from \"../../context/tunnels\";\nimport { HelpButton } from \"../HelpButton\";\nimport { Section } from \"../Section\";\nimport Stack from \"../Stack\";\nimport type { UIAppState } from \"../../types\";\n\nconst Footer = ({\n  appState,\n  actionManager,\n  showExitZenModeBtn,\n  renderWelcomeScreen,\n}: {\n  appState: UIAppState;\n  actionManager: ActionManager;\n  showExitZenModeBtn: boolean;\n  renderWelcomeScreen: boolean;\n}) => {\n  const { FooterCenterTunnel, WelcomeScreenHelpHintTunnel } = useTunnels();\n\n  const device = useDevice();\n  const showFinalize =\n    !appState.viewModeEnabled && appState.multiElement && device.isTouchScreen;\n\n  return (\n    <footer\n      role=\"contentinfo\"\n      className=\"layer-ui__wrapper__footer App-menu App-menu_bottom\"\n    >\n      <div\n        className={clsx(\"layer-ui__wrapper__footer-left zen-mode-transition\", {\n          \"layer-ui__wrapper__footer-left--transition-left\":\n            appState.zenModeEnabled,\n        })}\n      >\n        <Stack.Col gap={2}>\n          <Section heading=\"canvasActions\">\n            <ZoomActions\n              renderAction={actionManager.renderAction}\n              zoom={appState.zoom}\n            />\n\n            {!appState.viewModeEnabled && (\n              <UndoRedoActions\n                renderAction={actionManager.renderAction}\n                className={clsx(\"zen-mode-transition\", {\n                  \"layer-ui__wrapper__footer-left--transition-bottom\":\n                    appState.zenModeEnabled,\n                })}\n              />\n            )}\n            {showFinalize && (\n              <FinalizeAction\n                renderAction={actionManager.renderAction}\n                className={clsx(\"zen-mode-transition\", {\n                  \"layer-ui__wrapper__footer-left--transition-left\":\n                    appState.zenModeEnabled,\n                })}\n              />\n            )}\n          </Section>\n        </Stack.Col>\n      </div>\n      <FooterCenterTunnel.Out />\n      <div\n        className={clsx(\"layer-ui__wrapper__footer-right zen-mode-transition\", {\n          \"transition-right\": appState.zenModeEnabled,\n        })}\n      >\n        <div style={{ position: \"relative\" }}>\n          {renderWelcomeScreen && <WelcomeScreenHelpHintTunnel.Out />}\n          <HelpButton\n            onClick={() => actionManager.executeAction(actionShortcuts)}\n          />\n        </div>\n      </div>\n      <ExitZenModeAction\n        actionManager={actionManager}\n        showExitZenModeBtn={showExitZenModeBtn}\n      />\n    </footer>\n  );\n};\n\nexport default Footer;\nFooter.displayName = \"Footer\";\n", "import { t } from \"../i18n\";\nimport { HelpIcon } from \"./icons\";\n\ntype HelpButtonProps = {\n  name?: string;\n  id?: string;\n  onClick?(): void;\n};\n\nexport const HelpButton = (props: HelpButtonProps) => (\n  <button\n    className=\"help-icon\"\n    onClick={props.onClick}\n    type=\"button\"\n    title={`${t(\"helpDialog.title\")} \u2014 ?`}\n    aria-label={t(\"helpDialog.title\")}\n  >\n    {HelpIcon}\n  </button>\n);\n", "import React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useCallback,\n} from \"react\";\nimport { Island } from \"../Island\";\nimport { atom, useSetAtom } from \"../../editor-jotai\";\nimport type { SidebarProps, SidebarPropsContextValue } from \"./common\";\nimport { SidebarPropsContext } from \"./common\";\nimport { SidebarHeader } from \"./SidebarHeader\";\nimport clsx from \"clsx\";\nimport { useDevice, useExcalidrawSetAppState } from \"../App\";\nimport { updateObject } from \"../../utils\";\nimport { KEYS } from \"../../keys\";\nimport { EVENT } from \"../../constants\";\nimport { SidebarTrigger } from \"./SidebarTrigger\";\nimport { SidebarTabTriggers } from \"./SidebarTabTriggers\";\nimport { SidebarTabTrigger } from \"./SidebarTabTrigger\";\nimport { SidebarTabs } from \"./SidebarTabs\";\nimport { SidebarTab } from \"./SidebarTab\";\nimport { useUIAppState } from \"../../context/ui-appState\";\nimport { useOutsideClick } from \"../../hooks/useOutsideClick\";\n\nimport \"./Sidebar.scss\";\n\n/**\n * Flags whether the currently rendered Sidebar is docked or not, for use\n * in upstream components that need to act on this (e.g. LayerUI to shift the\n * UI). We use an atom because of potential host app sidebars (for the default\n * sidebar we could just read from appState.defaultSidebarDockedPreference).\n *\n * Since we can only render one Sidebar at a time, we can use a simple flag.\n */\nexport const isSidebarDockedAtom = atom(false);\n\nexport const SidebarInner = forwardRef(\n  (\n    {\n      name,\n      children,\n      onDock,\n      docked,\n      className,\n      ...rest\n    }: SidebarProps & Omit<React.RefAttributes<HTMLDivElement>, \"onSelect\">,\n    ref: React.ForwardedRef<HTMLDivElement>,\n  ) => {\n    if (import.meta.env.DEV && onDock && docked == null) {\n      console.warn(\n        \"Sidebar: `docked` must be set when `onDock` is supplied for the sidebar to be user-dockable. To hide this message, either pass `docked` or remove `onDock`\",\n      );\n    }\n\n    const setAppState = useExcalidrawSetAppState();\n\n    const setIsSidebarDockedAtom = useSetAtom(isSidebarDockedAtom);\n\n    useLayoutEffect(() => {\n      setIsSidebarDockedAtom(!!docked);\n      return () => {\n        setIsSidebarDockedAtom(false);\n      };\n    }, [setIsSidebarDockedAtom, docked]);\n\n    const headerPropsRef = useRef<SidebarPropsContextValue>(\n      {} as SidebarPropsContextValue,\n    );\n    headerPropsRef.current.onCloseRequest = () => {\n      setAppState({ openSidebar: null });\n    };\n    headerPropsRef.current.onDock = (isDocked) => onDock?.(isDocked);\n    // renew the ref object if the following props change since we want to\n    // rerender. We can't pass down as component props manually because\n    // the <Sidebar.Header/> can be rendered upstream.\n    headerPropsRef.current = updateObject(headerPropsRef.current, {\n      docked,\n      // explicit prop to rerender on update\n      shouldRenderDockButton: !!onDock && docked != null,\n    });\n\n    const islandRef = useRef<HTMLDivElement>(null);\n\n    useImperativeHandle(ref, () => {\n      return islandRef.current!;\n    });\n\n    const device = useDevice();\n\n    const closeLibrary = useCallback(() => {\n      const isDialogOpen = !!document.querySelector(\".Dialog\");\n\n      // Prevent closing if any dialog is open\n      if (isDialogOpen) {\n        return;\n      }\n      setAppState({ openSidebar: null });\n    }, [setAppState]);\n\n    useOutsideClick(\n      islandRef,\n      useCallback(\n        (event) => {\n          // If click on the library icon, do nothing so that LibraryButton\n          // can toggle library menu\n          if ((event.target as Element).closest(\".sidebar-trigger\")) {\n            return;\n          }\n          if (!docked || !device.editor.canFitSidebar) {\n            closeLibrary();\n          }\n        },\n        [closeLibrary, docked, device.editor.canFitSidebar],\n      ),\n    );\n\n    useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === KEYS.ESCAPE &&\n          (!docked || !device.editor.canFitSidebar)\n        ) {\n          closeLibrary();\n        }\n      };\n      document.addEventListener(EVENT.KEYDOWN, handleKeyDown);\n      return () => {\n        document.removeEventListener(EVENT.KEYDOWN, handleKeyDown);\n      };\n    }, [closeLibrary, docked, device.editor.canFitSidebar]);\n\n    return (\n      <Island\n        {...rest}\n        className={clsx(\"sidebar\", { \"sidebar--docked\": docked }, className)}\n        ref={islandRef}\n      >\n        <SidebarPropsContext.Provider value={headerPropsRef.current}>\n          {children}\n        </SidebarPropsContext.Provider>\n      </Island>\n    );\n  },\n);\nSidebarInner.displayName = \"SidebarInner\";\n\nexport const Sidebar = Object.assign(\n  forwardRef((props: SidebarProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const appState = useUIAppState();\n\n    const { onStateChange } = props;\n\n    const refPrevOpenSidebar = useRef(appState.openSidebar);\n    useEffect(() => {\n      if (\n        // closing sidebar\n        ((!appState.openSidebar &&\n          refPrevOpenSidebar?.current?.name === props.name) ||\n          // opening current sidebar\n          (appState.openSidebar?.name === props.name &&\n            refPrevOpenSidebar?.current?.name !== props.name) ||\n          // switching tabs or switching to a different sidebar\n          refPrevOpenSidebar.current?.name === props.name) &&\n        appState.openSidebar !== refPrevOpenSidebar.current\n      ) {\n        onStateChange?.(\n          appState.openSidebar?.name !== props.name\n            ? null\n            : appState.openSidebar,\n        );\n      }\n      refPrevOpenSidebar.current = appState.openSidebar;\n    }, [appState.openSidebar, onStateChange, props.name]);\n\n    const [mounted, setMounted] = useState(false);\n    useLayoutEffect(() => {\n      setMounted(true);\n      return () => setMounted(false);\n    }, []);\n\n    // We want to render in the next tick (hence `mounted` flag) so that it's\n    // guaranteed to happen after unmount of the previous sidebar (in case the\n    // previous sidebar is mounted after the next one). This is necessary to\n    // prevent flicker of subcomponents that support fallbacks\n    // (e.g. SidebarHeader). This is because we're using flags to determine\n    // whether prefer the fallback component or not (otherwise both will render\n    // initially), and the flag won't be reset in time if the unmount order\n    // it not correct.\n    //\n    // Alternative, and more general solution would be to namespace the fallback\n    // HoC so that state is not shared between subcomponents when the wrapping\n    // component is of the same type (e.g. Sidebar -> SidebarHeader).\n    const shouldRender = mounted && appState.openSidebar?.name === props.name;\n\n    if (!shouldRender) {\n      return null;\n    }\n\n    return <SidebarInner {...props} ref={ref} key={props.name} />;\n  }),\n  {\n    Header: SidebarHeader,\n    TabTriggers: SidebarTabTriggers,\n    TabTrigger: SidebarTabTrigger,\n    Tabs: SidebarTabs,\n    Tab: SidebarTab,\n    Trigger: SidebarTrigger,\n  },\n);\nSidebar.displayName = \"Sidebar\";\n", "import type { JSX } from \"react\";\nimport React from \"react\";\nimport type { AppState, SidebarName, SidebarTabName } from \"../../types\";\n\nexport type SidebarTriggerProps = {\n  name: SidebarName;\n  tab?: SidebarTabName;\n  icon?: JSX.Element;\n  children?: React.ReactNode;\n  title?: string;\n  className?: string;\n  onToggle?: (open: boolean) => void;\n  style?: React.CSSProperties;\n};\n\nexport type SidebarProps<P = {}> = {\n  name: SidebarName;\n  children: React.ReactNode;\n  /**\n   * Called on sidebar open/close or tab change.\n   */\n  onStateChange?: (state: AppState[\"openSidebar\"]) => void;\n  /**\n   * supply alongside `docked` prop in order to make the Sidebar user-dockable\n   */\n  onDock?: (docked: boolean) => void;\n  docked?: boolean;\n  className?: string;\n  // NOTE sidebars we use internally inside the editor must have this flag set.\n  // It indicates that this sidebar should have lower precedence over host\n  // sidebars, if both are open.\n  /** @private internal */\n  __fallback?: boolean;\n} & P;\n\nexport type SidebarPropsContextValue = Pick<\n  SidebarProps,\n  \"onDock\" | \"docked\"\n> & { onCloseRequest: () => void; shouldRenderDockButton: boolean };\n\nexport const SidebarPropsContext =\n  React.createContext<SidebarPropsContextValue>({} as SidebarPropsContextValue);\n", "import clsx from \"clsx\";\nimport { useContext } from \"react\";\nimport { t } from \"../../i18n\";\nimport { useDevice } from \"../App\";\nimport { SidebarPropsContext } from \"./common\";\nimport { CloseIcon, PinIcon } from \"../icons\";\nimport { Tooltip } from \"../Tooltip\";\nimport { Button } from \"../Button\";\n\nexport const SidebarHeader = ({\n  children,\n  className,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n}) => {\n  const device = useDevice();\n  const props = useContext(SidebarPropsContext);\n\n  const renderDockButton = !!(\n    device.editor.canFitSidebar && props.shouldRenderDockButton\n  );\n\n  return (\n    <div\n      className={clsx(\"sidebar__header\", className)}\n      data-testid=\"sidebar-header\"\n    >\n      {children}\n      <div className=\"sidebar__header__buttons\">\n        {renderDockButton && (\n          <Tooltip label={t(\"labels.sidebarLock\")}>\n            <Button\n              onSelect={() => props.onDock?.(!props.docked)}\n              selected={!!props.docked}\n              className=\"sidebar__dock\"\n              data-testid=\"sidebar-dock\"\n              aria-label={t(\"labels.sidebarLock\")}\n            >\n              {PinIcon}\n            </Button>\n          </Tooltip>\n        )}\n        <Button\n          data-testid=\"sidebar-close\"\n          className=\"sidebar__close\"\n          onSelect={props.onCloseRequest}\n          aria-label={t(\"buttons.close\")}\n        >\n          {CloseIcon}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nSidebarHeader.displayName = \"SidebarHeader\";\n", "import { useExcalidrawSetAppState } from \"../App\";\nimport type { SidebarTriggerProps } from \"./common\";\nimport { useUIAppState } from \"../../context/ui-appState\";\nimport clsx from \"clsx\";\n\nimport \"./SidebarTrigger.scss\";\n\nexport const SidebarTrigger = ({\n  name,\n  tab,\n  icon,\n  title,\n  children,\n  onToggle,\n  className,\n  style,\n}: SidebarTriggerProps) => {\n  const setAppState = useExcalidrawSetAppState();\n  const appState = useUIAppState();\n\n  return (\n    <label title={title} className=\"sidebar-trigger__label-element\">\n      <input\n        className=\"ToolIcon_type_checkbox\"\n        type=\"checkbox\"\n        onChange={(event) => {\n          document\n            .querySelector(\".layer-ui__wrapper\")\n            ?.classList.remove(\"animate\");\n          const isOpen = event.target.checked;\n          setAppState({ openSidebar: isOpen ? { name, tab } : null });\n          onToggle?.(isOpen);\n        }}\n        checked={appState.openSidebar?.name === name}\n        aria-label={title}\n        aria-keyshortcuts=\"0\"\n      />\n      <div className={clsx(\"sidebar-trigger\", className)} style={style}>\n        {icon && <div>{icon}</div>}\n        {children && <div className=\"sidebar-trigger__label\">{children}</div>}\n      </div>\n    </label>\n  );\n};\nSidebarTrigger.displayName = \"SidebarTrigger\";\n", "import * as RadixTabs from \"@radix-ui/react-tabs\";\n\nexport const SidebarTabTriggers = ({\n  children,\n  ...rest\n}: { children: React.ReactNode } & Omit<\n  React.RefAttributes<HTMLDivElement>,\n  \"onSelect\"\n>) => {\n  return (\n    <RadixTabs.List className=\"sidebar-triggers\" {...rest}>\n      {children}\n    </RadixTabs.List>\n  );\n};\nSidebarTabTriggers.displayName = \"SidebarTabTriggers\";\n", "import * as RadixTabs from \"@radix-ui/react-tabs\";\nimport type { SidebarTabName } from \"../../types\";\n\nexport const SidebarTabTrigger = ({\n  children,\n  tab,\n  onSelect,\n  ...rest\n}: {\n  children: React.ReactNode;\n  tab: SidebarTabName;\n  onSelect?: React.ReactEventHandler<HTMLButtonElement> | undefined;\n} & Omit<React.HTMLAttributes<HTMLButtonElement>, \"onSelect\">) => {\n  return (\n    <RadixTabs.Trigger value={tab} asChild onSelect={onSelect}>\n      <button\n        type={\"button\"}\n        className={`excalidraw-button sidebar-tab-trigger`}\n        {...rest}\n      >\n        {children}\n      </button>\n    </RadixTabs.Trigger>\n  );\n};\nSidebarTabTrigger.displayName = \"SidebarTabTrigger\";\n", "import * as RadixTabs from \"@radix-ui/react-tabs\";\nimport { useUIAppState } from \"../../context/ui-appState\";\nimport { useExcalidrawSetAppState } from \"../App\";\n\nexport const SidebarTabs = ({\n  children,\n  ...rest\n}: {\n  children: React.ReactNode;\n} & Omit<React.RefAttributes<HTMLDivElement>, \"onSelect\">) => {\n  const appState = useUIAppState();\n  const setAppState = useExcalidrawSetAppState();\n\n  if (!appState.openSidebar) {\n    return null;\n  }\n\n  const { name } = appState.openSidebar;\n\n  return (\n    <RadixTabs.Root\n      className=\"sidebar-tabs-root\"\n      value={appState.openSidebar.tab}\n      onValueChange={(tab) =>\n        setAppState((state) => ({\n          ...state,\n          openSidebar: { ...state.openSidebar, name, tab },\n        }))\n      }\n      {...rest}\n    >\n      {children}\n    </RadixTabs.Root>\n  );\n};\nSidebarTabs.displayName = \"SidebarTabs\";\n", "import * as RadixTabs from \"@radix-ui/react-tabs\";\nimport type { SidebarTabName } from \"../../types\";\n\nexport const SidebarTab = ({\n  tab,\n  children,\n  ...rest\n}: {\n  tab: SidebarTabName;\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <RadixTabs.Content {...rest} value={tab} data-testid={tab}>\n      {children}\n    </RadixTabs.Content>\n  );\n};\nSidebarTab.displayName = \"SidebarTab\";\n", "import { getShortcutFromShortcutName } from \"../../actions/shortcuts\";\nimport { useI18n } from \"../../i18n\";\nimport {\n  useExcalidrawSetAppState,\n  useExcalidrawActionManager,\n  useExcalidrawElements,\n  useAppProps,\n} from \"../App\";\nimport {\n  boltIcon,\n  DeviceDesktopIcon,\n  ExportIcon,\n  ExportImageIcon,\n  HelpIcon,\n  LoadIcon,\n  MoonIcon,\n  save,\n  searchIcon,\n  SunIcon,\n  TrashIcon,\n  usersIcon,\n} from \"../icons\";\nimport { GithubIcon, DiscordIcon, XBrandIcon } from \"../icons\";\nimport DropdownMenuItem from \"../dropdownMenu/DropdownMenuItem\";\nimport DropdownMenuItemLink from \"../dropdownMenu/DropdownMenuItemLink\";\nimport {\n  actionClearCanvas,\n  actionLoadScene,\n  actionSaveToActiveFile,\n  actionShortcuts,\n  actionToggleSearchMenu,\n  actionToggleTheme,\n} from \"../../actions\";\nimport clsx from \"clsx\";\nimport { activeConfirmDialogAtom } from \"../ActiveConfirmDialog\";\nimport { useSetAtom } from \"../../editor-jotai\";\nimport { useUIAppState } from \"../../context/ui-appState\";\nimport { openConfirmModal } from \"../OverwriteConfirm/OverwriteConfirmState\";\nimport Trans from \"../Trans\";\nimport DropdownMenuItemContentRadio from \"../dropdownMenu/DropdownMenuItemContentRadio\";\nimport { THEME } from \"../../constants\";\nimport type { Theme } from \"../../element/types\";\nimport { trackEvent } from \"../../analytics\";\nimport \"./DefaultItems.scss\";\n\nexport const LoadScene = () => {\n  const { t } = useI18n();\n  const actionManager = useExcalidrawActionManager();\n  const elements = useExcalidrawElements();\n\n  if (!actionManager.isActionEnabled(actionLoadScene)) {\n    return null;\n  }\n\n  const handleSelect = async () => {\n    if (\n      !elements.length ||\n      (await openConfirmModal({\n        title: t(\"overwriteConfirm.modal.loadFromFile.title\"),\n        actionLabel: t(\"overwriteConfirm.modal.loadFromFile.button\"),\n        color: \"warning\",\n        description: (\n          <Trans\n            i18nKey=\"overwriteConfirm.modal.loadFromFile.description\"\n            bold={(text) => <strong>{text}</strong>}\n            br={() => <br />}\n          />\n        ),\n      }))\n    ) {\n      actionManager.executeAction(actionLoadScene);\n    }\n  };\n\n  return (\n    <DropdownMenuItem\n      icon={LoadIcon}\n      onSelect={handleSelect}\n      data-testid=\"load-button\"\n      shortcut={getShortcutFromShortcutName(\"loadScene\")}\n      aria-label={t(\"buttons.load\")}\n    >\n      {t(\"buttons.load\")}\n    </DropdownMenuItem>\n  );\n};\nLoadScene.displayName = \"LoadScene\";\n\nexport const SaveToActiveFile = () => {\n  const { t } = useI18n();\n  const actionManager = useExcalidrawActionManager();\n\n  if (!actionManager.isActionEnabled(actionSaveToActiveFile)) {\n    return null;\n  }\n\n  return (\n    <DropdownMenuItem\n      shortcut={getShortcutFromShortcutName(\"saveScene\")}\n      data-testid=\"save-button\"\n      onSelect={() => actionManager.executeAction(actionSaveToActiveFile)}\n      icon={save}\n      aria-label={`${t(\"buttons.save\")}`}\n    >{`${t(\"buttons.save\")}`}</DropdownMenuItem>\n  );\n};\nSaveToActiveFile.displayName = \"SaveToActiveFile\";\n\nexport const SaveAsImage = () => {\n  const setAppState = useExcalidrawSetAppState();\n  const { t } = useI18n();\n  return (\n    <DropdownMenuItem\n      icon={ExportImageIcon}\n      data-testid=\"image-export-button\"\n      onSelect={() => setAppState({ openDialog: { name: \"imageExport\" } })}\n      shortcut={getShortcutFromShortcutName(\"imageExport\")}\n      aria-label={t(\"buttons.exportImage\")}\n    >\n      {t(\"buttons.exportImage\")}\n    </DropdownMenuItem>\n  );\n};\nSaveAsImage.displayName = \"SaveAsImage\";\n\nexport const CommandPalette = (opts?: { className?: string }) => {\n  const setAppState = useExcalidrawSetAppState();\n  const { t } = useI18n();\n\n  return (\n    <DropdownMenuItem\n      icon={boltIcon}\n      data-testid=\"command-palette-button\"\n      onSelect={() => {\n        trackEvent(\"command_palette\", \"open\", \"menu\");\n        setAppState({ openDialog: { name: \"commandPalette\" } });\n      }}\n      shortcut={getShortcutFromShortcutName(\"commandPalette\")}\n      aria-label={t(\"commandPalette.title\")}\n      className={opts?.className}\n    >\n      {t(\"commandPalette.title\")}\n    </DropdownMenuItem>\n  );\n};\nCommandPalette.displayName = \"CommandPalette\";\n\nexport const SearchMenu = (opts?: { className?: string }) => {\n  const { t } = useI18n();\n  const actionManager = useExcalidrawActionManager();\n\n  return (\n    <DropdownMenuItem\n      icon={searchIcon}\n      data-testid=\"search-menu-button\"\n      onSelect={() => {\n        actionManager.executeAction(actionToggleSearchMenu);\n      }}\n      shortcut={getShortcutFromShortcutName(\"searchMenu\")}\n      aria-label={t(\"search.title\")}\n      className={opts?.className}\n    >\n      {t(\"search.title\")}\n    </DropdownMenuItem>\n  );\n};\nSearchMenu.displayName = \"SearchMenu\";\n\nexport const Help = () => {\n  const { t } = useI18n();\n\n  const actionManager = useExcalidrawActionManager();\n\n  return (\n    <DropdownMenuItem\n      data-testid=\"help-menu-item\"\n      icon={HelpIcon}\n      onSelect={() => actionManager.executeAction(actionShortcuts)}\n      shortcut=\"?\"\n      aria-label={t(\"helpDialog.title\")}\n    >\n      {t(\"helpDialog.title\")}\n    </DropdownMenuItem>\n  );\n};\nHelp.displayName = \"Help\";\n\nexport const ClearCanvas = () => {\n  const { t } = useI18n();\n\n  const setActiveConfirmDialog = useSetAtom(activeConfirmDialogAtom);\n  const actionManager = useExcalidrawActionManager();\n\n  if (!actionManager.isActionEnabled(actionClearCanvas)) {\n    return null;\n  }\n\n  return (\n    <DropdownMenuItem\n      icon={TrashIcon}\n      onSelect={() => setActiveConfirmDialog(\"clearCanvas\")}\n      data-testid=\"clear-canvas-button\"\n      aria-label={t(\"buttons.clearReset\")}\n    >\n      {t(\"buttons.clearReset\")}\n    </DropdownMenuItem>\n  );\n};\nClearCanvas.displayName = \"ClearCanvas\";\n\nexport const ToggleTheme = (\n  props:\n    | {\n        allowSystemTheme: true;\n        theme: Theme | \"system\";\n        onSelect: (theme: Theme | \"system\") => void;\n      }\n    | {\n        allowSystemTheme?: false;\n        onSelect?: (theme: Theme) => void;\n      },\n) => {\n  const { t } = useI18n();\n  const appState = useUIAppState();\n  const actionManager = useExcalidrawActionManager();\n  const shortcut = getShortcutFromShortcutName(\"toggleTheme\");\n\n  if (!actionManager.isActionEnabled(actionToggleTheme)) {\n    return null;\n  }\n\n  if (props?.allowSystemTheme) {\n    return (\n      <DropdownMenuItemContentRadio\n        name=\"theme\"\n        value={props.theme}\n        onChange={(value: Theme | \"system\") => props.onSelect(value)}\n        choices={[\n          {\n            value: THEME.LIGHT,\n            label: SunIcon,\n            ariaLabel: `${t(\"buttons.lightMode\")} - ${shortcut}`,\n          },\n          {\n            value: THEME.DARK,\n            label: MoonIcon,\n            ariaLabel: `${t(\"buttons.darkMode\")} - ${shortcut}`,\n          },\n          {\n            value: \"system\",\n            label: DeviceDesktopIcon,\n            ariaLabel: t(\"buttons.systemMode\"),\n          },\n        ]}\n      >\n        {t(\"labels.theme\")}\n      </DropdownMenuItemContentRadio>\n    );\n  }\n\n  return (\n    <DropdownMenuItem\n      onSelect={(event) => {\n        // do not close the menu when changing theme\n        event.preventDefault();\n\n        if (props?.onSelect) {\n          props.onSelect(\n            appState.theme === THEME.DARK ? THEME.LIGHT : THEME.DARK,\n          );\n        } else {\n          return actionManager.executeAction(actionToggleTheme);\n        }\n      }}\n      icon={appState.theme === THEME.DARK ? SunIcon : MoonIcon}\n      data-testid=\"toggle-dark-mode\"\n      shortcut={shortcut}\n      aria-label={\n        appState.theme === THEME.DARK\n          ? t(\"buttons.lightMode\")\n          : t(\"buttons.darkMode\")\n      }\n    >\n      {appState.theme === THEME.DARK\n        ? t(\"buttons.lightMode\")\n        : t(\"buttons.darkMode\")}\n    </DropdownMenuItem>\n  );\n};\nToggleTheme.displayName = \"ToggleTheme\";\n\nexport const ChangeCanvasBackground = () => {\n  const { t } = useI18n();\n  const appState = useUIAppState();\n  const actionManager = useExcalidrawActionManager();\n  const appProps = useAppProps();\n\n  if (\n    appState.viewModeEnabled ||\n    !appProps.UIOptions.canvasActions.changeViewBackgroundColor\n  ) {\n    return null;\n  }\n  return (\n    <div style={{ marginTop: \"0.5rem\" }}>\n      <div\n        data-testid=\"canvas-background-label\"\n        style={{ fontSize: \".75rem\", marginBottom: \".5rem\" }}\n      >\n        {t(\"labels.canvasBackground\")}\n      </div>\n      <div style={{ padding: \"0 0.625rem\" }}>\n        {actionManager.renderAction(\"changeViewBackgroundColor\")}\n      </div>\n    </div>\n  );\n};\nChangeCanvasBackground.displayName = \"ChangeCanvasBackground\";\n\nexport const Export = () => {\n  const { t } = useI18n();\n  const setAppState = useExcalidrawSetAppState();\n  return (\n    <DropdownMenuItem\n      icon={ExportIcon}\n      onSelect={() => {\n        setAppState({ openDialog: { name: \"jsonExport\" } });\n      }}\n      data-testid=\"json-export-button\"\n      aria-label={t(\"buttons.export\")}\n    >\n      {t(\"buttons.export\")}\n    </DropdownMenuItem>\n  );\n};\nExport.displayName = \"Export\";\n\nexport const Socials = () => {\n  const { t } = useI18n();\n\n  return (\n    <>\n      <DropdownMenuItemLink\n        icon={GithubIcon}\n        href=\"https://github.com/excalidraw/excalidraw\"\n        aria-label=\"GitHub\"\n      >\n        GitHub\n      </DropdownMenuItemLink>\n      <DropdownMenuItemLink\n        icon={XBrandIcon}\n        href=\"https://x.com/excalidraw\"\n        aria-label=\"X\"\n      >\n        {t(\"labels.followUs\")}\n      </DropdownMenuItemLink>\n      <DropdownMenuItemLink\n        icon={DiscordIcon}\n        href=\"https://discord.gg/UexuTaE\"\n        aria-label=\"Discord\"\n      >\n        {t(\"labels.discordChat\")}\n      </DropdownMenuItemLink>\n    </>\n  );\n};\nSocials.displayName = \"Socials\";\n\nexport const LiveCollaborationTrigger = ({\n  onSelect,\n  isCollaborating,\n}: {\n  onSelect: () => void;\n  isCollaborating: boolean;\n}) => {\n  const { t } = useI18n();\n  return (\n    <DropdownMenuItem\n      data-testid=\"collab-button\"\n      icon={usersIcon}\n      className={clsx({\n        \"active-collab\": isCollaborating,\n      })}\n      onSelect={onSelect}\n    >\n      {t(\"labels.liveCollaboration\")}\n    </DropdownMenuItem>\n  );\n};\n\nLiveCollaborationTrigger.displayName = \"LiveCollaborationTrigger\";\n", "import { atom, editorJotaiStore } from \"../../editor-jotai\";\nimport type React from \"react\";\n\nexport type OverwriteConfirmState =\n  | {\n      active: true;\n      title: string;\n      description: React.ReactNode;\n      actionLabel: string;\n      color: \"danger\" | \"warning\";\n\n      onClose: () => void;\n      onConfirm: () => void;\n      onReject: () => void;\n    }\n  | { active: false };\n\nexport const overwriteConfirmStateAtom = atom<OverwriteConfirmState>({\n  active: false,\n});\n\nexport async function openConfirmModal({\n  title,\n  description,\n  actionLabel,\n  color,\n}: {\n  title: string;\n  description: React.ReactNode;\n  actionLabel: string;\n  color: \"danger\" | \"warning\";\n}) {\n  return new Promise<boolean>((resolve) => {\n    editorJotaiStore.set(overwriteConfirmStateAtom, {\n      active: true,\n      onConfirm: () => resolve(true),\n      onClose: () => resolve(false),\n      onReject: () => resolve(false),\n      title,\n      description,\n      actionLabel,\n      color,\n    });\n  });\n}\n", "import { useDevice } from \"../App\";\nimport { RadioGroup } from \"../RadioGroup\";\n\ntype Props<T> = {\n  value: T;\n  shortcut?: string;\n  choices: {\n    value: T;\n    label: React.ReactNode;\n    ariaLabel?: string;\n  }[];\n  onChange: (value: T) => void;\n  children: React.ReactNode;\n  name: string;\n};\n\nconst DropdownMenuItemContentRadio = <T,>({\n  value,\n  shortcut,\n  onChange,\n  choices,\n  children,\n  name,\n}: Props<T>) => {\n  const device = useDevice();\n\n  return (\n    <>\n      <div className=\"dropdown-menu-item-base dropdown-menu-item-bare\">\n        <label className=\"dropdown-menu-item__text\" htmlFor={name}>\n          {children}\n        </label>\n        <RadioGroup\n          name={name}\n          value={value}\n          onChange={onChange}\n          choices={choices}\n        />\n      </div>\n      {shortcut && !device.editor.isMobile && (\n        <div className=\"dropdown-menu-item__shortcut dropdown-menu-item__shortcut--orphaned\">\n          {shortcut}\n        </div>\n      )}\n    </>\n  );\n};\n\nDropdownMenuItemContentRadio.displayName = \"DropdownMenuItemContentRadio\";\n\nexport default DropdownMenuItemContentRadio;\n", "import React, { useLayoutEffect, useRef } from \"react\";\nimport { useTunnels } from \"../../context/tunnels\";\nimport { atom } from \"../../editor-jotai\";\n\nexport const withInternalFallback = <P,>(\n  componentName: string,\n  Component: React.FC<P>,\n) => {\n  const renderAtom = atom(0);\n\n  const WrapperComponent: React.FC<\n    P & {\n      __fallback?: boolean;\n    }\n  > = (props) => {\n    const {\n      tunnelsJotai: { useAtom },\n    } = useTunnels();\n    // for rerenders\n    const [, setCounter] = useAtom(renderAtom);\n    // for initial & subsequent renders. Tracked as component state\n    // due to excalidraw multi-instance scanerios.\n    const metaRef = useRef({\n      // flag set on initial render to tell the fallback component to skip the\n      // render until mount counter are initialized. This is because the counter\n      // is initialized in an effect, and thus we could end rendering both\n      // components at the same time until counter is initialized.\n      preferHost: false,\n      counter: 0,\n    });\n\n    useLayoutEffect(() => {\n      const meta = metaRef.current;\n      setCounter((c) => {\n        const next = c + 1;\n        meta.counter = next;\n\n        return next;\n      });\n      return () => {\n        setCounter((c) => {\n          const next = c - 1;\n          meta.counter = next;\n          if (!next) {\n            meta.preferHost = false;\n          }\n          return next;\n        });\n      };\n    }, [setCounter]);\n\n    if (!props.__fallback) {\n      metaRef.current.preferHost = true;\n    }\n\n    // ensure we don't render fallback and host components at the same time\n    if (\n      // either before the counters are initialized\n      (!metaRef.current.counter &&\n        props.__fallback &&\n        metaRef.current.preferHost) ||\n      // or after the counters are initialized, and both are rendered\n      // (this is the default when host renders as well)\n      (metaRef.current.counter > 1 && props.__fallback)\n    ) {\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n\n  WrapperComponent.displayName = componentName;\n\n  return WrapperComponent;\n};\n", "import React from \"react\";\nimport { useDevice, useExcalidrawSetAppState } from \"../App\";\nimport DropdownMenu from \"../dropdownMenu/DropdownMenu\";\n\nimport * as DefaultItems from \"./DefaultItems\";\n\nimport { UserList } from \"../UserList\";\nimport { t } from \"../../i18n\";\nimport { HamburgerMenuIcon } from \"../icons\";\nimport { withInternalFallback } from \"../hoc/withInternalFallback\";\nimport { composeEventHandlers } from \"../../utils\";\nimport { useTunnels } from \"../../context/tunnels\";\nimport { useUIAppState } from \"../../context/ui-appState\";\n\nconst MainMenu = Object.assign(\n  withInternalFallback(\n    \"MainMenu\",\n    ({\n      children,\n      onSelect,\n    }: {\n      children?: React.ReactNode;\n      /**\n       * Called when any menu item is selected (clicked on).\n       */\n      onSelect?: (event: Event) => void;\n    }) => {\n      const { MainMenuTunnel } = useTunnels();\n      const device = useDevice();\n      const appState = useUIAppState();\n      const setAppState = useExcalidrawSetAppState();\n      const onClickOutside = device.editor.isMobile\n        ? undefined\n        : () => setAppState({ openMenu: null });\n\n      return (\n        <MainMenuTunnel.In>\n          <DropdownMenu open={appState.openMenu === \"canvas\"}>\n            <DropdownMenu.Trigger\n              onToggle={() => {\n                setAppState({\n                  openMenu: appState.openMenu === \"canvas\" ? null : \"canvas\",\n                });\n              }}\n              data-testid=\"main-menu-trigger\"\n              className=\"main-menu-trigger\"\n            >\n              {HamburgerMenuIcon}\n            </DropdownMenu.Trigger>\n            <DropdownMenu.Content\n              onClickOutside={onClickOutside}\n              onSelect={composeEventHandlers(onSelect, () => {\n                setAppState({ openMenu: null });\n              })}\n            >\n              {children}\n              {device.editor.isMobile && appState.collaborators.size > 0 && (\n                <fieldset className=\"UserList-Wrapper\">\n                  <legend>{t(\"labels.collaborators\")}</legend>\n                  <UserList\n                    mobile={true}\n                    collaborators={appState.collaborators}\n                    userToFollow={appState.userToFollow?.socketId || null}\n                  />\n                </fieldset>\n              )}\n            </DropdownMenu.Content>\n          </DropdownMenu>\n        </MainMenuTunnel.In>\n      );\n    },\n  ),\n  {\n    Trigger: DropdownMenu.Trigger,\n    Item: DropdownMenu.Item,\n    ItemLink: DropdownMenu.ItemLink,\n    ItemCustom: DropdownMenu.ItemCustom,\n    Group: DropdownMenu.Group,\n    Separator: DropdownMenu.Separator,\n    DefaultItems,\n  },\n);\n\nexport default MainMenu;\n", "import React from \"react\";\nimport { FilledButton } from \"../FilledButton\";\nimport { useExcalidrawActionManager, useExcalidrawSetAppState } from \"../App\";\nimport { actionSaveFileToDisk } from \"../../actions\";\nimport { useI18n } from \"../../i18n\";\nimport { actionChangeExportEmbedScene } from \"../../actions/actionExport\";\n\nexport type ActionProps = {\n  title: string;\n  children: React.ReactNode;\n  actionLabel: string;\n  onClick: () => void;\n};\n\nexport const Action = ({\n  title,\n  children,\n  actionLabel,\n  onClick,\n}: ActionProps) => {\n  return (\n    <div className=\"OverwriteConfirm__Actions__Action\">\n      <h4>{title}</h4>\n      <div className=\"OverwriteConfirm__Actions__Action__content\">\n        {children}\n      </div>\n      <FilledButton\n        variant=\"outlined\"\n        color=\"muted\"\n        label={actionLabel}\n        size=\"large\"\n        fullWidth\n        onClick={onClick}\n      />\n    </div>\n  );\n};\n\nexport const ExportToImage = () => {\n  const { t } = useI18n();\n  const actionManager = useExcalidrawActionManager();\n  const setAppState = useExcalidrawSetAppState();\n\n  return (\n    <Action\n      title={t(\"overwriteConfirm.action.exportToImage.title\")}\n      actionLabel={t(\"overwriteConfirm.action.exportToImage.button\")}\n      onClick={() => {\n        actionManager.executeAction(actionChangeExportEmbedScene, \"ui\", true);\n        setAppState({ openDialog: { name: \"imageExport\" } });\n      }}\n    >\n      {t(\"overwriteConfirm.action.exportToImage.description\")}\n    </Action>\n  );\n};\n\nexport const SaveToDisk = () => {\n  const { t } = useI18n();\n  const actionManager = useExcalidrawActionManager();\n\n  return (\n    <Action\n      title={t(\"overwriteConfirm.action.saveToDisk.title\")}\n      actionLabel={t(\"overwriteConfirm.action.saveToDisk.button\")}\n      onClick={() => {\n        actionManager.executeAction(actionSaveFileToDisk, \"ui\");\n      }}\n    >\n      {t(\"overwriteConfirm.action.saveToDisk.description\")}\n    </Action>\n  );\n};\n\nconst Actions = Object.assign(\n  ({ children }: { children: React.ReactNode }) => {\n    return <div className=\"OverwriteConfirm__Actions\">{children}</div>;\n  },\n  {\n    ExportToImage,\n    SaveToDisk,\n  },\n);\n\nexport { Actions };\n", "import React from \"react\";\n\nimport { useTunnels } from \"../../context/tunnels\";\nimport { useAtom } from \"../../editor-jotai\";\nimport { Dialog } from \"../Dialog\";\nimport { withInternalFallback } from \"../hoc/withInternalFallback\";\nimport { overwriteConfirmStateAtom } from \"./OverwriteConfirmState\";\n\nimport { FilledButton } from \"../FilledButton\";\nimport { alertTriangleIcon } from \"../icons\";\nimport { Actions, Action } from \"./OverwriteConfirmActions\";\nimport \"./OverwriteConfirm.scss\";\n\nexport type OverwriteConfirmDialogProps = {\n  children: React.ReactNode;\n};\n\nconst OverwriteConfirmDialog = Object.assign(\n  withInternalFallback(\n    \"OverwriteConfirmDialog\",\n    ({ children }: OverwriteConfirmDialogProps) => {\n      const { OverwriteConfirmDialogTunnel } = useTunnels();\n      const [overwriteConfirmState, setState] = useAtom(\n        overwriteConfirmStateAtom,\n      );\n\n      if (!overwriteConfirmState.active) {\n        return null;\n      }\n\n      const handleClose = () => {\n        overwriteConfirmState.onClose();\n        setState((state) => ({ ...state, active: false }));\n      };\n\n      const handleConfirm = () => {\n        overwriteConfirmState.onConfirm();\n        setState((state) => ({ ...state, active: false }));\n      };\n\n      return (\n        <OverwriteConfirmDialogTunnel.In>\n          <Dialog onCloseRequest={handleClose} title={false} size={916}>\n            <div className=\"OverwriteConfirm\">\n              <h3>{overwriteConfirmState.title}</h3>\n              <div\n                className={`OverwriteConfirm__Description OverwriteConfirm__Description--color-${overwriteConfirmState.color}`}\n              >\n                <div className=\"OverwriteConfirm__Description__icon\">\n                  {alertTriangleIcon}\n                </div>\n                <div>{overwriteConfirmState.description}</div>\n                <div className=\"OverwriteConfirm__Description__spacer\"></div>\n                <FilledButton\n                  color={overwriteConfirmState.color}\n                  size=\"large\"\n                  label={overwriteConfirmState.actionLabel}\n                  onClick={handleConfirm}\n                />\n              </div>\n              <Actions>{children}</Actions>\n            </div>\n          </Dialog>\n        </OverwriteConfirmDialogTunnel.In>\n      );\n    },\n  ),\n  {\n    Actions,\n    Action,\n  },\n);\n\nexport { OverwriteConfirmDialog };\n", "import clsx from \"clsx\";\nimport {\n  CANVAS_SEARCH_TAB,\n  DEFAULT_SIDEBAR,\n  LIBRARY_SIDEBAR_TAB,\n} from \"../constants\";\nimport { useTunnels } from \"../context/tunnels\";\nimport { useUIAppState } from \"../context/ui-appState\";\nimport type { MarkOptional, Merge } from \"../utility-types\";\nimport { composeEventHandlers } from \"../utils\";\nimport { useExcalidrawSetAppState } from \"./App\";\nimport { withInternalFallback } from \"./hoc/withInternalFallback\";\nimport { LibraryMenu } from \"./LibraryMenu\";\nimport type { SidebarProps, SidebarTriggerProps } from \"./Sidebar/common\";\nimport { Sidebar } from \"./Sidebar/Sidebar\";\nimport \"../components/dropdownMenu/DropdownMenu.scss\";\nimport { SearchMenu } from \"./SearchMenu\";\nimport { LibraryIcon, searchIcon } from \"./icons\";\n\nconst DefaultSidebarTrigger = withInternalFallback(\n  \"DefaultSidebarTrigger\",\n  (\n    props: Omit<SidebarTriggerProps, \"name\"> &\n      React.HTMLAttributes<HTMLDivElement>,\n  ) => {\n    const { DefaultSidebarTriggerTunnel } = useTunnels();\n    return (\n      <DefaultSidebarTriggerTunnel.In>\n        <Sidebar.Trigger\n          {...props}\n          className=\"default-sidebar-trigger\"\n          name={DEFAULT_SIDEBAR.name}\n        />\n      </DefaultSidebarTriggerTunnel.In>\n    );\n  },\n);\nDefaultSidebarTrigger.displayName = \"DefaultSidebarTrigger\";\n\nconst DefaultTabTriggers = ({ children }: { children: React.ReactNode }) => {\n  const { DefaultSidebarTabTriggersTunnel } = useTunnels();\n  return (\n    <DefaultSidebarTabTriggersTunnel.In>\n      {children}\n    </DefaultSidebarTabTriggersTunnel.In>\n  );\n};\nDefaultTabTriggers.displayName = \"DefaultTabTriggers\";\n\nexport const DefaultSidebar = Object.assign(\n  withInternalFallback(\n    \"DefaultSidebar\",\n    ({\n      children,\n      className,\n      onDock,\n      docked,\n      ...rest\n    }: Merge<\n      MarkOptional<Omit<SidebarProps, \"name\">, \"children\">,\n      {\n        /** pass `false` to disable docking */\n        onDock?: SidebarProps[\"onDock\"] | false;\n      }\n    >) => {\n      const appState = useUIAppState();\n      const setAppState = useExcalidrawSetAppState();\n\n      const { DefaultSidebarTabTriggersTunnel } = useTunnels();\n\n      const isForceDocked = appState.openSidebar?.tab === CANVAS_SEARCH_TAB;\n\n      return (\n        <Sidebar\n          {...rest}\n          name=\"default\"\n          key=\"default\"\n          className={clsx(\"default-sidebar\", className)}\n          docked={\n            isForceDocked || (docked ?? appState.defaultSidebarDockedPreference)\n          }\n          onDock={\n            // `onDock=false` disables docking.\n            // if `docked` passed, but no onDock passed, disable manual docking.\n            isForceDocked || onDock === false || (!onDock && docked != null)\n              ? undefined\n              : // compose to allow the host app to listen on default behavior\n                composeEventHandlers(onDock, (docked) => {\n                  setAppState({ defaultSidebarDockedPreference: docked });\n                })\n          }\n        >\n          <Sidebar.Tabs>\n            <Sidebar.Header>\n              <Sidebar.TabTriggers>\n                <Sidebar.TabTrigger tab={CANVAS_SEARCH_TAB}>\n                  {searchIcon}\n                </Sidebar.TabTrigger>\n                <Sidebar.TabTrigger tab={LIBRARY_SIDEBAR_TAB}>\n                  {LibraryIcon}\n                </Sidebar.TabTrigger>\n                <DefaultSidebarTabTriggersTunnel.Out />\n              </Sidebar.TabTriggers>\n            </Sidebar.Header>\n            <Sidebar.Tab tab={LIBRARY_SIDEBAR_TAB}>\n              <LibraryMenu />\n            </Sidebar.Tab>\n            <Sidebar.Tab tab={CANVAS_SEARCH_TAB}>\n              <SearchMenu />\n            </Sidebar.Tab>\n            {children}\n          </Sidebar.Tabs>\n        </Sidebar>\n      );\n    },\n  ),\n  {\n    Trigger: DefaultSidebarTrigger,\n    TabTriggers: DefaultTabTriggers,\n  },\n);\n", "import { Fragment, memo, useEffect, useRef, useState } from \"react\";\nimport { collapseDownIcon, upIcon, searchIcon } from \"./icons\";\nimport { TextField } from \"./TextField\";\nimport { Button } from \"./Button\";\nimport { useApp, useExcalidrawSetAppState } from \"./App\";\nimport debounce from \"lodash.debounce\";\nimport type { AppClassProperties } from \"../types\";\nimport { isTextElement, newTextElement } from \"../element\";\nimport type { ExcalidrawTextElement } from \"../element/types\";\nimport { addEventListener, getFontString } from \"../utils\";\nimport { KEYS } from \"../keys\";\nimport clsx from \"clsx\";\nimport { atom, useAtom } from \"../editor-jotai\";\nimport { t } from \"../i18n\";\nimport { isElementCompletelyInViewport } from \"../element/sizeHelpers\";\nimport { randomInteger } from \"../random\";\nimport { CLASSES, EVENT } from \"../constants\";\nimport { useStable } from \"../hooks/useStable\";\n\nimport \"./SearchMenu.scss\";\nimport { round } from \"@excalidraw/math\";\nimport { measureText } from \"../element/textMeasurements\";\n\nconst searchQueryAtom = atom<string>(\"\");\nexport const searchItemInFocusAtom = atom<number | null>(null);\n\nconst SEARCH_DEBOUNCE = 350;\n\ntype SearchMatchItem = {\n  textElement: ExcalidrawTextElement;\n  searchQuery: SearchQuery;\n  index: number;\n  preview: {\n    indexInSearchQuery: number;\n    previewText: string;\n    moreBefore: boolean;\n    moreAfter: boolean;\n  };\n  matchedLines: {\n    offsetX: number;\n    offsetY: number;\n    width: number;\n    height: number;\n  }[];\n};\n\ntype SearchMatches = {\n  nonce: number | null;\n  items: SearchMatchItem[];\n};\n\ntype SearchQuery = string & { _brand: \"SearchQuery\" };\n\nexport const SearchMenu = () => {\n  const app = useApp();\n  const setAppState = useExcalidrawSetAppState();\n\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  const [inputValue, setInputValue] = useAtom(searchQueryAtom);\n  const searchQuery = inputValue.trim() as SearchQuery;\n\n  const [isSearching, setIsSearching] = useState(false);\n\n  const [searchMatches, setSearchMatches] = useState<SearchMatches>({\n    nonce: null,\n    items: [],\n  });\n  const searchedQueryRef = useRef<SearchQuery | null>(null);\n  const lastSceneNonceRef = useRef<number | undefined>(undefined);\n\n  const [focusIndex, setFocusIndex] = useAtom(searchItemInFocusAtom);\n  const elementsMap = app.scene.getNonDeletedElementsMap();\n\n  useEffect(() => {\n    if (isSearching) {\n      return;\n    }\n    if (\n      searchQuery !== searchedQueryRef.current ||\n      app.scene.getSceneNonce() !== lastSceneNonceRef.current\n    ) {\n      searchedQueryRef.current = null;\n      handleSearch(searchQuery, app, (matchItems, index) => {\n        setSearchMatches({\n          nonce: randomInteger(),\n          items: matchItems,\n        });\n        searchedQueryRef.current = searchQuery;\n        lastSceneNonceRef.current = app.scene.getSceneNonce();\n        setAppState({\n          searchMatches: matchItems.map((searchMatch) => ({\n            id: searchMatch.textElement.id,\n            focus: false,\n            matchedLines: searchMatch.matchedLines,\n          })),\n        });\n      });\n    }\n  }, [\n    isSearching,\n    searchQuery,\n    elementsMap,\n    app,\n    setAppState,\n    setFocusIndex,\n    lastSceneNonceRef,\n  ]);\n\n  const goToNextItem = () => {\n    if (searchMatches.items.length > 0) {\n      setFocusIndex((focusIndex) => {\n        if (focusIndex === null) {\n          return 0;\n        }\n\n        return (focusIndex + 1) % searchMatches.items.length;\n      });\n    }\n  };\n\n  const goToPreviousItem = () => {\n    if (searchMatches.items.length > 0) {\n      setFocusIndex((focusIndex) => {\n        if (focusIndex === null) {\n          return 0;\n        }\n\n        return focusIndex - 1 < 0\n          ? searchMatches.items.length - 1\n          : focusIndex - 1;\n      });\n    }\n  };\n\n  useEffect(() => {\n    setAppState((state) => {\n      return {\n        searchMatches: state.searchMatches.map((match, index) => {\n          if (index === focusIndex) {\n            return { ...match, focus: true };\n          }\n          return { ...match, focus: false };\n        }),\n      };\n    });\n  }, [focusIndex, setAppState]);\n\n  useEffect(() => {\n    if (searchMatches.items.length > 0 && focusIndex !== null) {\n      const match = searchMatches.items[focusIndex];\n\n      if (match) {\n        const zoomValue = app.state.zoom.value;\n\n        const matchAsElement = newTextElement({\n          text: match.searchQuery,\n          x: match.textElement.x + (match.matchedLines[0]?.offsetX ?? 0),\n          y: match.textElement.y + (match.matchedLines[0]?.offsetY ?? 0),\n          width: match.matchedLines[0]?.width,\n          height: match.matchedLines[0]?.height,\n          fontSize: match.textElement.fontSize,\n          fontFamily: match.textElement.fontFamily,\n        });\n\n        const FONT_SIZE_LEGIBILITY_THRESHOLD = 14;\n\n        const fontSize = match.textElement.fontSize;\n        const isTextTiny =\n          fontSize * zoomValue < FONT_SIZE_LEGIBILITY_THRESHOLD;\n\n        if (\n          !isElementCompletelyInViewport(\n            [matchAsElement],\n            app.canvas.width / window.devicePixelRatio,\n            app.canvas.height / window.devicePixelRatio,\n            {\n              offsetLeft: app.state.offsetLeft,\n              offsetTop: app.state.offsetTop,\n              scrollX: app.state.scrollX,\n              scrollY: app.state.scrollY,\n              zoom: app.state.zoom,\n            },\n            app.scene.getNonDeletedElementsMap(),\n            app.getEditorUIOffsets(),\n          ) ||\n          isTextTiny\n        ) {\n          let zoomOptions: Parameters<AppClassProperties[\"scrollToContent\"]>[1];\n\n          if (isTextTiny) {\n            if (fontSize >= FONT_SIZE_LEGIBILITY_THRESHOLD) {\n              zoomOptions = { fitToContent: true };\n            } else {\n              zoomOptions = {\n                fitToViewport: true,\n                // calculate zoom level to make the fontSize ~equal to FONT_SIZE_THRESHOLD, rounded to nearest 10%\n                maxZoom: round(FONT_SIZE_LEGIBILITY_THRESHOLD / fontSize, 1),\n              };\n            }\n          } else {\n            zoomOptions = { fitToContent: true };\n          }\n\n          app.scrollToContent(matchAsElement, {\n            animate: true,\n            duration: 300,\n            ...zoomOptions,\n            canvasOffsets: app.getEditorUIOffsets(),\n          });\n        }\n      }\n    }\n  }, [focusIndex, searchMatches, app]);\n\n  useEffect(() => {\n    return () => {\n      setFocusIndex(null);\n      searchedQueryRef.current = null;\n      lastSceneNonceRef.current = undefined;\n      setAppState({\n        searchMatches: [],\n      });\n      setIsSearching(false);\n    };\n  }, [setAppState, setFocusIndex]);\n\n  const stableState = useStable({\n    goToNextItem,\n    goToPreviousItem,\n    searchMatches,\n  });\n\n  useEffect(() => {\n    const eventHandler = (event: KeyboardEvent) => {\n      if (\n        event.key === KEYS.ESCAPE &&\n        !app.state.openDialog &&\n        !app.state.openPopup\n      ) {\n        event.preventDefault();\n        event.stopPropagation();\n        setAppState({\n          openSidebar: null,\n        });\n        return;\n      }\n\n      if (event[KEYS.CTRL_OR_CMD] && event.key === KEYS.F) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!searchInputRef.current?.matches(\":focus\")) {\n          if (app.state.openDialog) {\n            setAppState({\n              openDialog: null,\n            });\n          }\n          searchInputRef.current?.focus();\n          searchInputRef.current?.select();\n        } else {\n          setAppState({\n            openSidebar: null,\n          });\n        }\n      }\n\n      if (\n        event.target instanceof HTMLElement &&\n        event.target.closest(\".layer-ui__search\")\n      ) {\n        if (stableState.searchMatches.items.length) {\n          if (event.key === KEYS.ENTER) {\n            event.stopPropagation();\n            stableState.goToNextItem();\n          }\n\n          if (event.key === KEYS.ARROW_UP) {\n            event.stopPropagation();\n            stableState.goToPreviousItem();\n          } else if (event.key === KEYS.ARROW_DOWN) {\n            event.stopPropagation();\n            stableState.goToNextItem();\n          }\n        }\n      }\n    };\n\n    // `capture` needed to prevent firing on initial open from App.tsx,\n    // as well as to handle events before App ones\n    return addEventListener(window, EVENT.KEYDOWN, eventHandler, {\n      capture: true,\n      passive: false,\n    });\n  }, [setAppState, stableState, app]);\n\n  const matchCount = `${searchMatches.items.length} ${\n    searchMatches.items.length === 1\n      ? t(\"search.singleResult\")\n      : t(\"search.multipleResults\")\n  }`;\n\n  return (\n    <div className=\"layer-ui__search\">\n      <div className=\"layer-ui__search-header\">\n        <TextField\n          className={CLASSES.SEARCH_MENU_INPUT_WRAPPER}\n          value={inputValue}\n          ref={searchInputRef}\n          placeholder={t(\"search.placeholder\")}\n          icon={searchIcon}\n          onChange={(value) => {\n            setInputValue(value);\n            setIsSearching(true);\n            const searchQuery = value.trim() as SearchQuery;\n            handleSearch(searchQuery, app, (matchItems, index) => {\n              setSearchMatches({\n                nonce: randomInteger(),\n                items: matchItems,\n              });\n              setFocusIndex(index);\n              searchedQueryRef.current = searchQuery;\n              lastSceneNonceRef.current = app.scene.getSceneNonce();\n              setAppState({\n                searchMatches: matchItems.map((searchMatch) => ({\n                  id: searchMatch.textElement.id,\n                  focus: false,\n                  matchedLines: searchMatch.matchedLines,\n                })),\n              });\n\n              setIsSearching(false);\n            });\n          }}\n          selectOnRender\n        />\n      </div>\n\n      <div className=\"layer-ui__search-count\">\n        {searchMatches.items.length > 0 && (\n          <>\n            {focusIndex !== null && focusIndex > -1 ? (\n              <div>\n                {focusIndex + 1} / {matchCount}\n              </div>\n            ) : (\n              <div>{matchCount}</div>\n            )}\n            <div className=\"result-nav\">\n              <Button\n                onSelect={() => {\n                  goToNextItem();\n                }}\n                className=\"result-nav-btn\"\n              >\n                {collapseDownIcon}\n              </Button>\n              <Button\n                onSelect={() => {\n                  goToPreviousItem();\n                }}\n                className=\"result-nav-btn\"\n              >\n                {upIcon}\n              </Button>\n            </div>\n          </>\n        )}\n\n        {searchMatches.items.length === 0 &&\n          searchQuery &&\n          searchedQueryRef.current && (\n            <div style={{ margin: \"1rem auto\" }}>{t(\"search.noMatch\")}</div>\n          )}\n      </div>\n\n      <MatchList\n        matches={searchMatches}\n        onItemClick={setFocusIndex}\n        focusIndex={focusIndex}\n        searchQuery={searchQuery}\n      />\n    </div>\n  );\n};\n\nconst ListItem = (props: {\n  preview: SearchMatchItem[\"preview\"];\n  searchQuery: SearchQuery;\n  highlighted: boolean;\n  onClick?: () => void;\n}) => {\n  const preview = [\n    props.preview.moreBefore ? \"...\" : \"\",\n    props.preview.previewText.slice(0, props.preview.indexInSearchQuery),\n    props.preview.previewText.slice(\n      props.preview.indexInSearchQuery,\n      props.preview.indexInSearchQuery + props.searchQuery.length,\n    ),\n    props.preview.previewText.slice(\n      props.preview.indexInSearchQuery + props.searchQuery.length,\n    ),\n    props.preview.moreAfter ? \"...\" : \"\",\n  ];\n\n  return (\n    <div\n      tabIndex={-1}\n      className={clsx(\"layer-ui__result-item\", {\n        active: props.highlighted,\n      })}\n      onClick={props.onClick}\n      ref={(ref) => {\n        if (props.highlighted) {\n          ref?.scrollIntoView({ behavior: \"auto\", block: \"nearest\" });\n        }\n      }}\n    >\n      <div className=\"preview-text\">\n        {preview.flatMap((text, idx) => (\n          <Fragment key={idx}>{idx === 2 ? <b>{text}</b> : text}</Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n\ninterface MatchListProps {\n  matches: SearchMatches;\n  onItemClick: (index: number) => void;\n  focusIndex: number | null;\n  searchQuery: SearchQuery;\n}\n\nconst MatchListBase = (props: MatchListProps) => {\n  return (\n    <div className=\"layer-ui__search-result-container\">\n      {props.matches.items.map((searchMatch, index) => (\n        <ListItem\n          key={searchMatch.textElement.id + searchMatch.index}\n          searchQuery={props.searchQuery}\n          preview={searchMatch.preview}\n          highlighted={index === props.focusIndex}\n          onClick={() => props.onItemClick(index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst areEqual = (prevProps: MatchListProps, nextProps: MatchListProps) => {\n  return (\n    prevProps.matches.nonce === nextProps.matches.nonce &&\n    prevProps.focusIndex === nextProps.focusIndex\n  );\n};\n\nconst MatchList = memo(MatchListBase, areEqual);\n\nconst getMatchPreview = (\n  text: string,\n  index: number,\n  searchQuery: SearchQuery,\n) => {\n  const WORDS_BEFORE = 2;\n  const WORDS_AFTER = 5;\n\n  const substrBeforeQuery = text.slice(0, index);\n  const wordsBeforeQuery = substrBeforeQuery.split(/\\s+/);\n  // text = \"small\", query = \"mall\", not complete before\n  // text = \"small\", query = \"smal\", complete before\n  const isQueryCompleteBefore = substrBeforeQuery.endsWith(\" \");\n  const startWordIndex =\n    wordsBeforeQuery.length -\n    WORDS_BEFORE -\n    1 -\n    (isQueryCompleteBefore ? 0 : 1);\n  let wordsBeforeAsString =\n    wordsBeforeQuery.slice(startWordIndex <= 0 ? 0 : startWordIndex).join(\" \") +\n    (isQueryCompleteBefore ? \" \" : \"\");\n\n  const MAX_ALLOWED_CHARS = 20;\n\n  wordsBeforeAsString =\n    wordsBeforeAsString.length > MAX_ALLOWED_CHARS\n      ? wordsBeforeAsString.slice(-MAX_ALLOWED_CHARS)\n      : wordsBeforeAsString;\n\n  const substrAfterQuery = text.slice(index + searchQuery.length);\n  const wordsAfter = substrAfterQuery.split(/\\s+/);\n  // text = \"small\", query = \"mall\", complete after\n  // text = \"small\", query = \"smal\", not complete after\n  const isQueryCompleteAfter = !substrAfterQuery.startsWith(\" \");\n  const numberOfWordsToTake = isQueryCompleteAfter\n    ? WORDS_AFTER + 1\n    : WORDS_AFTER;\n  const wordsAfterAsString =\n    (isQueryCompleteAfter ? \"\" : \" \") +\n    wordsAfter.slice(0, numberOfWordsToTake).join(\" \");\n\n  return {\n    indexInSearchQuery: wordsBeforeAsString.length,\n    previewText: wordsBeforeAsString + searchQuery + wordsAfterAsString,\n    moreBefore: startWordIndex > 0,\n    moreAfter: wordsAfter.length > numberOfWordsToTake,\n  };\n};\n\nconst normalizeWrappedText = (\n  wrappedText: string,\n  originalText: string,\n): string => {\n  const wrappedLines = wrappedText.split(\"\\n\");\n  const normalizedLines: string[] = [];\n  let originalIndex = 0;\n\n  for (let i = 0; i < wrappedLines.length; i++) {\n    let currentLine = wrappedLines[i];\n    const nextLine = wrappedLines[i + 1];\n\n    if (nextLine) {\n      const nextLineIndexInOriginal = originalText.indexOf(\n        nextLine,\n        originalIndex,\n      );\n\n      if (nextLineIndexInOriginal > currentLine.length + originalIndex) {\n        let j = nextLineIndexInOriginal - (currentLine.length + originalIndex);\n\n        while (j > 0) {\n          currentLine += \" \";\n          j--;\n        }\n      }\n    }\n\n    normalizedLines.push(currentLine);\n    originalIndex = originalIndex + currentLine.length;\n  }\n\n  return normalizedLines.join(\"\\n\");\n};\n\nconst getMatchedLines = (\n  textElement: ExcalidrawTextElement,\n  searchQuery: SearchQuery,\n  index: number,\n) => {\n  const normalizedText = normalizeWrappedText(\n    textElement.text,\n    textElement.originalText,\n  );\n\n  const lines = normalizedText.split(\"\\n\");\n\n  const lineIndexRanges = [];\n  let currentIndex = 0;\n  let lineNumber = 0;\n\n  for (const line of lines) {\n    const startIndex = currentIndex;\n    const endIndex = startIndex + line.length - 1;\n\n    lineIndexRanges.push({\n      line,\n      startIndex,\n      endIndex,\n      lineNumber,\n    });\n\n    // Move to the next line's start index\n    currentIndex = endIndex + 1;\n    lineNumber++;\n  }\n\n  let startIndex = index;\n  let remainingQuery = textElement.originalText.slice(\n    index,\n    index + searchQuery.length,\n  );\n  const matchedLines: {\n    offsetX: number;\n    offsetY: number;\n    width: number;\n    height: number;\n  }[] = [];\n\n  for (const lineIndexRange of lineIndexRanges) {\n    if (remainingQuery === \"\") {\n      break;\n    }\n\n    if (\n      startIndex >= lineIndexRange.startIndex &&\n      startIndex <= lineIndexRange.endIndex\n    ) {\n      const matchCapacity = lineIndexRange.endIndex + 1 - startIndex;\n      const textToStart = lineIndexRange.line.slice(\n        0,\n        startIndex - lineIndexRange.startIndex,\n      );\n\n      const matchedWord = remainingQuery.slice(0, matchCapacity);\n      remainingQuery = remainingQuery.slice(matchCapacity);\n\n      const offset = measureText(\n        textToStart,\n        getFontString(textElement),\n        textElement.lineHeight,\n      );\n\n      // measureText returns a non-zero width for the empty string\n      // which is not what we're after here, hence the check and the correction\n      if (textToStart === \"\") {\n        offset.width = 0;\n      }\n\n      if (textElement.textAlign !== \"left\" && lineIndexRange.line.length > 0) {\n        const lineLength = measureText(\n          lineIndexRange.line,\n          getFontString(textElement),\n          textElement.lineHeight,\n        );\n\n        const spaceToStart =\n          textElement.textAlign === \"center\"\n            ? (textElement.width - lineLength.width) / 2\n            : textElement.width - lineLength.width;\n        offset.width += spaceToStart;\n      }\n\n      const { width, height } = measureText(\n        matchedWord,\n        getFontString(textElement),\n        textElement.lineHeight,\n      );\n\n      const offsetX = offset.width;\n      const offsetY = lineIndexRange.lineNumber * offset.height;\n\n      matchedLines.push({\n        offsetX,\n        offsetY,\n        width,\n        height,\n      });\n\n      startIndex += matchCapacity;\n    }\n  }\n\n  return matchedLines;\n};\n\nconst escapeSpecialCharacters = (string: string) => {\n  return string.replace(/[.*+?^${}()|[\\]\\\\-]/g, \"\\\\$&\");\n};\n\nconst handleSearch = debounce(\n  (\n    searchQuery: SearchQuery,\n    app: AppClassProperties,\n    cb: (matchItems: SearchMatchItem[], focusIndex: number | null) => void,\n  ) => {\n    if (!searchQuery || searchQuery === \"\") {\n      cb([], null);\n      return;\n    }\n\n    const elements = app.scene.getNonDeletedElements();\n    const texts = elements.filter((el) =>\n      isTextElement(el),\n    ) as ExcalidrawTextElement[];\n\n    texts.sort((a, b) => a.y - b.y);\n\n    const matchItems: SearchMatchItem[] = [];\n\n    const regex = new RegExp(escapeSpecialCharacters(searchQuery), \"gi\");\n\n    for (const textEl of texts) {\n      let match = null;\n      const text = textEl.originalText;\n\n      while ((match = regex.exec(text)) !== null) {\n        const preview = getMatchPreview(text, match.index, searchQuery);\n        const matchedLines = getMatchedLines(textEl, searchQuery, match.index);\n\n        if (matchedLines.length > 0) {\n          matchItems.push({\n            textElement: textEl,\n            searchQuery,\n            preview,\n            index: match.index,\n            matchedLines,\n          });\n        }\n      }\n    }\n\n    const visibleIds = new Set(\n      app.visibleElements.map((visibleElement) => visibleElement.id),\n    );\n\n    const focusIndex =\n      matchItems.findIndex((matchItem) =>\n        visibleIds.has(matchItem.textElement.id),\n      ) ?? null;\n\n    cb(matchItems, focusIndex);\n  },\n  SEARCH_DEBOUNCE,\n);\n", "import \"./ToolIcon.scss\";\n\nimport clsx from \"clsx\";\nimport type { ToolButtonSize } from \"./ToolButton\";\nimport { laserPointerToolIcon } from \"./icons\";\n\ntype LaserPointerIconProps = {\n  title?: string;\n  name?: string;\n  checked: boolean;\n  onChange?(): void;\n  isMobile?: boolean;\n};\n\nconst DEFAULT_SIZE: ToolButtonSize = \"small\";\n\nexport const LaserPointerButton = (props: LaserPointerIconProps) => {\n  return (\n    <label\n      className={clsx(\n        \"ToolIcon ToolIcon__LaserPointer\",\n        `ToolIcon_size_${DEFAULT_SIZE}`,\n        {\n          \"is-mobile\": props.isMobile,\n        },\n      )}\n      title={`${props.title}`}\n    >\n      <input\n        className=\"ToolIcon_type_checkbox\"\n        type=\"checkbox\"\n        name={props.name}\n        onChange={props.onChange}\n        checked={props.checked}\n        aria-label={props.title}\n        data-testid=\"toolbar-LaserPointer\"\n      />\n      <div className=\"ToolIcon__icon\">{laserPointerToolIcon}</div>\n    </label>\n  );\n};\n", "import { useState, useRef, useEffect, useDeferredValue } from \"react\";\nimport type { BinaryFiles } from \"../../types\";\nimport { useApp } from \"../App\";\nimport type { NonDeletedExcalidrawElement } from \"../../element/types\";\nimport { ArrowRightIcon } from \"../icons\";\nimport \"./MermaidToExcalidraw.scss\";\nimport { t } from \"../../i18n\";\nimport Trans from \"../Trans\";\nimport type { MermaidToExcalidrawLibProps } from \"./common\";\nimport {\n  convertMermaidToExcalidraw,\n  insertToEditor,\n  saveMermaidDataToStorage,\n} from \"./common\";\nimport { TTDDialogPanels } from \"./TTDDialogPanels\";\nimport { TTDDialogPanel } from \"./TTDDialogPanel\";\nimport { TTDDialogInput } from \"./TTDDialogInput\";\nimport { TTDDialogOutput } from \"./TTDDialogOutput\";\nimport { EditorLocalStorage } from \"../../data/EditorLocalStorage\";\nimport { EDITOR_LS_KEYS } from \"../../constants\";\nimport { debounce, isDevEnv } from \"../../utils\";\nimport { TTDDialogSubmitShortcut } from \"./TTDDialogSubmitShortcut\";\n\nconst MERMAID_EXAMPLE =\n  \"flowchart TD\\n A[Christmas] -->|Get money| B(Go shopping)\\n B --> C{Let me think}\\n C -->|One| D[Laptop]\\n C -->|Two| E[iPhone]\\n C -->|Three| F[Car]\";\n\nconst debouncedSaveMermaidDefinition = debounce(saveMermaidDataToStorage, 300);\n\nconst MermaidToExcalidraw = ({\n  mermaidToExcalidrawLib,\n}: {\n  mermaidToExcalidrawLib: MermaidToExcalidrawLibProps;\n}) => {\n  const [text, setText] = useState(\n    () =>\n      EditorLocalStorage.get<string>(EDITOR_LS_KEYS.MERMAID_TO_EXCALIDRAW) ||\n      MERMAID_EXAMPLE,\n  );\n  const deferredText = useDeferredValue(text.trim());\n  const [error, setError] = useState<Error | null>(null);\n\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const data = useRef<{\n    elements: readonly NonDeletedExcalidrawElement[];\n    files: BinaryFiles | null;\n  }>({ elements: [], files: null });\n\n  const app = useApp();\n\n  useEffect(() => {\n    convertMermaidToExcalidraw({\n      canvasRef,\n      data,\n      mermaidToExcalidrawLib,\n      setError,\n      mermaidDefinition: deferredText,\n    }).catch((err) => {\n      if (isDevEnv()) {\n        console.error(\"Failed to parse mermaid definition\", err);\n      }\n    });\n\n    debouncedSaveMermaidDefinition(deferredText);\n  }, [deferredText, mermaidToExcalidrawLib]);\n\n  useEffect(\n    () => () => {\n      debouncedSaveMermaidDefinition.flush();\n    },\n    [],\n  );\n\n  const onInsertToEditor = () => {\n    insertToEditor({\n      app,\n      data,\n      text,\n      shouldSaveMermaidDataToStorage: true,\n    });\n  };\n\n  return (\n    <>\n      <div className=\"ttd-dialog-desc\">\n        <Trans\n          i18nKey=\"mermaid.description\"\n          flowchartLink={(el) => (\n            <a href=\"https://mermaid.js.org/syntax/flowchart.html\">{el}</a>\n          )}\n          sequenceLink={(el) => (\n            <a href=\"https://mermaid.js.org/syntax/sequenceDiagram.html\">\n              {el}\n            </a>\n          )}\n          classLink={(el) => (\n            <a href=\"https://mermaid.js.org/syntax/classDiagram.html\">{el}</a>\n          )}\n        />\n      </div>\n      <TTDDialogPanels>\n        <TTDDialogPanel label={t(\"mermaid.syntax\")}>\n          <TTDDialogInput\n            input={text}\n            placeholder={\"Write Mermaid diagram defintion here...\"}\n            onChange={(event) => setText(event.target.value)}\n            onKeyboardSubmit={() => {\n              onInsertToEditor();\n            }}\n          />\n        </TTDDialogPanel>\n        <TTDDialogPanel\n          label={t(\"mermaid.preview\")}\n          panelAction={{\n            action: () => {\n              onInsertToEditor();\n            },\n            label: t(\"mermaid.button\"),\n            icon: ArrowRightIcon,\n          }}\n          renderSubmitShortcut={() => <TTDDialogSubmitShortcut />}\n        >\n          <TTDDialogOutput\n            canvasRef={canvasRef}\n            loaded={mermaidToExcalidrawLib.loaded}\n            error={error}\n          />\n        </TTDDialogPanel>\n      </TTDDialogPanels>\n    </>\n  );\n};\nexport default MermaidToExcalidraw;\n", "import type { MermaidConfig } from \"@excalidraw/mermaid-to-excalidraw\";\nimport type { MermaidToExcalidrawResult } from \"@excalidraw/mermaid-to-excalidraw/dist/interfaces\";\nimport { DEFAULT_EXPORT_PADDING, EDITOR_LS_KEYS } from \"../../constants\";\nimport { convertToExcalidrawElements, exportToCanvas } from \"../../index\";\nimport type { NonDeletedExcalidrawElement } from \"../../element/types\";\nimport type { AppClassProperties, BinaryFiles } from \"../../types\";\nimport { canvasToBlob } from \"../../data/blob\";\nimport { EditorLocalStorage } from \"../../data/EditorLocalStorage\";\nimport { t } from \"../../i18n\";\n\nconst resetPreview = ({\n  canvasRef,\n  setError,\n}: {\n  canvasRef: React.RefObject<HTMLDivElement | null>;\n  setError: (error: Error | null) => void;\n}) => {\n  const canvasNode = canvasRef.current;\n\n  if (!canvasNode) {\n    return;\n  }\n  const parent = canvasNode.parentElement;\n  if (!parent) {\n    return;\n  }\n  parent.style.background = \"\";\n  setError(null);\n  canvasNode.replaceChildren();\n};\n\nexport interface MermaidToExcalidrawLibProps {\n  loaded: boolean;\n  api: Promise<{\n    parseMermaidToExcalidraw: (\n      definition: string,\n      config?: MermaidConfig,\n    ) => Promise<MermaidToExcalidrawResult>;\n  }>;\n}\n\ninterface ConvertMermaidToExcalidrawFormatProps {\n  canvasRef: React.RefObject<HTMLDivElement | null>;\n  mermaidToExcalidrawLib: MermaidToExcalidrawLibProps;\n  mermaidDefinition: string;\n  setError: (error: Error | null) => void;\n  data: React.MutableRefObject<{\n    elements: readonly NonDeletedExcalidrawElement[];\n    files: BinaryFiles | null;\n  }>;\n}\n\nexport const convertMermaidToExcalidraw = async ({\n  canvasRef,\n  mermaidToExcalidrawLib,\n  mermaidDefinition,\n  setError,\n  data,\n}: ConvertMermaidToExcalidrawFormatProps) => {\n  const canvasNode = canvasRef.current;\n  const parent = canvasNode?.parentElement;\n\n  if (!canvasNode || !parent) {\n    return;\n  }\n\n  if (!mermaidDefinition) {\n    resetPreview({ canvasRef, setError });\n    return;\n  }\n\n  try {\n    const api = await mermaidToExcalidrawLib.api;\n\n    let ret;\n    try {\n      ret = await api.parseMermaidToExcalidraw(mermaidDefinition);\n    } catch (err: any) {\n      ret = await api.parseMermaidToExcalidraw(\n        mermaidDefinition.replace(/\"/g, \"'\"),\n      );\n    }\n    const { elements, files } = ret;\n    setError(null);\n\n    data.current = {\n      elements: convertToExcalidrawElements(elements, {\n        regenerateIds: true,\n      }),\n      files,\n    };\n\n    const canvas = await exportToCanvas({\n      elements: data.current.elements,\n      files: data.current.files,\n      exportPadding: DEFAULT_EXPORT_PADDING,\n      maxWidthOrHeight:\n        Math.max(parent.offsetWidth, parent.offsetHeight) *\n        window.devicePixelRatio,\n    });\n    // if converting to blob fails, there's some problem that will\n    // likely prevent preview and export (e.g. canvas too big)\n    try {\n      await canvasToBlob(canvas);\n    } catch (e: any) {\n      if (e.name === \"CANVAS_POSSIBLY_TOO_BIG\") {\n        throw new Error(t(\"canvasError.canvasTooBig\"));\n      }\n      throw e;\n    }\n    parent.style.background = \"var(--default-bg-color)\";\n    canvasNode.replaceChildren(canvas);\n  } catch (err: any) {\n    parent.style.background = \"var(--default-bg-color)\";\n    if (mermaidDefinition) {\n      setError(err);\n    }\n\n    throw err;\n  }\n};\n\nexport const saveMermaidDataToStorage = (mermaidDefinition: string) => {\n  EditorLocalStorage.set(\n    EDITOR_LS_KEYS.MERMAID_TO_EXCALIDRAW,\n    mermaidDefinition,\n  );\n};\n\nexport const insertToEditor = ({\n  app,\n  data,\n  text,\n  shouldSaveMermaidDataToStorage,\n}: {\n  app: AppClassProperties;\n  data: React.MutableRefObject<{\n    elements: readonly NonDeletedExcalidrawElement[];\n    files: BinaryFiles | null;\n  }>;\n  text?: string;\n  shouldSaveMermaidDataToStorage?: boolean;\n}) => {\n  const { elements: newElements, files } = data.current;\n\n  if (!newElements.length) {\n    return;\n  }\n\n  app.addElementsFromPasteOrLibrary({\n    elements: newElements,\n    files,\n    position: \"center\",\n    fitToContent: true,\n  });\n  app.setOpenDialog(null);\n\n  if (shouldSaveMermaidDataToStorage && text) {\n    saveMermaidDataToStorage(text);\n  }\n};\n", "import type { ReactNode } from \"react\";\n\nexport const TTDDialogPanels = ({ children }: { children: ReactNode }) => {\n  return <div className=\"ttd-dialog-panels\">{children}</div>;\n};\n", "import type { ReactNode } from \"react\";\nimport { Button } from \"../Button\";\nimport clsx from \"clsx\";\nimport Spinner from \"../Spinner\";\n\ninterface TTDDialogPanelProps {\n  label: string;\n  children: ReactNode;\n  panelAction?: {\n    label: string;\n    action: () => void;\n    icon?: ReactNode;\n  };\n  panelActionDisabled?: boolean;\n  onTextSubmitInProgess?: boolean;\n  renderTopRight?: () => ReactNode;\n  renderSubmitShortcut?: () => ReactNode;\n  renderBottomRight?: () => ReactNode;\n}\n\nexport const TTDDialogPanel = ({\n  label,\n  children,\n  panelAction,\n  panelActionDisabled = false,\n  onTextSubmitInProgess,\n  renderTopRight,\n  renderSubmitShortcut,\n  renderBottomRight,\n}: TTDDialogPanelProps) => {\n  return (\n    <div className=\"ttd-dialog-panel\">\n      <div className=\"ttd-dialog-panel__header\">\n        <label>{label}</label>\n        {renderTopRight?.()}\n      </div>\n\n      {children}\n      <div\n        className={clsx(\"ttd-dialog-panel-button-container\", {\n          invisible: !panelAction,\n        })}\n        style={{ display: \"flex\", alignItems: \"center\" }}\n      >\n        <Button\n          className=\"ttd-dialog-panel-button\"\n          onSelect={panelAction ? panelAction.action : () => {}}\n          disabled={panelActionDisabled || onTextSubmitInProgess}\n        >\n          <div className={clsx({ invisible: onTextSubmitInProgess })}>\n            {panelAction?.label}\n            {panelAction?.icon && <span>{panelAction.icon}</span>}\n          </div>\n          {onTextSubmitInProgess && <Spinner />}\n        </Button>\n        {!panelActionDisabled &&\n          !onTextSubmitInProgess &&\n          renderSubmitShortcut?.()}\n        {renderBottomRight?.()}\n      </div>\n    </div>\n  );\n};\n", "import type { ChangeEventHandler } from \"react\";\nimport { useEffect, useRef } from \"react\";\nimport { EVENT } from \"../../constants\";\nimport { KEYS } from \"../../keys\";\n\ninterface TTDDialogInputProps {\n  input: string;\n  placeholder: string;\n  onChange: ChangeEventHandler<HTMLTextAreaElement>;\n  onKeyboardSubmit?: () => void;\n}\n\nexport const TTDDialogInput = ({\n  input,\n  placeholder,\n  onChange,\n  onKeyboardSubmit,\n}: TTDDialogInputProps) => {\n  const ref = useRef<HTMLTextAreaElement>(null);\n\n  const callbackRef = useRef(onKeyboardSubmit);\n  callbackRef.current = onKeyboardSubmit;\n\n  useEffect(() => {\n    if (!callbackRef.current) {\n      return;\n    }\n    const textarea = ref.current;\n    if (textarea) {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (event[KEYS.CTRL_OR_CMD] && event.key === KEYS.ENTER) {\n          event.preventDefault();\n          callbackRef.current?.();\n        }\n      };\n      textarea.addEventListener(EVENT.KEYDOWN, handleKeyDown);\n      return () => {\n        textarea.removeEventListener(EVENT.KEYDOWN, handleKeyDown);\n      };\n    }\n  }, []);\n\n  return (\n    <textarea\n      className=\"ttd-dialog-input\"\n      onChange={onChange}\n      value={input}\n      placeholder={placeholder}\n      autoFocus\n      ref={ref}\n    />\n  );\n};\n", "import Spinner from \"../Spinner\";\n\nconst ErrorComp = ({ error }: { error: string }) => {\n  return (\n    <div\n      data-testid=\"ttd-dialog-output-error\"\n      className=\"ttd-dialog-output-error\"\n    >\n      Error! <p>{error}</p>\n    </div>\n  );\n};\n\ninterface TTDDialogOutputProps {\n  error: Error | null;\n  canvasRef: React.RefObject<HTMLDivElement | null>;\n  loaded: boolean;\n}\n\nexport const TTDDialogOutput = ({\n  error,\n  canvasRef,\n  loaded,\n}: TTDDialogOutputProps) => {\n  return (\n    <div className=\"ttd-dialog-output-wrapper\">\n      {error && <ErrorComp error={error.message} />}\n      {loaded ? (\n        <div\n          ref={canvasRef}\n          style={{ opacity: error ? \"0.15\" : 1 }}\n          className=\"ttd-dialog-output-canvas-container\"\n        />\n      ) : (\n        <Spinner size=\"2rem\" />\n      )}\n    </div>\n  );\n};\n", "import { getShortcutKey } from \"../../utils\";\n\nexport const TTDDialogSubmitShortcut = () => {\n  return (\n    <div className=\"ttd-dialog-submit-shortcut\">\n      <div className=\"ttd-dialog-submit-shortcut__key\">\n        {getShortcutKey(\"CtrlOrCmd\")}\n      </div>\n      <div className=\"ttd-dialog-submit-shortcut__key\">\n        {getShortcutKey(\"Enter\")}\n      </div>\n    </div>\n  );\n};\n", "import * as RadixTabs from \"@radix-ui/react-tabs\";\nimport type { ReactNode } from \"react\";\nimport { useRef } from \"react\";\nimport { useExcalidrawSetAppState } from \"../App\";\nimport { isMemberOf } from \"../../utils\";\n\nconst TTDDialogTabs = (\n  props: {\n    children: ReactNode;\n  } & { dialog: \"ttd\"; tab: \"text-to-diagram\" | \"mermaid\" },\n) => {\n  const setAppState = useExcalidrawSetAppState();\n\n  const rootRef = useRef<HTMLDivElement>(null);\n  const minHeightRef = useRef<number>(0);\n\n  return (\n    <RadixTabs.Root\n      ref={rootRef}\n      className=\"ttd-dialog-tabs-root\"\n      value={props.tab}\n      onValueChange={(\n        // at least in test enviros, `tab` can be `undefined`\n        tab: string | undefined,\n      ) => {\n        if (!tab) {\n          return;\n        }\n        const modalContentNode =\n          rootRef.current?.closest<HTMLElement>(\".Modal__content\");\n        if (modalContentNode) {\n          const currHeight = modalContentNode.offsetHeight || 0;\n          if (currHeight > minHeightRef.current) {\n            minHeightRef.current = currHeight;\n            modalContentNode.style.minHeight = `min(${minHeightRef.current}px, 100%)`;\n          }\n        }\n        if (\n          props.dialog === \"ttd\" &&\n          isMemberOf([\"text-to-diagram\", \"mermaid\"], tab)\n        ) {\n          setAppState({\n            openDialog: { name: props.dialog, tab },\n          });\n        }\n      }}\n    >\n      {props.children}\n    </RadixTabs.Root>\n  );\n};\n\nTTDDialogTabs.displayName = \"TTDDialogTabs\";\n\nexport default TTDDialogTabs;\n", "import { Dialog } from \"../Dialog\";\nimport { useApp, useExcalidrawSetAppState } from \"../App\";\nimport MermaidToExcalidraw from \"./MermaidToExcalidraw\";\nimport TTDDialogTabs from \"./TTDDialogTabs\";\nimport type { ChangeEventHandler } from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useUIAppState } from \"../../context/ui-appState\";\nimport { withInternalFallback } from \"../hoc/withInternalFallback\";\nimport { TTDDialogTabTriggers } from \"./TTDDialogTabTriggers\";\nimport { TTDDialogTabTrigger } from \"./TTDDialogTabTrigger\";\nimport { TTDDialogTab } from \"./TTDDialogTab\";\nimport { t } from \"../../i18n\";\nimport { TTDDialogInput } from \"./TTDDialogInput\";\nimport { TTDDialogOutput } from \"./TTDDialogOutput\";\nimport { TTDDialogPanel } from \"./TTDDialogPanel\";\nimport { TTDDialogPanels } from \"./TTDDialogPanels\";\nimport type { MermaidToExcalidrawLibProps } from \"./common\";\nimport {\n  convertMermaidToExcalidraw,\n  insertToEditor,\n  saveMermaidDataToStorage,\n} from \"./common\";\nimport type { NonDeletedExcalidrawElement } from \"../../element/types\";\nimport type { BinaryFiles } from \"../../types\";\nimport { ArrowRightIcon } from \"../icons\";\n\nimport \"./TTDDialog.scss\";\nimport { atom, useAtom } from \"../../editor-jotai\";\nimport { trackEvent } from \"../../analytics\";\nimport { InlineIcon } from \"../InlineIcon\";\nimport { TTDDialogSubmitShortcut } from \"./TTDDialogSubmitShortcut\";\nimport { isFiniteNumber } from \"@excalidraw/math\";\n\nconst MIN_PROMPT_LENGTH = 3;\nconst MAX_PROMPT_LENGTH = 1000;\n\nconst rateLimitsAtom = atom<{\n  rateLimit: number;\n  rateLimitRemaining: number;\n} | null>(null);\n\nconst ttdGenerationAtom = atom<{\n  generatedResponse: string | null;\n  prompt: string | null;\n} | null>(null);\n\ntype OnTestSubmitRetValue = {\n  rateLimit?: number | null;\n  rateLimitRemaining?: number | null;\n} & (\n  | { generatedResponse: string | undefined; error?: null | undefined }\n  | {\n      error: Error;\n      generatedResponse?: null | undefined;\n    }\n);\n\nexport const TTDDialog = (\n  props:\n    | {\n        onTextSubmit(value: string): Promise<OnTestSubmitRetValue>;\n      }\n    | { __fallback: true },\n) => {\n  const appState = useUIAppState();\n\n  if (appState.openDialog?.name !== \"ttd\") {\n    return null;\n  }\n\n  return <TTDDialogBase {...props} tab={appState.openDialog.tab} />;\n};\n\n/**\n * Text to diagram (TTD) dialog\n */\nexport const TTDDialogBase = withInternalFallback(\n  \"TTDDialogBase\",\n  ({\n    tab,\n    ...rest\n  }: {\n    tab: \"text-to-diagram\" | \"mermaid\";\n  } & (\n    | {\n        onTextSubmit(value: string): Promise<OnTestSubmitRetValue>;\n      }\n    | { __fallback: true }\n  )) => {\n    const app = useApp();\n    const setAppState = useExcalidrawSetAppState();\n\n    const someRandomDivRef = useRef<HTMLDivElement>(null);\n\n    const [ttdGeneration, setTtdGeneration] = useAtom(ttdGenerationAtom);\n\n    const [text, setText] = useState(ttdGeneration?.prompt ?? \"\");\n\n    const prompt = text.trim();\n\n    const handleTextChange: ChangeEventHandler<HTMLTextAreaElement> = (\n      event,\n    ) => {\n      setText(event.target.value);\n      setTtdGeneration((s) => ({\n        generatedResponse: s?.generatedResponse ?? null,\n        prompt: event.target.value,\n      }));\n    };\n\n    const [onTextSubmitInProgess, setOnTextSubmitInProgess] = useState(false);\n    const [rateLimits, setRateLimits] = useAtom(rateLimitsAtom);\n\n    const onGenerate = async () => {\n      if (\n        prompt.length > MAX_PROMPT_LENGTH ||\n        prompt.length < MIN_PROMPT_LENGTH ||\n        onTextSubmitInProgess ||\n        rateLimits?.rateLimitRemaining === 0 ||\n        // means this is not a text-to-diagram dialog (needed for TS only)\n        \"__fallback\" in rest\n      ) {\n        if (prompt.length < MIN_PROMPT_LENGTH) {\n          setError(\n            new Error(\n              `Prompt is too short (min ${MIN_PROMPT_LENGTH} characters)`,\n            ),\n          );\n        }\n        if (prompt.length > MAX_PROMPT_LENGTH) {\n          setError(\n            new Error(\n              `Prompt is too long (max ${MAX_PROMPT_LENGTH} characters)`,\n            ),\n          );\n        }\n\n        return;\n      }\n\n      try {\n        setOnTextSubmitInProgess(true);\n\n        trackEvent(\"ai\", \"generate\", \"ttd\");\n\n        const { generatedResponse, error, rateLimit, rateLimitRemaining } =\n          await rest.onTextSubmit(prompt);\n\n        if (typeof generatedResponse === \"string\") {\n          setTtdGeneration((s) => ({\n            generatedResponse,\n            prompt: s?.prompt ?? null,\n          }));\n        }\n\n        if (isFiniteNumber(rateLimit) && isFiniteNumber(rateLimitRemaining)) {\n          setRateLimits({ rateLimit, rateLimitRemaining });\n        }\n\n        if (error) {\n          setError(error);\n          return;\n        }\n        if (!generatedResponse) {\n          setError(new Error(\"Generation failed\"));\n          return;\n        }\n\n        try {\n          await convertMermaidToExcalidraw({\n            canvasRef: someRandomDivRef,\n            data,\n            mermaidToExcalidrawLib,\n            setError,\n            mermaidDefinition: generatedResponse,\n          });\n          trackEvent(\"ai\", \"mermaid parse success\", \"ttd\");\n        } catch (error: any) {\n          console.info(\n            `%cTTD mermaid render errror: ${error.message}`,\n            \"color: red\",\n          );\n          console.info(\n            `>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\\nTTD mermaid definition render errror: ${error.message}`,\n            \"color: yellow\",\n          );\n          trackEvent(\"ai\", \"mermaid parse failed\", \"ttd\");\n          setError(\n            new Error(\n              \"Generated an invalid diagram :(. You may also try a different prompt.\",\n            ),\n          );\n        }\n      } catch (error: any) {\n        let message: string | undefined = error.message;\n        if (!message || message === \"Failed to fetch\") {\n          message = \"Request failed\";\n        }\n        setError(new Error(message));\n      } finally {\n        setOnTextSubmitInProgess(false);\n      }\n    };\n\n    const refOnGenerate = useRef(onGenerate);\n    refOnGenerate.current = onGenerate;\n\n    const [mermaidToExcalidrawLib, setMermaidToExcalidrawLib] =\n      useState<MermaidToExcalidrawLibProps>({\n        loaded: false,\n        api: import(\"@excalidraw/mermaid-to-excalidraw\"),\n      });\n\n    useEffect(() => {\n      const fn = async () => {\n        await mermaidToExcalidrawLib.api;\n        setMermaidToExcalidrawLib((prev) => ({ ...prev, loaded: true }));\n      };\n      fn();\n    }, [mermaidToExcalidrawLib.api]);\n\n    const data = useRef<{\n      elements: readonly NonDeletedExcalidrawElement[];\n      files: BinaryFiles | null;\n    }>({ elements: [], files: null });\n\n    const [error, setError] = useState<Error | null>(null);\n\n    return (\n      <Dialog\n        className=\"ttd-dialog\"\n        onCloseRequest={() => {\n          app.setOpenDialog(null);\n        }}\n        size={1200}\n        title={false}\n        {...rest}\n        autofocus={false}\n      >\n        <TTDDialogTabs dialog=\"ttd\" tab={tab}>\n          {\"__fallback\" in rest && rest.__fallback ? (\n            <p className=\"dialog-mermaid-title\">{t(\"mermaid.title\")}</p>\n          ) : (\n            <TTDDialogTabTriggers>\n              <TTDDialogTabTrigger tab=\"text-to-diagram\">\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                  {t(\"labels.textToDiagram\")}\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                      padding: \"1px 6px\",\n                      marginLeft: \"10px\",\n                      fontSize: 10,\n                      borderRadius: \"12px\",\n                      background: \"var(--color-promo)\",\n                      color: \"var(--color-surface-lowest)\",\n                    }}\n                  >\n                    AI Beta\n                  </div>\n                </div>\n              </TTDDialogTabTrigger>\n              <TTDDialogTabTrigger tab=\"mermaid\">Mermaid</TTDDialogTabTrigger>\n            </TTDDialogTabTriggers>\n          )}\n\n          <TTDDialogTab className=\"ttd-dialog-content\" tab=\"mermaid\">\n            <MermaidToExcalidraw\n              mermaidToExcalidrawLib={mermaidToExcalidrawLib}\n            />\n          </TTDDialogTab>\n          {!(\"__fallback\" in rest) && (\n            <TTDDialogTab className=\"ttd-dialog-content\" tab=\"text-to-diagram\">\n              <div className=\"ttd-dialog-desc\">\n                Currently we use Mermaid as a middle step, so you'll get best\n                results if you describe a diagram, workflow, flow chart, and\n                similar.\n              </div>\n              <TTDDialogPanels>\n                <TTDDialogPanel\n                  label={t(\"labels.prompt\")}\n                  panelAction={{\n                    action: onGenerate,\n                    label: \"Generate\",\n                    icon: ArrowRightIcon,\n                  }}\n                  onTextSubmitInProgess={onTextSubmitInProgess}\n                  panelActionDisabled={\n                    prompt.length > MAX_PROMPT_LENGTH ||\n                    rateLimits?.rateLimitRemaining === 0\n                  }\n                  renderTopRight={() => {\n                    if (!rateLimits) {\n                      return null;\n                    }\n\n                    return (\n                      <div\n                        className=\"ttd-dialog-rate-limit\"\n                        style={{\n                          fontSize: 12,\n                          marginLeft: \"auto\",\n                          color:\n                            rateLimits.rateLimitRemaining === 0\n                              ? \"var(--color-danger)\"\n                              : undefined,\n                        }}\n                      >\n                        {rateLimits.rateLimitRemaining} requests left today\n                      </div>\n                    );\n                  }}\n                  renderSubmitShortcut={() => <TTDDialogSubmitShortcut />}\n                  renderBottomRight={() => {\n                    if (typeof ttdGeneration?.generatedResponse === \"string\") {\n                      return (\n                        <div\n                          className=\"excalidraw-link\"\n                          style={{ marginLeft: \"auto\", fontSize: 14 }}\n                          onClick={() => {\n                            if (\n                              typeof ttdGeneration?.generatedResponse ===\n                              \"string\"\n                            ) {\n                              saveMermaidDataToStorage(\n                                ttdGeneration.generatedResponse,\n                              );\n                              setAppState({\n                                openDialog: { name: \"ttd\", tab: \"mermaid\" },\n                              });\n                            }\n                          }}\n                        >\n                          View as Mermaid\n                          <InlineIcon icon={ArrowRightIcon} />\n                        </div>\n                      );\n                    }\n                    const ratio = prompt.length / MAX_PROMPT_LENGTH;\n                    if (ratio > 0.8) {\n                      return (\n                        <div\n                          style={{\n                            marginLeft: \"auto\",\n                            fontSize: 12,\n                            fontFamily: \"monospace\",\n                            color:\n                              ratio > 1 ? \"var(--color-danger)\" : undefined,\n                          }}\n                        >\n                          Length: {prompt.length}/{MAX_PROMPT_LENGTH}\n                        </div>\n                      );\n                    }\n\n                    return null;\n                  }}\n                >\n                  <TTDDialogInput\n                    onChange={handleTextChange}\n                    input={text}\n                    placeholder={\"Describe what you want to see...\"}\n                    onKeyboardSubmit={() => {\n                      refOnGenerate.current();\n                    }}\n                  />\n                </TTDDialogPanel>\n                <TTDDialogPanel\n                  label=\"Preview\"\n                  panelAction={{\n                    action: () => {\n                      console.info(\"Panel action clicked\");\n                      insertToEditor({ app, data });\n                    },\n                    label: \"Insert\",\n                    icon: ArrowRightIcon,\n                  }}\n                >\n                  <TTDDialogOutput\n                    canvasRef={someRandomDivRef}\n                    error={error}\n                    loaded={mermaidToExcalidrawLib.loaded}\n                  />\n                </TTDDialogPanel>\n              </TTDDialogPanels>\n            </TTDDialogTab>\n          )}\n        </TTDDialogTabs>\n      </Dialog>\n    );\n  },\n);\n", "import * as RadixTabs from \"@radix-ui/react-tabs\";\n\nexport const TTDDialogTabTriggers = ({\n  children,\n  ...rest\n}: { children: React.ReactNode } & React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <RadixTabs.List className=\"ttd-dialog-triggers\" {...rest}>\n      {children}\n    </RadixTabs.List>\n  );\n};\nTTDDialogTabTriggers.displayName = \"TTDDialogTabTriggers\";\n", "import * as RadixTabs from \"@radix-ui/react-tabs\";\n\nexport const TTDDialogTabTrigger = ({\n  children,\n  tab,\n  onSelect,\n  ...rest\n}: {\n  children: React.ReactNode;\n  tab: string;\n  onSelect?: React.ReactEventHandler<HTMLButtonElement> | undefined;\n} & Omit<React.HTMLAttributes<HTMLButtonElement>, \"onSelect\">) => {\n  return (\n    <RadixTabs.Trigger value={tab} asChild onSelect={onSelect}>\n      <button type=\"button\" className=\"ttd-dialog-tab-trigger\" {...rest}>\n        {children}\n      </button>\n    </RadixTabs.Trigger>\n  );\n};\nTTDDialogTabTrigger.displayName = \"TTDDialogTabTrigger\";\n", "import * as RadixTabs from \"@radix-ui/react-tabs\";\n\nexport const TTDDialogTab = ({\n  tab,\n  children,\n  ...rest\n}: {\n  tab: string;\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <RadixTabs.Content {...rest} value={tab}>\n      {children}\n    </RadixTabs.Content>\n  );\n};\nTTDDialogTab.displayName = \"TTDDialogTab\";\n", "import { useEffect, useMemo, useState, memo } from \"react\";\nimport { getCommonBounds } from \"../../element/bounds\";\nimport type { NonDeletedExcalidrawElement } from \"../../element/types\";\nimport { t } from \"../../i18n\";\nimport type {\n  AppClassProperties,\n  AppState,\n  ExcalidrawProps,\n} from \"../../types\";\nimport { CloseIcon } from \"../icons\";\nimport { Island } from \"../Island\";\nimport throttle from \"lodash.throttle\";\nimport Dimension from \"./Dimension\";\nimport Angle from \"./Angle\";\nimport FontSize from \"./FontSize\";\nimport MultiDimension from \"./MultiDimension\";\nimport { elementsAreInSameGroup } from \"../../groups\";\nimport MultiAngle from \"./MultiAngle\";\nimport MultiFontSize from \"./MultiFontSize\";\nimport Position from \"./Position\";\nimport MultiPosition from \"./MultiPosition\";\nimport Collapsible from \"./Collapsible\";\nimport { useExcalidrawAppState, useExcalidrawSetAppState } from \"../App\";\nimport { getAtomicUnits } from \"./utils\";\nimport { STATS_PANELS } from \"../../constants\";\nimport { isElbowArrow, isImageElement } from \"../../element/typeChecks\";\nimport CanvasGrid from \"./CanvasGrid\";\nimport clsx from \"clsx\";\n\nimport \"./Stats.scss\";\nimport { isGridModeEnabled } from \"../../snapping\";\nimport { getUncroppedWidthAndHeight } from \"../../element/cropElement\";\nimport { round } from \"@excalidraw/math\";\nimport { frameAndChildrenSelectedTogether } from \"../../frame\";\n\ninterface StatsProps {\n  app: AppClassProperties;\n  onClose: () => void;\n  renderCustomStats: ExcalidrawProps[\"renderCustomStats\"];\n}\n\nconst STATS_TIMEOUT = 50;\n\nexport const Stats = (props: StatsProps) => {\n  const appState = useExcalidrawAppState();\n  const sceneNonce = props.app.scene.getSceneNonce() || 1;\n  const selectedElements = props.app.scene.getSelectedElements({\n    selectedElementIds: appState.selectedElementIds,\n    includeBoundTextElement: false,\n  });\n  const gridModeEnabled = isGridModeEnabled(props.app);\n\n  return (\n    <StatsInner\n      {...props}\n      appState={appState}\n      sceneNonce={sceneNonce}\n      selectedElements={selectedElements}\n      gridModeEnabled={gridModeEnabled}\n    />\n  );\n};\n\nconst StatsRow = ({\n  children,\n  columns = 1,\n  heading,\n  style,\n  ...rest\n}: {\n  children: React.ReactNode;\n  columns?: number;\n  heading?: boolean;\n  style?: React.CSSProperties;\n} & React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={clsx(\"exc-stats__row\", { \"exc-stats__row--heading\": heading })}\n    style={{\n      gridTemplateColumns: `repeat(${columns}, 1fr)`,\n      ...style,\n    }}\n    {...rest}\n  >\n    {children}\n  </div>\n);\nStatsRow.displayName = \"StatsRow\";\n\nconst StatsRows = ({\n  children,\n  order,\n  style,\n  ...rest\n}: {\n  children: React.ReactNode;\n  order?: number;\n  style?: React.CSSProperties;\n} & React.HTMLAttributes<HTMLDivElement>) => (\n  <div className=\"exc-stats__rows\" style={{ order, ...style }} {...rest}>\n    {children}\n  </div>\n);\nStatsRows.displayName = \"StatsRows\";\n\nStats.StatsRow = StatsRow;\nStats.StatsRows = StatsRows;\n\nexport const StatsInner = memo(\n  ({\n    app,\n    onClose,\n    renderCustomStats,\n    selectedElements,\n    appState,\n    sceneNonce,\n    gridModeEnabled,\n  }: StatsProps & {\n    sceneNonce: number;\n    selectedElements: readonly NonDeletedExcalidrawElement[];\n    appState: AppState;\n    gridModeEnabled: boolean;\n  }) => {\n    const scene = app.scene;\n    const elements = scene.getNonDeletedElements();\n    const elementsMap = scene.getNonDeletedElementsMap();\n    const setAppState = useExcalidrawSetAppState();\n\n    const singleElement =\n      selectedElements.length === 1 ? selectedElements[0] : null;\n\n    const multipleElements =\n      selectedElements.length > 1 ? selectedElements : null;\n\n    const cropMode =\n      appState.croppingElementId && isImageElement(singleElement);\n\n    const unCroppedDimension = cropMode\n      ? getUncroppedWidthAndHeight(singleElement)\n      : null;\n\n    const [sceneDimension, setSceneDimension] = useState<{\n      width: number;\n      height: number;\n    }>({\n      width: 0,\n      height: 0,\n    });\n\n    const throttledSetSceneDimension = useMemo(\n      () =>\n        throttle((elements: readonly NonDeletedExcalidrawElement[]) => {\n          const boundingBox = getCommonBounds(elements);\n          setSceneDimension({\n            width: Math.round(boundingBox[2]) - Math.round(boundingBox[0]),\n            height: Math.round(boundingBox[3]) - Math.round(boundingBox[1]),\n          });\n        }, STATS_TIMEOUT),\n      [],\n    );\n\n    useEffect(() => {\n      throttledSetSceneDimension(elements);\n    }, [sceneNonce, elements, throttledSetSceneDimension]);\n\n    useEffect(\n      () => () => throttledSetSceneDimension.cancel(),\n      [throttledSetSceneDimension],\n    );\n\n    const atomicUnits = useMemo(() => {\n      return getAtomicUnits(selectedElements, appState);\n    }, [selectedElements, appState]);\n\n    const _frameAndChildrenSelectedTogether = useMemo(() => {\n      return frameAndChildrenSelectedTogether(selectedElements);\n    }, [selectedElements]);\n\n    return (\n      <div className=\"exc-stats\">\n        <Island padding={3}>\n          <div className=\"title\">\n            <h2>{t(\"stats.title\")}</h2>\n            <div className=\"close\" onClick={onClose}>\n              {CloseIcon}\n            </div>\n          </div>\n\n          <Collapsible\n            label={<h3>{t(\"stats.generalStats\")}</h3>}\n            open={!!(appState.stats.panels & STATS_PANELS.generalStats)}\n            openTrigger={() =>\n              setAppState((state) => {\n                return {\n                  stats: {\n                    open: true,\n                    panels: state.stats.panels ^ STATS_PANELS.generalStats,\n                  },\n                };\n              })\n            }\n          >\n            <StatsRows>\n              <StatsRow heading>{t(\"stats.scene\")}</StatsRow>\n              <StatsRow columns={2}>\n                <div>{t(\"stats.shapes\")}</div>\n                <div>{elements.length}</div>\n              </StatsRow>\n              <StatsRow columns={2}>\n                <div>{t(\"stats.width\")}</div>\n                <div>{sceneDimension.width}</div>\n              </StatsRow>\n              <StatsRow columns={2}>\n                <div>{t(\"stats.height\")}</div>\n                <div>{sceneDimension.height}</div>\n              </StatsRow>\n              {gridModeEnabled && (\n                <>\n                  <StatsRow heading>Canvas</StatsRow>\n                  <StatsRow>\n                    <CanvasGrid\n                      property=\"gridStep\"\n                      scene={scene}\n                      appState={appState}\n                      setAppState={setAppState}\n                    />\n                  </StatsRow>\n                </>\n              )}\n            </StatsRows>\n\n            {renderCustomStats?.(elements, appState)}\n          </Collapsible>\n\n          {!_frameAndChildrenSelectedTogether && selectedElements.length > 0 && (\n            <div\n              id=\"elementStats\"\n              style={{\n                marginTop: 12,\n              }}\n            >\n              <Collapsible\n                label={<h3>{t(\"stats.elementProperties\")}</h3>}\n                open={\n                  !!(appState.stats.panels & STATS_PANELS.elementProperties)\n                }\n                openTrigger={() =>\n                  setAppState((state) => {\n                    return {\n                      stats: {\n                        open: true,\n                        panels:\n                          state.stats.panels ^ STATS_PANELS.elementProperties,\n                      },\n                    };\n                  })\n                }\n              >\n                <StatsRows>\n                  {singleElement && (\n                    <>\n                      {cropMode && (\n                        <StatsRow heading>\n                          {t(\"labels.unCroppedDimension\")}\n                        </StatsRow>\n                      )}\n\n                      {appState.croppingElementId &&\n                        isImageElement(singleElement) &&\n                        unCroppedDimension && (\n                          <StatsRow columns={2}>\n                            <div>{t(\"stats.width\")}</div>\n                            <div>{round(unCroppedDimension.width, 2)}</div>\n                          </StatsRow>\n                        )}\n\n                      {appState.croppingElementId &&\n                        isImageElement(singleElement) &&\n                        unCroppedDimension && (\n                          <StatsRow columns={2}>\n                            <div>{t(\"stats.height\")}</div>\n                            <div>{round(unCroppedDimension.height, 2)}</div>\n                          </StatsRow>\n                        )}\n\n                      <StatsRow heading data-testid=\"stats-element-type\">\n                        {appState.croppingElementId\n                          ? t(\"labels.imageCropping\")\n                          : t(`element.${singleElement.type}`)}\n                      </StatsRow>\n\n                      <StatsRow>\n                        <Position\n                          element={singleElement}\n                          property=\"x\"\n                          elementsMap={elementsMap}\n                          scene={scene}\n                          appState={appState}\n                        />\n                      </StatsRow>\n                      <StatsRow>\n                        <Position\n                          element={singleElement}\n                          property=\"y\"\n                          elementsMap={elementsMap}\n                          scene={scene}\n                          appState={appState}\n                        />\n                      </StatsRow>\n                      <StatsRow>\n                        <Dimension\n                          property=\"width\"\n                          element={singleElement}\n                          scene={scene}\n                          appState={appState}\n                        />\n                      </StatsRow>\n                      <StatsRow>\n                        <Dimension\n                          property=\"height\"\n                          element={singleElement}\n                          scene={scene}\n                          appState={appState}\n                        />\n                      </StatsRow>\n                      {!isElbowArrow(singleElement) && (\n                        <StatsRow>\n                          <Angle\n                            property=\"angle\"\n                            element={singleElement}\n                            scene={scene}\n                            appState={appState}\n                          />\n                        </StatsRow>\n                      )}\n                      <StatsRow>\n                        <FontSize\n                          property=\"fontSize\"\n                          element={singleElement}\n                          scene={scene}\n                          appState={appState}\n                        />\n                      </StatsRow>\n                    </>\n                  )}\n\n                  {multipleElements && (\n                    <>\n                      {elementsAreInSameGroup(multipleElements) && (\n                        <StatsRow heading>{t(\"element.group\")}</StatsRow>\n                      )}\n\n                      <StatsRow columns={2} style={{ margin: \"0.3125rem 0\" }}>\n                        <div>{t(\"stats.shapes\")}</div>\n                        <div>{selectedElements.length}</div>\n                      </StatsRow>\n\n                      <StatsRow>\n                        <MultiPosition\n                          property=\"x\"\n                          elements={multipleElements}\n                          elementsMap={elementsMap}\n                          atomicUnits={atomicUnits}\n                          scene={scene}\n                          appState={appState}\n                        />\n                      </StatsRow>\n                      <StatsRow>\n                        <MultiPosition\n                          property=\"y\"\n                          elements={multipleElements}\n                          elementsMap={elementsMap}\n                          atomicUnits={atomicUnits}\n                          scene={scene}\n                          appState={appState}\n                        />\n                      </StatsRow>\n                      <StatsRow>\n                        <MultiDimension\n                          property=\"width\"\n                          elements={multipleElements}\n                          elementsMap={elementsMap}\n                          atomicUnits={atomicUnits}\n                          scene={scene}\n                          appState={appState}\n                        />\n                      </StatsRow>\n                      <StatsRow>\n                        <MultiDimension\n                          property=\"height\"\n                          elements={multipleElements}\n                          elementsMap={elementsMap}\n                          atomicUnits={atomicUnits}\n                          scene={scene}\n                          appState={appState}\n                        />\n                      </StatsRow>\n                      <StatsRow>\n                        <MultiAngle\n                          property=\"angle\"\n                          elements={multipleElements}\n                          scene={scene}\n                          appState={appState}\n                        />\n                      </StatsRow>\n                      <StatsRow>\n                        <MultiFontSize\n                          property=\"fontSize\"\n                          elements={multipleElements}\n                          scene={scene}\n                          appState={appState}\n                          elementsMap={elementsMap}\n                        />\n                      </StatsRow>\n                    </>\n                  )}\n                </StatsRows>\n              </Collapsible>\n            </div>\n          )}\n        </Island>\n      </div>\n    );\n  },\n  (prev, next) => {\n    return (\n      prev.sceneNonce === next.sceneNonce &&\n      prev.selectedElements === next.selectedElements &&\n      prev.appState.stats.panels === next.appState.stats.panels &&\n      prev.gridModeEnabled === next.gridModeEnabled &&\n      prev.appState.gridStep === next.appState.gridStep &&\n      prev.appState.croppingElementId === next.appState.croppingElementId\n    );\n  },\n);\n", "import { useEffect, useRef, useState } from \"react\";\nimport { EVENT } from \"../../constants\";\nimport { KEYS } from \"../../keys\";\nimport type { ElementsMap, ExcalidrawElement } from \"../../element/types\";\nimport { deepCopyElement } from \"../../element/newElement\";\nimport clsx from \"clsx\";\nimport { useApp } from \"../App\";\nimport { InlineIcon } from \"../InlineIcon\";\nimport type { StatsInputProperty } from \"./utils\";\nimport { SMALLEST_DELTA } from \"./utils\";\nimport { CaptureUpdateAction } from \"../../store\";\nimport type Scene from \"../../scene/Scene\";\n\nimport \"./DragInput.scss\";\nimport type { AppState } from \"../../types\";\nimport { cloneJSON } from \"../../utils\";\n\nexport type DragInputCallbackType<\n  P extends StatsInputProperty,\n  E = ExcalidrawElement,\n> = (props: {\n  accumulatedChange: number;\n  instantChange: number;\n  originalElements: readonly E[];\n  originalElementsMap: ElementsMap;\n  shouldKeepAspectRatio: boolean;\n  shouldChangeByStepSize: boolean;\n  scene: Scene;\n  nextValue?: number;\n  property: P;\n  originalAppState: AppState;\n  setInputValue: (value: number) => void;\n}) => void;\n\ninterface StatsDragInputProps<\n  T extends StatsInputProperty,\n  E = ExcalidrawElement,\n> {\n  label: string | React.ReactNode;\n  icon?: React.ReactNode;\n  value: number | \"Mixed\";\n  elements: readonly E[];\n  editable?: boolean;\n  shouldKeepAspectRatio?: boolean;\n  dragInputCallback: DragInputCallbackType<T, E>;\n  property: T;\n  scene: Scene;\n  appState: AppState;\n  /** how many px you need to drag to get 1 unit change */\n  sensitivity?: number;\n}\n\nconst StatsDragInput = <\n  T extends StatsInputProperty,\n  E extends ExcalidrawElement = ExcalidrawElement,\n>({\n  label,\n  icon,\n  dragInputCallback,\n  value,\n  elements,\n  editable = true,\n  shouldKeepAspectRatio,\n  property,\n  scene,\n  appState,\n  sensitivity = 1,\n}: StatsDragInputProps<T, E>) => {\n  const app = useApp();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const labelRef = useRef<HTMLDivElement>(null);\n\n  const [inputValue, setInputValue] = useState(value.toString());\n\n  const stateRef = useRef<{\n    originalAppState: AppState;\n    originalElements: readonly E[];\n    lastUpdatedValue: string;\n    updatePending: boolean;\n  }>(null!);\n  if (!stateRef.current) {\n    stateRef.current = {\n      originalAppState: cloneJSON(appState),\n      originalElements: elements,\n      lastUpdatedValue: inputValue,\n      updatePending: false,\n    };\n  }\n\n  useEffect(() => {\n    const inputValue = value.toString();\n    setInputValue(inputValue);\n    stateRef.current.lastUpdatedValue = inputValue;\n  }, [value]);\n\n  const handleInputValue = (\n    updatedValue: string,\n    elements: readonly E[],\n    appState: AppState,\n  ) => {\n    if (!stateRef.current.updatePending) {\n      return false;\n    }\n    stateRef.current.updatePending = false;\n\n    const parsed = Number(updatedValue);\n    if (isNaN(parsed)) {\n      setInputValue(value.toString());\n      return;\n    }\n\n    const rounded = Number(parsed.toFixed(2));\n    const original = Number(value);\n\n    // only update when\n    // 1. original was \"Mixed\" and we have a new value\n    // 2. original was not \"Mixed\" and the difference between a new value and previous value is greater\n    //    than the smallest delta allowed, which is 0.01\n    // reason: idempotent to avoid unnecessary\n    if (isNaN(original) || Math.abs(rounded - original) >= SMALLEST_DELTA) {\n      stateRef.current.lastUpdatedValue = updatedValue;\n      dragInputCallback({\n        accumulatedChange: 0,\n        instantChange: 0,\n        originalElements: elements,\n        originalElementsMap: app.scene.getNonDeletedElementsMap(),\n        shouldKeepAspectRatio: shouldKeepAspectRatio!!,\n        shouldChangeByStepSize: false,\n        scene,\n        nextValue: rounded,\n        property,\n        originalAppState: appState,\n        setInputValue: (value) => setInputValue(String(value)),\n      });\n      app.syncActionResult({\n        captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n      });\n    }\n  };\n\n  const callbacksRef = useRef<\n    Partial<{\n      handleInputValue: typeof handleInputValue;\n      onPointerUp: (event: PointerEvent) => void;\n      onPointerMove: (event: PointerEvent) => void;\n    }>\n  >({});\n  callbacksRef.current.handleInputValue = handleInputValue;\n\n  // make sure that clicking on canvas (which umounts the component)\n  // updates current input value (blur isn't triggered)\n  useEffect(() => {\n    const input = inputRef.current;\n    const callbacks = callbacksRef.current;\n    return () => {\n      const nextValue = input?.value;\n      if (nextValue) {\n        callbacks.handleInputValue?.(\n          nextValue,\n          stateRef.current.originalElements,\n          stateRef.current.originalAppState,\n        );\n      }\n\n      // generally not needed, but in case `pointerup` doesn't fire and\n      // we don't remove the listeners that way, we should at least remove\n      // on unmount\n      window.removeEventListener(\n        EVENT.POINTER_MOVE,\n        callbacks.onPointerMove!,\n        false,\n      );\n      window.removeEventListener(\n        EVENT.POINTER_UP,\n        callbacks.onPointerUp!,\n        false,\n      );\n    };\n  }, [\n    // we need to track change of `editable` state as mount/unmount\n    // because react doesn't trigger `blur` when a an input is blurred due\n    // to being disabled (https://github.com/facebook/react/issues/9142).\n    // As such, if we keep rendering disabled inputs, then change in selection\n    // to an element that has a given property as non-editable would not trigger\n    // blur/unmount and wouldn't update the value.\n    editable,\n  ]);\n\n  if (!editable) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(\"drag-input-container\", !editable && \"disabled\")}\n      data-testid={label}\n    >\n      <div\n        className=\"drag-input-label\"\n        ref={labelRef}\n        onPointerDown={(event) => {\n          if (inputRef.current && editable) {\n            document.body.classList.add(\"excalidraw-cursor-resize\");\n\n            let startValue = Number(inputRef.current.value);\n            if (isNaN(startValue)) {\n              startValue = 0;\n            }\n\n            let lastPointer: {\n              x: number;\n              y: number;\n            } | null = null;\n\n            let originalElementsMap: Map<string, ExcalidrawElement> | null =\n              app.scene\n                .getNonDeletedElements()\n                .reduce((acc: ElementsMap, element) => {\n                  acc.set(element.id, deepCopyElement(element));\n                  return acc;\n                }, new Map());\n\n            let originalElements: readonly E[] | null = elements.map(\n              (element) => originalElementsMap!.get(element.id) as E,\n            );\n\n            const originalAppState: AppState = cloneJSON(appState);\n\n            let accumulatedChange = 0;\n            let stepChange = 0;\n\n            const onPointerMove = (event: PointerEvent) => {\n              if (\n                lastPointer &&\n                originalElementsMap !== null &&\n                originalElements !== null\n              ) {\n                const instantChange = event.clientX - lastPointer.x;\n\n                if (instantChange !== 0) {\n                  stepChange += instantChange;\n\n                  if (Math.abs(stepChange) >= sensitivity) {\n                    stepChange =\n                      Math.sign(stepChange) *\n                      Math.floor(Math.abs(stepChange) / sensitivity);\n\n                    accumulatedChange += stepChange;\n\n                    dragInputCallback({\n                      accumulatedChange,\n                      instantChange: stepChange,\n                      originalElements,\n                      originalElementsMap,\n                      shouldKeepAspectRatio: shouldKeepAspectRatio!!,\n                      shouldChangeByStepSize: event.shiftKey,\n                      property,\n                      scene,\n                      originalAppState,\n                      setInputValue: (value) => setInputValue(String(value)),\n                    });\n\n                    stepChange = 0;\n                  }\n                }\n              }\n\n              lastPointer = {\n                x: event.clientX,\n                y: event.clientY,\n              };\n            };\n\n            const onPointerUp = () => {\n              window.removeEventListener(\n                EVENT.POINTER_MOVE,\n                onPointerMove,\n                false,\n              );\n\n              app.syncActionResult({\n                captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n              });\n\n              lastPointer = null;\n              accumulatedChange = 0;\n              stepChange = 0;\n              originalElements = null;\n              originalElementsMap = null;\n\n              document.body.classList.remove(\"excalidraw-cursor-resize\");\n\n              window.removeEventListener(EVENT.POINTER_UP, onPointerUp, false);\n            };\n\n            callbacksRef.current.onPointerMove = onPointerMove;\n            callbacksRef.current.onPointerUp = onPointerUp;\n\n            window.addEventListener(EVENT.POINTER_MOVE, onPointerMove, false);\n            window.addEventListener(EVENT.POINTER_UP, onPointerUp, false);\n          }\n        }}\n        onPointerEnter={() => {\n          if (labelRef.current) {\n            labelRef.current.style.cursor = \"ew-resize\";\n          }\n        }}\n      >\n        {icon ? <InlineIcon icon={icon} /> : label}\n      </div>\n      <input\n        className=\"drag-input\"\n        autoComplete=\"off\"\n        spellCheck=\"false\"\n        onKeyDown={(event) => {\n          if (editable) {\n            const eventTarget = event.target;\n            if (\n              eventTarget instanceof HTMLInputElement &&\n              event.key === KEYS.ENTER\n            ) {\n              handleInputValue(eventTarget.value, elements, appState);\n              app.focusContainer();\n            }\n          }\n        }}\n        ref={inputRef}\n        value={inputValue}\n        onChange={(event) => {\n          stateRef.current.updatePending = true;\n          setInputValue(event.target.value);\n        }}\n        onFocus={(event) => {\n          event.target.select();\n          stateRef.current.originalElements = elements;\n          stateRef.current.originalAppState = cloneJSON(appState);\n        }}\n        onBlur={(event) => {\n          if (!inputValue) {\n            setInputValue(value.toString());\n          } else if (editable) {\n            handleInputValue(\n              event.target.value,\n              stateRef.current.originalElements,\n              stateRef.current.originalAppState,\n            );\n          }\n        }}\n        disabled={!editable}\n      />\n    </div>\n  );\n};\n\nexport default StatsDragInput;\n", "import type { Radians } from \"@excalidraw/math\";\nimport { pointFrom, pointRotateRads } from \"@excalidraw/math\";\nimport {\n  bindOrUnbindLinearElements,\n  updateBoundElements,\n} from \"../../element/binding\";\nimport { mutateElement } from \"../../element/mutateElement\";\nimport { getBoundTextElement } from \"../../element/textElement\";\nimport {\n  isFrameLikeElement,\n  isLinearElement,\n  isTextElement,\n} from \"../../element/typeChecks\";\nimport type {\n  ElementsMap,\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  NonDeletedSceneElementsMap,\n} from \"../../element/types\";\nimport {\n  getSelectedGroupIds,\n  getElementsInGroup,\n  isInGroup,\n} from \"../../groups\";\nimport type Scene from \"../../scene/Scene\";\nimport type { AppState } from \"../../types\";\n\nexport type StatsInputProperty =\n  | \"x\"\n  | \"y\"\n  | \"width\"\n  | \"height\"\n  | \"angle\"\n  | \"fontSize\"\n  | \"gridStep\";\n\nexport const SMALLEST_DELTA = 0.01;\n\nexport const isPropertyEditable = (\n  element: ExcalidrawElement,\n  property: keyof ExcalidrawElement,\n) => {\n  if (property === \"height\" && isTextElement(element)) {\n    return false;\n  }\n  if (property === \"width\" && isTextElement(element)) {\n    return false;\n  }\n  if (property === \"angle\" && isFrameLikeElement(element)) {\n    return false;\n  }\n  return true;\n};\n\nexport const getStepSizedValue = (value: number, stepSize: number) => {\n  const v = value + stepSize / 2;\n  return v - (v % stepSize);\n};\n\nexport type AtomicUnit = Record<string, true>;\nexport const getElementsInAtomicUnit = (\n  atomicUnit: AtomicUnit,\n  elementsMap: ElementsMap,\n  originalElementsMap?: ElementsMap,\n) => {\n  return Object.keys(atomicUnit)\n    .map((id) => ({\n      original: (originalElementsMap ?? elementsMap).get(id),\n      latest: elementsMap.get(id),\n    }))\n    .filter((el) => el.original !== undefined && el.latest !== undefined) as {\n    original: NonDeletedExcalidrawElement;\n    latest: NonDeletedExcalidrawElement;\n  }[];\n};\n\nexport const newOrigin = (\n  x1: number,\n  y1: number,\n  w1: number,\n  h1: number,\n  w2: number,\n  h2: number,\n  angle: number,\n) => {\n  /**\n   * The formula below is the result of solving\n   *   rotate(x1, y1, cx1, cy1, angle) = rotate(x2, y2, cx2, cy2, angle)\n   * where rotate is the function defined in math.ts\n   *\n   * This is so that the new origin (x2, y2),\n   * when rotated against the new center (cx2, cy2),\n   * coincides with (x1, y1) rotated against (cx1, cy1)\n   *\n   * The reason for doing this computation is so the element's top left corner\n   * on the canvas remains fixed after any changes in its dimension.\n   */\n\n  return {\n    x:\n      x1 +\n      (w1 - w2) / 2 +\n      ((w2 - w1) / 2) * Math.cos(angle) +\n      ((h1 - h2) / 2) * Math.sin(angle),\n    y:\n      y1 +\n      (h1 - h2) / 2 +\n      ((w2 - w1) / 2) * Math.sin(angle) +\n      ((h2 - h1) / 2) * Math.cos(angle),\n  };\n};\n\nexport const moveElement = (\n  newTopLeftX: number,\n  newTopLeftY: number,\n  originalElement: ExcalidrawElement,\n  elementsMap: NonDeletedSceneElementsMap,\n  elements: readonly NonDeletedExcalidrawElement[],\n  scene: Scene,\n  originalElementsMap: ElementsMap,\n  shouldInformMutation = true,\n) => {\n  const latestElement = elementsMap.get(originalElement.id);\n  if (!latestElement) {\n    return;\n  }\n  const [cx, cy] = [\n    originalElement.x + originalElement.width / 2,\n    originalElement.y + originalElement.height / 2,\n  ];\n  const [topLeftX, topLeftY] = pointRotateRads(\n    pointFrom(originalElement.x, originalElement.y),\n    pointFrom(cx, cy),\n    originalElement.angle,\n  );\n\n  const changeInX = newTopLeftX - topLeftX;\n  const changeInY = newTopLeftY - topLeftY;\n\n  const [x, y] = pointRotateRads(\n    pointFrom(newTopLeftX, newTopLeftY),\n    pointFrom(cx + changeInX, cy + changeInY),\n    -originalElement.angle as Radians,\n  );\n\n  mutateElement(\n    latestElement,\n    {\n      x,\n      y,\n    },\n    shouldInformMutation,\n  );\n  updateBindings(latestElement, elementsMap, elements, scene);\n\n  const boundTextElement = getBoundTextElement(\n    originalElement,\n    originalElementsMap,\n  );\n  if (boundTextElement) {\n    const latestBoundTextElement = elementsMap.get(boundTextElement.id);\n    latestBoundTextElement &&\n      mutateElement(\n        latestBoundTextElement,\n        {\n          x: boundTextElement.x + changeInX,\n          y: boundTextElement.y + changeInY,\n        },\n        shouldInformMutation,\n      );\n  }\n};\n\nexport const getAtomicUnits = (\n  targetElements: readonly ExcalidrawElement[],\n  appState: AppState,\n) => {\n  const selectedGroupIds = getSelectedGroupIds(appState);\n  const _atomicUnits = selectedGroupIds.map((gid) => {\n    return getElementsInGroup(targetElements, gid).reduce((acc, el) => {\n      acc[el.id] = true;\n      return acc;\n    }, {} as AtomicUnit);\n  });\n  targetElements\n    .filter((el) => !isInGroup(el))\n    .forEach((el) => {\n      _atomicUnits.push({\n        [el.id]: true,\n      });\n    });\n  return _atomicUnits;\n};\n\nexport const updateBindings = (\n  latestElement: ExcalidrawElement,\n  elementsMap: NonDeletedSceneElementsMap,\n  elements: readonly NonDeletedExcalidrawElement[],\n  scene: Scene,\n  options?: {\n    simultaneouslyUpdated?: readonly ExcalidrawElement[];\n    newSize?: { width: number; height: number };\n    zoom?: AppState[\"zoom\"];\n  },\n) => {\n  if (isLinearElement(latestElement)) {\n    bindOrUnbindLinearElements(\n      [latestElement],\n      elementsMap,\n      elements,\n      scene,\n      true,\n      [],\n      options?.zoom,\n    );\n  } else {\n    updateBoundElements(latestElement, elementsMap, options);\n  }\n};\n", "import type { ExcalidrawElement } from \"../../element/types\";\nimport DragInput from \"./DragInput\";\nimport type { DragInputCallbackType } from \"./DragInput\";\nimport { getStepSizedValue, isPropertyEditable } from \"./utils\";\nimport { MIN_WIDTH_OR_HEIGHT } from \"../../constants\";\nimport { resizeSingleElement } from \"../../element/resizeElements\";\nimport type Scene from \"../../scene/Scene\";\nimport type { AppState } from \"../../types\";\nimport { isImageElement } from \"../../element/typeChecks\";\nimport {\n  MINIMAL_CROP_SIZE,\n  getUncroppedWidthAndHeight,\n} from \"../../element/cropElement\";\nimport { mutateElement } from \"../../element/mutateElement\";\nimport { clamp, round } from \"@excalidraw/math\";\n\ninterface DimensionDragInputProps {\n  property: \"width\" | \"height\";\n  element: ExcalidrawElement;\n  scene: Scene;\n  appState: AppState;\n}\n\nconst STEP_SIZE = 10;\nconst _shouldKeepAspectRatio = (element: ExcalidrawElement) => {\n  return element.type === \"image\";\n};\n\nconst handleDimensionChange: DragInputCallbackType<\n  DimensionDragInputProps[\"property\"]\n> = ({\n  accumulatedChange,\n  originalElements,\n  originalElementsMap,\n  shouldKeepAspectRatio,\n  shouldChangeByStepSize,\n  nextValue,\n  property,\n  originalAppState,\n  instantChange,\n  scene,\n}) => {\n  const elementsMap = scene.getNonDeletedElementsMap();\n  const origElement = originalElements[0];\n  const latestElement = elementsMap.get(origElement.id);\n  if (origElement && latestElement) {\n    const keepAspectRatio =\n      shouldKeepAspectRatio || _shouldKeepAspectRatio(origElement);\n    const aspectRatio = origElement.width / origElement.height;\n\n    if (originalAppState.croppingElementId === origElement.id) {\n      const element = elementsMap.get(origElement.id);\n\n      if (!element || !isImageElement(element) || !element.crop) {\n        return;\n      }\n\n      const crop = element.crop;\n      let nextCrop = { ...crop };\n\n      const isFlippedByX = element.scale[0] === -1;\n      const isFlippedByY = element.scale[1] === -1;\n\n      const { width: uncroppedWidth, height: uncroppedHeight } =\n        getUncroppedWidthAndHeight(element);\n\n      const naturalToUncroppedWidthRatio = crop.naturalWidth / uncroppedWidth;\n      const naturalToUncroppedHeightRatio =\n        crop.naturalHeight / uncroppedHeight;\n\n      const MAX_POSSIBLE_WIDTH = isFlippedByX\n        ? crop.width + crop.x\n        : crop.naturalWidth - crop.x;\n\n      const MAX_POSSIBLE_HEIGHT = isFlippedByY\n        ? crop.height + crop.y\n        : crop.naturalHeight - crop.y;\n\n      const MIN_WIDTH = MINIMAL_CROP_SIZE * naturalToUncroppedWidthRatio;\n      const MIN_HEIGHT = MINIMAL_CROP_SIZE * naturalToUncroppedHeightRatio;\n\n      if (nextValue !== undefined) {\n        if (property === \"width\") {\n          const nextValueInNatural = nextValue * naturalToUncroppedWidthRatio;\n\n          const nextCropWidth = clamp(\n            nextValueInNatural,\n            MIN_WIDTH,\n            MAX_POSSIBLE_WIDTH,\n          );\n\n          nextCrop = {\n            ...nextCrop,\n            width: nextCropWidth,\n            x: isFlippedByX ? crop.x + crop.width - nextCropWidth : crop.x,\n          };\n        } else if (property === \"height\") {\n          const nextValueInNatural = nextValue * naturalToUncroppedHeightRatio;\n          const nextCropHeight = clamp(\n            nextValueInNatural,\n            MIN_HEIGHT,\n            MAX_POSSIBLE_HEIGHT,\n          );\n\n          nextCrop = {\n            ...nextCrop,\n            height: nextCropHeight,\n            y: isFlippedByY ? crop.y + crop.height - nextCropHeight : crop.y,\n          };\n        }\n\n        mutateElement(element, {\n          crop: nextCrop,\n          width: nextCrop.width / (crop.naturalWidth / uncroppedWidth),\n          height: nextCrop.height / (crop.naturalHeight / uncroppedHeight),\n        });\n        return;\n      }\n\n      const changeInWidth = property === \"width\" ? instantChange : 0;\n      const changeInHeight = property === \"height\" ? instantChange : 0;\n\n      const nextCropWidth = clamp(\n        crop.width + changeInWidth,\n        MIN_WIDTH,\n        MAX_POSSIBLE_WIDTH,\n      );\n\n      const nextCropHeight = clamp(\n        crop.height + changeInHeight,\n        MIN_WIDTH,\n        MAX_POSSIBLE_HEIGHT,\n      );\n\n      nextCrop = {\n        ...crop,\n        x: isFlippedByX ? crop.x + crop.width - nextCropWidth : crop.x,\n        y: isFlippedByY ? crop.y + crop.height - nextCropHeight : crop.y,\n        width: nextCropWidth,\n        height: nextCropHeight,\n      };\n\n      mutateElement(element, {\n        crop: nextCrop,\n        width: nextCrop.width / (crop.naturalWidth / uncroppedWidth),\n        height: nextCrop.height / (crop.naturalHeight / uncroppedHeight),\n      });\n\n      return;\n    }\n\n    if (nextValue !== undefined) {\n      const nextWidth = Math.max(\n        property === \"width\"\n          ? nextValue\n          : keepAspectRatio\n          ? nextValue * aspectRatio\n          : origElement.width,\n        MIN_WIDTH_OR_HEIGHT,\n      );\n      const nextHeight = Math.max(\n        property === \"height\"\n          ? nextValue\n          : keepAspectRatio\n          ? nextValue / aspectRatio\n          : origElement.height,\n        MIN_WIDTH_OR_HEIGHT,\n      );\n\n      resizeSingleElement(\n        nextWidth,\n        nextHeight,\n        latestElement,\n        origElement,\n        elementsMap,\n        originalElementsMap,\n        property === \"width\" ? \"e\" : \"s\",\n        {\n          shouldMaintainAspectRatio: keepAspectRatio,\n        },\n      );\n\n      return;\n    }\n    const changeInWidth = property === \"width\" ? accumulatedChange : 0;\n    const changeInHeight = property === \"height\" ? accumulatedChange : 0;\n\n    let nextWidth = Math.max(0, origElement.width + changeInWidth);\n    if (property === \"width\") {\n      if (shouldChangeByStepSize) {\n        nextWidth = getStepSizedValue(nextWidth, STEP_SIZE);\n      } else {\n        nextWidth = Math.round(nextWidth);\n      }\n    }\n\n    let nextHeight = Math.max(0, origElement.height + changeInHeight);\n    if (property === \"height\") {\n      if (shouldChangeByStepSize) {\n        nextHeight = getStepSizedValue(nextHeight, STEP_SIZE);\n      } else {\n        nextHeight = Math.round(nextHeight);\n      }\n    }\n\n    if (keepAspectRatio) {\n      if (property === \"width\") {\n        nextHeight = Math.round((nextWidth / aspectRatio) * 100) / 100;\n      } else {\n        nextWidth = Math.round(nextHeight * aspectRatio * 100) / 100;\n      }\n    }\n\n    nextHeight = Math.max(MIN_WIDTH_OR_HEIGHT, nextHeight);\n    nextWidth = Math.max(MIN_WIDTH_OR_HEIGHT, nextWidth);\n\n    resizeSingleElement(\n      nextWidth,\n      nextHeight,\n      latestElement,\n      origElement,\n      elementsMap,\n      originalElementsMap,\n      property === \"width\" ? \"e\" : \"s\",\n      {\n        shouldMaintainAspectRatio: keepAspectRatio,\n      },\n    );\n  }\n};\n\nconst DimensionDragInput = ({\n  property,\n  element,\n  scene,\n  appState,\n}: DimensionDragInputProps) => {\n  let value = round(property === \"width\" ? element.width : element.height, 2);\n\n  if (\n    appState.croppingElementId &&\n    appState.croppingElementId === element.id &&\n    isImageElement(element) &&\n    element.crop\n  ) {\n    const { width: uncroppedWidth, height: uncroppedHeight } =\n      getUncroppedWidthAndHeight(element);\n    if (property === \"width\") {\n      const ratio = uncroppedWidth / element.crop.naturalWidth;\n      value = round(element.crop.width * ratio, 2);\n    }\n    if (property === \"height\") {\n      const ratio = uncroppedHeight / element.crop.naturalHeight;\n      value = round(element.crop.height * ratio, 2);\n    }\n  }\n\n  return (\n    <DragInput\n      label={property === \"width\" ? \"W\" : \"H\"}\n      elements={[element]}\n      dragInputCallback={handleDimensionChange}\n      value={value}\n      editable={isPropertyEditable(element, property)}\n      scene={scene}\n      appState={appState}\n      property={property}\n    />\n  );\n};\n\nexport default DimensionDragInput;\n", "import { mutateElement } from \"../../element/mutateElement\";\nimport { getBoundTextElement } from \"../../element/textElement\";\nimport { isArrowElement, isElbowArrow } from \"../../element/typeChecks\";\nimport type { ExcalidrawElement } from \"../../element/types\";\nimport { angleIcon } from \"../icons\";\nimport DragInput from \"./DragInput\";\nimport type { DragInputCallbackType } from \"./DragInput\";\nimport { getStepSizedValue, isPropertyEditable, updateBindings } from \"./utils\";\nimport type Scene from \"../../scene/Scene\";\nimport type { AppState } from \"../../types\";\nimport type { Degrees } from \"@excalidraw/math\";\nimport { degreesToRadians, radiansToDegrees } from \"@excalidraw/math\";\n\ninterface AngleProps {\n  element: ExcalidrawElement;\n  scene: Scene;\n  appState: AppState;\n  property: \"angle\";\n}\n\nconst STEP_SIZE = 15;\n\nconst handleDegreeChange: DragInputCallbackType<AngleProps[\"property\"]> = ({\n  accumulatedChange,\n  originalElements,\n  shouldChangeByStepSize,\n  nextValue,\n  scene,\n}) => {\n  const elementsMap = scene.getNonDeletedElementsMap();\n  const elements = scene.getNonDeletedElements();\n  const origElement = originalElements[0];\n  if (origElement && !isElbowArrow(origElement)) {\n    const latestElement = elementsMap.get(origElement.id);\n    if (!latestElement) {\n      return;\n    }\n\n    if (nextValue !== undefined) {\n      const nextAngle = degreesToRadians(nextValue as Degrees);\n      mutateElement(latestElement, {\n        angle: nextAngle,\n      });\n      updateBindings(latestElement, elementsMap, elements, scene);\n\n      const boundTextElement = getBoundTextElement(latestElement, elementsMap);\n      if (boundTextElement && !isArrowElement(latestElement)) {\n        mutateElement(boundTextElement, { angle: nextAngle });\n      }\n\n      return;\n    }\n\n    const originalAngleInDegrees =\n      Math.round(radiansToDegrees(origElement.angle) * 100) / 100;\n    const changeInDegrees = Math.round(accumulatedChange);\n    let nextAngleInDegrees = (originalAngleInDegrees + changeInDegrees) % 360;\n    if (shouldChangeByStepSize) {\n      nextAngleInDegrees = getStepSizedValue(nextAngleInDegrees, STEP_SIZE);\n    }\n\n    nextAngleInDegrees =\n      nextAngleInDegrees < 0 ? nextAngleInDegrees + 360 : nextAngleInDegrees;\n\n    const nextAngle = degreesToRadians(nextAngleInDegrees as Degrees);\n\n    mutateElement(latestElement, {\n      angle: nextAngle,\n    });\n    updateBindings(latestElement, elementsMap, elements, scene);\n\n    const boundTextElement = getBoundTextElement(latestElement, elementsMap);\n    if (boundTextElement && !isArrowElement(latestElement)) {\n      mutateElement(boundTextElement, { angle: nextAngle });\n    }\n  }\n};\n\nconst Angle = ({ element, scene, appState, property }: AngleProps) => {\n  return (\n    <DragInput\n      label=\"A\"\n      icon={angleIcon}\n      value={Math.round((radiansToDegrees(element.angle) % 360) * 100) / 100}\n      elements={[element]}\n      dragInputCallback={handleDegreeChange}\n      editable={isPropertyEditable(element, \"angle\")}\n      scene={scene}\n      appState={appState}\n      property={property}\n    />\n  );\n};\n\nexport default Angle;\n", "import type {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n} from \"../../element/types\";\nimport StatsDragInput from \"./DragInput\";\nimport type { DragInputCallbackType } from \"./DragInput\";\nimport { mutateElement } from \"../../element/mutateElement\";\nimport { getStepSizedValue } from \"./utils\";\nimport { fontSizeIcon } from \"../icons\";\nimport type Scene from \"../../scene/Scene\";\nimport type { AppState } from \"../../types\";\nimport { isTextElement, redrawTextBoundingBox } from \"../../element\";\nimport { hasBoundTextElement } from \"../../element/typeChecks\";\nimport { getBoundTextElement } from \"../../element/textElement\";\n\ninterface FontSizeProps {\n  element: ExcalidrawElement;\n  scene: Scene;\n  appState: AppState;\n  property: \"fontSize\";\n}\n\nconst MIN_FONT_SIZE = 4;\nconst STEP_SIZE = 4;\n\nconst handleFontSizeChange: DragInputCallbackType<\n  FontSizeProps[\"property\"],\n  ExcalidrawTextElement\n> = ({\n  accumulatedChange,\n  originalElements,\n  shouldChangeByStepSize,\n  nextValue,\n  scene,\n}) => {\n  const elementsMap = scene.getNonDeletedElementsMap();\n\n  const origElement = originalElements[0];\n  if (origElement) {\n    const latestElement = elementsMap.get(origElement.id);\n    if (!latestElement || !isTextElement(latestElement)) {\n      return;\n    }\n\n    let nextFontSize;\n\n    if (nextValue !== undefined) {\n      nextFontSize = Math.max(Math.round(nextValue), MIN_FONT_SIZE);\n    } else if (origElement.type === \"text\") {\n      const originalFontSize = Math.round(origElement.fontSize);\n      const changeInFontSize = Math.round(accumulatedChange);\n      nextFontSize = Math.max(\n        originalFontSize + changeInFontSize,\n        MIN_FONT_SIZE,\n      );\n      if (shouldChangeByStepSize) {\n        nextFontSize = getStepSizedValue(nextFontSize, STEP_SIZE);\n      }\n    }\n\n    if (nextFontSize) {\n      mutateElement(latestElement, {\n        fontSize: nextFontSize,\n      });\n      redrawTextBoundingBox(\n        latestElement,\n        scene.getContainerElement(latestElement),\n        scene.getNonDeletedElementsMap(),\n      );\n    }\n  }\n};\n\nconst FontSize = ({ element, scene, appState, property }: FontSizeProps) => {\n  const _element = isTextElement(element)\n    ? element\n    : hasBoundTextElement(element)\n    ? getBoundTextElement(element, scene.getNonDeletedElementsMap())\n    : null;\n\n  if (!_element) {\n    return null;\n  }\n\n  return (\n    <StatsDragInput\n      label=\"F\"\n      value={Math.round(_element.fontSize * 10) / 10}\n      elements={[_element]}\n      dragInputCallback={handleFontSizeChange}\n      icon={fontSizeIcon}\n      appState={appState}\n      scene={scene}\n      property={property}\n    />\n  );\n};\n\nexport default FontSize;\n", "import { useMemo } from \"react\";\nimport { getCommonBounds, isTextElement } from \"../../element\";\nimport { updateBoundElements } from \"../../element/binding\";\nimport { mutateElement } from \"../../element/mutateElement\";\nimport {\n  rescalePointsInElement,\n  resizeSingleElement,\n} from \"../../element/resizeElements\";\nimport {\n  getBoundTextElement,\n  handleBindTextResize,\n} from \"../../element/textElement\";\nimport type {\n  ElementsMap,\n  ExcalidrawElement,\n  NonDeletedSceneElementsMap,\n} from \"../../element/types\";\nimport type Scene from \"../../scene/Scene\";\nimport type { AppState } from \"../../types\";\nimport DragInput from \"./DragInput\";\nimport type { DragInputCallbackType } from \"./DragInput\";\nimport { getAtomicUnits, getStepSizedValue, isPropertyEditable } from \"./utils\";\nimport { getElementsInAtomicUnit } from \"./utils\";\nimport type { AtomicUnit } from \"./utils\";\nimport { MIN_WIDTH_OR_HEIGHT } from \"../../constants\";\nimport { pointFrom, type GlobalPoint } from \"@excalidraw/math\";\n\ninterface MultiDimensionProps {\n  property: \"width\" | \"height\";\n  elements: readonly ExcalidrawElement[];\n  elementsMap: NonDeletedSceneElementsMap;\n  atomicUnits: AtomicUnit[];\n  scene: Scene;\n  appState: AppState;\n}\n\nconst STEP_SIZE = 10;\n\nconst getResizedUpdates = (\n  anchorX: number,\n  anchorY: number,\n  scale: number,\n  origElement: ExcalidrawElement,\n) => {\n  const offsetX = origElement.x - anchorX;\n  const offsetY = origElement.y - anchorY;\n  const nextWidth = origElement.width * scale;\n  const nextHeight = origElement.height * scale;\n  const x = anchorX + offsetX * scale;\n  const y = anchorY + offsetY * scale;\n\n  return {\n    width: nextWidth,\n    height: nextHeight,\n    x,\n    y,\n    ...rescalePointsInElement(origElement, nextWidth, nextHeight, false),\n    ...(isTextElement(origElement)\n      ? { fontSize: origElement.fontSize * scale }\n      : {}),\n  };\n};\n\nconst resizeElementInGroup = (\n  anchorX: number,\n  anchorY: number,\n  property: MultiDimensionProps[\"property\"],\n  scale: number,\n  latestElement: ExcalidrawElement,\n  origElement: ExcalidrawElement,\n  elementsMap: NonDeletedSceneElementsMap,\n  originalElementsMap: ElementsMap,\n) => {\n  const updates = getResizedUpdates(anchorX, anchorY, scale, origElement);\n\n  mutateElement(latestElement, updates, false);\n  const boundTextElement = getBoundTextElement(\n    origElement,\n    originalElementsMap,\n  );\n  if (boundTextElement) {\n    const newFontSize = boundTextElement.fontSize * scale;\n    updateBoundElements(latestElement, elementsMap, {\n      newSize: { width: updates.width, height: updates.height },\n    });\n    const latestBoundTextElement = elementsMap.get(boundTextElement.id);\n    if (latestBoundTextElement && isTextElement(latestBoundTextElement)) {\n      mutateElement(\n        latestBoundTextElement,\n        {\n          fontSize: newFontSize,\n        },\n        false,\n      );\n      handleBindTextResize(\n        latestElement,\n        elementsMap,\n        property === \"width\" ? \"e\" : \"s\",\n        true,\n      );\n    }\n  }\n};\n\nconst resizeGroup = (\n  nextWidth: number,\n  nextHeight: number,\n  initialHeight: number,\n  aspectRatio: number,\n  anchor: GlobalPoint,\n  property: MultiDimensionProps[\"property\"],\n  latestElements: ExcalidrawElement[],\n  originalElements: ExcalidrawElement[],\n  elementsMap: NonDeletedSceneElementsMap,\n  originalElementsMap: ElementsMap,\n) => {\n  // keep aspect ratio for groups\n  if (property === \"width\") {\n    nextHeight = Math.round((nextWidth / aspectRatio) * 100) / 100;\n  } else {\n    nextWidth = Math.round(nextHeight * aspectRatio * 100) / 100;\n  }\n\n  const scale = nextHeight / initialHeight;\n\n  for (let i = 0; i < originalElements.length; i++) {\n    const origElement = originalElements[i];\n    const latestElement = latestElements[i];\n\n    resizeElementInGroup(\n      anchor[0],\n      anchor[1],\n      property,\n      scale,\n      latestElement,\n      origElement,\n      elementsMap,\n      originalElementsMap,\n    );\n  }\n};\n\nconst handleDimensionChange: DragInputCallbackType<\n  MultiDimensionProps[\"property\"]\n> = ({\n  accumulatedChange,\n  originalElements,\n  originalElementsMap,\n  originalAppState,\n  shouldChangeByStepSize,\n  nextValue,\n  scene,\n  property,\n}) => {\n  const elementsMap = scene.getNonDeletedElementsMap();\n  const atomicUnits = getAtomicUnits(originalElements, originalAppState);\n  if (nextValue !== undefined) {\n    for (const atomicUnit of atomicUnits) {\n      const elementsInUnit = getElementsInAtomicUnit(\n        atomicUnit,\n        elementsMap,\n        originalElementsMap,\n      );\n\n      if (elementsInUnit.length > 1) {\n        const latestElements = elementsInUnit.map((el) => el.latest!);\n        const originalElements = elementsInUnit.map((el) => el.original!);\n        const [x1, y1, x2, y2] = getCommonBounds(originalElements);\n        const initialWidth = x2 - x1;\n        const initialHeight = y2 - y1;\n        const aspectRatio = initialWidth / initialHeight;\n        const nextWidth = Math.max(\n          MIN_WIDTH_OR_HEIGHT,\n          property === \"width\" ? Math.max(0, nextValue) : initialWidth,\n        );\n        const nextHeight = Math.max(\n          MIN_WIDTH_OR_HEIGHT,\n          property === \"height\" ? Math.max(0, nextValue) : initialHeight,\n        );\n\n        resizeGroup(\n          nextWidth,\n          nextHeight,\n          initialHeight,\n          aspectRatio,\n          pointFrom(x1, y1),\n          property,\n          latestElements,\n          originalElements,\n          elementsMap,\n          originalElementsMap,\n        );\n      } else {\n        const [el] = elementsInUnit;\n        const latestElement = el?.latest;\n        const origElement = el?.original;\n\n        if (\n          latestElement &&\n          origElement &&\n          isPropertyEditable(latestElement, property)\n        ) {\n          let nextWidth =\n            property === \"width\" ? Math.max(0, nextValue) : latestElement.width;\n          if (property === \"width\") {\n            if (shouldChangeByStepSize) {\n              nextWidth = getStepSizedValue(nextWidth, STEP_SIZE);\n            } else {\n              nextWidth = Math.round(nextWidth);\n            }\n          }\n\n          let nextHeight =\n            property === \"height\"\n              ? Math.max(0, nextValue)\n              : latestElement.height;\n          if (property === \"height\") {\n            if (shouldChangeByStepSize) {\n              nextHeight = getStepSizedValue(nextHeight, STEP_SIZE);\n            } else {\n              nextHeight = Math.round(nextHeight);\n            }\n          }\n\n          nextWidth = Math.max(MIN_WIDTH_OR_HEIGHT, nextWidth);\n          nextHeight = Math.max(MIN_WIDTH_OR_HEIGHT, nextHeight);\n\n          resizeSingleElement(\n            nextWidth,\n            nextHeight,\n            latestElement,\n            origElement,\n            elementsMap,\n            originalElementsMap,\n            property === \"width\" ? \"e\" : \"s\",\n            {\n              shouldInformMutation: false,\n            },\n          );\n        }\n      }\n    }\n\n    scene.triggerUpdate();\n\n    return;\n  }\n\n  const changeInWidth = property === \"width\" ? accumulatedChange : 0;\n  const changeInHeight = property === \"height\" ? accumulatedChange : 0;\n\n  for (const atomicUnit of atomicUnits) {\n    const elementsInUnit = getElementsInAtomicUnit(\n      atomicUnit,\n      elementsMap,\n      originalElementsMap,\n    );\n\n    if (elementsInUnit.length > 1) {\n      const latestElements = elementsInUnit.map((el) => el.latest!);\n      const originalElements = elementsInUnit.map((el) => el.original!);\n\n      const [x1, y1, x2, y2] = getCommonBounds(originalElements);\n      const initialWidth = x2 - x1;\n      const initialHeight = y2 - y1;\n      const aspectRatio = initialWidth / initialHeight;\n      let nextWidth = Math.max(0, initialWidth + changeInWidth);\n      if (property === \"width\") {\n        if (shouldChangeByStepSize) {\n          nextWidth = getStepSizedValue(nextWidth, STEP_SIZE);\n        } else {\n          nextWidth = Math.round(nextWidth);\n        }\n      }\n\n      let nextHeight = Math.max(0, initialHeight + changeInHeight);\n      if (property === \"height\") {\n        if (shouldChangeByStepSize) {\n          nextHeight = getStepSizedValue(nextHeight, STEP_SIZE);\n        } else {\n          nextHeight = Math.round(nextHeight);\n        }\n      }\n\n      nextWidth = Math.max(MIN_WIDTH_OR_HEIGHT, nextWidth);\n      nextHeight = Math.max(MIN_WIDTH_OR_HEIGHT, nextHeight);\n\n      resizeGroup(\n        nextWidth,\n        nextHeight,\n        initialHeight,\n        aspectRatio,\n        pointFrom(x1, y1),\n        property,\n        latestElements,\n        originalElements,\n        elementsMap,\n        originalElementsMap,\n      );\n    } else {\n      const [el] = elementsInUnit;\n      const latestElement = el?.latest;\n      const origElement = el?.original;\n\n      if (\n        latestElement &&\n        origElement &&\n        isPropertyEditable(latestElement, property)\n      ) {\n        let nextWidth = Math.max(0, origElement.width + changeInWidth);\n        if (property === \"width\") {\n          if (shouldChangeByStepSize) {\n            nextWidth = getStepSizedValue(nextWidth, STEP_SIZE);\n          } else {\n            nextWidth = Math.round(nextWidth);\n          }\n        }\n\n        let nextHeight = Math.max(0, origElement.height + changeInHeight);\n        if (property === \"height\") {\n          if (shouldChangeByStepSize) {\n            nextHeight = getStepSizedValue(nextHeight, STEP_SIZE);\n          } else {\n            nextHeight = Math.round(nextHeight);\n          }\n        }\n\n        nextWidth = Math.max(MIN_WIDTH_OR_HEIGHT, nextWidth);\n        nextHeight = Math.max(MIN_WIDTH_OR_HEIGHT, nextHeight);\n\n        resizeSingleElement(\n          nextWidth,\n          nextHeight,\n          latestElement,\n          origElement,\n          elementsMap,\n          originalElementsMap,\n          property === \"width\" ? \"e\" : \"s\",\n          {\n            shouldInformMutation: false,\n          },\n        );\n      }\n    }\n  }\n\n  scene.triggerUpdate();\n};\n\nconst MultiDimension = ({\n  property,\n  elements,\n  elementsMap,\n  atomicUnits,\n  scene,\n  appState,\n}: MultiDimensionProps) => {\n  const sizes = useMemo(\n    () =>\n      atomicUnits.map((atomicUnit) => {\n        const elementsInUnit = getElementsInAtomicUnit(atomicUnit, elementsMap);\n\n        if (elementsInUnit.length > 1) {\n          const [x1, y1, x2, y2] = getCommonBounds(\n            elementsInUnit.map((el) => el.latest),\n          );\n          return (\n            Math.round((property === \"width\" ? x2 - x1 : y2 - y1) * 100) / 100\n          );\n        }\n        const [el] = elementsInUnit;\n\n        return (\n          Math.round(\n            (property === \"width\" ? el.latest.width : el.latest.height) * 100,\n          ) / 100\n        );\n      }),\n    [elementsMap, atomicUnits, property],\n  );\n\n  const value =\n    new Set(sizes).size === 1 ? Math.round(sizes[0] * 100) / 100 : \"Mixed\";\n\n  const editable = sizes.length > 0;\n\n  return (\n    <DragInput\n      label={property === \"width\" ? \"W\" : \"H\"}\n      elements={elements}\n      dragInputCallback={handleDimensionChange}\n      value={value}\n      editable={editable}\n      appState={appState}\n      property={property}\n      scene={scene}\n    />\n  );\n};\n\nexport default MultiDimension;\n", "import { mutateElement } from \"../../element/mutateElement\";\nimport { getBoundTextElement } from \"../../element/textElement\";\nimport { isArrowElement } from \"../../element/typeChecks\";\nimport type { ExcalidrawElement } from \"../../element/types\";\nimport { isInGroup } from \"../../groups\";\nimport type Scene from \"../../scene/Scene\";\nimport { angleIcon } from \"../icons\";\nimport DragInput from \"./DragInput\";\nimport type { DragInputCallbackType } from \"./DragInput\";\nimport { getStepSizedValue, isPropertyEditable } from \"./utils\";\nimport type { AppState } from \"../../types\";\nimport type { Degrees } from \"@excalidraw/math\";\nimport { degreesToRadians, radiansToDegrees } from \"@excalidraw/math\";\n\ninterface MultiAngleProps {\n  elements: readonly ExcalidrawElement[];\n  scene: Scene;\n  appState: AppState;\n  property: \"angle\";\n}\n\nconst STEP_SIZE = 15;\n\nconst handleDegreeChange: DragInputCallbackType<\n  MultiAngleProps[\"property\"]\n> = ({\n  accumulatedChange,\n  originalElements,\n  shouldChangeByStepSize,\n  nextValue,\n  property,\n  scene,\n}) => {\n  const elementsMap = scene.getNonDeletedElementsMap();\n  const editableLatestIndividualElements = originalElements\n    .map((el) => elementsMap.get(el.id))\n    .filter((el) => el && !isInGroup(el) && isPropertyEditable(el, property));\n  const editableOriginalIndividualElements = originalElements.filter(\n    (el) => !isInGroup(el) && isPropertyEditable(el, property),\n  );\n\n  if (nextValue !== undefined) {\n    const nextAngle = degreesToRadians(nextValue as Degrees);\n\n    for (const element of editableLatestIndividualElements) {\n      if (!element) {\n        continue;\n      }\n      mutateElement(\n        element,\n        {\n          angle: nextAngle,\n        },\n        false,\n      );\n\n      const boundTextElement = getBoundTextElement(element, elementsMap);\n      if (boundTextElement && !isArrowElement(element)) {\n        mutateElement(boundTextElement, { angle: nextAngle }, false);\n      }\n    }\n\n    scene.triggerUpdate();\n\n    return;\n  }\n\n  for (let i = 0; i < editableLatestIndividualElements.length; i++) {\n    const latestElement = editableLatestIndividualElements[i];\n    if (!latestElement) {\n      continue;\n    }\n    const originalElement = editableOriginalIndividualElements[i];\n    const originalAngleInDegrees =\n      Math.round(radiansToDegrees(originalElement.angle) * 100) / 100;\n    const changeInDegrees = Math.round(accumulatedChange);\n    let nextAngleInDegrees = (originalAngleInDegrees + changeInDegrees) % 360;\n    if (shouldChangeByStepSize) {\n      nextAngleInDegrees = getStepSizedValue(nextAngleInDegrees, STEP_SIZE);\n    }\n\n    nextAngleInDegrees =\n      nextAngleInDegrees < 0 ? nextAngleInDegrees + 360 : nextAngleInDegrees;\n\n    const nextAngle = degreesToRadians(nextAngleInDegrees as Degrees);\n\n    mutateElement(\n      latestElement,\n      {\n        angle: nextAngle,\n      },\n      false,\n    );\n\n    const boundTextElement = getBoundTextElement(latestElement, elementsMap);\n    if (boundTextElement && !isArrowElement(latestElement)) {\n      mutateElement(boundTextElement, { angle: nextAngle }, false);\n    }\n  }\n  scene.triggerUpdate();\n};\n\nconst MultiAngle = ({\n  elements,\n  scene,\n  appState,\n  property,\n}: MultiAngleProps) => {\n  const editableLatestIndividualElements = elements.filter(\n    (el) => !isInGroup(el) && isPropertyEditable(el, \"angle\"),\n  );\n  const angles = editableLatestIndividualElements.map(\n    (el) => Math.round((radiansToDegrees(el.angle) % 360) * 100) / 100,\n  );\n  const value = new Set(angles).size === 1 ? angles[0] : \"Mixed\";\n\n  const editable = editableLatestIndividualElements.some((el) =>\n    isPropertyEditable(el, \"angle\"),\n  );\n\n  return (\n    <DragInput\n      label=\"A\"\n      icon={angleIcon}\n      value={value}\n      elements={elements}\n      dragInputCallback={handleDegreeChange}\n      editable={editable}\n      appState={appState}\n      scene={scene}\n      property={property}\n    />\n  );\n};\n\nexport default MultiAngle;\n", "import { isTextElement, redrawTextBoundingBox } from \"../../element\";\nimport { mutateElement } from \"../../element/mutateElement\";\nimport { hasBoundTextElement } from \"../../element/typeChecks\";\nimport type {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  NonDeletedSceneElementsMap,\n} from \"../../element/types\";\nimport { isInGroup } from \"../../groups\";\nimport type Scene from \"../../scene/Scene\";\nimport { fontSizeIcon } from \"../icons\";\nimport StatsDragInput from \"./DragInput\";\nimport type { DragInputCallbackType } from \"./DragInput\";\nimport { getStepSizedValue } from \"./utils\";\nimport type { AppState } from \"../../types\";\nimport { getBoundTextElement } from \"../../element/textElement\";\n\ninterface MultiFontSizeProps {\n  elements: readonly ExcalidrawElement[];\n  scene: Scene;\n  elementsMap: NonDeletedSceneElementsMap;\n  appState: AppState;\n  property: \"fontSize\";\n}\n\nconst MIN_FONT_SIZE = 4;\nconst STEP_SIZE = 4;\n\nconst getApplicableTextElements = (\n  elements: readonly (ExcalidrawElement | undefined)[],\n  elementsMap: NonDeletedSceneElementsMap,\n) =>\n  elements.reduce(\n    (acc: ExcalidrawTextElement[], el) => {\n      if (!el || isInGroup(el)) {\n        return acc;\n      }\n      if (isTextElement(el)) {\n        acc.push(el);\n        return acc;\n      }\n      if (hasBoundTextElement(el)) {\n        const boundTextElement = getBoundTextElement(el, elementsMap);\n        if (boundTextElement) {\n          acc.push(boundTextElement);\n          return acc;\n        }\n      }\n\n      return acc;\n    },\n\n    [],\n  );\n\nconst handleFontSizeChange: DragInputCallbackType<\n  MultiFontSizeProps[\"property\"],\n  ExcalidrawTextElement\n> = ({\n  accumulatedChange,\n  originalElements,\n  shouldChangeByStepSize,\n  nextValue,\n  scene,\n}) => {\n  const elementsMap = scene.getNonDeletedElementsMap();\n  const latestTextElements = originalElements.map((el) =>\n    elementsMap.get(el.id),\n  ) as ExcalidrawTextElement[];\n\n  let nextFontSize;\n\n  if (nextValue) {\n    nextFontSize = Math.max(Math.round(nextValue), MIN_FONT_SIZE);\n\n    for (const textElement of latestTextElements) {\n      mutateElement(\n        textElement,\n        {\n          fontSize: nextFontSize,\n        },\n        false,\n      );\n\n      redrawTextBoundingBox(\n        textElement,\n        scene.getContainerElement(textElement),\n        elementsMap,\n        false,\n      );\n    }\n\n    scene.triggerUpdate();\n  } else {\n    const originalTextElements = originalElements as ExcalidrawTextElement[];\n\n    for (let i = 0; i < latestTextElements.length; i++) {\n      const latestElement = latestTextElements[i];\n      const originalElement = originalTextElements[i];\n\n      const originalFontSize = Math.round(originalElement.fontSize);\n      const changeInFontSize = Math.round(accumulatedChange);\n      let nextFontSize = Math.max(\n        originalFontSize + changeInFontSize,\n        MIN_FONT_SIZE,\n      );\n      if (shouldChangeByStepSize) {\n        nextFontSize = getStepSizedValue(nextFontSize, STEP_SIZE);\n      }\n      mutateElement(\n        latestElement,\n        {\n          fontSize: nextFontSize,\n        },\n        false,\n      );\n\n      redrawTextBoundingBox(\n        latestElement,\n        scene.getContainerElement(latestElement),\n        elementsMap,\n        false,\n      );\n    }\n\n    scene.triggerUpdate();\n  }\n};\n\nconst MultiFontSize = ({\n  elements,\n  scene,\n  appState,\n  property,\n  elementsMap,\n}: MultiFontSizeProps) => {\n  const latestTextElements = getApplicableTextElements(elements, elementsMap);\n\n  if (!latestTextElements.length) {\n    return null;\n  }\n\n  const fontSizes = latestTextElements.map(\n    (textEl) => Math.round(textEl.fontSize * 10) / 10,\n  );\n  const value = new Set(fontSizes).size === 1 ? fontSizes[0] : \"Mixed\";\n  const editable = fontSizes.length > 0;\n\n  return (\n    <StatsDragInput\n      label=\"F\"\n      icon={fontSizeIcon}\n      elements={latestTextElements}\n      dragInputCallback={handleFontSizeChange}\n      value={value}\n      editable={editable}\n      scene={scene}\n      property={property}\n      appState={appState}\n    />\n  );\n};\n\nexport default MultiFontSize;\n", "import type { ElementsMap, ExcalidrawElement } from \"../../element/types\";\nimport StatsDragInput from \"./DragInput\";\nimport type { DragInputCallbackType } from \"./DragInput\";\nimport { getStepSizedValue, moveElement } from \"./utils\";\nimport type Scene from \"../../scene/Scene\";\nimport type { AppState } from \"../../types\";\nimport { clamp, pointFrom, pointRotateRads, round } from \"@excalidraw/math\";\nimport { isImageElement } from \"../../element/typeChecks\";\nimport {\n  getFlipAdjustedCropPosition,\n  getUncroppedWidthAndHeight,\n} from \"../../element/cropElement\";\nimport { mutateElement } from \"../../element/mutateElement\";\n\ninterface PositionProps {\n  property: \"x\" | \"y\";\n  element: ExcalidrawElement;\n  elementsMap: ElementsMap;\n  scene: Scene;\n  appState: AppState;\n}\n\nconst STEP_SIZE = 10;\n\nconst handlePositionChange: DragInputCallbackType<\"x\" | \"y\"> = ({\n  accumulatedChange,\n  instantChange,\n  originalElements,\n  originalElementsMap,\n  shouldChangeByStepSize,\n  nextValue,\n  property,\n  scene,\n  originalAppState,\n}) => {\n  const elementsMap = scene.getNonDeletedElementsMap();\n  const elements = scene.getNonDeletedElements();\n  const origElement = originalElements[0];\n  const [cx, cy] = [\n    origElement.x + origElement.width / 2,\n    origElement.y + origElement.height / 2,\n  ];\n  const [topLeftX, topLeftY] = pointRotateRads(\n    pointFrom(origElement.x, origElement.y),\n    pointFrom(cx, cy),\n    origElement.angle,\n  );\n\n  if (originalAppState.croppingElementId === origElement.id) {\n    const element = elementsMap.get(origElement.id);\n\n    if (!element || !isImageElement(element) || !element.crop) {\n      return;\n    }\n\n    const crop = element.crop;\n    let nextCrop = crop;\n    const isFlippedByX = element.scale[0] === -1;\n    const isFlippedByY = element.scale[1] === -1;\n    const { width: uncroppedWidth, height: uncroppedHeight } =\n      getUncroppedWidthAndHeight(element);\n\n    if (nextValue !== undefined) {\n      if (property === \"x\") {\n        const nextValueInNatural =\n          nextValue * (crop.naturalWidth / uncroppedWidth);\n\n        if (isFlippedByX) {\n          nextCrop = {\n            ...crop,\n            x: clamp(\n              crop.naturalWidth - nextValueInNatural - crop.width,\n              0,\n              crop.naturalWidth - crop.width,\n            ),\n          };\n        } else {\n          nextCrop = {\n            ...crop,\n            x: clamp(\n              nextValue * (crop.naturalWidth / uncroppedWidth),\n              0,\n              crop.naturalWidth - crop.width,\n            ),\n          };\n        }\n      }\n\n      if (property === \"y\") {\n        nextCrop = {\n          ...crop,\n          y: clamp(\n            nextValue * (crop.naturalHeight / uncroppedHeight),\n            0,\n            crop.naturalHeight - crop.height,\n          ),\n        };\n      }\n\n      mutateElement(element, {\n        crop: nextCrop,\n      });\n\n      return;\n    }\n\n    const changeInX =\n      (property === \"x\" ? instantChange : 0) * (isFlippedByX ? -1 : 1);\n    const changeInY =\n      (property === \"y\" ? instantChange : 0) * (isFlippedByY ? -1 : 1);\n\n    nextCrop = {\n      ...crop,\n      x: clamp(crop.x + changeInX, 0, crop.naturalWidth - crop.width),\n      y: clamp(crop.y + changeInY, 0, crop.naturalHeight - crop.height),\n    };\n\n    mutateElement(element, {\n      crop: nextCrop,\n    });\n\n    return;\n  }\n\n  if (nextValue !== undefined) {\n    const newTopLeftX = property === \"x\" ? nextValue : topLeftX;\n    const newTopLeftY = property === \"y\" ? nextValue : topLeftY;\n    moveElement(\n      newTopLeftX,\n      newTopLeftY,\n      origElement,\n      elementsMap,\n      elements,\n      scene,\n      originalElementsMap,\n    );\n    return;\n  }\n\n  const changeInTopX = property === \"x\" ? accumulatedChange : 0;\n  const changeInTopY = property === \"y\" ? accumulatedChange : 0;\n\n  const newTopLeftX =\n    property === \"x\"\n      ? Math.round(\n          shouldChangeByStepSize\n            ? getStepSizedValue(origElement.x + changeInTopX, STEP_SIZE)\n            : topLeftX + changeInTopX,\n        )\n      : topLeftX;\n\n  const newTopLeftY =\n    property === \"y\"\n      ? Math.round(\n          shouldChangeByStepSize\n            ? getStepSizedValue(origElement.y + changeInTopY, STEP_SIZE)\n            : topLeftY + changeInTopY,\n        )\n      : topLeftY;\n\n  moveElement(\n    newTopLeftX,\n    newTopLeftY,\n    origElement,\n    elementsMap,\n    elements,\n    scene,\n    originalElementsMap,\n  );\n};\n\nconst Position = ({\n  property,\n  element,\n  elementsMap,\n  scene,\n  appState,\n}: PositionProps) => {\n  const [topLeftX, topLeftY] = pointRotateRads(\n    pointFrom(element.x, element.y),\n    pointFrom(element.x + element.width / 2, element.y + element.height / 2),\n    element.angle,\n  );\n  let value = round(property === \"x\" ? topLeftX : topLeftY, 2);\n\n  if (\n    appState.croppingElementId === element.id &&\n    isImageElement(element) &&\n    element.crop\n  ) {\n    const flipAdjustedPosition = getFlipAdjustedCropPosition(element);\n\n    if (flipAdjustedPosition) {\n      value = round(\n        property === \"x\" ? flipAdjustedPosition.x : flipAdjustedPosition.y,\n        2,\n      );\n    }\n  }\n\n  return (\n    <StatsDragInput\n      label={property === \"x\" ? \"X\" : \"Y\"}\n      elements={[element]}\n      dragInputCallback={handlePositionChange}\n      scene={scene}\n      value={value}\n      property={property}\n      appState={appState}\n    />\n  );\n};\n\nexport default Position;\n", "import type {\n  ElementsMap,\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  NonDeletedSceneElementsMap,\n} from \"../../element/types\";\nimport type Scene from \"../../scene/Scene\";\nimport StatsDragInput from \"./DragInput\";\nimport type { DragInputCallbackType } from \"./DragInput\";\nimport { getAtomicUnits, getStepSizedValue, isPropertyEditable } from \"./utils\";\nimport { getCommonBounds, isTextElement } from \"../../element\";\nimport { useMemo } from \"react\";\nimport { getElementsInAtomicUnit, moveElement } from \"./utils\";\nimport type { AtomicUnit } from \"./utils\";\nimport type { AppState } from \"../../types\";\nimport { pointFrom, pointRotateRads } from \"@excalidraw/math\";\n\ninterface MultiPositionProps {\n  property: \"x\" | \"y\";\n  elements: readonly ExcalidrawElement[];\n  elementsMap: ElementsMap;\n  atomicUnits: AtomicUnit[];\n  scene: Scene;\n  appState: AppState;\n}\n\nconst STEP_SIZE = 10;\n\nconst moveElements = (\n  property: MultiPositionProps[\"property\"],\n  changeInTopX: number,\n  changeInTopY: number,\n  elements: readonly ExcalidrawElement[],\n  originalElements: readonly ExcalidrawElement[],\n  elementsMap: NonDeletedSceneElementsMap,\n  originalElementsMap: ElementsMap,\n  scene: Scene,\n) => {\n  for (let i = 0; i < elements.length; i++) {\n    const origElement = originalElements[i];\n\n    const [cx, cy] = [\n      origElement.x + origElement.width / 2,\n      origElement.y + origElement.height / 2,\n    ];\n    const [topLeftX, topLeftY] = pointRotateRads(\n      pointFrom(origElement.x, origElement.y),\n      pointFrom(cx, cy),\n      origElement.angle,\n    );\n\n    const newTopLeftX =\n      property === \"x\" ? Math.round(topLeftX + changeInTopX) : topLeftX;\n\n    const newTopLeftY =\n      property === \"y\" ? Math.round(topLeftY + changeInTopY) : topLeftY;\n\n    moveElement(\n      newTopLeftX,\n      newTopLeftY,\n      origElement,\n      elementsMap,\n      elements,\n      scene,\n      originalElementsMap,\n      false,\n    );\n  }\n};\n\nconst moveGroupTo = (\n  nextX: number,\n  nextY: number,\n  originalElements: ExcalidrawElement[],\n  elementsMap: NonDeletedSceneElementsMap,\n  elements: readonly NonDeletedExcalidrawElement[],\n  originalElementsMap: ElementsMap,\n  scene: Scene,\n) => {\n  const [x1, y1, ,] = getCommonBounds(originalElements);\n  const offsetX = nextX - x1;\n  const offsetY = nextY - y1;\n\n  for (let i = 0; i < originalElements.length; i++) {\n    const origElement = originalElements[i];\n\n    const latestElement = elementsMap.get(origElement.id);\n    if (!latestElement) {\n      continue;\n    }\n\n    // bound texts are moved with their containers\n    if (!isTextElement(latestElement) || !latestElement.containerId) {\n      const [cx, cy] = [\n        latestElement.x + latestElement.width / 2,\n        latestElement.y + latestElement.height / 2,\n      ];\n\n      const [topLeftX, topLeftY] = pointRotateRads(\n        pointFrom(latestElement.x, latestElement.y),\n        pointFrom(cx, cy),\n        latestElement.angle,\n      );\n\n      moveElement(\n        topLeftX + offsetX,\n        topLeftY + offsetY,\n        origElement,\n        elementsMap,\n        elements,\n        scene,\n        originalElementsMap,\n        false,\n      );\n    }\n  }\n};\n\nconst handlePositionChange: DragInputCallbackType<\n  MultiPositionProps[\"property\"]\n> = ({\n  accumulatedChange,\n  originalElements,\n  originalElementsMap,\n  shouldChangeByStepSize,\n  nextValue,\n  property,\n  scene,\n  originalAppState,\n}) => {\n  const elementsMap = scene.getNonDeletedElementsMap();\n  const elements = scene.getNonDeletedElements();\n\n  if (nextValue !== undefined) {\n    for (const atomicUnit of getAtomicUnits(\n      originalElements,\n      originalAppState,\n    )) {\n      const elementsInUnit = getElementsInAtomicUnit(\n        atomicUnit,\n        elementsMap,\n        originalElementsMap,\n      );\n\n      if (elementsInUnit.length > 1) {\n        const [x1, y1, ,] = getCommonBounds(\n          elementsInUnit.map((el) => el.latest!),\n        );\n        const newTopLeftX = property === \"x\" ? nextValue : x1;\n        const newTopLeftY = property === \"y\" ? nextValue : y1;\n\n        moveGroupTo(\n          newTopLeftX,\n          newTopLeftY,\n          elementsInUnit.map((el) => el.original),\n          elementsMap,\n          elements,\n          originalElementsMap,\n          scene,\n        );\n      } else {\n        const origElement = elementsInUnit[0]?.original;\n        const latestElement = elementsInUnit[0]?.latest;\n        if (\n          origElement &&\n          latestElement &&\n          isPropertyEditable(latestElement, property)\n        ) {\n          const [cx, cy] = [\n            origElement.x + origElement.width / 2,\n            origElement.y + origElement.height / 2,\n          ];\n          const [topLeftX, topLeftY] = pointRotateRads(\n            pointFrom(origElement.x, origElement.y),\n            pointFrom(cx, cy),\n            origElement.angle,\n          );\n\n          const newTopLeftX = property === \"x\" ? nextValue : topLeftX;\n          const newTopLeftY = property === \"y\" ? nextValue : topLeftY;\n          moveElement(\n            newTopLeftX,\n            newTopLeftY,\n            origElement,\n            elementsMap,\n            elements,\n            scene,\n            originalElementsMap,\n            false,\n          );\n        }\n      }\n    }\n\n    scene.triggerUpdate();\n    return;\n  }\n\n  const change = shouldChangeByStepSize\n    ? getStepSizedValue(accumulatedChange, STEP_SIZE)\n    : accumulatedChange;\n\n  const changeInTopX = property === \"x\" ? change : 0;\n  const changeInTopY = property === \"y\" ? change : 0;\n\n  moveElements(\n    property,\n    changeInTopX,\n    changeInTopY,\n    originalElements,\n    originalElements,\n    elementsMap,\n    originalElementsMap,\n    scene,\n  );\n\n  scene.triggerUpdate();\n};\n\nconst MultiPosition = ({\n  property,\n  elements,\n  elementsMap,\n  atomicUnits,\n  scene,\n  appState,\n}: MultiPositionProps) => {\n  const positions = useMemo(\n    () =>\n      atomicUnits.map((atomicUnit) => {\n        const elementsInUnit = Object.keys(atomicUnit)\n          .map((id) => elementsMap.get(id))\n          .filter((el) => el !== undefined) as ExcalidrawElement[];\n\n        // we're dealing with a group\n        if (elementsInUnit.length > 1) {\n          const [x1, y1] = getCommonBounds(elementsInUnit);\n          return Math.round((property === \"x\" ? x1 : y1) * 100) / 100;\n        }\n\n        const [el] = elementsInUnit;\n        const [cx, cy] = [el.x + el.width / 2, el.y + el.height / 2];\n\n        const [topLeftX, topLeftY] = pointRotateRads(\n          pointFrom(el.x, el.y),\n          pointFrom(cx, cy),\n          el.angle,\n        );\n\n        return Math.round((property === \"x\" ? topLeftX : topLeftY) * 100) / 100;\n      }),\n    [atomicUnits, elementsMap, property],\n  );\n\n  const value = new Set(positions).size === 1 ? positions[0] : \"Mixed\";\n\n  return (\n    <StatsDragInput\n      label={property === \"x\" ? \"X\" : \"Y\"}\n      elements={elements}\n      dragInputCallback={handlePositionChange}\n      value={value}\n      property={property}\n      scene={scene}\n      appState={appState}\n    />\n  );\n};\n\nexport default MultiPosition;\n", "import StatsDragInput from \"./DragInput\";\nimport type Scene from \"../../scene/Scene\";\nimport type { AppState } from \"../../types\";\nimport { getStepSizedValue } from \"./utils\";\nimport { getNormalizedGridStep } from \"../../scene\";\n\ninterface PositionProps {\n  property: \"gridStep\";\n  scene: Scene;\n  appState: AppState;\n  setAppState: React.Component<any, AppState>[\"setState\"];\n}\n\nconst STEP_SIZE = 5;\n\nconst CanvasGrid = ({\n  property,\n  scene,\n  appState,\n  setAppState,\n}: PositionProps) => {\n  return (\n    <StatsDragInput\n      label=\"Grid step\"\n      sensitivity={8}\n      elements={[]}\n      dragInputCallback={({\n        nextValue,\n        instantChange,\n        shouldChangeByStepSize,\n        setInputValue,\n      }) => {\n        setAppState((state) => {\n          let nextGridStep;\n\n          if (nextValue) {\n            nextGridStep = nextValue;\n          } else if (instantChange) {\n            nextGridStep = shouldChangeByStepSize\n              ? getStepSizedValue(\n                  state.gridStep + STEP_SIZE * Math.sign(instantChange),\n                  STEP_SIZE,\n                )\n              : state.gridStep + instantChange;\n          }\n\n          if (!nextGridStep) {\n            setInputValue(state.gridStep);\n            return null;\n          }\n\n          nextGridStep = getNormalizedGridStep(nextGridStep);\n          setInputValue(nextGridStep);\n          return {\n            gridStep: nextGridStep,\n          };\n        });\n      }}\n      scene={scene}\n      value={appState.gridStep}\n      property={property}\n      appState={appState}\n    />\n  );\n};\n\nexport default CanvasGrid;\n", "import { TextField } from \"./TextField\";\nimport type { AppProps, AppState, UIAppState } from \"../types\";\nimport DialogActionButton from \"./DialogActionButton\";\nimport { getSelectedElements } from \"../scene\";\nimport {\n  defaultGetElementLinkFromSelection,\n  getLinkIdAndTypeFromSelection,\n} from \"../element/elementLink\";\nimport { mutateElement } from \"../element/mutateElement\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { t } from \"../i18n\";\nimport type { ElementsMap, ExcalidrawElement } from \"../element/types\";\nimport { ToolButton } from \"./ToolButton\";\nimport { TrashIcon } from \"./icons\";\nimport { KEYS } from \"../keys\";\n\nimport \"./ElementLinkDialog.scss\";\nimport { normalizeLink } from \"../data/url\";\n\nconst ElementLinkDialog = ({\n  sourceElementId,\n  onClose,\n  elementsMap,\n  appState,\n  generateLinkForSelection = defaultGetElementLinkFromSelection,\n}: {\n  sourceElementId: ExcalidrawElement[\"id\"];\n  elementsMap: ElementsMap;\n  appState: UIAppState;\n  onClose?: () => void;\n  generateLinkForSelection: AppProps[\"generateLinkForSelection\"];\n}) => {\n  const originalLink = elementsMap.get(sourceElementId)?.link ?? null;\n\n  const [nextLink, setNextLink] = useState<string | null>(originalLink);\n  const [linkEdited, setLinkEdited] = useState(false);\n\n  useEffect(() => {\n    const selectedElements = getSelectedElements(elementsMap, appState);\n    let nextLink = originalLink;\n\n    if (selectedElements.length > 0 && generateLinkForSelection) {\n      const idAndType = getLinkIdAndTypeFromSelection(\n        selectedElements,\n        appState as AppState,\n      );\n\n      if (idAndType) {\n        nextLink = normalizeLink(\n          generateLinkForSelection(idAndType.id, idAndType.type),\n        );\n      }\n    }\n\n    setNextLink(nextLink);\n  }, [\n    elementsMap,\n    appState,\n    appState.selectedElementIds,\n    originalLink,\n    generateLinkForSelection,\n  ]);\n\n  const handleConfirm = useCallback(() => {\n    if (nextLink && nextLink !== elementsMap.get(sourceElementId)?.link) {\n      const elementToLink = elementsMap.get(sourceElementId);\n      elementToLink &&\n        mutateElement(elementToLink, {\n          link: nextLink,\n        });\n    }\n\n    if (!nextLink && linkEdited && sourceElementId) {\n      const elementToLink = elementsMap.get(sourceElementId);\n      elementToLink &&\n        mutateElement(elementToLink, {\n          link: null,\n        });\n    }\n\n    onClose?.();\n  }, [sourceElementId, nextLink, elementsMap, linkEdited, onClose]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        appState.openDialog?.name === \"elementLinkSelector\" &&\n        event.key === KEYS.ENTER\n      ) {\n        handleConfirm();\n      }\n\n      if (\n        appState.openDialog?.name === \"elementLinkSelector\" &&\n        event.key === KEYS.ESCAPE\n      ) {\n        onClose?.();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [appState, onClose, handleConfirm]);\n\n  return (\n    <div className=\"ElementLinkDialog\">\n      <div className=\"ElementLinkDialog__header\">\n        <h2>{t(\"elementLink.title\")}</h2>\n        <p>{t(\"elementLink.desc\")}</p>\n      </div>\n\n      <div className=\"ElementLinkDialog__input\">\n        <TextField\n          value={nextLink ?? \"\"}\n          onChange={(value) => {\n            if (!linkEdited) {\n              setLinkEdited(true);\n            }\n            setNextLink(value);\n          }}\n          onKeyDown={(event) => {\n            if (event.key === KEYS.ENTER) {\n              handleConfirm();\n            }\n          }}\n          className=\"ElementLinkDialog__input-field\"\n          selectOnRender\n        />\n\n        {originalLink && nextLink && (\n          <ToolButton\n            type=\"button\"\n            title={t(\"buttons.remove\")}\n            aria-label={t(\"buttons.remove\")}\n            label={t(\"buttons.remove\")}\n            onClick={() => {\n              // removes the link from the input\n              // but doesn't update the element\n\n              // when confirmed, will remove the link from the element\n              setNextLink(null);\n              setLinkEdited(true);\n            }}\n            className=\"ElementLinkDialog__remove\"\n            icon={TrashIcon}\n          />\n        )}\n      </div>\n\n      <div className=\"ElementLinkDialog__actions\">\n        <DialogActionButton\n          label={t(\"buttons.cancel\")}\n          onClick={() => {\n            onClose?.();\n          }}\n          style={{\n            marginRight: 10,\n          }}\n        />\n\n        <DialogActionButton\n          label={t(\"buttons.confirm\")}\n          onClick={handleConfirm}\n          actionType=\"primary\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ElementLinkDialog;\n", "import type { CSSProperties } from \"react\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { CloseIcon } from \"./icons\";\nimport \"./Toast.scss\";\nimport { ToolButton } from \"./ToolButton\";\n\nconst DEFAULT_TOAST_TIMEOUT = 5000;\n\nexport const Toast = ({\n  message,\n  onClose,\n  closable = false,\n  // To prevent autoclose, pass duration as Infinity\n  duration = DEFAULT_TOAST_TIMEOUT,\n  style,\n}: {\n  message: string;\n  onClose: () => void;\n  closable?: boolean;\n  duration?: number;\n  style?: CSSProperties;\n}) => {\n  const timerRef = useRef<number>(0);\n  const shouldAutoClose = duration !== Infinity;\n  const scheduleTimeout = useCallback(() => {\n    if (!shouldAutoClose) {\n      return;\n    }\n    timerRef.current = window.setTimeout(() => onClose(), duration);\n  }, [onClose, duration, shouldAutoClose]);\n\n  useEffect(() => {\n    if (!shouldAutoClose) {\n      return;\n    }\n    scheduleTimeout();\n    return () => clearTimeout(timerRef.current);\n  }, [scheduleTimeout, message, duration, shouldAutoClose]);\n\n  const onMouseEnter = shouldAutoClose\n    ? () => clearTimeout(timerRef?.current)\n    : undefined;\n  const onMouseLeave = shouldAutoClose ? scheduleTimeout : undefined;\n  return (\n    <div\n      className=\"Toast\"\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      style={style}\n    >\n      <p className=\"Toast__message\">{message}</p>\n      {closable && (\n        <ToolButton\n          icon={CloseIcon}\n          aria-label=\"close\"\n          type=\"icon\"\n          onClick={onClose}\n          className=\"close\"\n        />\n      )}\n    </div>\n  );\n};\n", "import { eyeIcon } from \"../components/icons\";\nimport { CODES, KEYS } from \"../keys\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { register } from \"./register\";\n\nexport const actionToggleViewMode = register({\n  name: \"viewMode\",\n  label: \"labels.viewMode\",\n  paletteName: \"Toggle view mode\",\n  icon: eyeIcon,\n  viewMode: true,\n  trackEvent: {\n    category: \"canvas\",\n    predicate: (appState) => !appState.viewModeEnabled,\n  },\n  perform(elements, appState) {\n    return {\n      appState: {\n        ...appState,\n        viewModeEnabled: !this.checked!(appState),\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  checked: (appState) => appState.viewModeEnabled,\n  predicate: (elements, appState, appProps) => {\n    return typeof appProps.viewModeEnabled === \"undefined\";\n  },\n  keyTest: (event) =>\n    !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.R,\n});\n", "import { getCommonBounds, getNonDeletedElements } from \"../element\";\nimport type { ExcalidrawElement } from \"../element/types\";\nimport { addElementsToFrame, removeAllElementsFromFrame } from \"../frame\";\nimport { getFrameChildren } from \"../frame\";\nimport { KEYS } from \"../keys\";\nimport type { AppClassProperties, AppState, UIAppState } from \"../types\";\nimport { updateActiveTool } from \"../utils\";\nimport { setCursorForShape } from \"../cursor\";\nimport { register } from \"./register\";\nimport { isFrameLikeElement } from \"../element/typeChecks\";\nimport { frameToolIcon } from \"../components/icons\";\nimport { CaptureUpdateAction } from \"../store\";\nimport { getSelectedElements } from \"../scene\";\nimport { newFrameElement } from \"../element/newElement\";\nimport { getElementsInGroup } from \"../groups\";\nimport { mutateElement } from \"../element/mutateElement\";\n\nconst isSingleFrameSelected = (\n  appState: UIAppState,\n  app: AppClassProperties,\n) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n\n  return (\n    selectedElements.length === 1 && isFrameLikeElement(selectedElements[0])\n  );\n};\n\nexport const actionSelectAllElementsInFrame = register({\n  name: \"selectAllElementsInFrame\",\n  label: \"labels.selectAllElementsInFrame\",\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState, _, app) => {\n    const selectedElement =\n      app.scene.getSelectedElements(appState).at(0) || null;\n\n    if (isFrameLikeElement(selectedElement)) {\n      const elementsInFrame = getFrameChildren(\n        getNonDeletedElements(elements),\n        selectedElement.id,\n      ).filter((element) => !(element.type === \"text\" && element.containerId));\n\n      return {\n        elements,\n        appState: {\n          ...appState,\n          selectedElementIds: elementsInFrame.reduce((acc, element) => {\n            acc[element.id] = true;\n            return acc;\n          }, {} as Record<ExcalidrawElement[\"id\"], true>),\n        },\n        captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n      };\n    }\n\n    return {\n      elements,\n      appState,\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  predicate: (elements, appState, _, app) =>\n    isSingleFrameSelected(appState, app),\n});\n\nexport const actionRemoveAllElementsFromFrame = register({\n  name: \"removeAllElementsFromFrame\",\n  label: \"labels.removeAllElementsFromFrame\",\n  trackEvent: { category: \"history\" },\n  perform: (elements, appState, _, app) => {\n    const selectedElement =\n      app.scene.getSelectedElements(appState).at(0) || null;\n\n    if (isFrameLikeElement(selectedElement)) {\n      return {\n        elements: removeAllElementsFromFrame(elements, selectedElement),\n        appState: {\n          ...appState,\n          selectedElementIds: {\n            [selectedElement.id]: true,\n          },\n        },\n        captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n      };\n    }\n\n    return {\n      elements,\n      appState,\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  predicate: (elements, appState, _, app) =>\n    isSingleFrameSelected(appState, app),\n});\n\nexport const actionupdateFrameRendering = register({\n  name: \"updateFrameRendering\",\n  label: \"labels.updateFrameRendering\",\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState) => {\n    return {\n      elements,\n      appState: {\n        ...appState,\n        frameRendering: {\n          ...appState.frameRendering,\n          enabled: !appState.frameRendering.enabled,\n        },\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  checked: (appState: AppState) => appState.frameRendering.enabled,\n});\n\nexport const actionSetFrameAsActiveTool = register({\n  name: \"setFrameAsActiveTool\",\n  label: \"toolBar.frame\",\n  trackEvent: { category: \"toolbar\" },\n  icon: frameToolIcon,\n  viewMode: false,\n  perform: (elements, appState, _, app) => {\n    const nextActiveTool = updateActiveTool(appState, {\n      type: \"frame\",\n    });\n\n    setCursorForShape(app.interactiveCanvas, {\n      ...appState,\n      activeTool: nextActiveTool,\n    });\n\n    return {\n      elements,\n      appState: {\n        ...appState,\n        activeTool: updateActiveTool(appState, {\n          type: \"frame\",\n        }),\n      },\n      captureUpdate: CaptureUpdateAction.EVENTUALLY,\n    };\n  },\n  keyTest: (event) =>\n    !event[KEYS.CTRL_OR_CMD] &&\n    !event.shiftKey &&\n    !event.altKey &&\n    event.key.toLocaleLowerCase() === KEYS.F,\n});\n\nexport const actionWrapSelectionInFrame = register({\n  name: \"wrapSelectionInFrame\",\n  label: \"labels.wrapSelectionInFrame\",\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, _, app) => {\n    const selectedElements = getSelectedElements(elements, appState);\n\n    return (\n      selectedElements.length > 0 &&\n      !selectedElements.some((element) => isFrameLikeElement(element))\n    );\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = getSelectedElements(elements, appState);\n\n    const [x1, y1, x2, y2] = getCommonBounds(\n      selectedElements,\n      app.scene.getNonDeletedElementsMap(),\n    );\n    const PADDING = 16;\n    const frame = newFrameElement({\n      x: x1 - PADDING,\n      y: y1 - PADDING,\n      width: x2 - x1 + PADDING * 2,\n      height: y2 - y1 + PADDING * 2,\n    });\n\n    // for a selected partial group, we want to remove it from the remainder of the group\n    if (appState.editingGroupId) {\n      const elementsInGroup = getElementsInGroup(\n        selectedElements,\n        appState.editingGroupId,\n      );\n\n      for (const elementInGroup of elementsInGroup) {\n        const index = elementInGroup.groupIds.indexOf(appState.editingGroupId);\n\n        mutateElement(\n          elementInGroup,\n          {\n            groupIds: elementInGroup.groupIds.slice(0, index),\n          },\n          false,\n        );\n      }\n    }\n\n    const nextElements = addElementsToFrame(\n      [...app.scene.getElementsIncludingDeleted(), frame],\n      selectedElements,\n      frame,\n      appState,\n    );\n\n    return {\n      elements: nextElements,\n      appState: {\n        selectedElementIds: { [frame.id]: true },\n      },\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n});\n", "import Trans from \"./Trans\";\n\nconst BraveMeasureTextError = () => {\n  return (\n    <div data-testid=\"brave-measure-text-error\">\n      <p>\n        <Trans\n          i18nKey=\"errors.brave_measure_text_error.line1\"\n          bold={(el) => <span style={{ fontWeight: 600 }}>{el}</span>}\n        />\n      </p>\n      <p>\n        <Trans\n          i18nKey=\"errors.brave_measure_text_error.line2\"\n          bold={(el) => <span style={{ fontWeight: 600 }}>{el}</span>}\n        />\n      </p>\n      <p>\n        <Trans\n          i18nKey=\"errors.brave_measure_text_error.line3\"\n          link={(el) => (\n            <a href=\"http://docs.excalidraw.com/docs/@excalidraw/excalidraw/faq#turning-off-aggresive-block-fingerprinting-in-brave-browser\">\n              {el}\n            </a>\n          )}\n        />\n      </p>\n      <p>\n        <Trans\n          i18nKey=\"errors.brave_measure_text_error.line4\"\n          issueLink={(el) => (\n            <a href=\"https://github.com/excalidraw/excalidraw/issues/new\">\n              {el}\n            </a>\n          )}\n          discordLink={(el) => <a href=\"https://discord.gg/UexuTaE\">{el}.</a>}\n        />\n      </p>\n    </div>\n  );\n};\n\nexport default BraveMeasureTextError;\n", "import {\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_SIZE,\n  TEXT_ALIGN,\n  VERTICAL_ALIGN,\n} from \"../constants\";\nimport {\n  getCommonBounds,\n  newElement,\n  newLinearElement,\n  redrawTextBoundingBox,\n} from \"../element\";\nimport { bindLinearElement } from \"../element/binding\";\nimport type { ElementConstructorOpts } from \"../element/newElement\";\nimport {\n  newArrowElement,\n  newFrameElement,\n  newImageElement,\n  newMagicFrameElement,\n  newTextElement,\n} from \"../element/newElement\";\nimport type {\n  ElementsMap,\n  ExcalidrawArrowElement,\n  ExcalidrawBindableElement,\n  ExcalidrawElement,\n  ExcalidrawFrameElement,\n  ExcalidrawFreeDrawElement,\n  ExcalidrawGenericElement,\n  ExcalidrawIframeLikeElement,\n  ExcalidrawImageElement,\n  ExcalidrawLinearElement,\n  ExcalidrawMagicFrameElement,\n  ExcalidrawSelectionElement,\n  ExcalidrawTextElement,\n  FileId,\n  FontFamilyValues,\n  NonDeletedSceneElementsMap,\n  TextAlign,\n  VerticalAlign,\n} from \"../element/types\";\nimport type { MarkOptional } from \"../utility-types\";\nimport {\n  arrayToMap,\n  assertNever,\n  cloneJSON,\n  getFontString,\n  isDevEnv,\n  toBrandedType,\n} from \"../utils\";\nimport { getSizeFromPoints } from \"../points\";\nimport { randomId } from \"../random\";\nimport { syncInvalidIndices } from \"../fractionalIndex\";\nimport { getLineHeight } from \"../fonts\";\nimport { isArrowElement } from \"../element/typeChecks\";\nimport { pointFrom, type LocalPoint } from \"@excalidraw/math\";\nimport { measureText, normalizeText } from \"../element/textMeasurements\";\n\nexport type ValidLinearElement = {\n  type: \"arrow\" | \"line\";\n  x: number;\n  y: number;\n  label?: {\n    text: string;\n    fontSize?: number;\n    fontFamily?: FontFamilyValues;\n    textAlign?: TextAlign;\n    verticalAlign?: VerticalAlign;\n  } & MarkOptional<ElementConstructorOpts, \"x\" | \"y\">;\n  end?:\n    | (\n        | (\n            | {\n                type: Exclude<\n                  ExcalidrawBindableElement[\"type\"],\n                  | \"image\"\n                  | \"text\"\n                  | \"frame\"\n                  | \"magicframe\"\n                  | \"embeddable\"\n                  | \"iframe\"\n                >;\n                id?: ExcalidrawGenericElement[\"id\"];\n              }\n            | {\n                id: ExcalidrawGenericElement[\"id\"];\n                type?: Exclude<\n                  ExcalidrawBindableElement[\"type\"],\n                  | \"image\"\n                  | \"text\"\n                  | \"frame\"\n                  | \"magicframe\"\n                  | \"embeddable\"\n                  | \"iframe\"\n                >;\n              }\n          )\n        | ((\n            | {\n                type: \"text\";\n                text: string;\n              }\n            | {\n                type?: \"text\";\n                id: ExcalidrawTextElement[\"id\"];\n                text: string;\n              }\n          ) &\n            Partial<ExcalidrawTextElement>)\n      ) &\n        MarkOptional<ElementConstructorOpts, \"x\" | \"y\">;\n  start?:\n    | (\n        | (\n            | {\n                type: Exclude<\n                  ExcalidrawBindableElement[\"type\"],\n                  | \"image\"\n                  | \"text\"\n                  | \"frame\"\n                  | \"magicframe\"\n                  | \"embeddable\"\n                  | \"iframe\"\n                >;\n                id?: ExcalidrawGenericElement[\"id\"];\n              }\n            | {\n                id: ExcalidrawGenericElement[\"id\"];\n                type?: Exclude<\n                  ExcalidrawBindableElement[\"type\"],\n                  | \"image\"\n                  | \"text\"\n                  | \"frame\"\n                  | \"magicframe\"\n                  | \"embeddable\"\n                  | \"iframe\"\n                >;\n              }\n          )\n        | ((\n            | {\n                type: \"text\";\n                text: string;\n              }\n            | {\n                type?: \"text\";\n                id: ExcalidrawTextElement[\"id\"];\n                text: string;\n              }\n          ) &\n            Partial<ExcalidrawTextElement>)\n      ) &\n        MarkOptional<ElementConstructorOpts, \"x\" | \"y\">;\n} & Partial<ExcalidrawLinearElement>;\n\nexport type ValidContainer =\n  | {\n      type: Exclude<ExcalidrawGenericElement[\"type\"], \"selection\">;\n      id?: ExcalidrawGenericElement[\"id\"];\n      label?: {\n        text: string;\n        fontSize?: number;\n        fontFamily?: FontFamilyValues;\n        textAlign?: TextAlign;\n        verticalAlign?: VerticalAlign;\n      } & MarkOptional<ElementConstructorOpts, \"x\" | \"y\">;\n    } & ElementConstructorOpts;\n\nexport type ExcalidrawElementSkeleton =\n  | Extract<\n      Exclude<ExcalidrawElement, ExcalidrawSelectionElement>,\n      ExcalidrawIframeLikeElement | ExcalidrawFreeDrawElement\n    >\n  | ({\n      type: Extract<ExcalidrawLinearElement[\"type\"], \"line\">;\n      x: number;\n      y: number;\n    } & Partial<ExcalidrawLinearElement>)\n  | ValidContainer\n  | ValidLinearElement\n  | ({\n      type: \"text\";\n      text: string;\n      x: number;\n      y: number;\n      id?: ExcalidrawTextElement[\"id\"];\n    } & Partial<ExcalidrawTextElement>)\n  | ({\n      type: Extract<ExcalidrawImageElement[\"type\"], \"image\">;\n      x: number;\n      y: number;\n      fileId: FileId;\n    } & Partial<ExcalidrawImageElement>)\n  | ({\n      type: \"frame\";\n      children: readonly ExcalidrawElement[\"id\"][];\n      name?: string;\n    } & Partial<ExcalidrawFrameElement>)\n  | ({\n      type: \"magicframe\";\n      children: readonly ExcalidrawElement[\"id\"][];\n      name?: string;\n    } & Partial<ExcalidrawMagicFrameElement>);\n\nconst DEFAULT_LINEAR_ELEMENT_PROPS = {\n  width: 100,\n  height: 0,\n};\n\nconst DEFAULT_DIMENSION = 100;\n\nconst bindTextToContainer = (\n  container: ExcalidrawElement,\n  textProps: { text: string } & MarkOptional<ElementConstructorOpts, \"x\" | \"y\">,\n  elementsMap: ElementsMap,\n) => {\n  const textElement: ExcalidrawTextElement = newTextElement({\n    x: 0,\n    y: 0,\n    textAlign: TEXT_ALIGN.CENTER,\n    verticalAlign: VERTICAL_ALIGN.MIDDLE,\n    ...textProps,\n    containerId: container.id,\n    strokeColor: textProps.strokeColor || container.strokeColor,\n  });\n\n  Object.assign(container, {\n    boundElements: (container.boundElements || []).concat({\n      type: \"text\",\n      id: textElement.id,\n    }),\n  });\n\n  redrawTextBoundingBox(textElement, container, elementsMap);\n  return [container, textElement] as const;\n};\n\nconst bindLinearElementToElement = (\n  linearElement: ExcalidrawArrowElement,\n  start: ValidLinearElement[\"start\"],\n  end: ValidLinearElement[\"end\"],\n  elementStore: ElementStore,\n  elementsMap: NonDeletedSceneElementsMap,\n): {\n  linearElement: ExcalidrawLinearElement;\n  startBoundElement?: ExcalidrawElement;\n  endBoundElement?: ExcalidrawElement;\n} => {\n  let startBoundElement;\n  let endBoundElement;\n\n  Object.assign(linearElement, {\n    startBinding: linearElement?.startBinding || null,\n    endBinding: linearElement.endBinding || null,\n  });\n\n  if (start) {\n    const width = start?.width ?? DEFAULT_DIMENSION;\n    const height = start?.height ?? DEFAULT_DIMENSION;\n\n    let existingElement;\n    if (start.id) {\n      existingElement = elementStore.getElement(start.id);\n      if (!existingElement) {\n        console.error(`No element for start binding with id ${start.id} found`);\n      }\n    }\n\n    const startX = start.x || linearElement.x - width;\n    const startY = start.y || linearElement.y - height / 2;\n    const startType = existingElement ? existingElement.type : start.type;\n\n    if (startType) {\n      if (startType === \"text\") {\n        let text = \"\";\n        if (existingElement && existingElement.type === \"text\") {\n          text = existingElement.text;\n        } else if (start.type === \"text\") {\n          text = start.text;\n        }\n        if (!text) {\n          console.error(\n            `No text found for start binding text element for ${linearElement.id}`,\n          );\n        }\n        startBoundElement = newTextElement({\n          x: startX,\n          y: startY,\n          type: \"text\",\n          ...existingElement,\n          ...start,\n          text,\n        });\n        // to position the text correctly when coordinates not provided\n        Object.assign(startBoundElement, {\n          x: start.x || linearElement.x - startBoundElement.width,\n          y: start.y || linearElement.y - startBoundElement.height / 2,\n        });\n      } else {\n        switch (startType) {\n          case \"rectangle\":\n          case \"ellipse\":\n          case \"diamond\": {\n            startBoundElement = newElement({\n              x: startX,\n              y: startY,\n              width,\n              height,\n              ...existingElement,\n              ...start,\n              type: startType,\n            });\n            break;\n          }\n          default: {\n            assertNever(\n              linearElement as never,\n              `Unhandled element start type \"${start.type}\"`,\n              true,\n            );\n          }\n        }\n      }\n\n      bindLinearElement(\n        linearElement,\n        startBoundElement as ExcalidrawBindableElement,\n        \"start\",\n        elementsMap,\n      );\n    }\n  }\n  if (end) {\n    const height = end?.height ?? DEFAULT_DIMENSION;\n    const width = end?.width ?? DEFAULT_DIMENSION;\n\n    let existingElement;\n    if (end.id) {\n      existingElement = elementStore.getElement(end.id);\n      if (!existingElement) {\n        console.error(`No element for end binding with id ${end.id} found`);\n      }\n    }\n    const endX = end.x || linearElement.x + linearElement.width;\n    const endY = end.y || linearElement.y - height / 2;\n    const endType = existingElement ? existingElement.type : end.type;\n\n    if (endType) {\n      if (endType === \"text\") {\n        let text = \"\";\n        if (existingElement && existingElement.type === \"text\") {\n          text = existingElement.text;\n        } else if (end.type === \"text\") {\n          text = end.text;\n        }\n\n        if (!text) {\n          console.error(\n            `No text found for end binding text element for ${linearElement.id}`,\n          );\n        }\n        endBoundElement = newTextElement({\n          x: endX,\n          y: endY,\n          type: \"text\",\n          ...existingElement,\n          ...end,\n          text,\n        });\n        // to position the text correctly when coordinates not provided\n        Object.assign(endBoundElement, {\n          y: end.y || linearElement.y - endBoundElement.height / 2,\n        });\n      } else {\n        switch (endType) {\n          case \"rectangle\":\n          case \"ellipse\":\n          case \"diamond\": {\n            endBoundElement = newElement({\n              x: endX,\n              y: endY,\n              width,\n              height,\n              ...existingElement,\n              ...end,\n              type: endType,\n            });\n            break;\n          }\n          default: {\n            assertNever(\n              linearElement as never,\n              `Unhandled element end type \"${endType}\"`,\n              true,\n            );\n          }\n        }\n      }\n\n      bindLinearElement(\n        linearElement,\n        endBoundElement as ExcalidrawBindableElement,\n        \"end\",\n        elementsMap,\n      );\n    }\n  }\n\n  // Safe check to early return for single point\n  if (linearElement.points.length < 2) {\n    return {\n      linearElement,\n      startBoundElement,\n      endBoundElement,\n    };\n  }\n\n  // Update start/end points by 0.5 so bindings don't overlap with start/end bound element coordinates.\n  const endPointIndex = linearElement.points.length - 1;\n  const delta = 0.5;\n\n  const newPoints = cloneJSON<readonly LocalPoint[]>(linearElement.points);\n\n  // left to right so shift the arrow towards right\n  if (\n    linearElement.points[endPointIndex][0] >\n    linearElement.points[endPointIndex - 1][0]\n  ) {\n    newPoints[0][0] = delta;\n    newPoints[endPointIndex][0] -= delta;\n  }\n\n  // right to left so shift the arrow towards left\n  if (\n    linearElement.points[endPointIndex][0] <\n    linearElement.points[endPointIndex - 1][0]\n  ) {\n    newPoints[0][0] = -delta;\n    newPoints[endPointIndex][0] += delta;\n  }\n  // top to bottom so shift the arrow towards top\n  if (\n    linearElement.points[endPointIndex][1] >\n    linearElement.points[endPointIndex - 1][1]\n  ) {\n    newPoints[0][1] = delta;\n    newPoints[endPointIndex][1] -= delta;\n  }\n\n  // bottom to top so shift the arrow towards bottom\n  if (\n    linearElement.points[endPointIndex][1] <\n    linearElement.points[endPointIndex - 1][1]\n  ) {\n    newPoints[0][1] = -delta;\n    newPoints[endPointIndex][1] += delta;\n  }\n\n  Object.assign(linearElement, { points: newPoints });\n\n  return {\n    linearElement,\n    startBoundElement,\n    endBoundElement,\n  };\n};\n\nclass ElementStore {\n  excalidrawElements = new Map<string, ExcalidrawElement>();\n\n  add = (ele?: ExcalidrawElement) => {\n    if (!ele) {\n      return;\n    }\n\n    this.excalidrawElements.set(ele.id, ele);\n  };\n\n  getElements = () => {\n    return syncInvalidIndices(Array.from(this.excalidrawElements.values()));\n  };\n\n  getElementsMap = () => {\n    return toBrandedType<NonDeletedSceneElementsMap>(\n      arrayToMap(this.getElements()),\n    );\n  };\n\n  getElement = (id: string) => {\n    return this.excalidrawElements.get(id);\n  };\n}\n\nexport const convertToExcalidrawElements = (\n  elementsSkeleton: ExcalidrawElementSkeleton[] | null,\n  opts?: { regenerateIds: boolean },\n) => {\n  if (!elementsSkeleton) {\n    return [];\n  }\n  const elements = cloneJSON(elementsSkeleton);\n  const elementStore = new ElementStore();\n  const elementsWithIds = new Map<string, ExcalidrawElementSkeleton>();\n  const oldToNewElementIdMap = new Map<string, string>();\n\n  // Create individual elements\n  for (const element of elements) {\n    let excalidrawElement: ExcalidrawElement;\n    const originalId = element.id;\n    if (opts?.regenerateIds !== false) {\n      Object.assign(element, { id: randomId() });\n    }\n\n    switch (element.type) {\n      case \"rectangle\":\n      case \"ellipse\":\n      case \"diamond\": {\n        const width =\n          element?.label?.text && element.width === undefined\n            ? 0\n            : element?.width || DEFAULT_DIMENSION;\n        const height =\n          element?.label?.text && element.height === undefined\n            ? 0\n            : element?.height || DEFAULT_DIMENSION;\n        excalidrawElement = newElement({\n          ...element,\n          width,\n          height,\n        });\n\n        break;\n      }\n      case \"line\": {\n        const width = element.width || DEFAULT_LINEAR_ELEMENT_PROPS.width;\n        const height = element.height || DEFAULT_LINEAR_ELEMENT_PROPS.height;\n        excalidrawElement = newLinearElement({\n          width,\n          height,\n          points: [pointFrom(0, 0), pointFrom(width, height)],\n          ...element,\n        });\n\n        break;\n      }\n      case \"arrow\": {\n        const width = element.width || DEFAULT_LINEAR_ELEMENT_PROPS.width;\n        const height = element.height || DEFAULT_LINEAR_ELEMENT_PROPS.height;\n        excalidrawElement = newArrowElement({\n          width,\n          height,\n          endArrowhead: \"arrow\",\n          points: [pointFrom(0, 0), pointFrom(width, height)],\n          ...element,\n          type: \"arrow\",\n        });\n\n        Object.assign(\n          excalidrawElement,\n          getSizeFromPoints(excalidrawElement.points),\n        );\n        break;\n      }\n      case \"text\": {\n        const fontFamily = element?.fontFamily || DEFAULT_FONT_FAMILY;\n        const fontSize = element?.fontSize || DEFAULT_FONT_SIZE;\n        const lineHeight = element?.lineHeight || getLineHeight(fontFamily);\n        const text = element.text ?? \"\";\n        const normalizedText = normalizeText(text);\n        const metrics = measureText(\n          normalizedText,\n          getFontString({ fontFamily, fontSize }),\n          lineHeight,\n        );\n\n        excalidrawElement = newTextElement({\n          width: metrics.width,\n          height: metrics.height,\n          fontFamily,\n          fontSize,\n          ...element,\n        });\n        break;\n      }\n      case \"image\": {\n        excalidrawElement = newImageElement({\n          width: element?.width || DEFAULT_DIMENSION,\n          height: element?.height || DEFAULT_DIMENSION,\n          ...element,\n        });\n\n        break;\n      }\n      case \"frame\": {\n        excalidrawElement = newFrameElement({\n          x: 0,\n          y: 0,\n          ...element,\n        });\n        break;\n      }\n      case \"magicframe\": {\n        excalidrawElement = newMagicFrameElement({\n          x: 0,\n          y: 0,\n          ...element,\n        });\n        break;\n      }\n      case \"freedraw\":\n      case \"iframe\":\n      case \"embeddable\": {\n        excalidrawElement = element;\n        break;\n      }\n\n      default: {\n        excalidrawElement = element;\n        assertNever(\n          element,\n          `Unhandled element type \"${(element as any).type}\"`,\n          true,\n        );\n      }\n    }\n    const existingElement = elementStore.getElement(excalidrawElement.id);\n    if (existingElement) {\n      console.error(`Duplicate id found for ${excalidrawElement.id}`);\n    } else {\n      elementStore.add(excalidrawElement);\n      elementsWithIds.set(excalidrawElement.id, element);\n      if (originalId) {\n        oldToNewElementIdMap.set(originalId, excalidrawElement.id);\n      }\n    }\n  }\n\n  const elementsMap = elementStore.getElementsMap();\n  // Add labels and arrow bindings\n  for (const [id, element] of elementsWithIds) {\n    const excalidrawElement = elementStore.getElement(id)!;\n\n    switch (element.type) {\n      case \"rectangle\":\n      case \"ellipse\":\n      case \"diamond\":\n      case \"arrow\": {\n        if (element.label?.text) {\n          let [container, text] = bindTextToContainer(\n            excalidrawElement,\n            element?.label,\n            elementsMap,\n          );\n          elementStore.add(container);\n          elementStore.add(text);\n\n          if (isArrowElement(container)) {\n            const originalStart =\n              element.type === \"arrow\" ? element?.start : undefined;\n            const originalEnd =\n              element.type === \"arrow\" ? element?.end : undefined;\n            if (originalStart && originalStart.id) {\n              const newStartId = oldToNewElementIdMap.get(originalStart.id);\n              if (newStartId) {\n                Object.assign(originalStart, { id: newStartId });\n              }\n            }\n            if (originalEnd && originalEnd.id) {\n              const newEndId = oldToNewElementIdMap.get(originalEnd.id);\n              if (newEndId) {\n                Object.assign(originalEnd, { id: newEndId });\n              }\n            }\n            const { linearElement, startBoundElement, endBoundElement } =\n              bindLinearElementToElement(\n                container,\n                originalStart,\n                originalEnd,\n                elementStore,\n                elementsMap,\n              );\n            container = linearElement;\n            elementStore.add(linearElement);\n            elementStore.add(startBoundElement);\n            elementStore.add(endBoundElement);\n          }\n        } else {\n          switch (element.type) {\n            case \"arrow\": {\n              const { start, end } = element;\n              if (start && start.id) {\n                const newStartId = oldToNewElementIdMap.get(start.id);\n                Object.assign(start, { id: newStartId });\n              }\n              if (end && end.id) {\n                const newEndId = oldToNewElementIdMap.get(end.id);\n                Object.assign(end, { id: newEndId });\n              }\n              const { linearElement, startBoundElement, endBoundElement } =\n                bindLinearElementToElement(\n                  excalidrawElement as ExcalidrawArrowElement,\n                  start,\n                  end,\n                  elementStore,\n                  elementsMap,\n                );\n\n              elementStore.add(linearElement);\n              elementStore.add(startBoundElement);\n              elementStore.add(endBoundElement);\n              break;\n            }\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  // Once all the excalidraw elements are created, we can add frames since we\n  // need to calculate coordinates and dimensions of frame which is possible after all\n  // frame children are processed.\n  for (const [id, element] of elementsWithIds) {\n    if (element.type !== \"frame\" && element.type !== \"magicframe\") {\n      continue;\n    }\n    const frame = elementStore.getElement(id);\n\n    if (!frame) {\n      throw new Error(`Excalidraw element with id ${id} doesn't exist`);\n    }\n    const childrenElements: ExcalidrawElement[] = [];\n\n    element.children.forEach((id) => {\n      const newElementId = oldToNewElementIdMap.get(id);\n      if (!newElementId) {\n        throw new Error(`Element with ${id} wasn't mapped correctly`);\n      }\n\n      const elementInFrame = elementStore.getElement(newElementId);\n      if (!elementInFrame) {\n        throw new Error(`Frame element with id ${newElementId} doesn't exist`);\n      }\n      Object.assign(elementInFrame, { frameId: frame.id });\n\n      elementInFrame?.boundElements?.forEach((boundElement) => {\n        const ele = elementStore.getElement(boundElement.id);\n        if (!ele) {\n          throw new Error(\n            `Bound element with id ${boundElement.id} doesn't exist`,\n          );\n        }\n        Object.assign(ele, { frameId: frame.id });\n        childrenElements.push(ele);\n      });\n\n      childrenElements.push(elementInFrame);\n    });\n\n    let [minX, minY, maxX, maxY] = getCommonBounds(childrenElements);\n\n    const PADDING = 10;\n    minX = minX - PADDING;\n    minY = minY - PADDING;\n    maxX = maxX + PADDING;\n    maxY = maxY + PADDING;\n\n    const frameX = frame?.x || minX;\n    const frameY = frame?.y || minY;\n    const frameWidth = frame?.width || maxX - minX;\n    const frameHeight = frame?.height || maxY - minY;\n\n    Object.assign(frame, {\n      x: frameX,\n      y: frameY,\n      width: frameWidth,\n      height: frameHeight,\n    });\n    if (\n      isDevEnv() &&\n      element.children.length &&\n      (frame?.x || frame?.y || frame?.width || frame?.height)\n    ) {\n      console.info(\n        \"User provided frame attributes are being considered, if you find this inaccurate, please remove any of the attributes - x, y, width and height so frame coordinates and dimensions are calculated automatically\",\n      );\n    }\n  }\n\n  return elementStore.getElements();\n};\n", "import React, { useEffect, useRef } from \"react\";\nimport { isShallowEqual, sceneCoordsToViewportCoords } from \"../../utils\";\nimport { CURSOR_TYPE } from \"../../constants\";\nimport { t } from \"../../i18n\";\nimport type { DOMAttributes } from \"react\";\nimport type { AppState, Device, InteractiveCanvasAppState } from \"../../types\";\nimport type {\n  InteractiveCanvasRenderConfig,\n  RenderableElementsMap,\n  RenderInteractiveSceneCallback,\n} from \"../../scene/types\";\nimport type {\n  NonDeletedExcalidrawElement,\n  NonDeletedSceneElementsMap,\n} from \"../../element/types\";\nimport { isRenderThrottlingEnabled } from \"../../reactUtils\";\nimport { renderInteractiveScene } from \"../../renderer/interactiveScene\";\n\ntype InteractiveCanvasProps = {\n  containerRef: React.RefObject<HTMLDivElement | null>;\n  canvas: HTMLCanvasElement | null;\n  elementsMap: RenderableElementsMap;\n  visibleElements: readonly NonDeletedExcalidrawElement[];\n  selectedElements: readonly NonDeletedExcalidrawElement[];\n  allElementsMap: NonDeletedSceneElementsMap;\n  sceneNonce: number | undefined;\n  selectionNonce: number | undefined;\n  scale: number;\n  appState: InteractiveCanvasAppState;\n  device: Device;\n  renderInteractiveSceneCallback: (\n    data: RenderInteractiveSceneCallback,\n  ) => void;\n  handleCanvasRef: (canvas: HTMLCanvasElement | null) => void;\n  onContextMenu: Exclude<\n    DOMAttributes<HTMLCanvasElement | HTMLDivElement>[\"onContextMenu\"],\n    undefined\n  >;\n  onPointerMove: Exclude<\n    DOMAttributes<HTMLCanvasElement>[\"onPointerMove\"],\n    undefined\n  >;\n  onPointerUp: Exclude<\n    DOMAttributes<HTMLCanvasElement>[\"onPointerUp\"],\n    undefined\n  >;\n  onPointerCancel: Exclude<\n    DOMAttributes<HTMLCanvasElement>[\"onPointerCancel\"],\n    undefined\n  >;\n  onTouchMove: Exclude<\n    DOMAttributes<HTMLCanvasElement>[\"onTouchMove\"],\n    undefined\n  >;\n  onPointerDown: Exclude<\n    DOMAttributes<HTMLCanvasElement>[\"onPointerDown\"],\n    undefined\n  >;\n  onDoubleClick: Exclude<\n    DOMAttributes<HTMLCanvasElement>[\"onDoubleClick\"],\n    undefined\n  >;\n};\n\nconst InteractiveCanvas = (props: InteractiveCanvasProps) => {\n  const isComponentMounted = useRef(false);\n\n  useEffect(() => {\n    if (!isComponentMounted.current) {\n      isComponentMounted.current = true;\n      return;\n    }\n\n    const remotePointerButton: InteractiveCanvasRenderConfig[\"remotePointerButton\"] =\n      new Map();\n    const remotePointerViewportCoords: InteractiveCanvasRenderConfig[\"remotePointerViewportCoords\"] =\n      new Map();\n    const remoteSelectedElementIds: InteractiveCanvasRenderConfig[\"remoteSelectedElementIds\"] =\n      new Map();\n    const remotePointerUsernames: InteractiveCanvasRenderConfig[\"remotePointerUsernames\"] =\n      new Map();\n    const remotePointerUserStates: InteractiveCanvasRenderConfig[\"remotePointerUserStates\"] =\n      new Map();\n\n    props.appState.collaborators.forEach((user, socketId) => {\n      if (user.selectedElementIds) {\n        for (const id of Object.keys(user.selectedElementIds)) {\n          if (!remoteSelectedElementIds.has(id)) {\n            remoteSelectedElementIds.set(id, []);\n          }\n          remoteSelectedElementIds.get(id)!.push(socketId);\n        }\n      }\n      if (!user.pointer || user.pointer.renderCursor === false) {\n        return;\n      }\n      if (user.username) {\n        remotePointerUsernames.set(socketId, user.username);\n      }\n      if (user.userState) {\n        remotePointerUserStates.set(socketId, user.userState);\n      }\n      remotePointerViewportCoords.set(\n        socketId,\n        sceneCoordsToViewportCoords(\n          {\n            sceneX: user.pointer.x,\n            sceneY: user.pointer.y,\n          },\n          props.appState,\n        ),\n      );\n      remotePointerButton.set(socketId, user.button);\n    });\n\n    const selectionColor =\n      (props.containerRef?.current &&\n        getComputedStyle(props.containerRef.current).getPropertyValue(\n          \"--color-selection\",\n        )) ||\n      \"#6965db\";\n\n    renderInteractiveScene(\n      {\n        canvas: props.canvas,\n        elementsMap: props.elementsMap,\n        visibleElements: props.visibleElements,\n        selectedElements: props.selectedElements,\n        allElementsMap: props.allElementsMap,\n        scale: window.devicePixelRatio,\n        appState: props.appState,\n        renderConfig: {\n          remotePointerViewportCoords,\n          remotePointerButton,\n          remoteSelectedElementIds,\n          remotePointerUsernames,\n          remotePointerUserStates,\n          selectionColor,\n          renderScrollbars: false,\n        },\n        device: props.device,\n        callback: props.renderInteractiveSceneCallback,\n      },\n      isRenderThrottlingEnabled(),\n    );\n  });\n\n  return (\n    <canvas\n      className=\"excalidraw__canvas interactive\"\n      style={{\n        width: props.appState.width,\n        height: props.appState.height,\n        cursor: props.appState.viewModeEnabled\n          ? CURSOR_TYPE.GRAB\n          : CURSOR_TYPE.AUTO,\n      }}\n      width={props.appState.width * props.scale}\n      height={props.appState.height * props.scale}\n      ref={props.handleCanvasRef}\n      onContextMenu={props.onContextMenu}\n      onPointerMove={props.onPointerMove}\n      onPointerUp={props.onPointerUp}\n      onPointerCancel={props.onPointerCancel}\n      onTouchMove={props.onTouchMove}\n      onPointerDown={props.onPointerDown}\n      onDoubleClick={\n        props.appState.viewModeEnabled ? undefined : props.onDoubleClick\n      }\n    >\n      {t(\"labels.drawingCanvas\")}\n    </canvas>\n  );\n};\n\nconst getRelevantAppStateProps = (\n  appState: AppState,\n): InteractiveCanvasAppState => ({\n  zoom: appState.zoom,\n  scrollX: appState.scrollX,\n  scrollY: appState.scrollY,\n  width: appState.width,\n  height: appState.height,\n  viewModeEnabled: appState.viewModeEnabled,\n  openDialog: appState.openDialog,\n  editingGroupId: appState.editingGroupId,\n  editingLinearElement: appState.editingLinearElement,\n  selectedElementIds: appState.selectedElementIds,\n  frameToHighlight: appState.frameToHighlight,\n  offsetLeft: appState.offsetLeft,\n  offsetTop: appState.offsetTop,\n  theme: appState.theme,\n  pendingImageElementId: appState.pendingImageElementId,\n  selectionElement: appState.selectionElement,\n  selectedGroupIds: appState.selectedGroupIds,\n  selectedLinearElement: appState.selectedLinearElement,\n  multiElement: appState.multiElement,\n  isBindingEnabled: appState.isBindingEnabled,\n  suggestedBindings: appState.suggestedBindings,\n  isRotating: appState.isRotating,\n  elementsToHighlight: appState.elementsToHighlight,\n  collaborators: appState.collaborators, // Necessary for collab. sessions\n  activeEmbeddable: appState.activeEmbeddable,\n  snapLines: appState.snapLines,\n  zenModeEnabled: appState.zenModeEnabled,\n  editingTextElement: appState.editingTextElement,\n  isCropping: appState.isCropping,\n  croppingElementId: appState.croppingElementId,\n  searchMatches: appState.searchMatches,\n});\n\nconst areEqual = (\n  prevProps: InteractiveCanvasProps,\n  nextProps: InteractiveCanvasProps,\n) => {\n  // This could be further optimised if needed, as we don't have to render interactive canvas on each scene mutation\n  if (\n    prevProps.selectionNonce !== nextProps.selectionNonce ||\n    prevProps.sceneNonce !== nextProps.sceneNonce ||\n    prevProps.scale !== nextProps.scale ||\n    // we need to memoize on elementsMap because they may have renewed\n    // even if sceneNonce didn't change (e.g. we filter elements out based\n    // on appState)\n    prevProps.elementsMap !== nextProps.elementsMap ||\n    prevProps.visibleElements !== nextProps.visibleElements ||\n    prevProps.selectedElements !== nextProps.selectedElements\n  ) {\n    return false;\n  }\n\n  // Comparing the interactive appState for changes in case of some edge cases\n  return isShallowEqual(\n    // asserting AppState because we're being passed the whole AppState\n    // but resolve to only the InteractiveCanvas-relevant props\n    getRelevantAppStateProps(prevProps.appState as AppState),\n    getRelevantAppStateProps(nextProps.appState as AppState),\n  );\n};\n\nexport default React.memo(InteractiveCanvas, areEqual);\n", "/**\n * @param func handler taking at most single parameter (event).\n */\n\nimport { unstable_batchedUpdates } from \"react-dom\";\nimport { version as ReactVersion } from \"react\";\nimport { throttleRAF } from \"./utils\";\n\nexport const withBatchedUpdates = <\n  TFunction extends ((event: any) => void) | (() => void),\n>(\n  func: Parameters<TFunction>[\"length\"] extends 0 | 1 ? TFunction : never,\n) =>\n  ((event) => {\n    unstable_batchedUpdates(func as TFunction, event);\n  }) as TFunction;\n\n/**\n * barches React state updates and throttles the calls to a single call per\n * animation frame\n */\nexport const withBatchedUpdatesThrottled = <\n  TFunction extends ((event: any) => void) | (() => void),\n>(\n  func: Parameters<TFunction>[\"length\"] extends 0 | 1 ? TFunction : never,\n) => {\n  // @ts-ignore\n  return throttleRAF<Parameters<TFunction>>(((event) => {\n    unstable_batchedUpdates(func, event);\n  }) as TFunction);\n};\n\nexport const isRenderThrottlingEnabled = (() => {\n  // we don't want to throttle in react < 18 because of #5439 and it was\n  // getting more complex to maintain the fix\n  let IS_REACT_18_AND_UP: boolean;\n  try {\n    const version = ReactVersion.split(\".\");\n    IS_REACT_18_AND_UP = Number(version[0]) > 17;\n  } catch {\n    IS_REACT_18_AND_UP = false;\n  }\n\n  let hasWarned = false;\n\n  return () => {\n    if (window.EXCALIDRAW_THROTTLE_RENDER === true) {\n      if (!IS_REACT_18_AND_UP) {\n        if (!hasWarned) {\n          hasWarned = true;\n          console.warn(\n            \"Excalidraw: render throttling is disabled on React versions < 18.\",\n          );\n        }\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n})();\n", "import { pointFrom, type GlobalPoint, type LocalPoint } from \"@excalidraw/math\";\nimport { THEME } from \"../constants\";\nimport type { PointSnapLine, PointerSnapLine } from \"../snapping\";\nimport type { InteractiveCanvasAppState } from \"../types\";\n\nconst SNAP_COLOR_LIGHT = \"#ff6b6b\";\nconst SNAP_COLOR_DARK = \"#ff0000\";\nconst SNAP_WIDTH = 1;\nconst SNAP_CROSS_SIZE = 2;\n\nexport const renderSnaps = (\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n) => {\n  if (!appState.snapLines.length) {\n    return;\n  }\n\n  // in dark mode, we need to adjust the color to account for color inversion.\n  // Don't change if zen mode, because we draw only crosses, we want the\n  // colors to be more visible\n  const snapColor =\n    appState.theme === THEME.LIGHT || appState.zenModeEnabled\n      ? SNAP_COLOR_LIGHT\n      : SNAP_COLOR_DARK;\n  // in zen mode make the cross more visible since we don't draw the lines\n  const snapWidth =\n    (appState.zenModeEnabled ? SNAP_WIDTH * 1.5 : SNAP_WIDTH) /\n    appState.zoom.value;\n\n  context.save();\n  context.translate(appState.scrollX, appState.scrollY);\n\n  for (const snapLine of appState.snapLines) {\n    if (snapLine.type === \"pointer\") {\n      context.lineWidth = snapWidth;\n      context.strokeStyle = snapColor;\n\n      drawPointerSnapLine(snapLine, context, appState);\n    } else if (snapLine.type === \"gap\") {\n      context.lineWidth = snapWidth;\n      context.strokeStyle = snapColor;\n\n      drawGapLine(\n        snapLine.points[0],\n        snapLine.points[1],\n        snapLine.direction,\n        appState,\n        context,\n      );\n    } else if (snapLine.type === \"points\") {\n      context.lineWidth = snapWidth;\n      context.strokeStyle = snapColor;\n      drawPointsSnapLine(snapLine, context, appState);\n    }\n  }\n\n  context.restore();\n};\n\nconst drawPointsSnapLine = (\n  pointSnapLine: PointSnapLine,\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n) => {\n  if (!appState.zenModeEnabled) {\n    const firstPoint = pointSnapLine.points[0];\n    const lastPoint = pointSnapLine.points[pointSnapLine.points.length - 1];\n\n    drawLine(firstPoint, lastPoint, context);\n  }\n\n  for (const point of pointSnapLine.points) {\n    drawCross(point, appState, context);\n  }\n};\n\nconst drawPointerSnapLine = (\n  pointerSnapLine: PointerSnapLine,\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n) => {\n  drawCross(pointerSnapLine.points[0], appState, context);\n  if (!appState.zenModeEnabled) {\n    drawLine(pointerSnapLine.points[0], pointerSnapLine.points[1], context);\n  }\n};\n\nconst drawCross = <Point extends LocalPoint | GlobalPoint>(\n  [x, y]: Point,\n  appState: InteractiveCanvasAppState,\n  context: CanvasRenderingContext2D,\n) => {\n  context.save();\n  const size =\n    (appState.zenModeEnabled ? SNAP_CROSS_SIZE * 1.5 : SNAP_CROSS_SIZE) /\n    appState.zoom.value;\n  context.beginPath();\n\n  context.moveTo(x - size, y - size);\n  context.lineTo(x + size, y + size);\n\n  context.moveTo(x + size, y - size);\n  context.lineTo(x - size, y + size);\n\n  context.stroke();\n  context.restore();\n};\n\nconst drawLine = <Point extends LocalPoint | GlobalPoint>(\n  from: Point,\n  to: Point,\n  context: CanvasRenderingContext2D,\n) => {\n  context.beginPath();\n  context.lineTo(from[0], from[1]);\n  context.lineTo(to[0], to[1]);\n  context.stroke();\n};\n\nconst drawGapLine = <Point extends LocalPoint | GlobalPoint>(\n  from: Point,\n  to: Point,\n  direction: \"horizontal\" | \"vertical\",\n  appState: InteractiveCanvasAppState,\n  context: CanvasRenderingContext2D,\n) => {\n  // a horizontal gap snap line\n  // |\u2013\u2013\u2013\u2013\u2013\u2013\u2013||\u2013\u2013\u2013\u2013\u2013\u2013\u2013|\n  // ^    ^   ^       ^\n  // \\    \\   \\       \\\n  // (1)  (2) (3)     (4)\n\n  const FULL = 8 / appState.zoom.value;\n  const HALF = FULL / 2;\n  const QUARTER = FULL / 4;\n\n  if (direction === \"horizontal\") {\n    const halfPoint = [(from[0] + to[0]) / 2, from[1]];\n    // (1)\n    if (!appState.zenModeEnabled) {\n      drawLine(\n        pointFrom(from[0], from[1] - FULL),\n        pointFrom(from[0], from[1] + FULL),\n        context,\n      );\n    }\n\n    // (3)\n    drawLine(\n      pointFrom(halfPoint[0] - QUARTER, halfPoint[1] - HALF),\n      pointFrom(halfPoint[0] - QUARTER, halfPoint[1] + HALF),\n      context,\n    );\n    drawLine(\n      pointFrom(halfPoint[0] + QUARTER, halfPoint[1] - HALF),\n      pointFrom(halfPoint[0] + QUARTER, halfPoint[1] + HALF),\n      context,\n    );\n\n    if (!appState.zenModeEnabled) {\n      // (4)\n      drawLine(\n        pointFrom(to[0], to[1] - FULL),\n        pointFrom(to[0], to[1] + FULL),\n        context,\n      );\n\n      // (2)\n      drawLine(from, to, context);\n    }\n  } else {\n    const halfPoint = [from[0], (from[1] + to[1]) / 2];\n    // (1)\n    if (!appState.zenModeEnabled) {\n      drawLine(\n        pointFrom(from[0] - FULL, from[1]),\n        pointFrom(from[0] + FULL, from[1]),\n        context,\n      );\n    }\n\n    // (3)\n    drawLine(\n      pointFrom(halfPoint[0] - HALF, halfPoint[1] - QUARTER),\n      pointFrom(halfPoint[0] + HALF, halfPoint[1] - QUARTER),\n      context,\n    );\n    drawLine(\n      pointFrom(halfPoint[0] - HALF, halfPoint[1] + QUARTER),\n      pointFrom(halfPoint[0] + HALF, halfPoint[1] + QUARTER),\n      context,\n    );\n\n    if (!appState.zenModeEnabled) {\n      // (4)\n      drawLine(\n        pointFrom(to[0] - FULL, to[1]),\n        pointFrom(to[0] + FULL, to[1]),\n        context,\n      );\n\n      // (2)\n      drawLine(from, to, context);\n    }\n  }\n};\n", "import {\n  getElementAbsoluteCoords,\n  getTransformHandlesFromCoords,\n  getTransformHandles,\n  getCommonBounds,\n} from \"../element\";\n\nimport { roundRect } from \"../renderer/roundRect\";\n\nimport {\n  getScrollBars,\n  SCROLLBAR_COLOR,\n  SCROLLBAR_WIDTH,\n} from \"../scene/scrollbars\";\n\nimport { renderSelectionElement } from \"../renderer/renderElement\";\nimport { getClientColor, renderRemoteCursors } from \"../clients\";\nimport {\n  isSelectedViaGroup,\n  getSelectedGroupIds,\n  getElementsInGroup,\n  selectGroupsFromGivenElements,\n} from \"../groups\";\nimport type {\n  TransformHandles,\n  TransformHandleType,\n} from \"../element/transformHandles\";\nimport {\n  getOmitSidesForDevice,\n  shouldShowBoundingBox,\n} from \"../element/transformHandles\";\nimport { arrayToMap, invariant, throttleRAF } from \"../utils\";\nimport {\n  DEFAULT_TRANSFORM_HANDLE_SPACING,\n  FRAME_STYLE,\n  THEME,\n} from \"../constants\";\nimport { type InteractiveCanvasAppState } from \"../types\";\n\nimport { renderSnaps } from \"../renderer/renderSnaps\";\n\nimport type {\n  SuggestedBinding,\n  SuggestedPointBinding,\n} from \"../element/binding\";\nimport {\n  BINDING_HIGHLIGHT_OFFSET,\n  BINDING_HIGHLIGHT_THICKNESS,\n  maxBindingGap,\n} from \"../element/binding\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport {\n  bootstrapCanvas,\n  fillCircle,\n  getNormalizedCanvasDimensions,\n} from \"./helpers\";\nimport oc from \"open-color\";\nimport {\n  isElbowArrow,\n  isFrameLikeElement,\n  isImageElement,\n  isLinearElement,\n  isTextElement,\n} from \"../element/typeChecks\";\nimport type {\n  ElementsMap,\n  ExcalidrawBindableElement,\n  ExcalidrawElement,\n  ExcalidrawFrameLikeElement,\n  ExcalidrawImageElement,\n  ExcalidrawLinearElement,\n  ExcalidrawTextElement,\n  GroupId,\n  NonDeleted,\n} from \"../element/types\";\nimport type {\n  InteractiveCanvasRenderConfig,\n  InteractiveSceneRenderConfig,\n  RenderableElementsMap,\n} from \"../scene/types\";\nimport {\n  pointFrom,\n  type GlobalPoint,\n  type LocalPoint,\n  type Radians,\n} from \"@excalidraw/math\";\nimport { getCornerRadius } from \"../shapes\";\n\nconst renderElbowArrowMidPointHighlight = (\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n) => {\n  invariant(appState.selectedLinearElement, \"selectedLinearElement is null\");\n\n  const { segmentMidPointHoveredCoords } = appState.selectedLinearElement;\n\n  invariant(segmentMidPointHoveredCoords, \"midPointCoords is null\");\n\n  context.save();\n  context.translate(appState.scrollX, appState.scrollY);\n\n  highlightPoint(segmentMidPointHoveredCoords, context, appState);\n\n  context.restore();\n};\n\nconst renderLinearElementPointHighlight = (\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n  elementsMap: ElementsMap,\n) => {\n  const { elementId, hoverPointIndex } = appState.selectedLinearElement!;\n  if (\n    appState.editingLinearElement?.selectedPointsIndices?.includes(\n      hoverPointIndex,\n    )\n  ) {\n    return;\n  }\n  const element = LinearElementEditor.getElement(elementId, elementsMap);\n\n  if (!element) {\n    return;\n  }\n  const point = LinearElementEditor.getPointAtIndexGlobalCoordinates(\n    element,\n    hoverPointIndex,\n    elementsMap,\n  );\n  context.save();\n  context.translate(appState.scrollX, appState.scrollY);\n\n  highlightPoint(point, context, appState);\n  context.restore();\n};\n\nconst highlightPoint = <Point extends LocalPoint | GlobalPoint>(\n  point: Point,\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n) => {\n  context.fillStyle = \"rgba(105, 101, 219, 0.4)\";\n\n  fillCircle(\n    context,\n    point[0],\n    point[1],\n    LinearElementEditor.POINT_HANDLE_SIZE / appState.zoom.value,\n    false,\n  );\n};\n\nconst strokeRectWithRotation = (\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  cx: number,\n  cy: number,\n  angle: number,\n  fill: boolean = false,\n  /** should account for zoom */\n  radius: number = 0,\n) => {\n  context.save();\n  context.translate(cx, cy);\n  context.rotate(angle);\n  if (fill) {\n    context.fillRect(x - cx, y - cy, width, height);\n  }\n  if (radius && context.roundRect) {\n    context.beginPath();\n    context.roundRect(x - cx, y - cy, width, height, radius);\n    context.stroke();\n    context.closePath();\n  } else {\n    context.strokeRect(x - cx, y - cy, width, height);\n  }\n  context.restore();\n};\n\nconst strokeDiamondWithRotation = (\n  context: CanvasRenderingContext2D,\n  width: number,\n  height: number,\n  cx: number,\n  cy: number,\n  angle: number,\n) => {\n  context.save();\n  context.translate(cx, cy);\n  context.rotate(angle);\n  context.beginPath();\n  context.moveTo(0, height / 2);\n  context.lineTo(width / 2, 0);\n  context.lineTo(0, -height / 2);\n  context.lineTo(-width / 2, 0);\n  context.closePath();\n  context.stroke();\n  context.restore();\n};\n\nconst renderSingleLinearPoint = <Point extends GlobalPoint | LocalPoint>(\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n  point: Point,\n  radius: number,\n  isSelected: boolean,\n  isPhantomPoint = false,\n) => {\n  context.strokeStyle = \"#5e5ad8\";\n  context.setLineDash([]);\n  context.fillStyle = \"rgba(255, 255, 255, 0.9)\";\n  if (isSelected) {\n    context.fillStyle = \"rgba(134, 131, 226, 0.9)\";\n  } else if (isPhantomPoint) {\n    context.fillStyle = \"rgba(177, 151, 252, 0.7)\";\n  }\n\n  fillCircle(\n    context,\n    point[0],\n    point[1],\n    radius / appState.zoom.value,\n    !isPhantomPoint,\n  );\n};\n\nconst strokeEllipseWithRotation = (\n  context: CanvasRenderingContext2D,\n  width: number,\n  height: number,\n  cx: number,\n  cy: number,\n  angle: number,\n) => {\n  context.beginPath();\n  context.ellipse(cx, cy, width / 2, height / 2, angle, 0, Math.PI * 2);\n  context.stroke();\n};\n\nconst renderBindingHighlightForBindableElement = (\n  context: CanvasRenderingContext2D,\n  element: ExcalidrawBindableElement,\n  elementsMap: ElementsMap,\n  zoom: InteractiveCanvasAppState[\"zoom\"],\n) => {\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element, elementsMap);\n  const width = x2 - x1;\n  const height = y2 - y1;\n\n  context.strokeStyle = \"rgba(0,0,0,.05)\";\n  // When zooming out, make line width greater for visibility\n  const zoomValue = zoom.value < 1 ? zoom.value : 1;\n  context.lineWidth = BINDING_HIGHLIGHT_THICKNESS / zoomValue;\n  // To ensure the binding highlight doesn't overlap the element itself\n  const padding = context.lineWidth / 2 + BINDING_HIGHLIGHT_OFFSET;\n\n  const radius = getCornerRadius(\n    Math.min(element.width, element.height),\n    element,\n  );\n\n  switch (element.type) {\n    case \"rectangle\":\n    case \"text\":\n    case \"image\":\n    case \"iframe\":\n    case \"embeddable\":\n    case \"frame\":\n    case \"magicframe\":\n      strokeRectWithRotation(\n        context,\n        x1 - padding,\n        y1 - padding,\n        width + padding * 2,\n        height + padding * 2,\n        x1 + width / 2,\n        y1 + height / 2,\n        element.angle,\n        undefined,\n        radius,\n      );\n      break;\n    case \"diamond\":\n      const side = Math.hypot(width, height);\n      const wPadding = (padding * side) / height;\n      const hPadding = (padding * side) / width;\n      strokeDiamondWithRotation(\n        context,\n        width + wPadding * 2,\n        height + hPadding * 2,\n        x1 + width / 2,\n        y1 + height / 2,\n        element.angle,\n      );\n      break;\n    case \"ellipse\":\n      strokeEllipseWithRotation(\n        context,\n        width + padding * 2,\n        height + padding * 2,\n        x1 + width / 2,\n        y1 + height / 2,\n        element.angle,\n      );\n      break;\n  }\n};\n\nconst renderBindingHighlightForSuggestedPointBinding = (\n  context: CanvasRenderingContext2D,\n  suggestedBinding: SuggestedPointBinding,\n  elementsMap: ElementsMap,\n  zoom: InteractiveCanvasAppState[\"zoom\"],\n) => {\n  const [element, startOrEnd, bindableElement] = suggestedBinding;\n\n  const threshold = maxBindingGap(\n    bindableElement,\n    bindableElement.width,\n    bindableElement.height,\n    zoom,\n  );\n\n  context.strokeStyle = \"rgba(0,0,0,0)\";\n  context.fillStyle = \"rgba(0,0,0,.05)\";\n\n  const pointIndices =\n    startOrEnd === \"both\" ? [0, -1] : startOrEnd === \"start\" ? [0] : [-1];\n  pointIndices.forEach((index) => {\n    const [x, y] = LinearElementEditor.getPointAtIndexGlobalCoordinates(\n      element,\n      index,\n      elementsMap,\n    );\n    fillCircle(context, x, y, threshold);\n  });\n};\n\ntype ElementSelectionBorder = {\n  angle: number;\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n  selectionColors: string[];\n  dashed?: boolean;\n  cx: number;\n  cy: number;\n  activeEmbeddable: boolean;\n  padding?: number;\n};\n\nconst renderSelectionBorder = (\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n  elementProperties: ElementSelectionBorder,\n) => {\n  const {\n    angle,\n    x1,\n    y1,\n    x2,\n    y2,\n    selectionColors,\n    cx,\n    cy,\n    dashed,\n    activeEmbeddable,\n  } = elementProperties;\n  const elementWidth = x2 - x1;\n  const elementHeight = y2 - y1;\n\n  const padding =\n    elementProperties.padding ?? DEFAULT_TRANSFORM_HANDLE_SPACING * 2;\n\n  const linePadding = padding / appState.zoom.value;\n  const lineWidth = 8 / appState.zoom.value;\n  const spaceWidth = 4 / appState.zoom.value;\n\n  context.save();\n  context.translate(appState.scrollX, appState.scrollY);\n  context.lineWidth = (activeEmbeddable ? 4 : 1) / appState.zoom.value;\n\n  const count = selectionColors.length;\n  for (let index = 0; index < count; ++index) {\n    context.strokeStyle = selectionColors[index];\n    if (dashed) {\n      context.setLineDash([\n        lineWidth,\n        spaceWidth + (lineWidth + spaceWidth) * (count - 1),\n      ]);\n    }\n    context.lineDashOffset = (lineWidth + spaceWidth) * index;\n    strokeRectWithRotation(\n      context,\n      x1 - linePadding,\n      y1 - linePadding,\n      elementWidth + linePadding * 2,\n      elementHeight + linePadding * 2,\n      cx,\n      cy,\n      angle,\n    );\n  }\n  context.restore();\n};\n\nconst renderBindingHighlight = (\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n  suggestedBinding: SuggestedBinding,\n  elementsMap: ElementsMap,\n) => {\n  const renderHighlight = Array.isArray(suggestedBinding)\n    ? renderBindingHighlightForSuggestedPointBinding\n    : renderBindingHighlightForBindableElement;\n\n  context.save();\n  context.translate(appState.scrollX, appState.scrollY);\n  renderHighlight(context, suggestedBinding as any, elementsMap, appState.zoom);\n\n  context.restore();\n};\n\nconst renderFrameHighlight = (\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n  frame: NonDeleted<ExcalidrawFrameLikeElement>,\n  elementsMap: ElementsMap,\n) => {\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(frame, elementsMap);\n  const width = x2 - x1;\n  const height = y2 - y1;\n\n  context.strokeStyle = \"rgb(0,118,255)\";\n  context.lineWidth = FRAME_STYLE.strokeWidth / appState.zoom.value;\n\n  context.save();\n  context.translate(appState.scrollX, appState.scrollY);\n  strokeRectWithRotation(\n    context,\n    x1,\n    y1,\n    width,\n    height,\n    x1 + width / 2,\n    y1 + height / 2,\n    frame.angle,\n    false,\n    FRAME_STYLE.radius / appState.zoom.value,\n  );\n  context.restore();\n};\n\nconst renderElementsBoxHighlight = (\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n  elements: NonDeleted<ExcalidrawElement>[],\n) => {\n  const individualElements = elements.filter(\n    (element) => element.groupIds.length === 0,\n  );\n\n  const elementsInGroups = elements.filter(\n    (element) => element.groupIds.length > 0,\n  );\n\n  const getSelectionFromElements = (elements: ExcalidrawElement[]) => {\n    const [x1, y1, x2, y2] = getCommonBounds(elements);\n    return {\n      angle: 0,\n      x1,\n      x2,\n      y1,\n      y2,\n      selectionColors: [\"rgb(0,118,255)\"],\n      dashed: false,\n      cx: x1 + (x2 - x1) / 2,\n      cy: y1 + (y2 - y1) / 2,\n      activeEmbeddable: false,\n    };\n  };\n\n  const getSelectionForGroupId = (groupId: GroupId) => {\n    const groupElements = getElementsInGroup(elements, groupId);\n    return getSelectionFromElements(groupElements);\n  };\n\n  Object.entries(selectGroupsFromGivenElements(elementsInGroups, appState))\n    .filter(([id, isSelected]) => isSelected)\n    .map(([id, isSelected]) => id)\n    .map((groupId) => getSelectionForGroupId(groupId))\n    .concat(\n      individualElements.map((element) => getSelectionFromElements([element])),\n    )\n    .forEach((selection) =>\n      renderSelectionBorder(context, appState, selection),\n    );\n};\n\nconst renderLinearPointHandles = (\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n  element: NonDeleted<ExcalidrawLinearElement>,\n  elementsMap: RenderableElementsMap,\n) => {\n  if (!appState.selectedLinearElement) {\n    return;\n  }\n  context.save();\n  context.translate(appState.scrollX, appState.scrollY);\n  context.lineWidth = 1 / appState.zoom.value;\n  const points: GlobalPoint[] = LinearElementEditor.getPointsGlobalCoordinates(\n    element,\n    elementsMap,\n  );\n\n  const { POINT_HANDLE_SIZE } = LinearElementEditor;\n  const radius = appState.editingLinearElement\n    ? POINT_HANDLE_SIZE\n    : POINT_HANDLE_SIZE / 2;\n  points.forEach((point, idx) => {\n    if (isElbowArrow(element) && idx !== 0 && idx !== points.length - 1) {\n      return;\n    }\n\n    const isSelected =\n      !!appState.editingLinearElement?.selectedPointsIndices?.includes(idx);\n\n    renderSingleLinearPoint(context, appState, point, radius, isSelected);\n  });\n\n  // Rendering segment mid points\n  if (isElbowArrow(element)) {\n    const fixedSegments =\n      element.fixedSegments?.map((segment) => segment.index) || [];\n    points.slice(0, -1).forEach((p, idx) => {\n      if (\n        !LinearElementEditor.isSegmentTooShort(\n          element,\n          points[idx + 1],\n          points[idx],\n          idx,\n          appState.zoom,\n        )\n      ) {\n        renderSingleLinearPoint(\n          context,\n          appState,\n          pointFrom<GlobalPoint>(\n            (p[0] + points[idx + 1][0]) / 2,\n            (p[1] + points[idx + 1][1]) / 2,\n          ),\n          POINT_HANDLE_SIZE / 2,\n          false,\n          !fixedSegments.includes(idx + 1),\n        );\n      }\n    });\n  } else {\n    const midPoints = LinearElementEditor.getEditorMidPoints(\n      element,\n      elementsMap,\n      appState,\n    ).filter(\n      (midPoint, idx, midPoints): midPoint is GlobalPoint =>\n        midPoint !== null &&\n        !(isElbowArrow(element) && (idx === 0 || idx === midPoints.length - 1)),\n    );\n\n    midPoints.forEach((segmentMidPoint) => {\n      if (appState.editingLinearElement || points.length === 2) {\n        renderSingleLinearPoint(\n          context,\n          appState,\n          segmentMidPoint,\n          POINT_HANDLE_SIZE / 2,\n          false,\n          true,\n        );\n      }\n    });\n  }\n\n  context.restore();\n};\n\nconst renderTransformHandles = (\n  context: CanvasRenderingContext2D,\n  renderConfig: InteractiveCanvasRenderConfig,\n  appState: InteractiveCanvasAppState,\n  transformHandles: TransformHandles,\n  angle: number,\n): void => {\n  Object.keys(transformHandles).forEach((key) => {\n    const transformHandle = transformHandles[key as TransformHandleType];\n    if (transformHandle !== undefined) {\n      const [x, y, width, height] = transformHandle;\n\n      context.save();\n      context.lineWidth = 1 / appState.zoom.value;\n      if (renderConfig.selectionColor) {\n        context.strokeStyle = renderConfig.selectionColor;\n      }\n      if (key === \"rotation\") {\n        fillCircle(context, x + width / 2, y + height / 2, width / 2);\n        // prefer round corners if roundRect API is available\n      } else if (context.roundRect) {\n        context.beginPath();\n        context.roundRect(x, y, width, height, 2 / appState.zoom.value);\n        context.fill();\n        context.stroke();\n      } else {\n        strokeRectWithRotation(\n          context,\n          x,\n          y,\n          width,\n          height,\n          x + width / 2,\n          y + height / 2,\n          angle,\n          true, // fill before stroke\n        );\n      }\n      context.restore();\n    }\n  });\n};\n\nconst renderCropHandles = (\n  context: CanvasRenderingContext2D,\n  renderConfig: InteractiveCanvasRenderConfig,\n  appState: InteractiveCanvasAppState,\n  croppingElement: ExcalidrawImageElement,\n  elementsMap: ElementsMap,\n): void => {\n  const [x1, y1, , , cx, cy] = getElementAbsoluteCoords(\n    croppingElement,\n    elementsMap,\n  );\n\n  const LINE_WIDTH = 3;\n  const LINE_LENGTH = 20;\n\n  const ZOOMED_LINE_WIDTH = LINE_WIDTH / appState.zoom.value;\n  const ZOOMED_HALF_LINE_WIDTH = ZOOMED_LINE_WIDTH / 2;\n\n  const HALF_WIDTH = cx - x1 + ZOOMED_LINE_WIDTH;\n  const HALF_HEIGHT = cy - y1 + ZOOMED_LINE_WIDTH;\n\n  const HORIZONTAL_LINE_LENGTH = Math.min(\n    LINE_LENGTH / appState.zoom.value,\n    HALF_WIDTH,\n  );\n  const VERTICAL_LINE_LENGTH = Math.min(\n    LINE_LENGTH / appState.zoom.value,\n    HALF_HEIGHT,\n  );\n\n  context.save();\n  context.fillStyle = renderConfig.selectionColor;\n  context.strokeStyle = renderConfig.selectionColor;\n  context.lineWidth = ZOOMED_LINE_WIDTH;\n\n  const handles: Array<\n    [\n      [number, number],\n      [number, number],\n      [number, number],\n      [number, number],\n      [number, number],\n    ]\n  > = [\n    [\n      // x, y\n      [-HALF_WIDTH, -HALF_HEIGHT],\n      // horizontal line: first start and to\n      [0, ZOOMED_HALF_LINE_WIDTH],\n      [HORIZONTAL_LINE_LENGTH, ZOOMED_HALF_LINE_WIDTH],\n      // vertical line: second  start and to\n      [ZOOMED_HALF_LINE_WIDTH, 0],\n      [ZOOMED_HALF_LINE_WIDTH, VERTICAL_LINE_LENGTH],\n    ],\n    [\n      [HALF_WIDTH - ZOOMED_HALF_LINE_WIDTH, -HALF_HEIGHT],\n      [ZOOMED_HALF_LINE_WIDTH, ZOOMED_HALF_LINE_WIDTH],\n      [\n        -HORIZONTAL_LINE_LENGTH + ZOOMED_HALF_LINE_WIDTH,\n        ZOOMED_HALF_LINE_WIDTH,\n      ],\n      [0, 0],\n      [0, VERTICAL_LINE_LENGTH],\n    ],\n    [\n      [-HALF_WIDTH, HALF_HEIGHT],\n      [0, -ZOOMED_HALF_LINE_WIDTH],\n      [HORIZONTAL_LINE_LENGTH, -ZOOMED_HALF_LINE_WIDTH],\n      [ZOOMED_HALF_LINE_WIDTH, 0],\n      [ZOOMED_HALF_LINE_WIDTH, -VERTICAL_LINE_LENGTH],\n    ],\n    [\n      [HALF_WIDTH - ZOOMED_HALF_LINE_WIDTH, HALF_HEIGHT],\n      [ZOOMED_HALF_LINE_WIDTH, -ZOOMED_HALF_LINE_WIDTH],\n      [\n        -HORIZONTAL_LINE_LENGTH + ZOOMED_HALF_LINE_WIDTH,\n        -ZOOMED_HALF_LINE_WIDTH,\n      ],\n      [0, 0],\n      [0, -VERTICAL_LINE_LENGTH],\n    ],\n  ];\n\n  handles.forEach((handle) => {\n    const [[x, y], [x1s, y1s], [x1t, y1t], [x2s, y2s], [x2t, y2t]] = handle;\n\n    context.save();\n    context.translate(cx, cy);\n    context.rotate(croppingElement.angle);\n\n    context.beginPath();\n    context.moveTo(x + x1s, y + y1s);\n    context.lineTo(x + x1t, y + y1t);\n    context.stroke();\n\n    context.beginPath();\n    context.moveTo(x + x2s, y + y2s);\n    context.lineTo(x + x2t, y + y2t);\n    context.stroke();\n    context.restore();\n  });\n\n  context.restore();\n};\n\nconst renderTextBox = (\n  text: NonDeleted<ExcalidrawTextElement>,\n  context: CanvasRenderingContext2D,\n  appState: InteractiveCanvasAppState,\n  selectionColor: InteractiveCanvasRenderConfig[\"selectionColor\"],\n) => {\n  context.save();\n  const padding = (DEFAULT_TRANSFORM_HANDLE_SPACING * 2) / appState.zoom.value;\n  const width = text.width + padding * 2;\n  const height = text.height + padding * 2;\n  const cx = text.x + width / 2;\n  const cy = text.y + height / 2;\n  const shiftX = -(width / 2 + padding);\n  const shiftY = -(height / 2 + padding);\n  context.translate(cx + appState.scrollX, cy + appState.scrollY);\n  context.rotate(text.angle);\n  context.lineWidth = 1 / appState.zoom.value;\n  context.strokeStyle = selectionColor;\n  context.strokeRect(shiftX, shiftY, width, height);\n  context.restore();\n};\n\nconst _renderInteractiveScene = ({\n  canvas,\n  elementsMap,\n  visibleElements,\n  selectedElements,\n  allElementsMap,\n  scale,\n  appState,\n  renderConfig,\n  device,\n}: InteractiveSceneRenderConfig) => {\n  if (canvas === null) {\n    return { atLeastOneVisibleElement: false, elementsMap };\n  }\n\n  const [normalizedWidth, normalizedHeight] = getNormalizedCanvasDimensions(\n    canvas,\n    scale,\n  );\n\n  const context = bootstrapCanvas({\n    canvas,\n    scale,\n    normalizedWidth,\n    normalizedHeight,\n  });\n\n  // Apply zoom\n  context.save();\n  context.scale(appState.zoom.value, appState.zoom.value);\n\n  let editingLinearElement: NonDeleted<ExcalidrawLinearElement> | undefined =\n    undefined;\n\n  visibleElements.forEach((element) => {\n    // Getting the element using LinearElementEditor during collab mismatches version - being one head of visible elements due to\n    // ShapeCache returns empty hence making sure that we get the\n    // correct element from visible elements\n    if (appState.editingLinearElement?.elementId === element.id) {\n      if (element) {\n        editingLinearElement = element as NonDeleted<ExcalidrawLinearElement>;\n      }\n    }\n  });\n\n  if (editingLinearElement) {\n    renderLinearPointHandles(\n      context,\n      appState,\n      editingLinearElement,\n      elementsMap,\n    );\n  }\n\n  // Paint selection element\n  if (appState.selectionElement && !appState.isCropping) {\n    try {\n      renderSelectionElement(\n        appState.selectionElement,\n        context,\n        appState,\n        renderConfig.selectionColor,\n      );\n    } catch (error: any) {\n      console.error(error);\n    }\n  }\n\n  if (\n    appState.editingTextElement &&\n    isTextElement(appState.editingTextElement)\n  ) {\n    const textElement = allElementsMap.get(appState.editingTextElement.id) as\n      | ExcalidrawTextElement\n      | undefined;\n    if (textElement && !textElement.autoResize) {\n      renderTextBox(\n        textElement,\n        context,\n        appState,\n        renderConfig.selectionColor,\n      );\n    }\n  }\n\n  if (appState.isBindingEnabled) {\n    appState.suggestedBindings\n      .filter((binding) => binding != null)\n      .forEach((suggestedBinding) => {\n        renderBindingHighlight(\n          context,\n          appState,\n          suggestedBinding!,\n          elementsMap,\n        );\n      });\n  }\n\n  if (appState.frameToHighlight) {\n    renderFrameHighlight(\n      context,\n      appState,\n      appState.frameToHighlight,\n      elementsMap,\n    );\n  }\n\n  if (appState.elementsToHighlight) {\n    renderElementsBoxHighlight(context, appState, appState.elementsToHighlight);\n  }\n\n  const isFrameSelected = selectedElements.some((element) =>\n    isFrameLikeElement(element),\n  );\n\n  // Getting the element using LinearElementEditor during collab mismatches version - being one head of visible elements due to\n  // ShapeCache returns empty hence making sure that we get the\n  // correct element from visible elements\n  if (\n    selectedElements.length === 1 &&\n    appState.editingLinearElement?.elementId === selectedElements[0].id\n  ) {\n    renderLinearPointHandles(\n      context,\n      appState,\n      selectedElements[0] as NonDeleted<ExcalidrawLinearElement>,\n      elementsMap,\n    );\n  }\n\n  if (\n    isElbowArrow(selectedElements[0]) &&\n    appState.selectedLinearElement &&\n    appState.selectedLinearElement.segmentMidPointHoveredCoords\n  ) {\n    renderElbowArrowMidPointHighlight(context, appState);\n  } else if (\n    appState.selectedLinearElement &&\n    appState.selectedLinearElement.hoverPointIndex >= 0 &&\n    !(\n      isElbowArrow(selectedElements[0]) &&\n      appState.selectedLinearElement.hoverPointIndex > 0 &&\n      appState.selectedLinearElement.hoverPointIndex <\n        selectedElements[0].points.length - 1\n    )\n  ) {\n    renderLinearElementPointHighlight(context, appState, elementsMap);\n  }\n\n  // Paint selected elements\n  if (!appState.multiElement && !appState.editingLinearElement) {\n    const showBoundingBox = shouldShowBoundingBox(selectedElements, appState);\n\n    const isSingleLinearElementSelected =\n      selectedElements.length === 1 && isLinearElement(selectedElements[0]);\n    // render selected linear element points\n    if (\n      isSingleLinearElementSelected &&\n      appState.selectedLinearElement?.elementId === selectedElements[0].id &&\n      !selectedElements[0].locked\n    ) {\n      renderLinearPointHandles(\n        context,\n        appState,\n        selectedElements[0] as ExcalidrawLinearElement,\n        elementsMap,\n      );\n    }\n    const selectionColor = renderConfig.selectionColor || oc.black;\n\n    if (showBoundingBox) {\n      // Optimisation for finding quickly relevant element ids\n      const locallySelectedIds = arrayToMap(selectedElements);\n\n      const selections: ElementSelectionBorder[] = [];\n\n      for (const element of elementsMap.values()) {\n        const selectionColors = [];\n        const remoteClients = renderConfig.remoteSelectedElementIds.get(\n          element.id,\n        );\n        if (\n          !(\n            // Elbow arrow elements cannot be selected when bound on either end\n            (\n              isSingleLinearElementSelected &&\n              isElbowArrow(element) &&\n              (element.startBinding || element.endBinding)\n            )\n          )\n        ) {\n          // local user\n          if (\n            locallySelectedIds.has(element.id) &&\n            !isSelectedViaGroup(appState, element)\n          ) {\n            selectionColors.push(selectionColor);\n          }\n          // remote users\n          if (remoteClients) {\n            selectionColors.push(\n              ...remoteClients.map((socketId) => {\n                const background = getClientColor(\n                  socketId,\n                  appState.collaborators.get(socketId),\n                );\n                return background;\n              }),\n            );\n          }\n        }\n\n        if (selectionColors.length) {\n          const [x1, y1, x2, y2, cx, cy] = getElementAbsoluteCoords(\n            element,\n            elementsMap,\n            true,\n          );\n          selections.push({\n            angle: element.angle,\n            x1,\n            y1,\n            x2,\n            y2,\n            selectionColors,\n            dashed: !!remoteClients,\n            cx,\n            cy,\n            activeEmbeddable:\n              appState.activeEmbeddable?.element === element &&\n              appState.activeEmbeddable.state === \"active\",\n            padding:\n              element.id === appState.croppingElementId ||\n              isImageElement(element)\n                ? 0\n                : undefined,\n          });\n        }\n      }\n\n      const addSelectionForGroupId = (groupId: GroupId) => {\n        const groupElements = getElementsInGroup(elementsMap, groupId);\n        const [x1, y1, x2, y2] = getCommonBounds(groupElements);\n        selections.push({\n          angle: 0,\n          x1,\n          x2,\n          y1,\n          y2,\n          selectionColors: [oc.black],\n          dashed: true,\n          cx: x1 + (x2 - x1) / 2,\n          cy: y1 + (y2 - y1) / 2,\n          activeEmbeddable: false,\n        });\n      };\n\n      for (const groupId of getSelectedGroupIds(appState)) {\n        // TODO: support multiplayer selected group IDs\n        addSelectionForGroupId(groupId);\n      }\n\n      if (appState.editingGroupId) {\n        addSelectionForGroupId(appState.editingGroupId);\n      }\n\n      selections.forEach((selection) =>\n        renderSelectionBorder(context, appState, selection),\n      );\n    }\n    // Paint resize transformHandles\n    context.save();\n    context.translate(appState.scrollX, appState.scrollY);\n\n    if (selectedElements.length === 1) {\n      context.fillStyle = oc.white;\n      const transformHandles = getTransformHandles(\n        selectedElements[0],\n        appState.zoom,\n        elementsMap,\n        \"mouse\", // when we render we don't know which pointer type so use mouse,\n        getOmitSidesForDevice(device),\n      );\n      if (\n        !appState.viewModeEnabled &&\n        showBoundingBox &&\n        // do not show transform handles when text is being edited\n        !isTextElement(appState.editingTextElement) &&\n        // do not show transform handles when image is being cropped\n        !appState.croppingElementId\n      ) {\n        renderTransformHandles(\n          context,\n          renderConfig,\n          appState,\n          transformHandles,\n          selectedElements[0].angle,\n        );\n      }\n\n      if (appState.croppingElementId && !appState.isCropping) {\n        const croppingElement = elementsMap.get(appState.croppingElementId);\n\n        if (croppingElement && isImageElement(croppingElement)) {\n          renderCropHandles(\n            context,\n            renderConfig,\n            appState,\n            croppingElement,\n            elementsMap,\n          );\n        }\n      }\n    } else if (selectedElements.length > 1 && !appState.isRotating) {\n      const dashedLinePadding =\n        (DEFAULT_TRANSFORM_HANDLE_SPACING * 2) / appState.zoom.value;\n      context.fillStyle = oc.white;\n      const [x1, y1, x2, y2] = getCommonBounds(selectedElements);\n      const initialLineDash = context.getLineDash();\n      context.setLineDash([2 / appState.zoom.value]);\n      const lineWidth = context.lineWidth;\n      context.lineWidth = 1 / appState.zoom.value;\n      context.strokeStyle = selectionColor;\n      strokeRectWithRotation(\n        context,\n        x1 - dashedLinePadding,\n        y1 - dashedLinePadding,\n        x2 - x1 + dashedLinePadding * 2,\n        y2 - y1 + dashedLinePadding * 2,\n        (x1 + x2) / 2,\n        (y1 + y2) / 2,\n        0,\n      );\n      context.lineWidth = lineWidth;\n      context.setLineDash(initialLineDash);\n      const transformHandles = getTransformHandlesFromCoords(\n        [x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2],\n        0 as Radians,\n        appState.zoom,\n        \"mouse\",\n        isFrameSelected\n          ? { ...getOmitSidesForDevice(device), rotation: true }\n          : getOmitSidesForDevice(device),\n      );\n      if (selectedElements.some((element) => !element.locked)) {\n        renderTransformHandles(\n          context,\n          renderConfig,\n          appState,\n          transformHandles,\n          0,\n        );\n      }\n    }\n    context.restore();\n  }\n\n  appState.searchMatches.forEach(({ id, focus, matchedLines }) => {\n    const element = elementsMap.get(id);\n\n    if (element && isTextElement(element)) {\n      const [elementX1, elementY1, , , cx, cy] = getElementAbsoluteCoords(\n        element,\n        elementsMap,\n        true,\n      );\n\n      context.save();\n      if (appState.theme === THEME.LIGHT) {\n        if (focus) {\n          context.fillStyle = \"rgba(255, 124, 0, 0.4)\";\n        } else {\n          context.fillStyle = \"rgba(255, 226, 0, 0.4)\";\n        }\n      } else if (focus) {\n        context.fillStyle = \"rgba(229, 82, 0, 0.4)\";\n      } else {\n        context.fillStyle = \"rgba(99, 52, 0, 0.4)\";\n      }\n\n      context.translate(appState.scrollX, appState.scrollY);\n      context.translate(cx, cy);\n      context.rotate(element.angle);\n\n      matchedLines.forEach((matchedLine) => {\n        context.fillRect(\n          elementX1 + matchedLine.offsetX - cx,\n          elementY1 + matchedLine.offsetY - cy,\n          matchedLine.width,\n          matchedLine.height,\n        );\n      });\n\n      context.restore();\n    }\n  });\n\n  renderSnaps(context, appState);\n\n  context.restore();\n\n  renderRemoteCursors({\n    context,\n    renderConfig,\n    appState,\n    normalizedWidth,\n    normalizedHeight,\n  });\n\n  // Paint scrollbars\n  let scrollBars;\n  if (renderConfig.renderScrollbars) {\n    scrollBars = getScrollBars(\n      visibleElements,\n      normalizedWidth,\n      normalizedHeight,\n      appState,\n    );\n\n    context.save();\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach((scrollBar) => {\n      if (scrollBar) {\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2,\n        );\n      }\n    });\n    context.restore();\n  }\n\n  return {\n    scrollBars,\n    atLeastOneVisibleElement: visibleElements.length > 0,\n    elementsMap,\n  };\n};\n\n/** throttled to animation framerate */\nexport const renderInteractiveSceneThrottled = throttleRAF(\n  (config: InteractiveSceneRenderConfig) => {\n    const ret = _renderInteractiveScene(config);\n    config.callback?.(ret);\n  },\n  { trailing: true },\n);\n\n/**\n * Interactive scene is the ui-canvas where we render bounding boxes, selections\n * and other ui stuff.\n */\nexport const renderInteractiveScene = <\n  U extends typeof _renderInteractiveScene,\n  T extends boolean = false,\n>(\n  renderConfig: InteractiveSceneRenderConfig,\n  throttle?: T,\n): T extends true ? void : ReturnType<U> => {\n  if (throttle) {\n    renderInteractiveSceneThrottled(renderConfig);\n    return undefined as T extends true ? void : ReturnType<U>;\n  }\n  const ret = _renderInteractiveScene(renderConfig);\n  renderConfig.callback(ret);\n  return ret as T extends true ? void : ReturnType<U>;\n};\n", "import React, { useEffect, useRef } from \"react\";\nimport type { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { renderStaticScene } from \"../../renderer/staticScene\";\nimport { isShallowEqual } from \"../../utils\";\nimport type { AppState, StaticCanvasAppState } from \"../../types\";\nimport type {\n  RenderableElementsMap,\n  StaticCanvasRenderConfig,\n} from \"../../scene/types\";\nimport type {\n  NonDeletedExcalidrawElement,\n  NonDeletedSceneElementsMap,\n} from \"../../element/types\";\nimport { isRenderThrottlingEnabled } from \"../../reactUtils\";\n\ntype StaticCanvasProps = {\n  canvas: HTMLCanvasElement;\n  rc: RoughCanvas;\n  elementsMap: RenderableElementsMap;\n  allElementsMap: NonDeletedSceneElementsMap;\n  visibleElements: readonly NonDeletedExcalidrawElement[];\n  sceneNonce: number | undefined;\n  selectionNonce: number | undefined;\n  scale: number;\n  appState: StaticCanvasAppState;\n  renderConfig: StaticCanvasRenderConfig;\n};\n\nconst StaticCanvas = (props: StaticCanvasProps) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const isComponentMounted = useRef(false);\n\n  useEffect(() => {\n    const wrapper = wrapperRef.current;\n    if (!wrapper) {\n      return;\n    }\n\n    const canvas = props.canvas;\n\n    if (!isComponentMounted.current) {\n      isComponentMounted.current = true;\n\n      wrapper.replaceChildren(canvas);\n      canvas.classList.add(\"excalidraw__canvas\", \"static\");\n    }\n\n    const widthString = `${props.appState.width}px`;\n    const heightString = `${props.appState.height}px`;\n    if (canvas.style.width !== widthString) {\n      canvas.style.width = widthString;\n    }\n    if (canvas.style.height !== heightString) {\n      canvas.style.height = heightString;\n    }\n\n    const scaledWidth = props.appState.width * props.scale;\n    const scaledHeight = props.appState.height * props.scale;\n    // setting width/height resets the canvas even if dimensions not changed,\n    // which would cause flicker when we skip frame (due to throttling)\n    if (canvas.width !== scaledWidth) {\n      canvas.width = scaledWidth;\n    }\n    if (canvas.height !== scaledHeight) {\n      canvas.height = scaledHeight;\n    }\n\n    renderStaticScene(\n      {\n        canvas,\n        rc: props.rc,\n        scale: props.scale,\n        elementsMap: props.elementsMap,\n        allElementsMap: props.allElementsMap,\n        visibleElements: props.visibleElements,\n        appState: props.appState,\n        renderConfig: props.renderConfig,\n      },\n      isRenderThrottlingEnabled(),\n    );\n  });\n\n  return <div className=\"excalidraw__canvas-wrapper\" ref={wrapperRef} />;\n};\n\nconst getRelevantAppStateProps = (\n  appState: AppState,\n): StaticCanvasAppState => ({\n  zoom: appState.zoom,\n  scrollX: appState.scrollX,\n  scrollY: appState.scrollY,\n  width: appState.width,\n  height: appState.height,\n  viewModeEnabled: appState.viewModeEnabled,\n  openDialog: appState.openDialog,\n  hoveredElementIds: appState.hoveredElementIds,\n  offsetLeft: appState.offsetLeft,\n  offsetTop: appState.offsetTop,\n  theme: appState.theme,\n  pendingImageElementId: appState.pendingImageElementId,\n  shouldCacheIgnoreZoom: appState.shouldCacheIgnoreZoom,\n  viewBackgroundColor: appState.viewBackgroundColor,\n  exportScale: appState.exportScale,\n  selectedElementsAreBeingDragged: appState.selectedElementsAreBeingDragged,\n  gridSize: appState.gridSize,\n  gridStep: appState.gridStep,\n  frameRendering: appState.frameRendering,\n  selectedElementIds: appState.selectedElementIds,\n  frameToHighlight: appState.frameToHighlight,\n  editingGroupId: appState.editingGroupId,\n  currentHoveredFontFamily: appState.currentHoveredFontFamily,\n  croppingElementId: appState.croppingElementId,\n});\n\nconst areEqual = (\n  prevProps: StaticCanvasProps,\n  nextProps: StaticCanvasProps,\n) => {\n  if (\n    prevProps.sceneNonce !== nextProps.sceneNonce ||\n    prevProps.scale !== nextProps.scale ||\n    // we need to memoize on elementsMap because they may have renewed\n    // even if sceneNonce didn't change (e.g. we filter elements out based\n    // on appState)\n    prevProps.elementsMap !== nextProps.elementsMap ||\n    prevProps.visibleElements !== nextProps.visibleElements\n  ) {\n    return false;\n  }\n\n  return (\n    isShallowEqual(\n      // asserting AppState because we're being passed the whole AppState\n      // but resolve to only the StaticCanvas-relevant props\n      getRelevantAppStateProps(prevProps.appState as AppState),\n      getRelevantAppStateProps(nextProps.appState as AppState),\n    ) && isShallowEqual(prevProps.renderConfig, nextProps.renderConfig)\n  );\n};\n\nexport default React.memo(StaticCanvas, areEqual);\n", "import { isElementInViewport } from \"../element/sizeHelpers\";\nimport { isImageElement } from \"../element/typeChecks\";\nimport type {\n  ExcalidrawElement,\n  NonDeletedElementsMap,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\nimport { renderInteractiveSceneThrottled } from \"../renderer/interactiveScene\";\nimport { renderStaticSceneThrottled } from \"../renderer/staticScene\";\n\nimport type { AppState } from \"../types\";\nimport { memoize, toBrandedType } from \"../utils\";\nimport type Scene from \"./Scene\";\nimport type { RenderableElementsMap } from \"./types\";\n\nexport class Renderer {\n  private scene: Scene;\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n  }\n\n  public getRenderableElements = (() => {\n    const getVisibleCanvasElements = ({\n      elementsMap,\n      zoom,\n      offsetLeft,\n      offsetTop,\n      scrollX,\n      scrollY,\n      height,\n      width,\n    }: {\n      elementsMap: NonDeletedElementsMap;\n      zoom: AppState[\"zoom\"];\n      offsetLeft: AppState[\"offsetLeft\"];\n      offsetTop: AppState[\"offsetTop\"];\n      scrollX: AppState[\"scrollX\"];\n      scrollY: AppState[\"scrollY\"];\n      height: AppState[\"height\"];\n      width: AppState[\"width\"];\n    }): readonly NonDeletedExcalidrawElement[] => {\n      const visibleElements: NonDeletedExcalidrawElement[] = [];\n      for (const element of elementsMap.values()) {\n        if (\n          isElementInViewport(\n            element,\n            width,\n            height,\n            {\n              zoom,\n              offsetLeft,\n              offsetTop,\n              scrollX,\n              scrollY,\n            },\n            elementsMap,\n          )\n        ) {\n          visibleElements.push(element);\n        }\n      }\n      return visibleElements;\n    };\n\n    const getRenderableElements = ({\n      elements,\n      editingTextElement,\n      newElementId,\n      pendingImageElementId,\n    }: {\n      elements: readonly NonDeletedExcalidrawElement[];\n      editingTextElement: AppState[\"editingTextElement\"];\n      newElementId: ExcalidrawElement[\"id\"] | undefined;\n      pendingImageElementId: AppState[\"pendingImageElementId\"];\n    }) => {\n      const elementsMap = toBrandedType<RenderableElementsMap>(new Map());\n\n      for (const element of elements) {\n        if (isImageElement(element)) {\n          if (\n            // => not placed on canvas yet (but in elements array)\n            pendingImageElementId === element.id\n          ) {\n            continue;\n          }\n        }\n\n        if (newElementId === element.id) {\n          continue;\n        }\n\n        // we don't want to render text element that's being currently edited\n        // (it's rendered on remote only)\n        if (\n          !editingTextElement ||\n          editingTextElement.type !== \"text\" ||\n          element.id !== editingTextElement.id\n        ) {\n          elementsMap.set(element.id, element);\n        }\n      }\n      return elementsMap;\n    };\n\n    return memoize(\n      ({\n        zoom,\n        offsetLeft,\n        offsetTop,\n        scrollX,\n        scrollY,\n        height,\n        width,\n        editingTextElement,\n        newElementId,\n        pendingImageElementId,\n        // cache-invalidation nonce\n        sceneNonce: _sceneNonce,\n      }: {\n        zoom: AppState[\"zoom\"];\n        offsetLeft: AppState[\"offsetLeft\"];\n        offsetTop: AppState[\"offsetTop\"];\n        scrollX: AppState[\"scrollX\"];\n        scrollY: AppState[\"scrollY\"];\n        height: AppState[\"height\"];\n        width: AppState[\"width\"];\n        editingTextElement: AppState[\"editingTextElement\"];\n        /** note: first render of newElement will always bust the cache\n         * (we'd have to prefilter elements outside of this function) */\n        newElementId: ExcalidrawElement[\"id\"] | undefined;\n        pendingImageElementId: AppState[\"pendingImageElementId\"];\n        sceneNonce: ReturnType<InstanceType<typeof Scene>[\"getSceneNonce\"]>;\n      }) => {\n        const elements = this.scene.getNonDeletedElements();\n\n        const elementsMap = getRenderableElements({\n          elements,\n          editingTextElement,\n          newElementId,\n          pendingImageElementId,\n        });\n\n        const visibleElements = getVisibleCanvasElements({\n          elementsMap,\n          zoom,\n          offsetLeft,\n          offsetTop,\n          scrollX,\n          scrollY,\n          height,\n          width,\n        });\n\n        return { elementsMap, visibleElements };\n      },\n    );\n  })();\n\n  // NOTE Doesn't destroy everything (scene, rc, etc.) because it may not be\n  // safe to break TS contract here (for upstream cases)\n  public destroy() {\n    renderInteractiveSceneThrottled.cancel();\n    renderStaticSceneThrottled.cancel();\n    this.getRenderableElements.clear();\n  }\n}\n", "import { useEffect, useRef } from \"react\";\nimport type { Trail } from \"../animated-trail\";\n\nimport \"./SVGLayer.scss\";\n\ntype SVGLayerProps = {\n  trails: Trail[];\n};\n\nexport const SVGLayer = ({ trails }: SVGLayerProps) => {\n  const svgRef = useRef<SVGSVGElement | null>(null);\n\n  useEffect(() => {\n    if (svgRef.current) {\n      for (const trail of trails) {\n        trail.start(svgRef.current);\n      }\n    }\n\n    return () => {\n      for (const trail of trails) {\n        trail.stop();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, trails);\n\n  return (\n    <div className=\"SVGLayer\">\n      <svg ref={svgRef} />\n    </div>\n  );\n};\n", "import type { AppState } from \"../types\";\nimport { sceneCoordsToViewportCoords } from \"../utils\";\nimport type { ElementsMap, NonDeletedExcalidrawElement } from \"./types\";\nimport { getElementAbsoluteCoords } from \".\";\nimport { useExcalidrawAppState } from \"../components/App\";\n\nimport \"./ElementCanvasButtons.scss\";\n\nconst CONTAINER_PADDING = 5;\n\nconst getContainerCoords = (\n  element: NonDeletedExcalidrawElement,\n  appState: AppState,\n  elementsMap: ElementsMap,\n) => {\n  const [x1, y1] = getElementAbsoluteCoords(element, elementsMap);\n  const { x: viewportX, y: viewportY } = sceneCoordsToViewportCoords(\n    { sceneX: x1 + element.width, sceneY: y1 },\n    appState,\n  );\n  const x = viewportX - appState.offsetLeft + 10;\n  const y = viewportY - appState.offsetTop;\n  return { x, y };\n};\n\nexport const ElementCanvasButtons = ({\n  children,\n  element,\n  elementsMap,\n}: {\n  children: React.ReactNode;\n  element: NonDeletedExcalidrawElement;\n  elementsMap: ElementsMap;\n}) => {\n  const appState = useExcalidrawAppState();\n\n  if (\n    appState.contextMenu ||\n    appState.newElement ||\n    appState.resizingElement ||\n    appState.isRotating ||\n    appState.openMenu ||\n    appState.viewModeEnabled\n  ) {\n    return null;\n  }\n\n  const { x, y } = getContainerCoords(element, appState, elementsMap);\n\n  return (\n    <div\n      className=\"excalidraw-canvas-buttons\"\n      style={{\n        top: `${y}px`,\n        left: `${x}px`,\n        // width: CONTAINER_WIDTH,\n        padding: CONTAINER_PADDING,\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n", "import type { JSX } from \"react\";\nimport clsx from \"clsx\";\nimport type { ToolButtonSize } from \"./ToolButton\";\n\nimport \"./ToolIcon.scss\";\n\nconst DEFAULT_SIZE: ToolButtonSize = \"small\";\n\nexport const ElementCanvasButton = (props: {\n  title?: string;\n  icon: JSX.Element;\n  name?: string;\n  checked: boolean;\n  onChange?(): void;\n  isMobile?: boolean;\n}) => {\n  return (\n    <label\n      className={clsx(\n        \"ToolIcon ToolIcon__MagicButton\",\n        `ToolIcon_size_${DEFAULT_SIZE}`,\n        {\n          \"is-mobile\": props.isMobile,\n        },\n      )}\n      title={`${props.title}`}\n    >\n      <input\n        className=\"ToolIcon_type_checkbox\"\n        type=\"checkbox\"\n        name={props.name}\n        onChange={props.onChange}\n        checked={props.checked}\n        aria-label={props.title}\n      />\n      <div className=\"ToolIcon__icon\">{props.icon}</div>\n    </label>\n  );\n};\n", "import type { UserToFollow } from \"../../types\";\nimport { CloseIcon } from \"../icons\";\nimport \"./FollowMode.scss\";\n\ninterface FollowModeProps {\n  width: number;\n  height: number;\n  userToFollow: UserToFollow;\n  onDisconnect: () => void;\n}\n\nconst FollowMode = ({\n  height,\n  width,\n  userToFollow,\n  onDisconnect,\n}: FollowModeProps) => {\n  return (\n    <div className=\"follow-mode\" style={{ width, height }}>\n      <div className=\"follow-mode__badge\">\n        <div className=\"follow-mode__badge__label\">\n          Following{\" \"}\n          <span\n            className=\"follow-mode__badge__username\"\n            title={userToFollow.username}\n          >\n            {userToFollow.username}\n          </span>\n        </div>\n        <button\n          type=\"button\"\n          onClick={onDisconnect}\n          className=\"follow-mode__disconnect-btn\"\n        >\n          {CloseIcon}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FollowMode;\n", "export type AnimationCallback = (timestamp: number) => void | boolean;\n\nexport type AnimationTarget = {\n  callback: AnimationCallback;\n  stopped: boolean;\n};\n\nexport class AnimationFrameHandler {\n  private targets = new WeakMap<object, AnimationTarget>();\n  private rafIds = new WeakMap<object, number>();\n\n  register(key: object, callback: AnimationCallback) {\n    this.targets.set(key, { callback, stopped: true });\n  }\n\n  start(key: object) {\n    const target = this.targets.get(key);\n\n    if (!target) {\n      return;\n    }\n\n    if (this.rafIds.has(key)) {\n      return;\n    }\n\n    this.targets.set(key, { ...target, stopped: false });\n    this.scheduleFrame(key);\n  }\n\n  stop(key: object) {\n    const target = this.targets.get(key);\n    if (target && !target.stopped) {\n      this.targets.set(key, { ...target, stopped: true });\n    }\n\n    this.cancelFrame(key);\n  }\n\n  private constructFrame(key: object): FrameRequestCallback {\n    return (timestamp: number) => {\n      const target = this.targets.get(key);\n\n      if (!target) {\n        return;\n      }\n\n      const shouldAbort = this.onFrame(target, timestamp);\n\n      if (!target.stopped && !shouldAbort) {\n        this.scheduleFrame(key);\n      } else {\n        this.cancelFrame(key);\n      }\n    };\n  }\n\n  private scheduleFrame(key: object) {\n    const rafId = requestAnimationFrame(this.constructFrame(key));\n\n    this.rafIds.set(key, rafId);\n  }\n\n  private cancelFrame(key: object) {\n    if (this.rafIds.has(key)) {\n      const rafId = this.rafIds.get(key)!;\n\n      cancelAnimationFrame(rafId);\n    }\n\n    this.rafIds.delete(key);\n  }\n\n  private onFrame(target: AnimationTarget, timestamp: number): boolean {\n    const shouldAbort = target.callback(timestamp);\n\n    return shouldAbort ?? false;\n  }\n}\n", "import type { LaserPointerOptions } from \"@excalidraw/laser-pointer\";\nimport { LaserPointer } from \"@excalidraw/laser-pointer\";\nimport type { AnimationFrameHandler } from \"./animation-frame-handler\";\nimport type { AppState } from \"./types\";\nimport { getSvgPathFromStroke, sceneCoordsToViewportCoords } from \"./utils\";\nimport type App from \"./components/App\";\nimport { SVG_NS } from \"./constants\";\n\nexport interface Trail {\n  start(container: SVGSVGElement): void;\n  stop(): void;\n\n  startPath(x: number, y: number): void;\n  addPointToPath(x: number, y: number): void;\n  endPath(): void;\n}\n\nexport interface AnimatedTrailOptions {\n  fill: (trail: AnimatedTrail) => string;\n}\n\nexport class AnimatedTrail implements Trail {\n  private currentTrail?: LaserPointer;\n  private pastTrails: LaserPointer[] = [];\n\n  private container?: SVGSVGElement;\n  private trailElement: SVGPathElement;\n\n  constructor(\n    private animationFrameHandler: AnimationFrameHandler,\n    private app: App,\n    private options: Partial<LaserPointerOptions> &\n      Partial<AnimatedTrailOptions>,\n  ) {\n    this.animationFrameHandler.register(this, this.onFrame.bind(this));\n\n    this.trailElement = document.createElementNS(SVG_NS, \"path\");\n  }\n\n  get hasCurrentTrail() {\n    return !!this.currentTrail;\n  }\n\n  hasLastPoint(x: number, y: number) {\n    if (this.currentTrail) {\n      const len = this.currentTrail.originalPoints.length;\n      return (\n        this.currentTrail.originalPoints[len - 1][0] === x &&\n        this.currentTrail.originalPoints[len - 1][1] === y\n      );\n    }\n\n    return false;\n  }\n\n  start(container?: SVGSVGElement) {\n    if (container) {\n      this.container = container;\n    }\n\n    if (this.trailElement.parentNode !== this.container && this.container) {\n      this.container.appendChild(this.trailElement);\n    }\n\n    this.animationFrameHandler.start(this);\n  }\n\n  stop() {\n    this.animationFrameHandler.stop(this);\n\n    if (this.trailElement.parentNode === this.container) {\n      this.container?.removeChild(this.trailElement);\n    }\n  }\n\n  startPath(x: number, y: number) {\n    this.currentTrail = new LaserPointer(this.options);\n\n    this.currentTrail.addPoint([x, y, performance.now()]);\n\n    this.update();\n  }\n\n  addPointToPath(x: number, y: number) {\n    if (this.currentTrail) {\n      this.currentTrail.addPoint([x, y, performance.now()]);\n      this.update();\n    }\n  }\n\n  endPath() {\n    if (this.currentTrail) {\n      this.currentTrail.close();\n      this.currentTrail.options.keepHead = false;\n      this.pastTrails.push(this.currentTrail);\n      this.currentTrail = undefined;\n      this.update();\n    }\n  }\n\n  private update() {\n    this.start();\n  }\n\n  private onFrame() {\n    const paths: string[] = [];\n\n    for (const trail of this.pastTrails) {\n      paths.push(this.drawTrail(trail, this.app.state));\n    }\n\n    if (this.currentTrail) {\n      const currentPath = this.drawTrail(this.currentTrail, this.app.state);\n\n      paths.push(currentPath);\n    }\n\n    this.pastTrails = this.pastTrails.filter((trail) => {\n      return trail.getStrokeOutline().length !== 0;\n    });\n\n    if (paths.length === 0) {\n      this.stop();\n    }\n\n    const svgPaths = paths.join(\" \").trim();\n\n    this.trailElement.setAttribute(\"d\", svgPaths);\n    this.trailElement.setAttribute(\n      \"fill\",\n      (this.options.fill ?? (() => \"black\"))(this),\n    );\n  }\n\n  private drawTrail(trail: LaserPointer, state: AppState): string {\n    const stroke = trail\n      .getStrokeOutline(trail.options.size / state.zoom.value)\n      .map(([x, y]) => {\n        const result = sceneCoordsToViewportCoords(\n          { sceneX: x, sceneY: y },\n          state,\n        );\n\n        return [result.x, result.y];\n      });\n\n    return getSvgPathFromStroke(stroke, true);\n  }\n}\n", "import type { LaserPointerOptions } from \"@excalidraw/laser-pointer\";\nimport type { Trail } from \"./animated-trail\";\nimport { AnimatedTrail } from \"./animated-trail\";\nimport type { AnimationFrameHandler } from \"./animation-frame-handler\";\nimport type App from \"./components/App\";\nimport type { SocketId } from \"./types\";\nimport { easeOut } from \"./utils\";\nimport { getClientColor } from \"./clients\";\nimport { DEFAULT_LASER_COLOR } from \"./constants\";\n\nexport class LaserTrails implements Trail {\n  public localTrail: AnimatedTrail;\n  private collabTrails = new Map<SocketId, AnimatedTrail>();\n\n  private container?: SVGSVGElement;\n\n  constructor(\n    private animationFrameHandler: AnimationFrameHandler,\n    private app: App,\n  ) {\n    this.animationFrameHandler.register(this, this.onFrame.bind(this));\n\n    this.localTrail = new AnimatedTrail(animationFrameHandler, app, {\n      ...this.getTrailOptions(),\n      fill: () => DEFAULT_LASER_COLOR,\n    });\n  }\n\n  private getTrailOptions() {\n    return {\n      simplify: 0,\n      streamline: 0.4,\n      sizeMapping: (c) => {\n        const DECAY_TIME = 1000;\n        const DECAY_LENGTH = 50;\n        const t = Math.max(\n          0,\n          1 - (performance.now() - c.pressure) / DECAY_TIME,\n        );\n        const l =\n          (DECAY_LENGTH -\n            Math.min(DECAY_LENGTH, c.totalLength - c.currentIndex)) /\n          DECAY_LENGTH;\n\n        return Math.min(easeOut(l), easeOut(t));\n      },\n    } as Partial<LaserPointerOptions>;\n  }\n\n  startPath(x: number, y: number): void {\n    this.localTrail.startPath(x, y);\n  }\n\n  addPointToPath(x: number, y: number): void {\n    this.localTrail.addPointToPath(x, y);\n  }\n\n  endPath(): void {\n    this.localTrail.endPath();\n  }\n\n  start(container: SVGSVGElement) {\n    this.container = container;\n\n    this.animationFrameHandler.start(this);\n    this.localTrail.start(container);\n  }\n\n  stop() {\n    this.animationFrameHandler.stop(this);\n    this.localTrail.stop();\n  }\n\n  onFrame() {\n    this.updateCollabTrails();\n  }\n\n  private updateCollabTrails() {\n    if (!this.container || this.app.state.collaborators.size === 0) {\n      return;\n    }\n\n    for (const [key, collaborator] of this.app.state.collaborators.entries()) {\n      let trail!: AnimatedTrail;\n\n      if (!this.collabTrails.has(key)) {\n        trail = new AnimatedTrail(this.animationFrameHandler, this.app, {\n          ...this.getTrailOptions(),\n          fill: () =>\n            collaborator.pointer?.laserColor ||\n            getClientColor(key, collaborator),\n        });\n        trail.start(this.container);\n\n        this.collabTrails.set(key, trail);\n      } else {\n        trail = this.collabTrails.get(key)!;\n      }\n\n      if (collaborator.pointer && collaborator.pointer.tool === \"laser\") {\n        if (collaborator.button === \"down\" && !trail.hasCurrentTrail) {\n          trail.startPath(collaborator.pointer.x, collaborator.pointer.y);\n        }\n\n        if (\n          collaborator.button === \"down\" &&\n          trail.hasCurrentTrail &&\n          !trail.hasLastPoint(collaborator.pointer.x, collaborator.pointer.y)\n        ) {\n          trail.addPointToPath(collaborator.pointer.x, collaborator.pointer.y);\n        }\n\n        if (collaborator.button === \"up\" && trail.hasCurrentTrail) {\n          trail.addPointToPath(collaborator.pointer.x, collaborator.pointer.y);\n          trail.endPath();\n        }\n      }\n    }\n\n    for (const key of this.collabTrails.keys()) {\n      if (!this.app.state.collaborators.has(key)) {\n        const trail = this.collabTrails.get(key)!;\n        trail.stop();\n        this.collabTrails.delete(key);\n      }\n    }\n  }\n}\n", "import { CODES, KEYS } from \"../keys\";\nimport {\n  isWritableElement,\n  getFontString,\n  getFontFamilyString,\n  isTestEnv,\n} from \"../utils\";\nimport Scene from \"../scene/Scene\";\nimport {\n  isArrowElement,\n  isBoundToContainer,\n  isTextElement,\n} from \"./typeChecks\";\nimport { CLASSES, POINTER_BUTTON } from \"../constants\";\nimport type {\n  ExcalidrawElement,\n  ExcalidrawLinearElement,\n  ExcalidrawTextElementWithContainer,\n  ExcalidrawTextElement,\n} from \"./types\";\nimport type { AppState } from \"../types\";\nimport { bumpVersion, mutateElement } from \"./mutateElement\";\nimport {\n  getBoundTextElementId,\n  getContainerElement,\n  getTextElementAngle,\n  redrawTextBoundingBox,\n  getBoundTextMaxHeight,\n  getBoundTextMaxWidth,\n  computeContainerDimensionForBoundText,\n  computeBoundTextPosition,\n  getBoundTextElement,\n} from \"./textElement\";\nimport { wrapText } from \"./textWrapping\";\nimport {\n  actionDecreaseFontSize,\n  actionIncreaseFontSize,\n} from \"../actions/actionProperties\";\nimport {\n  actionResetZoom,\n  actionZoomIn,\n  actionZoomOut,\n} from \"../actions/actionCanvas\";\nimport type App from \"../components/App\";\nimport { LinearElementEditor } from \"./linearElementEditor\";\nimport { parseClipboard } from \"../clipboard\";\nimport {\n  originalContainerCache,\n  updateOriginalContainerCache,\n} from \"./containerCache\";\nimport { getTextWidth } from \"./textMeasurements\";\nimport { normalizeText } from \"./textMeasurements\";\n\nconst getTransform = (\n  width: number,\n  height: number,\n  angle: number,\n  appState: AppState,\n  maxWidth: number,\n  maxHeight: number,\n) => {\n  const { zoom } = appState;\n  const degree = (180 * angle) / Math.PI;\n  let translateX = (width * (zoom.value - 1)) / 2;\n  let translateY = (height * (zoom.value - 1)) / 2;\n  if (width > maxWidth && zoom.value !== 1) {\n    translateX = (maxWidth * (zoom.value - 1)) / 2;\n  }\n  if (height > maxHeight && zoom.value !== 1) {\n    translateY = (maxHeight * (zoom.value - 1)) / 2;\n  }\n  return `translate(${translateX}px, ${translateY}px) scale(${zoom.value}) rotate(${degree}deg)`;\n};\n\nexport const textWysiwyg = ({\n  id,\n  onChange,\n  onSubmit,\n  getViewportCoords,\n  element,\n  canvas,\n  excalidrawContainer,\n  app,\n  autoSelect = true,\n}: {\n  id: ExcalidrawElement[\"id\"];\n  /**\n   * textWysiwyg only deals with `originalText`\n   *\n   * Note: `text`, which can be wrapped and therefore different from `originalText`,\n   *       is derived from `originalText`\n   */\n  onChange?: (nextOriginalText: string) => void;\n  onSubmit: (data: { viaKeyboard: boolean; nextOriginalText: string }) => void;\n  getViewportCoords: (x: number, y: number) => [number, number];\n  element: ExcalidrawTextElement;\n  canvas: HTMLCanvasElement;\n  excalidrawContainer: HTMLDivElement | null;\n  app: App;\n  autoSelect?: boolean;\n}) => {\n  const textPropertiesUpdated = (\n    updatedTextElement: ExcalidrawTextElement,\n    editable: HTMLTextAreaElement,\n  ) => {\n    if (!editable.style.fontFamily || !editable.style.fontSize) {\n      return false;\n    }\n    const currentFont = editable.style.fontFamily.replace(/\"/g, \"\");\n    if (\n      getFontFamilyString({ fontFamily: updatedTextElement.fontFamily }) !==\n      currentFont\n    ) {\n      return true;\n    }\n    if (`${updatedTextElement.fontSize}px` !== editable.style.fontSize) {\n      return true;\n    }\n    return false;\n  };\n\n  const updateWysiwygStyle = () => {\n    const appState = app.state;\n    const updatedTextElement =\n      Scene.getScene(element)?.getElement<ExcalidrawTextElement>(id);\n\n    if (!updatedTextElement) {\n      return;\n    }\n    const { textAlign, verticalAlign } = updatedTextElement;\n    const elementsMap = app.scene.getNonDeletedElementsMap();\n    if (updatedTextElement && isTextElement(updatedTextElement)) {\n      let coordX = updatedTextElement.x;\n      let coordY = updatedTextElement.y;\n      const container = getContainerElement(\n        updatedTextElement,\n        app.scene.getNonDeletedElementsMap(),\n      );\n\n      let width = updatedTextElement.width;\n\n      // set to element height by default since that's\n      // what is going to be used for unbounded text\n      let height = updatedTextElement.height;\n\n      let maxWidth = updatedTextElement.width;\n      let maxHeight = updatedTextElement.height;\n\n      if (container && updatedTextElement.containerId) {\n        if (isArrowElement(container)) {\n          const boundTextCoords =\n            LinearElementEditor.getBoundTextElementPosition(\n              container,\n              updatedTextElement as ExcalidrawTextElementWithContainer,\n              elementsMap,\n            );\n          coordX = boundTextCoords.x;\n          coordY = boundTextCoords.y;\n        }\n        const propertiesUpdated = textPropertiesUpdated(\n          updatedTextElement,\n          editable,\n        );\n\n        let originalContainerData;\n        if (propertiesUpdated) {\n          originalContainerData = updateOriginalContainerCache(\n            container.id,\n            container.height,\n          );\n        } else {\n          originalContainerData = originalContainerCache[container.id];\n          if (!originalContainerData) {\n            originalContainerData = updateOriginalContainerCache(\n              container.id,\n              container.height,\n            );\n          }\n        }\n\n        maxWidth = getBoundTextMaxWidth(container, updatedTextElement);\n\n        maxHeight = getBoundTextMaxHeight(\n          container,\n          updatedTextElement as ExcalidrawTextElementWithContainer,\n        );\n\n        // autogrow container height if text exceeds\n        if (!isArrowElement(container) && height > maxHeight) {\n          const targetContainerHeight = computeContainerDimensionForBoundText(\n            height,\n            container.type,\n          );\n\n          mutateElement(container, { height: targetContainerHeight });\n          return;\n        } else if (\n          // autoshrink container height until original container height\n          // is reached when text is removed\n          !isArrowElement(container) &&\n          container.height > originalContainerData.height &&\n          height < maxHeight\n        ) {\n          const targetContainerHeight = computeContainerDimensionForBoundText(\n            height,\n            container.type,\n          );\n          mutateElement(container, { height: targetContainerHeight });\n        } else {\n          const { y } = computeBoundTextPosition(\n            container,\n            updatedTextElement as ExcalidrawTextElementWithContainer,\n            elementsMap,\n          );\n          coordY = y;\n        }\n      }\n      const [viewportX, viewportY] = getViewportCoords(coordX, coordY);\n      const initialSelectionStart = editable.selectionStart;\n      const initialSelectionEnd = editable.selectionEnd;\n      const initialLength = editable.value.length;\n\n      // restore cursor position after value updated so it doesn't\n      // go to the end of text when container auto expanded\n      if (\n        initialSelectionStart === initialSelectionEnd &&\n        initialSelectionEnd !== initialLength\n      ) {\n        // get diff between length and selection end and shift\n        // the cursor by \"diff\" times to position correctly\n        const diff = initialLength - initialSelectionEnd;\n        editable.selectionStart = editable.value.length - diff;\n        editable.selectionEnd = editable.value.length - diff;\n      }\n\n      if (!container) {\n        maxWidth = (appState.width - 8 - viewportX) / appState.zoom.value;\n        width = Math.min(width, maxWidth);\n      } else {\n        width += 0.5;\n      }\n\n      // add 5% buffer otherwise it causes wysiwyg to jump\n      height *= 1.05;\n\n      const font = getFontString(updatedTextElement);\n\n      // Make sure text editor height doesn't go beyond viewport\n      const editorMaxHeight =\n        (appState.height - viewportY) / appState.zoom.value;\n      Object.assign(editable.style, {\n        font,\n        // must be defined *after* font \u00AF\\_(\u30C4)_/\u00AF\n        lineHeight: updatedTextElement.lineHeight,\n        width: `${width}px`,\n        height: `${height}px`,\n        left: `${viewportX}px`,\n        top: `${viewportY}px`,\n        transform: getTransform(\n          width,\n          height,\n          getTextElementAngle(updatedTextElement, container),\n          appState,\n          maxWidth,\n          editorMaxHeight,\n        ),\n        textAlign,\n        verticalAlign,\n        color: updatedTextElement.strokeColor,\n        opacity: updatedTextElement.opacity / 100,\n        filter: \"var(--theme-filter)\",\n        maxHeight: `${editorMaxHeight}px`,\n      });\n      editable.scrollTop = 0;\n      // For some reason updating font attribute doesn't set font family\n      // hence updating font family explicitly for test environment\n      if (isTestEnv()) {\n        editable.style.fontFamily = getFontFamilyString(updatedTextElement);\n      }\n\n      mutateElement(updatedTextElement, { x: coordX, y: coordY });\n    }\n  };\n\n  const editable = document.createElement(\"textarea\");\n\n  editable.dir = \"auto\";\n  editable.tabIndex = 0;\n  editable.dataset.type = \"wysiwyg\";\n  // prevent line wrapping on Safari\n  editable.wrap = \"off\";\n  editable.classList.add(\"excalidraw-wysiwyg\");\n\n  let whiteSpace = \"pre\";\n  let wordBreak = \"normal\";\n\n  if (isBoundToContainer(element) || !element.autoResize) {\n    whiteSpace = \"pre-wrap\";\n    wordBreak = \"break-word\";\n  }\n  Object.assign(editable.style, {\n    position: \"absolute\",\n    display: \"inline-block\",\n    minHeight: \"1em\",\n    backfaceVisibility: \"hidden\",\n    margin: 0,\n    padding: 0,\n    border: 0,\n    outline: 0,\n    resize: \"none\",\n    background: \"transparent\",\n    overflow: \"hidden\",\n    // must be specified because in dark mode canvas creates a stacking context\n    zIndex: \"var(--zIndex-wysiwyg)\",\n    wordBreak,\n    // prevent line wrapping (`whitespace: nowrap` doesn't work on FF)\n    whiteSpace,\n    overflowWrap: \"break-word\",\n    boxSizing: \"content-box\",\n  });\n  editable.value = element.originalText;\n  updateWysiwygStyle();\n\n  if (onChange) {\n    editable.onpaste = async (event) => {\n      const clipboardData = await parseClipboard(event, true);\n      if (!clipboardData.text) {\n        return;\n      }\n      const data = normalizeText(clipboardData.text);\n      if (!data) {\n        return;\n      }\n      const container = getContainerElement(\n        element,\n        app.scene.getNonDeletedElementsMap(),\n      );\n\n      const font = getFontString({\n        fontSize: app.state.currentItemFontSize,\n        fontFamily: app.state.currentItemFontFamily,\n      });\n      if (container) {\n        const boundTextElement = getBoundTextElement(\n          container,\n          app.scene.getNonDeletedElementsMap(),\n        );\n        const wrappedText = wrapText(\n          `${editable.value}${data}`,\n          font,\n          getBoundTextMaxWidth(container, boundTextElement),\n        );\n        const width = getTextWidth(wrappedText, font);\n        editable.style.width = `${width}px`;\n      }\n    };\n\n    editable.oninput = () => {\n      const normalized = normalizeText(editable.value);\n      if (editable.value !== normalized) {\n        const selectionStart = editable.selectionStart;\n        editable.value = normalized;\n        // put the cursor at some position close to where it was before\n        // normalization (otherwise it'll end up at the end of the text)\n        editable.selectionStart = selectionStart;\n        editable.selectionEnd = selectionStart;\n      }\n      onChange(editable.value);\n    };\n  }\n\n  editable.onkeydown = (event) => {\n    if (!event.shiftKey && actionZoomIn.keyTest(event)) {\n      event.preventDefault();\n      app.actionManager.executeAction(actionZoomIn);\n      updateWysiwygStyle();\n    } else if (!event.shiftKey && actionZoomOut.keyTest(event)) {\n      event.preventDefault();\n      app.actionManager.executeAction(actionZoomOut);\n      updateWysiwygStyle();\n    } else if (!event.shiftKey && actionResetZoom.keyTest(event)) {\n      event.preventDefault();\n      app.actionManager.executeAction(actionResetZoom);\n      updateWysiwygStyle();\n    } else if (actionDecreaseFontSize.keyTest(event)) {\n      app.actionManager.executeAction(actionDecreaseFontSize);\n    } else if (actionIncreaseFontSize.keyTest(event)) {\n      app.actionManager.executeAction(actionIncreaseFontSize);\n    } else if (event.key === KEYS.ESCAPE) {\n      event.preventDefault();\n      submittedViaKeyboard = true;\n      handleSubmit();\n    } else if (event.key === KEYS.ENTER && event[KEYS.CTRL_OR_CMD]) {\n      event.preventDefault();\n      if (event.isComposing || event.keyCode === 229) {\n        return;\n      }\n      submittedViaKeyboard = true;\n      handleSubmit();\n    } else if (\n      event.key === KEYS.TAB ||\n      (event[KEYS.CTRL_OR_CMD] &&\n        (event.code === CODES.BRACKET_LEFT ||\n          event.code === CODES.BRACKET_RIGHT))\n    ) {\n      event.preventDefault();\n      if (event.isComposing) {\n        return;\n      } else if (event.shiftKey || event.code === CODES.BRACKET_LEFT) {\n        outdent();\n      } else {\n        indent();\n      }\n      // We must send an input event to resize the element\n      editable.dispatchEvent(new Event(\"input\"));\n    }\n  };\n\n  const TAB_SIZE = 4;\n  const TAB = \" \".repeat(TAB_SIZE);\n  const RE_LEADING_TAB = new RegExp(`^ {1,${TAB_SIZE}}`);\n  const indent = () => {\n    const { selectionStart, selectionEnd } = editable;\n    const linesStartIndices = getSelectedLinesStartIndices();\n\n    let value = editable.value;\n    linesStartIndices.forEach((startIndex: number) => {\n      const startValue = value.slice(0, startIndex);\n      const endValue = value.slice(startIndex);\n\n      value = `${startValue}${TAB}${endValue}`;\n    });\n\n    editable.value = value;\n\n    editable.selectionStart = selectionStart + TAB_SIZE;\n    editable.selectionEnd = selectionEnd + TAB_SIZE * linesStartIndices.length;\n  };\n\n  const outdent = () => {\n    const { selectionStart, selectionEnd } = editable;\n    const linesStartIndices = getSelectedLinesStartIndices();\n    const removedTabs: number[] = [];\n\n    let value = editable.value;\n    linesStartIndices.forEach((startIndex) => {\n      const tabMatch = value\n        .slice(startIndex, startIndex + TAB_SIZE)\n        .match(RE_LEADING_TAB);\n\n      if (tabMatch) {\n        const startValue = value.slice(0, startIndex);\n        const endValue = value.slice(startIndex + tabMatch[0].length);\n\n        // Delete a tab from the line\n        value = `${startValue}${endValue}`;\n        removedTabs.push(startIndex);\n      }\n    });\n\n    editable.value = value;\n\n    if (removedTabs.length) {\n      if (selectionStart > removedTabs[removedTabs.length - 1]) {\n        editable.selectionStart = Math.max(\n          selectionStart - TAB_SIZE,\n          removedTabs[removedTabs.length - 1],\n        );\n      } else {\n        // If the cursor is before the first tab removed, ex:\n        // Line| #1\n        //     Line #2\n        // Lin|e #3\n        // we should reset the selectionStart to his initial value.\n        editable.selectionStart = selectionStart;\n      }\n      editable.selectionEnd = Math.max(\n        editable.selectionStart,\n        selectionEnd - TAB_SIZE * removedTabs.length,\n      );\n    }\n  };\n\n  /**\n   * @returns indices of start positions of selected lines, in reverse order\n   */\n  const getSelectedLinesStartIndices = () => {\n    let { selectionStart, selectionEnd, value } = editable;\n\n    // chars before selectionStart on the same line\n    const startOffset = value.slice(0, selectionStart).match(/[^\\n]*$/)![0]\n      .length;\n    // put caret at the start of the line\n    selectionStart = selectionStart - startOffset;\n\n    const selected = value.slice(selectionStart, selectionEnd);\n\n    return selected\n      .split(\"\\n\")\n      .reduce(\n        (startIndices, line, idx, lines) =>\n          startIndices.concat(\n            idx\n              ? // curr line index is prev line's start + prev line's length + \\n\n                startIndices[idx - 1] + lines[idx - 1].length + 1\n              : // first selected line\n                selectionStart,\n          ),\n        [] as number[],\n      )\n      .reverse();\n  };\n\n  const stopEvent = (event: Event) => {\n    if (event.target instanceof HTMLCanvasElement) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  // using a state variable instead of passing it to the handleSubmit callback\n  // so that we don't need to create separate a callback for event handlers\n  let submittedViaKeyboard = false;\n  const handleSubmit = () => {\n    // prevent double submit\n    if (isDestroyed) {\n      return;\n    }\n    isDestroyed = true;\n    // cleanup must be run before onSubmit otherwise when app blurs the wysiwyg\n    // it'd get stuck in an infinite loop of blur\u2192onSubmit after we re-focus the\n    // wysiwyg on update\n    cleanup();\n    const updateElement = Scene.getScene(element)?.getElement(\n      element.id,\n    ) as ExcalidrawTextElement;\n    if (!updateElement) {\n      return;\n    }\n    const container = getContainerElement(\n      updateElement,\n      app.scene.getNonDeletedElementsMap(),\n    );\n\n    if (container) {\n      if (editable.value.trim()) {\n        const boundTextElementId = getBoundTextElementId(container);\n        if (!boundTextElementId || boundTextElementId !== element.id) {\n          mutateElement(container, {\n            boundElements: (container.boundElements || []).concat({\n              type: \"text\",\n              id: element.id,\n            }),\n          });\n        } else if (isArrowElement(container)) {\n          // updating an arrow label may change bounds, prevent stale cache:\n          bumpVersion(container);\n        }\n      } else {\n        mutateElement(container, {\n          boundElements: container.boundElements?.filter(\n            (ele) =>\n              !isTextElement(\n                ele as ExcalidrawTextElement | ExcalidrawLinearElement,\n              ),\n          ),\n        });\n      }\n      redrawTextBoundingBox(\n        updateElement,\n        container,\n        app.scene.getNonDeletedElementsMap(),\n      );\n    }\n\n    onSubmit({\n      viaKeyboard: submittedViaKeyboard,\n      nextOriginalText: editable.value,\n    });\n  };\n\n  const cleanup = () => {\n    // remove events to ensure they don't late-fire\n    editable.onblur = null;\n    editable.oninput = null;\n    editable.onkeydown = null;\n\n    if (observer) {\n      observer.disconnect();\n    }\n\n    window.removeEventListener(\"resize\", updateWysiwygStyle);\n    window.removeEventListener(\"wheel\", stopEvent, true);\n    window.removeEventListener(\"pointerdown\", onPointerDown);\n    window.removeEventListener(\"pointerup\", bindBlurEvent);\n    window.removeEventListener(\"blur\", handleSubmit);\n    window.removeEventListener(\"beforeunload\", handleSubmit);\n    unbindUpdate();\n    unbindOnScroll();\n\n    editable.remove();\n  };\n\n  const bindBlurEvent = (event?: MouseEvent) => {\n    window.removeEventListener(\"pointerup\", bindBlurEvent);\n    // Deferred so that the pointerdown that initiates the wysiwyg doesn't\n    // trigger the blur on ensuing pointerup.\n    // Also to handle cases such as picking a color which would trigger a blur\n    // in that same tick.\n    const target = event?.target;\n\n    const isPropertiesTrigger =\n      target instanceof HTMLElement &&\n      target.classList.contains(\"properties-trigger\");\n\n    setTimeout(() => {\n      editable.onblur = handleSubmit;\n\n      // case: clicking on the same property \u2192 no change \u2192 no update \u2192 no focus\n      if (!isPropertiesTrigger) {\n        editable.focus();\n      }\n    });\n  };\n\n  const temporarilyDisableSubmit = () => {\n    editable.onblur = null;\n    window.addEventListener(\"pointerup\", bindBlurEvent);\n    // handle edge-case where pointerup doesn't fire e.g. due to user\n    // alt-tabbing away\n    window.addEventListener(\"blur\", handleSubmit);\n  };\n\n  // prevent blur when changing properties from the menu\n  const onPointerDown = (event: MouseEvent) => {\n    const target = event?.target;\n\n    // panning canvas\n    if (event.button === POINTER_BUTTON.WHEEL) {\n      // trying to pan by clicking inside text area itself -> handle here\n      if (target instanceof HTMLTextAreaElement) {\n        event.preventDefault();\n        app.handleCanvasPanUsingWheelOrSpaceDrag(event);\n      }\n      temporarilyDisableSubmit();\n      return;\n    }\n\n    const isPropertiesTrigger =\n      target instanceof HTMLElement &&\n      target.classList.contains(\"properties-trigger\");\n\n    if (\n      ((event.target instanceof HTMLElement ||\n        event.target instanceof SVGElement) &&\n        event.target.closest(\n          `.${CLASSES.SHAPE_ACTIONS_MENU}, .${CLASSES.ZOOM_ACTIONS}`,\n        ) &&\n        !isWritableElement(event.target)) ||\n      isPropertiesTrigger\n    ) {\n      temporarilyDisableSubmit();\n    } else if (\n      event.target instanceof HTMLCanvasElement &&\n      // Vitest simply ignores stopPropagation, capture-mode, or rAF\n      // so without introducing crazier hacks, nothing we can do\n      !isTestEnv()\n    ) {\n      // On mobile, blur event doesn't seem to always fire correctly,\n      // so we want to also submit on pointerdown outside the wysiwyg.\n      // Done in the next frame to prevent pointerdown from creating a new text\n      // immediately (if tools locked) so that users on mobile have chance\n      // to submit first (to hide virtual keyboard).\n      // Note: revisit if we want to differ this behavior on Desktop\n      requestAnimationFrame(() => {\n        handleSubmit();\n      });\n    }\n  };\n\n  // handle updates of textElement properties of editing element\n  const unbindUpdate = app.scene.onUpdate(() => {\n    updateWysiwygStyle();\n    const isPopupOpened = !!document.activeElement?.closest(\n      \".properties-content\",\n    );\n    if (!isPopupOpened) {\n      editable.focus();\n    }\n  });\n\n  const unbindOnScroll = app.onScrollChangeEmitter.on(() => {\n    updateWysiwygStyle();\n  });\n\n  // ---------------------------------------------------------------------------\n\n  let isDestroyed = false;\n\n  if (autoSelect) {\n    // select on init (focusing is done separately inside the bindBlurEvent()\n    // because we need it to happen *after* the blur event from `pointerdown`)\n    editable.select();\n  }\n  bindBlurEvent();\n\n  // reposition wysiwyg in case of canvas is resized. Using ResizeObserver\n  // is preferred so we catch changes from host, where window may not resize.\n  let observer: ResizeObserver | null = null;\n  if (canvas && \"ResizeObserver\" in window) {\n    observer = new window.ResizeObserver(() => {\n      updateWysiwygStyle();\n    });\n    observer.observe(canvas);\n  } else {\n    window.addEventListener(\"resize\", updateWysiwygStyle);\n  }\n\n  editable.onpointerdown = (event) => event.stopPropagation();\n\n  // rAF (+ capture to by doubly sure) so we don't catch te pointerdown that\n  // triggered the wysiwyg\n  requestAnimationFrame(() => {\n    window.addEventListener(\"pointerdown\", onPointerDown, { capture: true });\n  });\n  window.addEventListener(\"beforeunload\", handleSubmit);\n  excalidrawContainer\n    ?.querySelector(\".excalidraw-textEditorContainer\")!\n    .appendChild(editable);\n};\n", "import { isTextElement } from \"../element\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { measureText } from \"../element/textMeasurements\";\nimport { getSelectedElements } from \"../scene\";\nimport { CaptureUpdateAction } from \"../store\";\nimport type { AppClassProperties } from \"../types\";\nimport { getFontString } from \"../utils\";\nimport { register } from \"./register\";\n\nexport const actionTextAutoResize = register({\n  name: \"autoResize\",\n  label: \"labels.autoResize\",\n  icon: null,\n  trackEvent: { category: \"element\" },\n  predicate: (elements, appState, _: unknown, app: AppClassProperties) => {\n    const selectedElements = getSelectedElements(elements, appState);\n    return (\n      selectedElements.length === 1 &&\n      isTextElement(selectedElements[0]) &&\n      !selectedElements[0].autoResize\n    );\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = getSelectedElements(elements, appState);\n\n    return {\n      appState,\n      elements: elements.map((element) => {\n        if (element.id === selectedElements[0].id && isTextElement(element)) {\n          const metrics = measureText(\n            element.originalText,\n            getFontString(element),\n            element.lineHeight,\n          );\n\n          return newElementWith(element, {\n            autoResize: true,\n            width: metrics.width,\n            height: metrics.height,\n            text: element.originalText,\n          });\n        }\n        return element;\n      }),\n      captureUpdate: CaptureUpdateAction.IMMEDIATELY,\n    };\n  },\n});\n", "/** heuristically checks whether the text may be a mermaid diagram definition */\nexport const isMaybeMermaidDefinition = (text: string) => {\n  const chartTypes = [\n    \"flowchart\",\n    \"graph\",\n    \"sequenceDiagram\",\n    \"classDiagram\",\n    \"stateDiagram\",\n    \"stateDiagram-v2\",\n    \"erDiagram\",\n    \"journey\",\n    \"gantt\",\n    \"pie\",\n    \"quadrantChart\",\n    \"requirementDiagram\",\n    \"gitGraph\",\n    \"C4Context\",\n    \"mindmap\",\n    \"timeline\",\n    \"zenuml\",\n    \"sankey\",\n    \"xychart\",\n    \"block\",\n  ];\n\n  const re = new RegExp(\n    `^(?:%%{.*?}%%[\\\\s\\\\n]*)?\\\\b(?:${chartTypes\n      .map((x) => `\\\\s*${x}(-beta)?`)\n      .join(\"|\")})\\\\b`,\n  );\n\n  return re.test(text.trim());\n};\n", "import { useEffect, useRef } from \"react\";\nimport type { NonDeletedSceneElementsMap } from \"../../element/types\";\nimport type { AppState } from \"../../types\";\nimport type {\n  RenderableElementsMap,\n  StaticCanvasRenderConfig,\n} from \"../../scene/types\";\nimport type { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { renderNewElementScene } from \"../../renderer/renderNewElementScene\";\nimport { isRenderThrottlingEnabled } from \"../../reactUtils\";\n\ninterface NewElementCanvasProps {\n  appState: AppState;\n  elementsMap: RenderableElementsMap;\n  allElementsMap: NonDeletedSceneElementsMap;\n  scale: number;\n  rc: RoughCanvas;\n  renderConfig: StaticCanvasRenderConfig;\n}\n\nconst NewElementCanvas = (props: NewElementCanvasProps) => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n    renderNewElementScene(\n      {\n        canvas: canvasRef.current,\n        scale: props.scale,\n        newElement: props.appState.newElement,\n        elementsMap: props.elementsMap,\n        allElementsMap: props.allElementsMap,\n        rc: props.rc,\n        renderConfig: props.renderConfig,\n        appState: props.appState,\n      },\n      isRenderThrottlingEnabled(),\n    );\n  });\n\n  return (\n    <canvas\n      className=\"excalidraw__canvas\"\n      style={{\n        width: props.appState.width,\n        height: props.appState.height,\n      }}\n      width={props.appState.width * props.scale}\n      height={props.appState.height * props.scale}\n      ref={canvasRef}\n    />\n  );\n};\n\nexport default NewElementCanvas;\n", "import type { NewElementSceneRenderConfig } from \"../scene/types\";\nimport { throttleRAF } from \"../utils\";\nimport { bootstrapCanvas, getNormalizedCanvasDimensions } from \"./helpers\";\nimport { renderElement } from \"./renderElement\";\n\nconst _renderNewElementScene = ({\n  canvas,\n  rc,\n  newElement,\n  elementsMap,\n  allElementsMap,\n  scale,\n  appState,\n  renderConfig,\n}: NewElementSceneRenderConfig) => {\n  if (canvas) {\n    const [normalizedWidth, normalizedHeight] = getNormalizedCanvasDimensions(\n      canvas,\n      scale,\n    );\n\n    const context = bootstrapCanvas({\n      canvas,\n      scale,\n      normalizedWidth,\n      normalizedHeight,\n    });\n\n    // Apply zoom\n    context.save();\n    context.scale(appState.zoom.value, appState.zoom.value);\n\n    if (newElement && newElement.type !== \"selection\") {\n      renderElement(\n        newElement,\n        elementsMap,\n        allElementsMap,\n        rc,\n        context,\n        renderConfig,\n        appState,\n      );\n    } else {\n      context.clearRect(0, 0, normalizedWidth, normalizedHeight);\n    }\n  }\n};\n\nexport const renderNewElementSceneThrottled = throttleRAF(\n  (config: NewElementSceneRenderConfig) => {\n    _renderNewElementScene(config);\n  },\n  { trailing: true },\n);\n\nexport const renderNewElementScene = (\n  renderConfig: NewElementSceneRenderConfig,\n  throttle?: boolean,\n) => {\n  if (throttle) {\n    renderNewElementSceneThrottled(renderConfig);\n    return;\n  }\n\n  _renderNewElementScene(renderConfig);\n};\n", "const polyfill = () => {\n  if (!Array.prototype.at) {\n    // Taken from https://github.com/tc39/proposal-relative-indexing-method#polyfill so that it works in tests\n    /* eslint-disable */\n    Object.defineProperty(Array.prototype, \"at\", {\n      value: function (n: number) {\n        // ToInteger() abstract op\n        n = Math.trunc(n) || 0;\n        // Allow negative indexing from the end\n        if (n < 0) {\n          n += this.length;\n        }\n        // OOB access is guaranteed to return undefined\n        if (n < 0 || n >= this.length) {\n          return undefined;\n        }\n        // Otherwise, this is just normal property access\n        return this[n];\n      },\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n  }\n\n  if (!Element.prototype.replaceChildren) {\n    Element.prototype.replaceChildren = function (...nodes) {\n      this.innerHTML = \"\";\n      this.append(...nodes);\n    };\n  }\n};\nexport default polyfill;\n", "import clsx from \"clsx\";\nimport { useTunnels } from \"../../context/tunnels\";\nimport \"./FooterCenter.scss\";\nimport { useUIAppState } from \"../../context/ui-appState\";\n\nconst FooterCenter = ({ children }: { children?: React.ReactNode }) => {\n  const { FooterCenterTunnel } = useTunnels();\n  const appState = useUIAppState();\n  return (\n    <FooterCenterTunnel.In>\n      <div\n        className={clsx(\"footer-center zen-mode-transition\", {\n          \"layer-ui__wrapper__footer-left--transition-bottom\":\n            appState.zenModeEnabled,\n        })}\n      >\n        {children}\n      </div>\n    </FooterCenterTunnel.In>\n  );\n};\n\nexport default FooterCenter;\nFooterCenter.displayName = \"FooterCenter\";\n", "import \"./ExcalidrawLogo.scss\";\n\nconst LogoIcon = () => (\n  <svg\n    viewBox=\"0 0 40 40\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"ExcalidrawLogo-icon\"\n  >\n    <path\n      d=\"M39.9 32.889a.326.326 0 0 0-.279-.056c-2.094-3.083-4.774-6-7.343-8.833l-.419-.472a.212.212 0 0 0-.056-.139.586.586 0 0 0-.167-.111l-.084-.083-.056-.056c-.084-.167-.28-.278-.475-.167-.782.39-1.507.973-2.206 1.528-.92.722-1.842 1.445-2.708 2.25a8.405 8.405 0 0 0-.977 1.028c-.14.194-.028.361.14.444-.615.611-1.23 1.223-1.843 1.861a.315.315 0 0 0-.084.223c0 .083.056.166.111.194l1.09.833v.028c1.535 1.528 4.244 3.611 7.12 5.861.418.334.865.667 1.284 1 .195.223.39.473.558.695.084.11.28.139.391.055.056.056.14.111.196.167a.398.398 0 0 0 .167.056.255.255 0 0 0 .224-.111.394.394 0 0 0 .055-.167c.029 0 .028.028.056.028a.318.318 0 0 0 .224-.084l5.082-5.528a.309.309 0 0 0 0-.444Zm-14.63-1.917a.485.485 0 0 0 .111.14c.586.5 1.2 1 1.843 1.555l-2.569-1.945-.251-.166c-.056-.028-.112-.084-.168-.111l-.195-.167.056-.056.055-.055.112-.111c.866-.861 2.346-2.306 3.1-3.028-.81.805-2.43 3.167-2.095 3.944Zm8.767 6.89-2.122-1.612a44.713 44.713 0 0 0-2.625-2.5c1.145.861 2.122 1.611 2.262 1.75 1.117.972 1.06.806 1.815 1.445l.921.666a1.06 1.06 0 0 1-.251.25Zm.558.416-.056-.028c.084-.055.168-.111.252-.194l-.196.222ZM1.089 5.75c.055.361.14.722.195 1.056.335 1.833.67 3.5 1.284 4.75l.252.944c.084.361.223.806.363.917 1.424 1.25 3.602 3.11 5.947 4.889a.295.295 0 0 0 .363 0s0 .027.028.027a.254.254 0 0 0 .196.084.318.318 0 0 0 .223-.084c2.988-3.305 5.221-6.027 6.813-8.305.112-.111.14-.278.14-.417.111-.111.195-.25.307-.333.111-.111.111-.306 0-.39l-.028-.027c0-.055-.028-.139-.084-.167-.698-.666-1.2-1.138-1.731-1.638-.922-.862-1.871-1.75-3.881-3.75l-.028-.028c-.028-.028-.056-.056-.112-.056-.558-.194-1.703-.389-3.127-.639C6.087 2.223 3.21 1.723.614.944c0 0-.168 0-.196.028l-.083.084c-.028.027-.056.055-.224.11h.056-.056c.028.167.028.278.084.473 0 .055.112.5.112.555l.782 3.556Zm15.496 3.278-.335-.334c.084.112.196.195.335.334Zm-3.546 4.666-.056.056c0-.028.028-.056.056-.056Zm-2.038-10c.168.167.866.834 1.033.973-.726-.334-2.54-1.167-3.379-1.445.838.167 1.983.334 2.346.472ZM1.424 2.306c.419.722.754 3.222 1.089 5.666-.196-.778-.335-1.555-.503-2.278-.251-1.277-.503-2.416-.838-3.416.056 0 .14 0 .252.028Zm-.168-.584c-.112 0-.223-.028-.307-.028 0-.027 0-.055-.028-.055.14 0 .223.028.335.083Zm-1.089.222c0-.027 0-.027 0 0ZM39.453 1.333c.028-.11-.558-.61-.363-.639.42-.027.42-.666 0-.666-.558.028-1.144.166-1.675.25-.977.194-1.982.389-2.96.61-2.205.473-4.383.973-6.561 1.557-.67.194-1.424.333-2.066.666-.224.111-.196.333-.084.472-.056.028-.084.028-.14.056-.195.028-.363.056-.558.083-.168.028-.252.167-.224.334 0 .027.028.083.028.11-1.173 1.556-2.485 3.195-3.909 4.945-1.396 1.611-2.876 3.306-4.356 5.056-4.719 5.5-10.052 11.75-15.943 17.25a.268.268 0 0 0 0 .389c.028.027.056.055.084.055-.084.084-.168.14-.252.222-.056.056-.084.111-.084.167a.605.605 0 0 0-.111.139c-.112.111-.112.305.028.389.111.11.307.11.39-.028.029-.028.029-.056.056-.056a.44.44 0 0 1 .615 0c.335.362.67.723.977 1.028l-.698-.583c-.112-.111-.307-.083-.39.028-.113.11-.085.305.027.389l7.427 6.194c.056.056.112.056.196.056s.14-.028.195-.084l.168-.166c.028.027.083.027.111.027.084 0 .14-.027.196-.083 10.052-10.055 18.15-17.639 27.42-24.417.083-.055.111-.166.111-.25.112 0 .196-.083.251-.194 1.704-5.194 2.039-9.806 2.15-12.083v-.028c0-.028.028-.056.028-.083.028-.056.028-.084.028-.084a1.626 1.626 0 0 0-.111-1.028ZM21.472 9.5c.446-.5.893-1.028 1.34-1.5-2.876 3.778-7.65 9.583-14.408 16.5 4.607-5.083 9.242-10.333 13.068-15ZM5.193 35.778h.084-.084Zm3.462 3.194c-.027-.028-.027-.028 0-.028v.028Zm4.16-3.583c.224-.25.448-.472.699-.722 0 0 0 .027.028.027-.252.223-.475.445-.726.695Zm1.146-1.111c.14-.14.279-.334.446-.5l.028-.028c1.648-1.694 3.351-3.389 5.082-5.111l.028-.028c.419-.333.921-.694 1.368-1.028a379.003 379.003 0 0 0-6.952 6.695ZM24.794 6.472c-.921 1.195-1.954 2.778-2.82 4.028-2.736 3.944-11.532 13.583-11.727 13.75a1976.983 1976.983 0 0 1-8.042 7.639l-.167.167c-.14-.167-.14-.417.028-.556C14.49 19.861 22.03 10.167 25.074 5.917c-.084.194-.14.36-.28.555Zm4.83 5.695c-1.116-.64-1.646-1.64-1.34-2.611l.084-.334c.028-.083.084-.194.14-.277.307-.5.754-.917 1.257-1.167.027 0 .055 0 .083-.028-.028-.056-.028-.139-.028-.222.028-.167.14-.278.335-.278.335 0 1.369.306 1.76.639.111.083.223.194.335.305.14.167.363.445.474.667.056.028.112.306.196.445.056.222.111.472.084.694-.028.028 0 .194-.028.194a2.668 2.668 0 0 1-.363 1.028c-.028.028-.028.056-.056.084l-.028.027c-.14.223-.335.417-.53.556-.643.444-1.369.583-2.095.389 0 0-.195-.084-.28-.111Zm8.154-.834a39.098 39.098 0 0 1-.893 3.167c0 .028-.028.083 0 .111-.056 0-.084.028-.14.056-2.206 1.61-4.356 3.305-6.506 5.028 1.843-1.64 3.686-3.306 5.613-4.945.558-.5.949-1.139 1.06-1.861l.28-1.667v-.055c.14-.334.67-.195.586.166Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n\nconst LogoText = () => (\n  <svg\n    viewBox=\"0 0 450 55\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    className=\"ExcalidrawLogo-text\"\n  >\n    <path\n      d=\"M429.27 96.74c2.47-1.39 4.78-3.02 6.83-4.95 1.43-1.35 2.73-2.86 3.81-4.51-.66.9-1.4 1.77-2.23 2.59-2.91 2.84-5.72 5.09-8.42 6.87h.01ZM343.6 69.36c.33 3.13.58 6.27.79 9.4.09 1.37.18 2.75.25 4.12-.12-4.46-.27-8.93-.5-13.39-.11-2.08-.24-4.16-.4-6.24-.06 1.79-.11 3.85-.13 6.11h-.01ZM378.47 98.34c.01-.37.07-1.13.01-6.51-.11 1.9-.22 3.81-.31 5.71-.07 1.42-.22 2.91-.16 4.35.39.03.78.07 1.17.1-.92-.85-.76-2.01-.72-3.66l.01.01ZM344.09 86.12c-.09-2.41-.22-4.83-.39-7.24v12.21c.15-.05.32-.09.47-.14.05-1.61-.03-3.23-.09-4.83h.01ZM440.69 66.79c-.22-.34-.45-.67-.69-.99-3.71-4.87-9.91-7.14-15.65-8.55-1.05-.26-2.12-.49-3.18-.71 2.29.59 4.48 1.26 6.64 2.02 7.19 2.54 10.57 5.41 12.88 8.23ZM305.09 72.46l1.2 3.6c.84 2.53 1.67 5.06 2.46 7.61.24.78.5 1.57.73 2.36.22-.04.44-.08.67-.12a776.9 776.9 0 0 1-5.01-13.57c-.02.04-.03.09-.05.13v-.01ZM345.49 90.25v.31c1.48-.42 3.05-.83 4.66-1.2-1.56.25-3.12.52-4.66.89ZM371.02 90.22c0-.57-.04-1.14-.11-1.71-.06-.02-.12-.04-.19-.05-.21-.05-.43-.08-.65-.11.42.16.74.88.95 1.87ZM398.93 54.23c-.13 0-.27-.01-.4-.02l.03.4c.11-.15.23-.27.37-.38ZM401.57 62.28v-.15c-1.22-.24-2.86-.61-3.23-1.25-.09-.15-.18-.51-.27-.98-.09.37-.2.73-.33 1.09 1.24.56 2.52.98 3.83 1.29ZM421.73 88.68c-2.97 1.65-6.28 3.12-9.69 3.68v.18c4.72-.14 11.63-3.85 16.33-8.38-2.04 1.75-4.33 3.24-6.63 4.53l-.01-.01ZM411.28 80.92c-.05-1.2-.09-2.4-.15-3.6-.21 5.66-.46 11.38-.47 14.51.24-.02.48-.04.71-.07.15-3.61.05-7.23-.09-10.83v-.01Z\"\n      transform=\"translate(-144.023 -51.76)\"\n    />\n    <path\n      d=\"M425.38 67.41c-3.5-1.45-7.19-2.57-14.06-3.62.09 1.97.06 4.88-.03 8.12.03.04.06.09.06.15.19 1.36.28 2.73.37 4.1.25 3.77.39 7.55.41 11.33 0 1.38-.01 2.76-.07 4.13 1.4-.25 2.78-.65 4.12-1.15 4.07-1.5 7.94-3.78 11.28-6.54 2.33-1.92 5.13-4.49 5.88-7.58.63-3.53-2.45-6.68-7.97-8.96l.01.02ZM411.35 92.53v-.06l-.34.03c.11.01.22.03.34.03ZM314.26 64.06c-.23-.59-.47-1.17-.7-1.75.57 1.62 1.11 3.25 1.6 4.9l.15.54 2.35 6.05c.32.82.66 1.64.98 2.46-1.38-4.1-2.83-8.17-4.39-12.2h.01ZM156.82 103.07c-.18.13-.38.23-.58.33 1.32-.03 2.66-.2 3.93-.34.86-.09 1.72-.22 2.58-.33-2.12.1-4.12.17-5.94.34h.01ZM210.14 68.88s.03.04.05.07c.18-.31.39-.64.58-.96-.21.3-.42.6-.64.89h.01ZM201.65 82.8c-.5.77-1.02 1.56-1.49 2.37 1.11-1.55 2.21-3.1 3.2-4.59-.23.23-.49.51-.75.79-.32.47-.65.95-.96 1.43ZM194.03 98.66c-.33-.4-.65-.84-1.05-1.17-.24-.2-.07-.49.17-.56-.23-.26-.42-.5-.63-.75 1.51-2.55 3.93-5.87 6.4-9.28-.17-.08-.29-.28-.2-.49.04-.09.09-.17.13-.26-1.21 1.78-2.42 3.55-3.61 5.33-.87 1.31-1.74 2.64-2.54 4-.29.5-.63 1.04-.87 1.61.81.65 1.63 1.27 2.47 1.88-.09-.11-.18-.21-.27-.32v.01ZM307.79 82.93c-1-3.17-2.05-6.32-3.1-9.48-1.62 4.08-3.69 9.17-6.16 15.19 3.32-1.04 6.77-1.87 10.27-2.5-.32-1.08-.67-2.15-1.01-3.21ZM149.5 80.7c.05-1.71.04-3.43 0-5.14-.1 2.26-.16 4.51-.22 6.77-.02.73-.03 1.46-.04 2.19.14-1.27.2-2.55.24-3.82h.02ZM228.98 98.3c.39 1.25.91 3.03.94 3.91.06-.03.12-.07.17-.1.08-1.29-.55-2.65-1.11-3.81ZM307.72 53.36c.81.5 1.53 1.04 2.07 1.49-.38-.8-.78-1.58-1.21-2.35-.17.03-.34.06-.51.11-.43.12-.86.26-1.29.41.35-.01.53.1.94.34ZM283.69 96.14c3.91-7.25 6.89-13.35 8.88-18.15l1.1-2.66c-1.27 2.64-2.56 5.27-3.83 7.9-1.53 3.15-3.06 6.31-4.58 9.47-.87 1.81-1.76 3.62-2.54 5.47.04.02.07.04.11.07.05.05.1.09.15.14.05-.73.27-1.48.71-2.24ZM289.92 103.23s-.04.01-.05.03c0-.02.04-.03.05-.04.05-.05.11-.1.16-.15l.21-.21c-.55 0-1.5-.27-2.55-.72.4.26.8.51 1.22.74.24.13.48.26.73.37.05.02.1.03.14.05a.27.27 0 0 1 .08-.07h.01ZM269.23 68.49c-.39-.19-.82-.48-1.33-.87-3.06-1.56-6.31-2.78-9.36-2.35-3.5.49-5.7 1.11-7.74 2.44 5.71-2.6 12.82-2.07 18.44.79l-.01-.01ZM177.87 53.69l1.06.03c-.96-.22-2-.25-2.89-.3-4.95-.26-9.99.33-14.86 1.19-2.44.43-4.88.95-7.28 1.59 9.09-1.76 15.69-2.77 23.97-2.51ZM219.85 55.51c-.18.12-.36.27-.56.45-.45.53-.86 1.11-1.26 1.66-1.91 2.61-3.71 5.31-5.57 7.95l-.12.18 8.05-10.11c-.18-.05-.36-.1-.55-.13h.01ZM510.71 54.1c.12-.15.29-.3.53-.45.69-.4 3.72-.63 5.87-.74-.36-.02-.73-.04-1.09-.05-1.84-.03-3.67.09-5.49.35.05.3.12.59.18.88v.01ZM510.76 86.02c1.37-3.07 2.49-6.27 3.57-9.46.55-1.64 1.12-3.3 1.6-4.97-1.59 4.01-3.67 9.14-6.2 15.3.24-.08.5-.14.74-.22.1-.22.19-.44.29-.65ZM566.95 75.76c.11-.02.23.03.31.11-.05-.13-.09-.26-.14-.39-.05.09-.11.18-.17.28ZM511.33 86.41c3.08-.89 6.24-1.62 9.46-2.14-1.51-3.98-2.98-7.96-4.39-11.87-.05.15-.09.31-.14.46-1.02 3.32-2.15 6.61-3.39 9.85-.48 1.25-.98 2.49-1.53 3.7h-.01ZM578.24 74.45c.11-.44.23-.87.35-1.31-.31.7-.64 1.39-.97 2.08.09.21.19.4.28.61.12-.46.23-.92.35-1.38h-.01ZM520.62 53.11c-.09 0-.18-.01-.28-.02.38.34.29 1.08.93 2.53l6.65 17.15c2.2 5.68 4.69 11.36 7.41 16.87l1.06 2.17c-2.95-7.05-5.92-14.08-8.87-21.13-1.58-3.79-3.16-7.59-4.7-11.4-.78-1.92-1.73-3.89-2.25-5.91-.03-.1 0-.19.04-.26h.01ZM578.78 77.87c1.45-5.77 3.07-10.43 3.58-13.36.05-.34.16-.88.31-1.55-.67 1.79-1.37 3.56-2.08 5.33-.12.43-.23.86-.35 1.29-.65 2.43-1.29 4.86-1.9 7.3.14.33.29.65.43 1l.01-.01ZM545.3 94.66c.02-.44.03-.83.05-1.12.02-1.01.05-2.02.11-3.02.03-6.66-.46-14.33-1.46-22.8-.13-.42-.27-1.24-.56-2.89 0-.02 0-.04-.01-.06.62 6.61.95 13.25 1.32 19.87.17 3.08.33 6.16.52 9.23.02.25.03.52.04.78l-.01.01ZM580.77 102.81c.13.2.27.38.37.49.27-.11.53-.22.8-.32-.43.09-.82.05-1.17-.16v-.01ZM530.48 104.07h.33c-.36-.13-.71-.32-1.04-.56.14.24.3.47.45.7.06-.08.14-.13.26-.13v-.01ZM542.63 58.82c.06.23.11.47.15.71.14-.33.36-.62.7-.86-.28.05-.57.11-.85.15ZM583.81 57.87c.15-.7.29-1.41.42-2.11-.14.45-.28.9-.42 1.34-.46 1.44-.89 2.89-1.31 4.34.44-1.19.88-2.37 1.31-3.57ZM523.62 91.48c-4.66 1.17-9.05 2.89-14.02 5.27 4.65-1.84 9.48-3.29 14.28-4.63-.09-.22-.17-.41-.26-.64ZM460.64 78.3c-.04-2.9-.11-5.81-.28-8.71-.1-1.68-.17-3.43-.5-5.09-.07.02-.14.03-.2.05.3 6.54.45 12.17.51 17.12.17-.07.34-.14.51-.2 0-1.06-.01-2.11-.03-3.17h-.01ZM470.63 63.24c-3.38-.26-6.81.32-10.1 1.1.41 2.01.47 4.14.57 6.18.18 3.55.25 7.11.27 10.67 3.31-1.38 6.5-3.12 9.3-5.35 1.96-1.56 3.86-3.41 5.02-5.66.73-1.41 1.19-3.22.26-4.65-1.09-1.7-3.46-2.14-5.32-2.29ZM460.29 63.68c1-.24 2.01-.46 3.04-.65-1.15.16-2.37.38-3.71.69v.13c.07-.02.15-.04.22-.05.11-.13.3-.18.45-.11v-.01ZM457.24 100.96c.43-.03.86-.07 1.29-.11.14-.49.27-.99.38-1.49-.44.7-1 1.23-1.67 1.6ZM482.88 104.98c-.18.23-.36.38-.55.47.14.09.27.19.4.28a70.76 70.76 0 0 0 4.37-4.63c.76-.89 1.52-1.81 2.19-2.77-.3-.27-.61-.53-.92-.79-.07 1.94-4.62 6.32-5.49 7.45v-.01Z\"\n      transform=\"translate(-144.023 -51.76)\"\n    />\n    <path\n      d=\"M474.36 63.31c-.4-.16-.84-.27-1.29-.37 1.56.42 3.08 1.22 3.76 2.74.62 1.4.32 2.95-.28 4.32.7-1.22.94-2.34.74-3.47-.24-1.33-1.19-2.54-2.93-3.21v-.01ZM477.34 89.18c-1.2-.81-2.4-1.62-3.6-2.42-.14.1-.26.19-.4.29 1.4.67 2.73 1.39 4 2.13ZM465.88 93.85c.37.25.74.5 1.1.75.46.32.92.65 1.38.97-1.57-1.2-2.01-1.61-2.49-1.72h.01ZM574.92 90.06c-2.28-5.21-4.93-11.13-5.67-12.26-.1-.15-1.57-3.01-1.63-3.08 0 0-.01.02-.02.02.4 1.37 1.09 2.69 1.65 3.99 2.14 4.95 4.36 9.86 6.67 14.73.6 1.26 1.21 2.52 1.83 3.78-.75-2.01-1.64-4.45-2.83-7.18ZM448.73 65.29c.1.2.22.38.34.57.22-.02.43-.06.65-.08v-.08c-.14-.05-.25 0-.99-.41ZM460.16 94.81c-.02.31-.06.59-.1.89-.03 1.71-.33 3.43-.79 5.07.15-.02.3-.03.45-.05.01-.04.02-.08.03-.11.09-.34.15-.69.2-1.03.17-1.07.25-2.16.33-3.24.05-.69.08-1.39.12-2.08-.27.1-.27.26-.24.57v-.02Z\"\n      transform=\"translate(-144.023 -51.76)\"\n    />\n    <path\n      d=\"m328.67 98.12-3.22-6.58c-1.29-2.63-2.53-5.29-3.72-7.97-.25-.85-.52-1.69-.79-2.53-.81-2.57-1.67-5.12-2.55-7.67-1.92-5.53-3.9-11.08-6.32-16.41-.72-1.58-1.46-3.44-2.63-4.79-.03-.17-.16-.29-.34-.36a.282.282 0 0 0-.23-.04c-.06-.01-.12 0-.18.01-.74.06-1.5.38-2.19.61-2.22.77-4.4 1.64-6.63 2.38-.03-.08-.06-.16-.09-.25-.15-.42-.82-.24-.67.19.03.09.07.19.1.28l-.18.06c-.36.11-.28.6 0 .68.18 1.18.63 2.36.98 3.49.03.09.06.17.08.26-.08.23-.17.46-.24.64-.37.98-.79 1.94-1.21 2.9-1.27 2.89-2.62 5.75-3.98 8.6-3.18 6.67-6.44 13.31-9.64 19.97-1.08 2.25-2.2 4.5-3.15 6.81-.13.32.24.5.5.37 1.34 1.33 2.84 2.5 4.4 3.57.65.44 1.31.87 2.01 1.24.4.22.86.48 1.33.5.24.01.35-.19.33-.37.11-.1.21-.21.28-.28.41-.41.81-.84 1.2-1.26.85-.92 1.69-1.87 2.5-2.84 6.31-2.34 12.6-4.31 18.71-5.84 2.14 5.3 3.43 8.43 3.97 9.58.55 1.05 1.15 1.88 1.82 2.52 1.32.56 6.96-.03 9.23-1.96.87-1.28 1.19-2.67.93-4.15-.09-.5-.22-.95-.4-1.33l-.01-.03Zm-20.09-45.61c.43.77.83 1.56 1.21 2.35-.54-.45-1.27-.99-2.07-1.49-.42-.24-.6-.35-.94-.34.43-.15.85-.29 1.29-.41.17-.05.34-.08.51-.11Zm-25.86 45.66c.78-1.85 1.67-3.66 2.54-5.47 1.51-3.16 3.05-6.31 4.58-9.47 1.28-2.63 2.56-5.26 3.83-7.9l-1.1 2.66c-1.99 4.79-4.97 10.9-8.88 18.15-.43.76-.66 1.51-.71 2.24-.05-.05-.1-.09-.15-.14a.259.259 0 0 0-.11-.07Zm6.24 4.71c-.42-.23-.82-.48-1.22-.74 1.05.45 2 .72 2.55.72l-.21.21c-.05.05-.11.1-.16.15-.01.01-.04.03-.05.04 0-.02.03-.02.05-.03a.27.27 0 0 0-.08.07c-.05-.02-.1-.03-.14-.05-.25-.1-.49-.24-.73-.37h-.01Zm15.73-29.43c1.05 3.15 2.1 6.31 3.1 9.48.34 1.06.69 2.13 1.01 3.21-3.5.63-6.95 1.46-10.27 2.5 2.48-6.03 4.54-11.11 6.16-15.19Zm4.79 12.57c-.23-.79-.49-1.58-.73-2.36-.79-2.54-1.63-5.08-2.46-7.61l-1.2-3.6c.02-.04.04-.09.05-.13 1.6 4.45 3.28 9 5.01 13.57l-.67.12v.01Zm5.83-18.27-.15-.54c-.49-1.64-1.03-3.28-1.6-4.9.23.58.47 1.17.7 1.75 1.56 4.03 3.01 8.1 4.39 12.2-.33-.82-.67-1.64-.98-2.46l-2.35-6.05h-.01ZM390.43 79.37c-.13-10.43-.22-17.5-.24-19.97-.24-1.6.21-2.88-.65-3.65-.14-.13-.32-.23-.52-.32h.03c.45 0 .45-.69 0-.7-1.75-.03-3.5-.04-5.25-.14-1.38-.08-2.76-.21-4.15-.31-.07 0-.12.01-.17.04-.21-.07-.47.03-.45.31l.03.45c-.11.14-.19.3-.22.5-.21 1.26-.32 13.67-.36 23.59-.32 5.79-.67 11.57-.97 17.36-.09 1.73-.29 3.54-.21 5.3-.39.02-.38.64.04.69v.12c.05.44.74.45.7 0v-.06c1.1.09 2.2.21 3.3.3 1.14.19 2.44.2 3.29.17 1.73-.05 2.92-.05 3.8-.37.45-.05.9-.11 1.35-.17.44-.06.25-.73-.19-.67h-.01c.24-.32.45-.72.62-1.25.66-1.84.41-6.36.34-11.33l-.13-9.9.02.01Zm-12.26 18.17c.09-1.91.2-3.81.31-5.71.06 5.38 0 6.14-.01 6.51-.05 1.65-.21 2.81.72 3.66-.39-.04-.78-.07-1.17-.1-.06-1.44.09-2.93.16-4.35l-.01-.01ZM588.97 53.85c-2.06-.25-3.17-.51-3.76-.6a.3.3 0 0 1 .04-.08c.22-.39-.39-.75-.6-.35-.56 1.02-.9 2.19-1.26 3.29-.61 1.88-1.17 3.78-1.72 5.68-.63 2.19-1.24 4.39-1.83 6.59-.81 2.03-1.67 4.05-2.61 6.03-1.7-3.64-3.11-6.04-4.03-7.57-2.26-3.74-2.85-5.48-3.57-6.08l.31-.09c.43-.12.25-.8-.19-.67-1.06.3-2.12.6-3.17.95-.93.32-1.85.69-2.76 1.07-.13.05-.19.16-.22.27-.04.02-.08.05-.11.07-.04-.06-.07-.12-.11-.18a.354.354 0 0 0-.48-.12c-.16.09-.22.32-.13.48l.33.54c0 .09.02.18.06.28.51 1.16.78 1.38.72 1.47-2.42 3.44-5.41 7.86-6.2 9.1-1.27 1.97-2.01 3.14-2.45 3.84l-.91-6.56-.43-4.1c-.19-1.85-.37-3.23-.53-4.13-.19-1.1-.3-2.15-.45-3.16-.2-1.36-.29-2.06-.47-2.42h.04c.45.02.45-.68 0-.7-3.43-.16-6.81.94-10.17 1.48-.24-.22-.73-.04-.58.32.24.59.33 1.25.43 1.87.17 1.06.29 2.13.4 3.2.32 3.09.53 6.2.74 9.3.44 6.75.77 13.51 1.17 20.26.11 1.95.13 3.96.46 5.89.05.3.37.31.55.14.74 1.71 2.87 1.27 6.13 1.27 1.34 0 2.39.04 2.99-.11.02.32.48.53.63.18 3.61-8.26 7.41-16.46 12.05-24.2.03-.05.04-.1.05-.15.3.73.64 1.45.94 2.16.97 2.26 1.97 4.52 2.98 6.76 2.26 5.03 4.54 10.07 7.09 14.96.47.9.94 1.79 1.47 2.65.2.32.4.67.66.96-.18.25 0 .68.34.54.91-.38 1.82-.75 2.76-1.07 1.04-.35 2.11-.65 3.17-.95.39-.11.28-.66-.07-.68.62-.4.95-.96.87-1.91-.3-3.34.72-7.47.86-8.52l2.14-11.43c1.75-10.74 3.13-17.51 3.23-20.86.02-.49.08-2.84.13-3.24.17-1.25.48-1-4.96-1.65l.03-.02Zm-46.19 5.67c-.04-.24-.09-.48-.15-.71l.85-.15c-.34.24-.56.53-.7.86Zm1.95 25.12c-.36-6.63-.7-13.26-1.32-19.87 0 .02 0 .04.01.06.29 1.65.44 2.47.56 2.89 1 8.46 1.5 16.14 1.46 22.8-.06.99-.1 2-.11 3.02-.01.29-.03.68-.05 1.12-.01-.26-.03-.53-.04-.78-.19-3.08-.35-6.16-.52-9.23l.01-.01Zm36.4 18.66c-.11-.11-.24-.29-.37-.49.35.21.74.26 1.17.16-.27.11-.53.22-.8.32v.01Zm-.89-33.72c.12-.43.23-.86.35-1.29.71-1.77 1.41-3.55 2.08-5.33-.15.68-.26 1.22-.31 1.55-.5 2.94-2.13 7.59-3.58 13.36-.15-.35-.29-.66-.43-1 .61-2.44 1.25-4.87 1.9-7.3l-.01.01Zm3.56-12.48c.14-.44.28-.89.42-1.34-.13.7-.27 1.41-.42 2.11-.43 1.19-.86 2.38-1.31 3.57.42-1.45.85-2.9 1.31-4.34Zm-5.22 16.05c-.11.44-.23.87-.35 1.31-.12.46-.23.92-.35 1.38-.1-.22-.19-.4-.28-.61.34-.69.66-1.38.97-2.08h.01Zm-11.64 2.62c.06-.1.12-.19.17-.28.05.13.09.26.14.39a.398.398 0 0 0-.31-.11Zm2.3 2.98c-.56-1.3-1.25-2.63-1.65-3.99 0 0 .01-.02.02-.02.06.08 1.52 2.93 1.63 3.08.73 1.13 3.38 7.04 5.67 12.26 1.2 2.73 2.08 5.17 2.83 7.18-.62-1.25-1.23-2.51-1.83-3.78-2.31-4.87-4.53-9.78-6.67-14.73ZM275.92 87.03c-1.06-2.18-1.13-3.45-2.44-2.93-1.52.57-2.94 1.3-4.5 2.1-1.4.72-2.68 1.44-3.92 2.12.01-.25-.24-.5-.51-.34-4.8 2.93-12.41 4.7-17.28 1.31-1.98-1.77-3.32-4.15-3.97-5.78-.29-.95-.49-1.94-.63-2.93-.14-3.34 1.58-6.53 3.9-9.12.8-.79 1.68-1.51 2.66-2.12 3.7-2.3 8.22-3.07 12.51-2.51 2.71.35 5.32 1.24 7.71 2.55.39.22.75-.39.35-.6-.18-.1-.37-.18-.55-.27.56.27 1.03.33 1.51.19l-.48.39c-.15.11-.23.3-.13.48.09.15.33.24.48.13 1.3-.97 2.46-2.09 3.45-3.37.37-.29.64-.6.65-.97v-.02c.08-.33-.03-.7-.21-1.08-.31-.87-.98-2.01-2.19-3.26-2.43-2.52-3.79-3.45-5.68-4.26-1.14-.49-3.12-1.06-4.42-1.23-3.28-.42-10.64-1.21-18.18 4.11-7.74 5.46-11.94 12.3-12.23 20.61-.08 2.06.04 3.98.34 5.71.74 4.18 2.57 8 5.44 11.34 4.26 4.99 9.76 7.52 16.34 7.52 4.85 0 9.69-1.77 14.89-4.62.23-.12.45-.23.68-.35 2.19-1.1 4.37-2.23 6.46-3.5.49-.3 1.03-.61 1.5-.98 1.47-.87 1.11-1.12.49-2.95-.39-1.14-.76-2.7-2.06-5.36l.02-.01Zm-17.38-21.76c3.05-.42 6.31.79 9.36 2.35.51.39.94.68 1.33.87-5.61-2.86-12.72-3.39-18.44-.79 2.05-1.33 4.24-1.95 7.74-2.44l.01.01ZM443.67 72.67c-.4-2.2-1.15-4.33-2.37-6.22-1.49-2.32-3.58-4.19-5.91-5.64-6.17-3.81-13.75-5.11-20.83-6.01-3.23-.41-6.47-.69-9.72-.92l-1.39-.12c-.85-.07-1.52-.1-2.05-.1-1.08-.06-2.17-.12-3.25-.17-.08 0-.14.02-.19.05-.1.05-.18.14-.16.3.27 2.55-.01 5.12-.92 7.52-.15.38.4.56.62.28 1.32.59 2.68 1.05 4.08 1.37 0 2.78-.14 7.58-.33 12.91 0 0 0 .02-.01.03-.61 3.66-.79 7.42-1 11.12-.23 4.01-.43 8.03-.44 12.05 0 .64 0 1.28.03 1.93.02.31 0 .68.15.96.06.11.14.16.24.17-.2.17-.21.54.11.59 3.83.67 7.78.71 11.68.25 2.3-.19 4.87-.65 7.65-1.56 1.85-.54 3.67-1.18 5.43-1.91 7.2-3.02 14.31-8.07 17.35-15.53.76-1.86 1.17-3.8 1.31-5.75.3-1.93.28-3.82-.09-5.58l.01-.02Zm-19.32-15.42c5.74 1.41 11.94 3.68 15.65 8.55.25.32.47.65.69.99-2.3-2.82-5.68-5.69-12.88-8.23-2.16-.76-4.35-1.43-6.64-2.02 1.06.21 2.13.45 3.18.71Zm-25.82-3.04c.13 0 .27.01.4.02-.14.1-.26.23-.37.38 0-.13-.02-.26-.03-.4Zm34.82 22.17c-.75 3.09-3.55 5.66-5.88 7.58-3.35 2.76-7.21 5.03-11.28 6.54-1.33.49-2.71.9-4.12 1.15.06-1.38.08-2.76.07-4.13-.02-3.78-.16-7.56-.41-11.33-.09-1.37-.18-2.74-.37-4.1 0-.06-.03-.11-.06-.15.09-3.25.12-6.16.03-8.12 6.86 1.05 10.56 2.17 14.06 3.62 5.52 2.28 8.59 5.44 7.97 8.96l-.01-.02Zm-22 16.15c-.12 0-.23-.02-.34-.03l.34-.03v.06Zm-.69-.7c0-3.13.26-8.84.47-14.51.06 1.2.11 2.41.15 3.6.15 3.6.25 7.23.09 10.83-.24.03-.48.05-.71.07v.01Zm-12.33-30.94c.37.63 2.01 1.01 3.23 1.25v.15c-1.31-.31-2.59-.73-3.83-1.29.12-.36.23-.72.33-1.09.08.48.18.84.27.98Zm13.7 31.65v-.18c3.41-.56 6.71-2.02 9.69-3.68 2.31-1.28 4.59-2.78 6.63-4.53-4.69 4.53-11.61 8.24-16.33 8.38l.01.01Zm24.07-.75c-2.05 1.93-4.37 3.56-6.83 4.95 2.7-1.78 5.52-4.03 8.42-6.87.82-.82 1.56-1.69 2.23-2.59-1.08 1.65-2.38 3.16-3.81 4.51h-.01ZM187.16 92.14c-.79-2.47-2.1-7.12-3.1-6.87-.19-.01-2.09.77-4.08 1.54-3.06 1.18-5.91 2.13-10.09 2.82-2.74.42-5.87 1.01-10.61 1.06.04-3.34.05-6.01.05-7.99 7.97-.65 12.33-2.11 16.37-3.55 1.11-.39 2.69-1.01 2.63-1.8-.08-.35-.55-1.39-1.17-2.61-.47-1.16-.98-2.31-1.61-3.38-.42-.71-1.04-1.69-1.86-2.06-.11-.08-.22-.13-.29-.12-.02 0-.04 0-.07.01-.19-.04-.39-.05-.6-.01-.17.03-.24.15-.25.28-.04.02-.09.04-.14.05-4.33 1.48-8.85 2.33-13.24 3.61a499.1 499.1 0 0 0-.31-8.19c4.51-.99 8.88-1.38 13.11-1.82 3.68-.38 6.28.12 7.47.34.59.11.9.16 1.16.18h.1c-.1.37.44.66.62.28.02-.04.03-.08.05-.13.15.2.53.22.62-.1.17-.58.19-1.21.21-1.81v-.36c.03-.15.05-.3.07-.45.52-2.47.33-5.09-.64-7.44-.11-.27-.44-.28-.6-.14-.08-.21-.15-.42-.24-.62-.19-.41-.79-.05-.6.35.03.07.05.15.09.22-.98-.42-2.15-.54-3.17-.63-2.17-.19-4.37-.14-6.54 0-5.7.35-11.4 1.3-16.91 2.79-2.08.56-4.13 1.22-6.14 2-4.54 1.05-3.79 1.51-2.17 6.07.18.51.46 1.68.54 1.94.82 2.47 1.08 2.13 3.1 2.13s0 .05 0 .08h.52c-.48 2.66-.51 5.45-.62 8.13-.15 3.48-.22 6.96-.28 10.45 0 .41-.01.82-.02 1.23-.16.29-.33.57-.51.85-.05.38-.09.77-.14 1.18-.42 3.52-.59 6.48-.52 8.8v.34c.02.47.05.76.06.87.16 1.57-.26 3.47 1.35 3.79 1.61.32 3.5.55 4.85.55.11 0 .22-.02.33-.02 1.79.24 3.67.05 5.45-.12 2.85-.28 5.69-.7 8.51-1.19 3.03-.53 6.05-1.14 9.04-1.86 2.4-.58 4.82-1.19 7.13-2.06.51-.19 1.73-.57 2.46-1.14 1.81-.68 2.18-1 1.57-2.67-.23-.62-.48-1.49-.91-2.78l-.03-.02Zm-11.12-38.71c.89.05 1.93.08 2.89.3-.33 0-.68-.02-1.06-.03-8.28-.26-14.88.75-23.97 2.51 2.41-.64 4.85-1.16 7.28-1.59 4.87-.86 9.91-1.45 14.86-1.19Zm-26.53 22.13c.03 1.71.04 3.43 0 5.14-.04 1.27-.11 2.55-.24 3.82 0-.73.02-1.46.04-2.19.05-2.26.12-4.51.22-6.77h-.02Zm6.73 27.85c.2-.1.4-.21.58-.33 1.82-.17 3.82-.24 5.94-.34-.86.11-1.72.24-2.58.33-1.27.14-2.61.31-3.93.34h-.01ZM534.48 85.44c-3.52-8.38-7.07-16.75-10.5-25.17-.63-1.54-1.25-3.09-1.86-4.65-.31-.8-.65-1.6-.87-2.43-.04-.17-.17-.24-.31-.25.1-.2 0-.51-.29-.53-1.59-.08-3.18-.22-4.78-.25-1.96-.03-3.91.13-5.84.42-.31.05-.31.38-.13.56-.03.06-.05.14-.04.22.23 1.54.63 3.06 1.16 4.53.13.35.27.7.41 1.06l-2.68 6.18c-.11.03-.2.09-.25.22-.67 1.9-1.52 3.73-2.34 5.56a536.85 536.85 0 0 1-3.9 8.45c-2.64 5.64-5.34 11.25-7.91 16.93-.44.97-.88 1.94-1.29 2.93-.2.48-.47 1-.55 1.52v.05c-.02.12.02.26.16.34 1.19.73 2.41 1.41 3.66 2.05 1.2.62 2.45 1.25 3.76 1.61.43.12.62-.55.19-.67-1.13-.31-2.2-.83-3.24-1.36 1.09.36 2.1.69 2.75.93 2.82 1.01 2.38 1.1 4.3-3.75 2.1-1.09 4.34-1.96 6.53-2.79 4.35-1.64 8.8-3.03 13.27-4.29.82 2.01 1.77 3.97 2.72 5.92.35.83.62 1.45.79 1.82.22.42.45.8.69 1.15.17.33.33.67.5 1 .42.8.84 1.63 1.4 2.35.23.29.6 0 .55-.31 1.53-.02 3.06-.07 4.58-.27.92-.12 1.82-.32 2.71-.54 1.39-.27 3.85-1.11 3.74-1.42-.67-1.96-1.55-3.87-2.34-5.78-1.57-3.78-3.16-7.56-4.75-11.33v-.01Zm-11.65-26.16c1.54 3.81 3.12 7.6 4.7 11.4 2.94 7.05 5.91 14.09 8.87 21.13l-1.06-2.17c-2.71-5.51-5.2-11.19-7.41-16.87l-6.65-17.15c-.65-1.45-.55-2.19-.93-2.53.09 0 .18.01.28.02a.29.29 0 0 0-.04.26c.52 2.02 1.47 3.98 2.25 5.91h-.01Zm-6.58 13.58c.05-.15.09-.31.14-.46 1.41 3.92 2.88 7.9 4.39 11.87-3.22.52-6.38 1.25-9.46 2.14.55-1.22 1.05-2.46 1.53-3.7 1.24-3.24 2.37-6.53 3.39-9.85h.01Zm-.23-20c.36 0 .73.03 1.09.05-2.15.1-5.18.33-5.87.74-.24.15-.41.3-.53.45-.06-.29-.13-.58-.18-.88 1.82-.26 3.65-.39 5.49-.35v-.01Zm-.09 18.72c-.49 1.67-1.05 3.33-1.6 4.97-1.07 3.19-2.19 6.38-3.57 9.46-.09.21-.19.43-.29.65-.25.07-.5.14-.74.22 2.53-6.16 4.61-11.29 6.2-15.3Zm-6.34 25.16c4.97-2.38 9.37-4.1 14.02-5.27l.26.64c-4.8 1.35-9.63 2.8-14.28 4.63Zm20.17 6.76c.33.23.68.42 1.04.56h-.33c-.12 0-.21.06-.26.13-.15-.23-.31-.45-.45-.7v.01ZM226.57 91.75c-3.55-4.74-6.68-9.11-9.31-12.99 9.2-15.25 10.05-17.81 10.35-18.38.17-.34 1.09-2.27.64-2.53-1.13-.65-1.03-.65-2.97-1.71-1.19-.65-3.04-1.61-4.53-2.12-1.71-.59-1.24-.36-3 2.77-.06.1-.11.2-.17.3-.75 1.02-1.48 2.05-2.2 3.09-1.88 2.71-3.73 5.45-5.69 8.1-3.68-4.91-6.88-8.76-9.51-11.43-.15-.15-.3-.29-.46-.42-1.27-1.28-7.24 3.53-7.93 5.58-.09.09-.19.16-.28.25-.27.26.03.64.33.58.19.65.5 1.29.94 1.91 3.85 5.06 7.19 9.76 9.94 14-1.23 2.61-3.06 5-4.67 7.38l-2.28 3.33c-.5.66-.93 1.23-1.29 1.69-.67.93-2.09 2.61-2.3 3.87-.51.85-1.16 1.84-1.29 2.83-.06.44.61.63.67.19.01-.08.04-.15.06-.22 1.36 1.08 2.76 2.11 4.19 3.11 1.3.91 2.62 1.85 4.04 2.56.21.1.4 0 .48-.17.24.07.48.14.72.2.44.1.62-.57.19-.67-2.02-.48-3.77-1.57-5.23-3.02-.47-.46-.9-.96-1.32-1.46 1.74 1.35 4.2 2.89 5.89 4.14 1.39 1.03 2.85-2.27 4.22-4.2 1.86-2.64 3.96-5.86 5.52-8.29l10.39 14.51c.67.81 1.14 1.21 1.57 1.36-.05.24.12.51.41.4 1.53-.58 3.05-1.19 4.54-1.87 1.52-.69 3.06-1.45 4.36-2.5a.28.28 0 0 0 .12-.23c1.66-1.1.81-1.74-1.41-4.91-1.13-1.58-1.71-2.36-3.7-5.01l-.03-.02Zm2.41 6.54c.56 1.15 1.19 2.52 1.11 3.81-.06.04-.12.07-.17.1-.03-.88-.55-2.66-.94-3.91Zm-16.51-32.73c1.86-2.65 3.65-5.35 5.57-7.95.4-.55.81-1.13 1.26-1.66.19-.18.38-.33.56-.45.18.03.36.08.55.13l-8.05 10.11.12-.18h-.01ZM192.7 95.48c.79-1.37 1.66-2.69 2.54-4 1.19-1.79 2.4-3.56 3.61-5.33-.04.09-.09.17-.13.26-.1.22.03.41.2.49-2.47 3.42-4.89 6.73-6.4 9.28.21.24.4.48.63.75-.24.07-.4.36-.17.56.4.33.72.77 1.05 1.17.09.11.18.21.27.32-.84-.61-1.66-1.24-2.47-1.88.24-.57.58-1.11.87-1.61v-.01Zm7.46-10.32c.47-.81.98-1.59 1.49-2.37.31-.48.64-.95.96-1.43.26-.29.52-.56.75-.79-.99 1.48-2.09 3.03-3.2 4.59Zm10.03-16.22s-.03-.05-.05-.07c.22-.29.43-.59.64-.89-.2.32-.4.65-.58.96h-.01ZM371.54 87.96c-.01-.08-.01-.16-.03-.23-.06-.38-.58-.29-.66.03-.3-.05-.6-.08-.81-.11-1.14-.15-2.29-.19-3.44-.2 1.04-.09 2.09-.18 3.14-.23.45-.02.45-.72 0-.7-6.57.35-13.14 1.23-19.65 2.11-1.53.21-3.05.42-4.57.68-.01 0-.02.01-.04.01-.04-3.33-.13-6.66-.24-9.99-.19-5.7-.4-11.41-.88-17.1-.13-1.51-.23-3.07-.49-4.58 0-.25 0-.48-.02-.68-.06-1.19-.04-2.61-.68-2.78-.16-.07-.72-.16-1.5-.24.22-.17.16-.62-.2-.63-1.19-.04-2.39.09-3.57.23-1.2.14-2.41.32-3.59.6-.16-.1-.41-.06-.5.12-.06.02-.13.03-.19.05-.35.1-.29.55-.03.66-.26.6-.19 2.27-.21 3-.02.66-.66 33.73-.9 40.3-.03.65.06 1.12.04 1.45-.16 3.05.87 4.96 6.34 3.93 1.09-.08 2.75-.77 5.36-1.43 4.13-1.04 5.78-1.52 6.2-1.65 6.43-1.69 6.78-1.97 11.72-2.43.55-.05 4.8-.38 6.03-.3.64.04 1.19.07 1.65.1.09 0 .16-.03.24-.05.1.27.56.33.66-.02.39-1.32.61-2.71.78-4.08.2-1.61.29-3.24.15-4.86.24.03.52-.23.38-.53-.09-.2-.27-.33-.49-.43v-.02Zm-.63.56c.07.57.11 1.14.11 1.71-.21-.99-.53-1.71-.95-1.87.22.03.44.06.65.11.06.01.12.04.19.05Zm-25.41 1.73c1.54-.36 3.1-.64 4.66-.89-1.61.37-3.18.77-4.66 1.2v-.31Zm-.86-7.37c-.07-1.37-.16-2.75-.25-4.12-.21-3.13-.45-6.27-.79-9.4.02-2.25.08-4.31.13-6.11.16 2.08.29 4.16.4 6.24.23 4.46.38 8.93.5 13.39h.01Zm-.94-4c.16 2.41.29 4.83.39 7.24.06 1.6.14 3.22.09 4.83-.15.05-.32.09-.47.14V78.88h-.01ZM483.72 92.83c-3.05-2.28-6.22-4.4-9.38-6.51 8.86-6.49 13.49-12.95 13.73-19.23.04-.76 0-1.5-.13-2.2-.67-3.82-3.5-6.68-8.39-8.48.13.04.27.08.4.13 3.92 1.39 7.74 4.23 8.5 8.56.34 1.95-.05 3.96-.98 5.69-.21.4.39.75.6.35 1.86-3.46 1.46-7.55-.97-10.63-3.53-4.47-9.76-5.88-15.16-6.16-2.32-.12-4.64-.04-6.95.19-6 .32-12.71 1.68-17.63 3.21-.37.11-.67.23-.92.35-.2-.17-.62.02-.57.37v.03c-.64.68-.18 1.64.48 3.21.38.91.67 1.89 1.15 2.58.32.76.68 1.51 1.13 2.19.14.21.38.19.53.07.19-.02.38-.05.57-.08v1.57c-.06.06-.1.13-.11.23-.27 4.18-.34 8.38-.48 12.57l-.3 9.03c-.24 3.91-.44 6.77-.46 7.26-.05.88-.11 1.95.07 2.81-.01.22-.02.43-.04.65 0 .11-.02.23-.03.35 0 .05-.03.27-.01.16-.05.4.5.59.64.28.05.04.12.08.2.08 1.75.13 3.5.28 5.25.3 1.69.02 3.38-.12 5.06-.32.08.23.36.39.55.15.06-.08.11-.17.16-.26.18-.09.24-.32.18-.48.05-.2.1-.4.13-.6.16-.86.25-1.74.33-2.62.11-1.17.17-2.34.23-3.51.15-.01.32-.03.52-.04.36-.03 1.73-.15 2.06-.15.39 0 .7-.02.95-.04 1.76 1.11 3.45 2.35 5.14 3.55 2.83 2.01 5.64 4.04 8.47 6.04 1.42 1 2.85 2 4.29 2.97.1.06.19.07.27.04.08 0 .17-.02.25-.1 1.61-1.56 3.15-3.18 4.6-4.88.75-.88 1.49-1.78 2.15-2.73.01.01.03.02.04.03.34.3.83-.2.49-.49-2.16-1.9-4.34-3.76-6.64-5.48l.03-.01Zm-6.38-3.65a55.72 55.72 0 0 0-4-2.13c.14-.1.26-.19.4-.29 1.2.81 2.4 1.61 3.6 2.42Zm-20.1 11.78c.67-.37 1.23-.91 1.67-1.6-.11.5-.24 1-.38 1.49-.43.04-.86.08-1.29.11Zm2.38-37.24c1.34-.31 2.56-.52 3.71-.69-1.03.19-2.04.41-3.04.65-.14-.07-.34-.02-.45.11-.07.02-.15.04-.22.05v-.13.01Zm.04.84c.07-.02.14-.03.2-.05.34 1.66.41 3.41.5 5.09.17 2.9.24 5.81.28 8.71l.03 3.17c-.17.07-.34.14-.51.2-.06-4.96-.21-10.58-.51-17.12h.01Zm16.04 5.62c-1.16 2.25-3.06 4.1-5.02 5.66-2.8 2.23-5.99 3.97-9.3 5.35-.01-3.56-.09-7.12-.27-10.67-.1-2.04-.16-4.16-.57-6.18 3.3-.78 6.72-1.36 10.1-1.1 1.85.14 4.23.59 5.32 2.29.92 1.43.46 3.24-.26 4.65Zm.85-.18c.6-1.37.9-2.92.28-4.32-.67-1.52-2.2-2.32-3.76-2.74.46.1.89.21 1.29.37 1.74.67 2.69 1.88 2.93 3.21.2 1.13-.05 2.25-.74 3.47V70Zm-27.47-4.14c-.12-.19-.23-.38-.34-.57.74.42.85.36.99.41v.08c-.22.03-.43.06-.65.08Zm11.21 30.46c-.08 1.08-.16 2.17-.33 3.24-.05.35-.11.69-.2 1.03 0 .04-.02.07-.03.11-.15.02-.3.04-.45.05.45-1.64.76-3.36.79-5.07.03-.29.08-.57.1-.89-.03-.31-.03-.47.24-.57-.04.69-.07 1.39-.12 2.08v.02Zm5.6-2.47c.48.11.92.52 2.49 1.72-.46-.32-.92-.65-1.38-.97-.37-.25-.73-.5-1.1-.75h-.01Zm21.23 7.24a70.76 70.76 0 0 1-4.37 4.63c-.14-.09-.27-.19-.4-.28.19-.09.37-.24.55-.47.87-1.14 5.43-5.51 5.49-7.45.31.26.62.53.92.79-.67.97-1.42 1.88-2.19 2.77v.01Z\"\n      fill=\"currentColor\"\n      transform=\"translate(-144.023 -51.76)\"\n    />\n  </svg>\n);\n\ntype LogoSize = \"xs\" | \"small\" | \"normal\" | \"large\" | \"custom\";\n\ninterface LogoProps {\n  size?: LogoSize;\n  withText?: boolean;\n  style?: React.CSSProperties;\n  /**\n   * If true, the logo will not be wrapped in a Link component.\n   * The link prop will be ignored as well.\n   * It will merely be a plain div.\n   */\n  isNotLink?: boolean;\n}\n\nexport const ExcalidrawLogo = ({\n  style,\n  size = \"small\",\n  withText,\n}: LogoProps) => {\n  return (\n    <div className={`ExcalidrawLogo is-${size}`} style={style}>\n      <LogoIcon />\n      {withText && <LogoText />}\n    </div>\n  );\n};\n", "import type { JSX } from \"react\";\nimport { actionLoadScene, actionShortcuts } from \"../../actions\";\nimport { getShortcutFromShortcutName } from \"../../actions/shortcuts\";\nimport { t, useI18n } from \"../../i18n\";\nimport { useDevice, useExcalidrawActionManager } from \"../App\";\nimport { useTunnels } from \"../../context/tunnels\";\nimport { HelpIcon, LoadIcon, usersIcon } from \"../icons\";\nimport { useUIAppState } from \"../../context/ui-appState\";\nimport { ExcalidrawLogo } from \"../ExcalidrawLogo\";\n\nconst WelcomeScreenMenuItemContent = ({\n  icon,\n  shortcut,\n  children,\n}: {\n  icon?: JSX.Element;\n  shortcut?: string | null;\n  children: React.ReactNode;\n}) => {\n  const device = useDevice();\n  return (\n    <>\n      <div className=\"welcome-screen-menu-item__icon\">{icon}</div>\n      <div className=\"welcome-screen-menu-item__text\">{children}</div>\n      {shortcut && !device.editor.isMobile && (\n        <div className=\"welcome-screen-menu-item__shortcut\">{shortcut}</div>\n      )}\n    </>\n  );\n};\nWelcomeScreenMenuItemContent.displayName = \"WelcomeScreenMenuItemContent\";\n\nconst WelcomeScreenMenuItem = ({\n  onSelect,\n  children,\n  icon,\n  shortcut,\n  className = \"\",\n  ...props\n}: {\n  onSelect: () => void;\n  children: React.ReactNode;\n  icon?: JSX.Element;\n  shortcut?: string | null;\n} & React.ButtonHTMLAttributes<HTMLButtonElement>) => {\n  return (\n    <button\n      {...props}\n      type=\"button\"\n      className={`welcome-screen-menu-item ${className}`}\n      onClick={onSelect}\n    >\n      <WelcomeScreenMenuItemContent icon={icon} shortcut={shortcut}>\n        {children}\n      </WelcomeScreenMenuItemContent>\n    </button>\n  );\n};\nWelcomeScreenMenuItem.displayName = \"WelcomeScreenMenuItem\";\n\nconst WelcomeScreenMenuItemLink = ({\n  children,\n  href,\n  icon,\n  shortcut,\n  className = \"\",\n  ...props\n}: {\n  children: React.ReactNode;\n  href: string;\n  icon?: JSX.Element;\n  shortcut?: string | null;\n} & React.AnchorHTMLAttributes<HTMLAnchorElement>) => {\n  return (\n    <a\n      {...props}\n      className={`welcome-screen-menu-item ${className}`}\n      href={href}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      <WelcomeScreenMenuItemContent icon={icon} shortcut={shortcut}>\n        {children}\n      </WelcomeScreenMenuItemContent>\n    </a>\n  );\n};\nWelcomeScreenMenuItemLink.displayName = \"WelcomeScreenMenuItemLink\";\n\nconst Center = ({ children }: { children?: React.ReactNode }) => {\n  const { WelcomeScreenCenterTunnel } = useTunnels();\n  return (\n    <WelcomeScreenCenterTunnel.In>\n      <div className=\"welcome-screen-center\">\n        {children || (\n          <>\n            <Logo />\n            <Heading>{t(\"welcomeScreen.defaults.center_heading\")}</Heading>\n            <Menu>\n              <MenuItemLoadScene />\n              <MenuItemHelp />\n            </Menu>\n          </>\n        )}\n      </div>\n    </WelcomeScreenCenterTunnel.In>\n  );\n};\nCenter.displayName = \"Center\";\n\nconst Logo = ({ children }: { children?: React.ReactNode }) => {\n  return (\n    <div className=\"welcome-screen-center__logo excalifont welcome-screen-decor\">\n      {children || <ExcalidrawLogo withText />}\n    </div>\n  );\n};\nLogo.displayName = \"Logo\";\n\nconst Heading = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className=\"welcome-screen-center__heading welcome-screen-decor excalifont\">\n      {children}\n    </div>\n  );\n};\nHeading.displayName = \"Heading\";\n\nconst Menu = ({ children }: { children?: React.ReactNode }) => {\n  return <div className=\"welcome-screen-menu\">{children}</div>;\n};\nMenu.displayName = \"Menu\";\n\nconst MenuItemHelp = () => {\n  const actionManager = useExcalidrawActionManager();\n\n  return (\n    <WelcomeScreenMenuItem\n      onSelect={() => actionManager.executeAction(actionShortcuts)}\n      shortcut=\"?\"\n      icon={HelpIcon}\n    >\n      {t(\"helpDialog.title\")}\n    </WelcomeScreenMenuItem>\n  );\n};\nMenuItemHelp.displayName = \"MenuItemHelp\";\n\nconst MenuItemLoadScene = () => {\n  const appState = useUIAppState();\n  const actionManager = useExcalidrawActionManager();\n\n  if (appState.viewModeEnabled) {\n    return null;\n  }\n\n  return (\n    <WelcomeScreenMenuItem\n      onSelect={() => actionManager.executeAction(actionLoadScene)}\n      shortcut={getShortcutFromShortcutName(\"loadScene\")}\n      icon={LoadIcon}\n    >\n      {t(\"buttons.load\")}\n    </WelcomeScreenMenuItem>\n  );\n};\nMenuItemLoadScene.displayName = \"MenuItemLoadScene\";\n\nconst MenuItemLiveCollaborationTrigger = ({\n  onSelect,\n}: {\n  onSelect: () => any;\n}) => {\n  const { t } = useI18n();\n  return (\n    <WelcomeScreenMenuItem shortcut={null} onSelect={onSelect} icon={usersIcon}>\n      {t(\"labels.liveCollaboration\")}\n    </WelcomeScreenMenuItem>\n  );\n};\nMenuItemLiveCollaborationTrigger.displayName =\n  \"MenuItemLiveCollaborationTrigger\";\n\n// -----------------------------------------------------------------------------\n\nCenter.Logo = Logo;\nCenter.Heading = Heading;\nCenter.Menu = Menu;\nCenter.MenuItem = WelcomeScreenMenuItem;\nCenter.MenuItemLink = WelcomeScreenMenuItemLink;\nCenter.MenuItemHelp = MenuItemHelp;\nCenter.MenuItemLoadScene = MenuItemLoadScene;\nCenter.MenuItemLiveCollaborationTrigger = MenuItemLiveCollaborationTrigger;\n\nexport { Center };\n", "import { t } from \"../../i18n\";\nimport { useTunnels } from \"../../context/tunnels\";\nimport {\n  WelcomeScreenHelpArrow,\n  WelcomeScreenMenuArrow,\n  WelcomeScreenTopToolbarArrow,\n} from \"../icons\";\n\nconst MenuHint = ({ children }: { children?: React.ReactNode }) => {\n  const { WelcomeScreenMenuHintTunnel } = useTunnels();\n  return (\n    <WelcomeScreenMenuHintTunnel.In>\n      <div className=\"excalifont welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--menu\">\n        {WelcomeScreenMenuArrow}\n        <div className=\"welcome-screen-decor-hint__label\">\n          {children || t(\"welcomeScreen.defaults.menuHint\")}\n        </div>\n      </div>\n    </WelcomeScreenMenuHintTunnel.In>\n  );\n};\nMenuHint.displayName = \"MenuHint\";\n\nconst ToolbarHint = ({ children }: { children?: React.ReactNode }) => {\n  const { WelcomeScreenToolbarHintTunnel } = useTunnels();\n  return (\n    <WelcomeScreenToolbarHintTunnel.In>\n      <div className=\"excalifont welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--toolbar\">\n        <div className=\"welcome-screen-decor-hint__label\">\n          {children || t(\"welcomeScreen.defaults.toolbarHint\")}\n        </div>\n        {WelcomeScreenTopToolbarArrow}\n      </div>\n    </WelcomeScreenToolbarHintTunnel.In>\n  );\n};\nToolbarHint.displayName = \"ToolbarHint\";\n\nconst HelpHint = ({ children }: { children?: React.ReactNode }) => {\n  const { WelcomeScreenHelpHintTunnel } = useTunnels();\n  return (\n    <WelcomeScreenHelpHintTunnel.In>\n      <div className=\"excalifont welcome-screen-decor welcome-screen-decor-hint welcome-screen-decor-hint--help\">\n        <div>{children || t(\"welcomeScreen.defaults.helpHint\")}</div>\n        {WelcomeScreenHelpArrow}\n      </div>\n    </WelcomeScreenHelpHintTunnel.In>\n  );\n};\nHelpHint.displayName = \"HelpHint\";\n\nexport { HelpHint, MenuHint, ToolbarHint };\n", "import { Center } from \"./WelcomeScreen.Center\";\nimport { MenuHint, ToolbarHint, HelpHint } from \"./WelcomeScreen.Hints\";\n\nimport \"./WelcomeScreen.scss\";\n\nconst WelcomeScreen = (props: { children?: React.ReactNode }) => {\n  return (\n    <>\n      {props.children || (\n        <>\n          <Center />\n          <MenuHint />\n          <ToolbarHint />\n          <HelpHint />\n        </>\n      )}\n    </>\n  );\n};\n\nWelcomeScreen.displayName = \"WelcomeScreen\";\n\nWelcomeScreen.Center = Center;\nWelcomeScreen.Hints = { MenuHint, ToolbarHint, HelpHint };\n\nexport default WelcomeScreen;\n", "import { t } from \"../../i18n\";\nimport { share } from \"../icons\";\nimport { Button } from \"../Button\";\n\nimport clsx from \"clsx\";\n\nimport \"./LiveCollaborationTrigger.scss\";\nimport { useUIAppState } from \"../../context/ui-appState\";\n\nconst LiveCollaborationTrigger = ({\n  isCollaborating,\n  onSelect,\n  ...rest\n}: {\n  isCollaborating: boolean;\n  onSelect: () => void;\n} & React.ButtonHTMLAttributes<HTMLButtonElement>) => {\n  const appState = useUIAppState();\n\n  const showIconOnly = appState.width < 830;\n\n  return (\n    <Button\n      {...rest}\n      className={clsx(\"collab-button\", { active: isCollaborating })}\n      type=\"button\"\n      onSelect={onSelect}\n      style={{ position: \"relative\", width: showIconOnly ? undefined : \"auto\" }}\n      title={t(\"labels.liveCollaboration\")}\n    >\n      {showIconOnly ? share : t(\"labels.share\")}\n      {appState.collaborators.size > 0 && (\n        <div className=\"CollabButton-collaborators\">\n          {appState.collaborators.size}\n        </div>\n      )}\n    </Button>\n  );\n};\n\nexport default LiveCollaborationTrigger;\nLiveCollaborationTrigger.displayName = \"LiveCollaborationTrigger\";\n", "import throttle from \"lodash.throttle\";\nimport { ENV } from \"../constants\";\nimport type { OrderedExcalidrawElement } from \"../element/types\";\nimport {\n  orderByFractionalIndex,\n  syncInvalidIndices,\n  validateFractionalIndices,\n} from \"../fractionalIndex\";\nimport type { AppState } from \"../types\";\nimport type { MakeBrand } from \"../utility-types\";\nimport { arrayToMap } from \"../utils\";\n\nexport type ReconciledExcalidrawElement = OrderedExcalidrawElement &\n  MakeBrand<\"ReconciledElement\">;\n\nexport type RemoteExcalidrawElement = OrderedExcalidrawElement &\n  MakeBrand<\"RemoteExcalidrawElement\">;\n\nconst shouldDiscardRemoteElement = (\n  localAppState: AppState,\n  local: OrderedExcalidrawElement | undefined,\n  remote: RemoteExcalidrawElement,\n): boolean => {\n  if (\n    local &&\n    // local element is being edited\n    (local.id === localAppState.editingTextElement?.id ||\n      local.id === localAppState.resizingElement?.id ||\n      local.id === localAppState.newElement?.id || // TODO: Is this still valid? As newElement is selection element, which is never part of the elements array\n      // local element is newer\n      local.version > remote.version ||\n      // resolve conflicting edits deterministically by taking the one with\n      // the lowest versionNonce\n      (local.version === remote.version &&\n        local.versionNonce < remote.versionNonce))\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst validateIndicesThrottled = throttle(\n  (\n    orderedElements: readonly OrderedExcalidrawElement[],\n    localElements: readonly OrderedExcalidrawElement[],\n    remoteElements: readonly RemoteExcalidrawElement[],\n  ) => {\n    if (\n      import.meta.env.DEV ||\n      import.meta.env.MODE === ENV.TEST ||\n      window?.DEBUG_FRACTIONAL_INDICES\n    ) {\n      // create new instances due to the mutation\n      const elements = syncInvalidIndices(\n        orderedElements.map((x) => ({ ...x })),\n      );\n\n      validateFractionalIndices(elements, {\n        // throw in dev & test only, to remain functional on `DEBUG_FRACTIONAL_INDICES`\n        shouldThrow: import.meta.env.DEV || import.meta.env.MODE === ENV.TEST,\n        includeBoundTextValidation: true,\n        reconciliationContext: {\n          localElements,\n          remoteElements,\n        },\n      });\n    }\n  },\n  1000 * 60,\n  { leading: true, trailing: false },\n);\n\nexport const reconcileElements = (\n  localElements: readonly OrderedExcalidrawElement[],\n  remoteElements: readonly RemoteExcalidrawElement[],\n  localAppState: AppState,\n): ReconciledExcalidrawElement[] => {\n  const localElementsMap = arrayToMap(localElements);\n  const reconciledElements: OrderedExcalidrawElement[] = [];\n  const added = new Set<string>();\n\n  // process remote elements\n  for (const remoteElement of remoteElements) {\n    if (!added.has(remoteElement.id)) {\n      const localElement = localElementsMap.get(remoteElement.id);\n      const discardRemoteElement = shouldDiscardRemoteElement(\n        localAppState,\n        localElement,\n        remoteElement,\n      );\n\n      if (localElement && discardRemoteElement) {\n        reconciledElements.push(localElement);\n        added.add(localElement.id);\n      } else {\n        reconciledElements.push(remoteElement);\n        added.add(remoteElement.id);\n      }\n    }\n  }\n\n  // process remaining local elements\n  for (const localElement of localElements) {\n    if (!added.has(localElement.id)) {\n      reconciledElements.push(localElement);\n      added.add(localElement.id);\n    }\n  }\n\n  const orderedElements = orderByFractionalIndex(reconciledElements);\n\n  validateIndicesThrottled(orderedElements, localElements, remoteElements);\n\n  // de-duplicate indices\n  syncInvalidIndices(orderedElements);\n\n  return orderedElements as ReconciledExcalidrawElement[];\n};\n", "import type { JSX } from \"react\";\nimport type { ReactNode } from \"react\";\nimport { useTunnels } from \"../../context/tunnels\";\nimport DropdownMenu from \"../dropdownMenu/DropdownMenu\";\nimport { useExcalidrawSetAppState } from \"../App\";\nimport { brainIcon } from \"../icons\";\nimport { t } from \"../../i18n\";\nimport { trackEvent } from \"../../analytics\";\n\nexport const TTDDialogTrigger = ({\n  children,\n  icon,\n}: {\n  children?: ReactNode;\n  icon?: JSX.Element;\n}) => {\n  const { TTDDialogTriggerTunnel } = useTunnels();\n  const setAppState = useExcalidrawSetAppState();\n\n  return (\n    <TTDDialogTriggerTunnel.In>\n      <DropdownMenu.Item\n        onSelect={() => {\n          trackEvent(\"ai\", \"dialog open\", \"ttd\");\n          setAppState({ openDialog: { name: \"ttd\", tab: \"text-to-diagram\" } });\n        }}\n        icon={icon ?? brainIcon}\n      >\n        {children ?? t(\"labels.textToDiagram\")}\n        <DropdownMenu.Item.Badge>AI</DropdownMenu.Item.Badge>\n      </DropdownMenu.Item>\n    </TTDDialogTriggerTunnel.In>\n  );\n};\nTTDDialogTrigger.displayName = \"TTDDialogTrigger\";\n", "import { useLayoutEffect } from \"react\";\nimport { useApp } from \"../App\";\nimport type { GenerateDiagramToCode } from \"../../types\";\n\nexport const DiagramToCodePlugin = (props: {\n  generate: GenerateDiagramToCode;\n}) => {\n  const app = useApp();\n\n  useLayoutEffect(() => {\n    app.setPlugins({\n      diagramToCode: { generate: props.generate },\n    });\n  }, [app, props.generate]);\n\n  return null;\n};\n"],
  "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",
  "names": ["React", "useEffect", "useEffect", "useState", "jsx", "jsx", "useState", "useEffect", "currentLang", "React", "useContext", "flushSync", "clsx", "React", "useEffect", "useState", "clsx", "jsx", "jsxs", "React", "useState", "useEffect", "clsx", "jsx", "elems", "nextElements", "nextAppState", "jsx", "elements", "element", "jsx", "duplicateElements", "elements", "element", "newElement", "useEffect", "useMemo", "useRef", "useState", "clsx", "clsx", "jsx", "clsx", "jsx", "jsxs", "clsx", "clsx", "jsx", "clsx", "jsx", "React", "useEffect", "useState", "clsx", "useEffect", "useRef", "palette", "isCustomColor", "r", "g", "b", "jsxs", "isCustomColor", "jsx", "jsxs", "palette", "useRef", "useEffect", "clsx", "clsx", "useEffect", "useRef", "jsx", "jsxs", "palette", "useRef", "useEffect", "color", "label", "clsx", "clsx", "useEffect", "useRef", "jsx", "jsxs", "useRef", "useEffect", "clsx", "palette", "jsx", "jsx", "jsxs", "palette", "React", "useEffect", "useState", "Popover", "clsx", "useRef", "useEffect", "useRef", "useState", "useEffect", "useRef", "React", "useState", "useState", "div", "useEffect", "useEffect", "useRef", "jsx", "useEffect", "onCancel", "onSelect", "useRef", "clsx", "jsx", "jsxs", "useState", "useEffect", "color", "useRef", "clsx", "React", "clsx", "React", "clsx", "jsx", "jsx", "jsxs", "React", "clsx", "jsx", "jsxs", "palette", "color", "useRef", "clsx", "React", "useEffect", "Popover", "clsx", "jsx", "Fragment", "jsx", "jsxs", "jsx", "jsxs", "Picker", "React", "useEffect", "options", "clsx", "value", "React", "useCallback", "useMemo", "Popover", "React", "useState", "useRef", "useEffect", "useCallback", "clsx", "React", "jsx", "jsxs", "React", "clsx", "clsx", "jsx", "clsx", "jsx", "jsxs", "useEffect", "useRef", "React", "React", "Fragment", "jsx", "jsxs", "jsx", "useRef", "useEffect", "jsx", "jsxs", "React", "useState", "useRef", "font", "useCallback", "useEffect", "Popover", "useMemo", "jsx", "useMemo", "jsx", "jsxs", "React", "useMemo", "useCallback", "React", "useEffect", "jsx", "jsxs", "React", "useEffect", "Fragment", "jsx", "jsxs", "newElement", "value", "useRef", "useState", "useMemo", "useEffect", "useEffect", "jsx", "jsx", "jsxs", "jsx", "useState", "jsx", "jsxs", "useState", "jsx", "svg", "blob", "clsx", "jsx", "jsxs", "clsx", "Fragment", "jsx", "jsxs", "newElement", "element", "jsx", "jsx", "useState", "clsx", "jsx", "useState", "clsx", "jsx", "jsxs", "jsx", "step", "pos", "jsx", "enableActionGroup", "useCallback", "useEffect", "useLayoutEffect", "useRef", "useState", "clsx", "jsx", "jsxs", "useState", "useRef", "useCallback", "useLayoutEffect", "useEffect", "clsx", "jsx", "useEffect", "useRef", "useState", "clsx", "useEffect", "useState", "useCallback", "useState", "createPortal", "clsx", "useRef", "jsx", "jsxs", "createPortal", "clsx", "useState", "useCallback", "useMemo", "useEffect", "memo", "useRef", "useEffect", "useRef", "useEffect", "useState", "exportToSvg", "useState", "useEffect", "row", "index", "useRef", "useEffect", "libraryUrlTokens", "useCallback", "useEffect", "useMemo", "useRef", "useState", "forwardRef", "clsx", "jsx", "jsx", "clsx", "jsx", "jsxs", "useCallback", "useState", "React", "React", "t", "clsx", "jsx", "jsxs", "clsx", "jsx", "jsxs", "useCallback", "useEffect", "useRef", "useState", "jsx", "jsxs", "exportToCanvas", "useRef", "useEffect", "exportToSvg", "useState", "index", "items", "useCallback", "clsx", "jsx", "clsx", "jsx", "clsx", "useEffect", "useRef", "jsx", "useRef", "useEffect", "clsx", "jsx", "jsx", "React", "Fragment", "jsxs", "clsx", "jsx", "jsxs", "useState", "useCallback", "clsx", "memo", "useEffect", "useState", "clsx", "useEffect", "useRef", "useState", "jsx", "jsxs", "useRef", "useEffect", "useState", "clsx", "React", "useCallback", "Fragment", "jsx", "memo", "useState", "useEffect", "useEffect", "useEffect", "Fragment", "jsx", "jsxs", "useRef", "useEffect", "useMemo", "useState", "useCallback", "id", "jsx", "jsxs", "memo", "useCallback", "libraryItems", "useMemo", "useState", "useRef", "useEffect", "jsx", "jsxs", "useState", "useEffect", "focusableElements", "clsx", "forwardRef", "useRef", "useLayoutEffect", "useState", "clsx", "clsx", "jsx", "clsx", "jsx", "jsxs", "forwardRef", "useRef", "useLayoutEffect", "useState", "clsx", "clsx", "useState", "clsx", "React", "createIsolation", "Fragment", "jsx", "jsxs", "useState", "clsx", "useRef", "jsx", "jsxs", "jsx", "jsxs", "clsx", "useEffect", "useState", "useRef", "uiAppState", "customCommandPaletteItems", "appProps", "action", "app", "allCommands", "nextItem", "jsx", "jsx", "useEffect", "useState", "event", "jsx", "jsx", "actionResult", "actions", "action", "clsx", "useLayoutEffect", "useRef", "useEffect", "jsx", "Popover", "useRef", "useEffect", "useLayoutEffect", "React", "jsx", "jsxs", "Popover", "clsx", "clsx", "React", "React", "useState", "Fragment", "jsx", "useState", "React", "useEffect", "useRef", "useState", "clsx", "jsx", "jsxs", "clsx", "clsx", "jsx", "clsx", "forwardRef", "useState", "clsx", "jsx", "jsxs", "forwardRef", "useState", "clsx", "useCallback", "useRef", "useState", "jsx", "jsxs", "useState", "useRef", "useEffect", "exportToCanvas", "clsx", "jsx", "_VERTICAL_OFFSET", "y", "x", "jsx", "hint", "clsx", "jsx", "jsxs", "ICONS", "clsx", "Fragment", "jsx", "jsxs", "clsx", "jsx", "jsxs", "DEFAULT_SIZE", "clsx", "clsx", "jsx", "clsx", "Fragment", "jsx", "jsxs", "appState", "React", "useLayoutEffect", "useRef", "useState", "jsx", "jsxs", "useRef", "useState", "useLayoutEffect", "React", "React", "Fragment", "jsx", "jsxs", "Section", "React", "React", "useLayoutEffect", "clsx", "Popover", "Fragment", "jsx", "jsxs", "React", "useLayoutEffect", "maxAvatars", "clsx", "React", "OpenColor", "jsx", "OpenColor", "Fragment", "jsx", "jsxs", "React", "clsx", "jsx", "jsx", "jsxs", "clsx", "useEffect", "useLayoutEffect", "useRef", "useState", "forwardRef", "useImperativeHandle", "useCallback", "React", "clsx", "useContext", "jsx", "jsxs", "useContext", "clsx", "clsx", "clsx", "jsx", "jsxs", "clsx", "jsx", "RadixTabs", "jsx", "RadixTabs", "jsx", "RadixTabs", "jsx", "jsx", "forwardRef", "useLayoutEffect", "useRef", "useImperativeHandle", "useCallback", "useEffect", "clsx", "useState", "CommandPalette", "clsx", "Fragment", "jsx", "jsxs", "Fragment", "jsx", "jsxs", "t", "CommandPalette", "clsx", "useLayoutEffect", "useRef", "jsx", "useAtom", "useRef", "useLayoutEffect", "jsx", "jsxs", "jsx", "jsxs", "t", "jsx", "jsxs", "clsx", "Fragment", "memo", "useEffect", "useRef", "useState", "debounce", "clsx", "Fragment", "jsx", "jsxs", "SearchMenu", "useRef", "useState", "useEffect", "focusIndex", "searchQuery", "clsx", "memo", "startIndex", "debounce", "jsx", "jsxs", "createElement", "clsx", "docked", "SearchMenu", "clsx", "jsx", "jsxs", "DEFAULT_SIZE", "clsx", "useState", "useRef", "useEffect", "exportToCanvas", "jsx", "clsx", "jsx", "jsxs", "clsx", "useEffect", "useRef", "jsx", "useRef", "useEffect", "jsx", "jsxs", "jsx", "jsxs", "Fragment", "jsx", "jsxs", "useState", "useRef", "useEffect", "RadixTabs", "useRef", "jsx", "useRef", "useEffect", "useRef", "useState", "RadixTabs", "jsx", "RadixTabs", "jsx", "RadixTabs", "jsx", "jsx", "jsxs", "useRef", "useState", "error", "useEffect", "useEffect", "useMemo", "useState", "memo", "throttle", "useEffect", "useRef", "useState", "clsx", "jsx", "jsxs", "useRef", "useState", "useEffect", "inputValue", "elements", "appState", "value", "clsx", "event", "jsx", "nextCropWidth", "nextCropHeight", "changeInWidth", "changeInHeight", "nextWidth", "nextHeight", "jsx", "STEP_SIZE", "nextAngle", "boundTextElement", "jsx", "STEP_SIZE", "useMemo", "jsx", "STEP_SIZE", "handleDimensionChange", "originalElements", "useMemo", "el", "jsx", "STEP_SIZE", "handleDegreeChange", "jsx", "MIN_FONT_SIZE", "STEP_SIZE", "handleFontSizeChange", "nextFontSize", "jsx", "STEP_SIZE", "newTopLeftX", "newTopLeftY", "useMemo", "jsx", "STEP_SIZE", "handlePositionChange", "useMemo", "el", "jsx", "STEP_SIZE", "clsx", "Fragment", "jsx", "jsxs", "clsx", "memo", "useState", "useMemo", "throttle", "elements", "useEffect", "useCallback", "useEffect", "useState", "jsx", "jsxs", "useState", "useEffect", "nextLink", "useCallback", "Fragment", "jsx", "jsxs", "clsx", "appState", "areEqual", "React", "useCallback", "useEffect", "useRef", "jsx", "jsxs", "useRef", "useCallback", "useEffect", "throttle", "jsx", "jsxs", "id", "React", "useEffect", "useRef", "unstable_batchedUpdates", "unstable_batchedUpdates", "oc", "elements", "midPoints", "oc", "throttle", "jsx", "useRef", "useEffect", "areEqual", "React", "React", "useEffect", "useRef", "jsx", "useRef", "useEffect", "getRelevantAppStateProps", "areEqual", "React", "useEffect", "useRef", "jsx", "useRef", "useEffect", "jsx", "clsx", "jsx", "jsxs", "DEFAULT_SIZE", "clsx", "jsx", "jsxs", "t", "editable", "useEffect", "useRef", "newElement", "throttle", "jsx", "useRef", "useEffect", "Fragment", "jsx", "jsxs", "React", "useContext", "t", "newElement", "scrollX", "scrollY", "zoom", "selectedElements", "distance", "flushSync", "onPointerUp", "event", "element", "dataURL", "throttle", "clsx", "error", "text", "gridX", "gridY", "hitElement", "currentLang", "clsx", "jsx", "clsx", "jsx", "jsxs", "Fragment", "jsx", "jsxs", "t", "jsx", "jsxs", "Fragment", "jsx", "jsxs", "clsx", "jsx", "jsxs", "LiveCollaborationTrigger", "clsx", "throttle", "throttle", "jsx", "jsxs", "useLayoutEffect", "useLayoutEffect", "jsx", "useEffect", "areEqual", "key", "React"]
}
